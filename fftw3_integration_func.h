#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

typedef struct fftw_iodim_do_not_use_me X(void);
typedef struct fftw_iodim64_do_not_use_me X(void);
typedef enum fftw_r2r_kind_do_not_use_me X(void);
typedef fftw_write_char_func_do_not_use_me X(void);
typedef fftw_read_char_func_do_not_use_me X(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

GDExtensionBool my_extension_init(GDExtensionInterfaceGetProcAddress p_get_proc_address, GDExtensionClassLibraryPtr p_library, GDExtensionInitialization* r_initialization);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

SQLITE_API int sqlite3_libversion_number(void);
ifndef SQLITE_OMIT_COMPILEOPTION_DIAGS
SQLITE_API int sqlite3_compileoption_used(const char* zOptName);
SQLITE_API int sqlite3_threadsafe(void);
SQLITE_API int sqlite3_close(void);
SQLITE_API int sqlite3_close_v2(void);
SQLITE_API int sqlite3_initialize(void);
SQLITE_API int sqlite3_shutdown(void);
SQLITE_API int sqlite3_os_init(void);
SQLITE_API int sqlite3_os_end(void);
SQLITE_API int sqlite3_config(void);
SQLITE_API int sqlite3_db_config(int op);
SQLITE_API int sqlite3_extended_result_codes(int onoff);
SQLITE_API sqlite3_int64 sqlite3_last_insert_rowid(void);
SQLITE_API void sqlite3_set_last_insert_rowid(void);
SQLITE_API int sqlite3_changes(void);
SQLITE_API sqlite3_int64 sqlite3_changes64(void);
SQLITE_API int sqlite3_total_changes(void);
SQLITE_API sqlite3_int64 sqlite3_total_changes64(void);
SQLITE_API void sqlite3_interrupt(void);
SQLITE_API int sqlite3_is_interrupted(void);
SQLITE_API int sqlite3_complete(const char* sql);
SQLITE_API int sqlite3_complete16(const void* sql);
SQLITE_API int sqlite3_busy_timeout(int ms);
SQLITE_API int sqlite3_get_table(sqlite3* db, /* An open database */ const char* zSql, /* SQL to be evaluated */ char*** pazResult, /* Results of the query */ int* pnRow, /* Number of result rows written here */ int* pnColumn, /* Number of result columns written here */ char** pzErrmsg /* Error msg written here */);
SQLITE_API void sqlite3_free_table(char** result);
SQLITE_API void sqlite3_free(void);
SQLITE_API sqlite3_uint64 sqlite3_msize(void);
SQLITE_API sqlite3_int64 sqlite3_memory_used(void);
SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag);
SQLITE_API void sqlite3_randomness(int N, void* P);
SQLITE_API int sqlite3_uri_boolean(sqlite3_filename z, const char* zParam, int bDefault);
SQLITE_API sqlite3_int64 sqlite3_uri_int64(const char*);
SQLITE_API sqlite3_filename sqlite3_create_filename(const char* zDatabase, const char* zJournal, const char* zWal, int nParam, const char** azParam);
SQLITE_API void sqlite3_free_filename(void);
SQLITE_API int sqlite3_errcode(sqlite3* db);
SQLITE_API int sqlite3_extended_errcode(sqlite3* db);
SQLITE_API int sqlite3_error_offset(sqlite3* db);
SQLITE_API int sqlite3_limit(int id, int newVal);
SQLITE_API int sqlite3_prepare(sqlite3* db, /* Database handle */ const char* zSql, /* SQL statement, UTF-8 encoded */ int nByte, /* Maximum length of zSql in bytes. */ sqlite3_stmt** ppStmt, /* OUT: Statement handle */ const char** pzTail /* OUT: Pointer to unused portion of zSql */);
SQLITE_API int sqlite3_prepare_v2(sqlite3* db, /* Database handle */ const char* zSql, /* SQL statement, UTF-8 encoded */ int nByte, /* Maximum length of zSql in bytes. */ sqlite3_stmt** ppStmt, /* OUT: Statement handle */ const char** pzTail /* OUT: Pointer to unused portion of zSql */);
SQLITE_API int sqlite3_prepare_v3(sqlite3* db, /* Database handle */ const char* zSql, /* SQL statement, UTF-8 encoded */ int nByte, /* Maximum length of zSql in bytes. */ unsigned int prepFlags, /* Zero or more SQLITE_PREPARE_ flags */ sqlite3_stmt** ppStmt, /* OUT: Statement handle */ const char** pzTail /* OUT: Pointer to unused portion of zSql */);
SQLITE_API int sqlite3_prepare16(sqlite3* db, /* Database handle */ const void* zSql, /* SQL statement, UTF-16 encoded */ int nByte, /* Maximum length of zSql in bytes. */ sqlite3_stmt** ppStmt, /* OUT: Statement handle */ const void** pzTail /* OUT: Pointer to unused portion of zSql */);
SQLITE_API int sqlite3_prepare16_v2(sqlite3* db, /* Database handle */ const void* zSql, /* SQL statement, UTF-16 encoded */ int nByte, /* Maximum length of zSql in bytes. */ sqlite3_stmt** ppStmt, /* OUT: Statement handle */ const void** pzTail /* OUT: Pointer to unused portion of zSql */);
SQLITE_API int sqlite3_prepare16_v3(sqlite3* db, /* Database handle */ const void* zSql, /* SQL statement, UTF-16 encoded */ int nByte, /* Maximum length of zSql in bytes. */ unsigned int prepFlags, /* Zero or more SQLITE_PREPARE_ flags */ sqlite3_stmt** ppStmt, /* OUT: Statement handle */ const void** pzTail /* OUT: Pointer to unused portion of zSql */);
SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt* pStmt);
SQLITE_API int sqlite3_stmt_isexplain(sqlite3_stmt* pStmt);
SQLITE_API int sqlite3_stmt_explain(sqlite3_stmt* pStmt, int eMode);
SQLITE_API int sqlite3_stmt_busy(void);
SQLITE_API int sqlite3_bind_double(void);
SQLITE_API int sqlite3_bind_int(void);
SQLITE_API int sqlite3_bind_int64(void);
SQLITE_API int sqlite3_bind_null(void);
SQLITE_API int sqlite3_bind_value(const sqlite3_value*);
SQLITE_API int sqlite3_bind_zeroblob(int n);
SQLITE_API int sqlite3_bind_zeroblob64(void);
SQLITE_API int sqlite3_bind_parameter_count(void);
SQLITE_API int sqlite3_bind_parameter_index(const char* zName);
SQLITE_API int sqlite3_clear_bindings(void);
SQLITE_API int sqlite3_column_count(sqlite3_stmt* pStmt);
CREATE TABLE t1(c1 VARIANT);
SQLITE_API int sqlite3_step(void);
SQLITE_API int sqlite3_data_count(sqlite3_stmt* pStmt);
SQLITE_API double sqlite3_column_double(int iCol);
SQLITE_API int sqlite3_column_int(int iCol);
SQLITE_API sqlite3_int64 sqlite3_column_int64(int iCol);
SQLITE_API int sqlite3_column_bytes(int iCol);
SQLITE_API int sqlite3_column_bytes16(int iCol);
SQLITE_API int sqlite3_column_type(int iCol);
SQLITE_API int sqlite3_finalize(sqlite3_stmt* pStmt);
SQLITE_API int sqlite3_reset(sqlite3_stmt* pStmt);
ifndef SQLITE_OMIT_DEPRECATED
SQLITE_API SQLITE_DEPRECATED int sqlite3_aggregate_count(void);
SQLITE_API SQLITE_DEPRECATED int sqlite3_expired(void);
SQLITE_API SQLITE_DEPRECATED int sqlite3_transfer_bindings(void);
SQLITE_API SQLITE_DEPRECATED int sqlite3_global_recover(void);
SQLITE_API SQLITE_DEPRECATED void sqlite3_thread_cleanup(void);
SQLITE_API double sqlite3_value_double(void);
SQLITE_API int sqlite3_value_int(void);
SQLITE_API sqlite3_int64 sqlite3_value_int64(void);
SQLITE_API int sqlite3_value_bytes(void);
SQLITE_API int sqlite3_value_bytes16(void);
SQLITE_API int sqlite3_value_type(void);
SQLITE_API int sqlite3_value_numeric_type(void);
SQLITE_API int sqlite3_value_nochange(void);
SQLITE_API int sqlite3_value_frombind(void);
SQLITE_API int sqlite3_value_encoding(void);
SQLITE_API unsigned int sqlite3_value_subtype(void);
SQLITE_API void sqlite3_value_free(void);
SQLITE_API void sqlite3_result_double(void);
SQLITE_API void sqlite3_result_error(const char*);
SQLITE_API void sqlite3_result_error16(const void*);
SQLITE_API void sqlite3_result_error_toobig(void);
SQLITE_API void sqlite3_result_error_nomem(void);
SQLITE_API void sqlite3_result_error_code(void);
SQLITE_API void sqlite3_result_int(void);
SQLITE_API void sqlite3_result_int64(void);
SQLITE_API void sqlite3_result_null(void);
SQLITE_API void sqlite3_result_value(void);
SQLITE_API void sqlite3_result_zeroblob(int n);
SQLITE_API int sqlite3_result_zeroblob64(sqlite3_uint64 n);
SQLITE_API void sqlite3_result_subtype(unsigned int);
SQLITE_API void sqlite3_activate_cerod(const char* zPassPhrase /* Activation phrase */);
SQLITE_API int sqlite3_sleep(void);
SQLITE_API int sqlite3_win32_set_directory(unsigned long type, /* Identifier for directory being set or reset */ void* zValue /* New value for directory being set or reset */);
SQLITE_API int sqlite3_win32_set_directory8(unsigned long type, const char* zValue);
SQLITE_API int sqlite3_win32_set_directory16(unsigned long type, const void* zValue);
SQLITE_API int sqlite3_get_autocommit(void);
SQLITE_API sqlite3_filename sqlite3_db_filename(sqlite3* db, const char* zDbName);
SQLITE_API int sqlite3_db_readonly(sqlite3* db, const char* zDbName);
SQLITE_API int sqlite3_txn_state(const char* zSchema);
SQLITE_API int sqlite3_enable_shared_cache(void);
SQLITE_API int sqlite3_release_memory(void);
SQLITE_API int sqlite3_db_release_memory(void);
SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);
SQLITE_API sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N);
SQLITE_API SQLITE_DEPRECATED void sqlite3_soft_heap_limit(int N);
SQLITE_API int sqlite3_table_column_metadata(sqlite3* db, /* Connection handle */ const char* zDbName, /* Database name or NULL */ const char* zTableName, /* Table name */ const char* zColumnName, /* Column name */ char const** pzDataType, /* OUTPUT: Declared data type */ char const** pzCollSeq, /* OUTPUT: Collation sequence name */ int* pNotNull, /* OUTPUT: True if NOT NULL constraint exists */ int* pPrimaryKey, /* OUTPUT: True if column part of PK */ int* pAutoinc /* OUTPUT: True if column is auto-increment */);
SQLITE_API int sqlite3_load_extension(sqlite3* db, /* Load the extension into this database connection */ const char* zFile, /* Name of the shared library containing extension */ const char* zProc, /* Entry point. Derived from zFile if 0 */ char** pzErrMsg /* Put error message here if not 0 */);
SQLITE_API int sqlite3_enable_load_extension(sqlite3* db, int onoff);
int xEntryPoint(**&nbsp; sqlite3* db, **& nbsp; const char** pzErrMsg, **& nbsp; const struct sqlite3_api_routines* pThunk**& nbsp;);
SQLITE_API void sqlite3_reset_auto_extension(void);
SQLITE_API int sqlite3_create_module(sqlite3* db, /* SQLite connection to register module with */ const char* zName, /* Name of the module */ const sqlite3_module* p, /* Methods for the module */ void* pClientData /* Client data for xCreate/xConnect */);
SQLITE_API int sqlite3_drop_modules(sqlite3* db, /* Remove modules from this connection */ const char** azKeep /* Except, do not remove the ones named here */);
SQLITE_API int sqlite3_declare_vtab(const char* zSQL);
SQLITE_API int sqlite3_overload_function(const char* zFuncName, int nArg);
SQLITE_API int sqlite3_blob_open(const char* zDb, const char* zTable, const char* zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob** ppBlob);
SQLITE_API int sqlite3_blob_reopen(sqlite3_blob*);
SQLITE_API int sqlite3_blob_close(sqlite3_blob*);
SQLITE_API int sqlite3_blob_bytes(sqlite3_blob*);
SQLITE_API int sqlite3_blob_read(sqlite3_blob*, void* Z, int N, int iOffset);
SQLITE_API int sqlite3_blob_write(sqlite3_blob*, const void* z, int n, int iOffset);
SQLITE_API int sqlite3_vfs_register(int makeDflt);
SQLITE_API int sqlite3_vfs_unregister(void);
SQLITE_API void sqlite3_mutex_free(void);
SQLITE_API void sqlite3_mutex_enter(void);
SQLITE_API int sqlite3_mutex_try(void);
SQLITE_API void sqlite3_mutex_leave(void);
ifndef NDEBUG
SQLITE_API int sqlite3_mutex_held(void);
SQLITE_API int sqlite3_mutex_notheld(void);
SQLITE_API int sqlite3_file_control(const char* zDbName, int op);
SQLITE_API int sqlite3_test_control(int op);
CREATE TABLE BEGIN(void);
SQLITE_API int sqlite3_keyword_count(void);
SQLITE_API int sqlite3_keyword_name(const char**);
SQLITE_API int sqlite3_keyword_check(const char*);
SQLITE_API void sqlite3_str_appendf(const char* zFormat);
SQLITE_API void sqlite3_str_vappendf(const char* zFormat);
SQLITE_API void sqlite3_str_append(const char* zIn, int N);
SQLITE_API void sqlite3_str_appendall(const char* zIn);
SQLITE_API void sqlite3_str_appendchar(int N, char C);
SQLITE_API void sqlite3_str_reset(void);
SQLITE_API int sqlite3_str_errcode(void);
SQLITE_API int sqlite3_str_length(void);
SQLITE_API int sqlite3_status(int op, int* pCurrent, int* pHighwater, int resetFlag);
SQLITE_API int sqlite3_status64(int op, sqlite3_int64* pCurrent, sqlite3_int64* pHighwater, int resetFlag);
SQLITE_API int sqlite3_db_status(int op, int* pCur, int* pHiwtr, int resetFlg);
SQLITE_API int sqlite3_stmt_status(int op, int resetFlg);
SQLITE_API int sqlite3_backup_step(sqlite3_backup* p, int nPage);
SQLITE_API int sqlite3_backup_finish(sqlite3_backup* p);
SQLITE_API int sqlite3_backup_remaining(sqlite3_backup* p);
SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup* p);
SQLITE_API int sqlite3_stricmp(const char*, const char*);
SQLITE_API int sqlite3_strnicmp(const char*, const char*);
SQLITE_API int sqlite3_strglob(const char* zGlob, const char* zStr);
SQLITE_API int sqlite3_strlike(const char* zGlob, const char* zStr, unsigned int cEsc);
SQLITE_API void sqlite3_log(int iErrCode, const char* zFormat);
SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3* db, int N);
SQLITE_API int sqlite3_wal_checkpoint(sqlite3* db, const char* zDb);
SQLITE_API int sqlite3_vtab_config(int op);
SQLITE_API int sqlite3_vtab_on_conflict(sqlite3*);
SQLITE_API int sqlite3_vtab_nochange(void);
SQLITE_API int sqlite3_vtab_distinct(void);
SQLITE_API int sqlite3_vtab_in(int iCons, int bHandle);
SQLITE_API int sqlite3_vtab_in_first(sqlite3_value* pVal, sqlite3_value** ppOut);
SQLITE_API int sqlite3_vtab_in_next(sqlite3_value* pVal, sqlite3_value** ppOut);
SQLITE_API int sqlite3_vtab_rhs_value(sqlite3_value** ppVal);
SQLITE_API int sqlite3_stmt_scanstatus(sqlite3_stmt* pStmt, /* Prepared statement for which info desired */ int idx, /* Index of loop to report on */ int iScanStatusOp, /* Information desired. SQLITE_SCANSTAT_* */ void* pOut /* Result written here */);
SQLITE_API int sqlite3_stmt_scanstatus_v2(sqlite3_stmt* pStmt, /* Prepared statement for which info desired */ int idx, /* Index of loop to report on */ int iScanStatusOp, /* Information desired. SQLITE_SCANSTAT_* */ int flags, /* Mask of flags defined below */ void* pOut /* Result written here */);
SQLITE_API void sqlite3_stmt_scanstatus_reset(void);
SQLITE_API int sqlite3_db_cacheflush(void);
SQLITE_API int sqlite3_preupdate_old(sqlite3*, sqlite3_value**);
SQLITE_API int sqlite3_preupdate_count(sqlite3*);
SQLITE_API int sqlite3_preupdate_depth(sqlite3*);
SQLITE_API int sqlite3_preupdate_new(sqlite3*, sqlite3_value**);
SQLITE_API int sqlite3_preupdate_blobwrite(sqlite3*);
SQLITE_API int sqlite3_system_errno(void);
SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_snapshot_get(sqlite3* db, const char* zSchema, sqlite3_snapshot** ppSnapshot);
SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_snapshot_open(sqlite3* db, const char* zSchema, sqlite3_snapshot* pSnapshot);
SQLITE_API SQLITE_EXPERIMENTAL void sqlite3_snapshot_free(void);
SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_snapshot_cmp(sqlite3_snapshot* p1, sqlite3_snapshot* p2);
SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_snapshot_recover(sqlite3* db, const char* zDb);
SQLITE_API int sqlite3_deserialize(sqlite3* db, /* The database connection */ const char* zSchema, /* Which DB to reopen with the deserialization */ unsigned char* pData, /* The serialized database content */ sqlite3_int64 szDb, /* Number bytes in the deserialization */ sqlite3_int64 szBuf, /* Total size of buffer pData[] */ unsigned mFlags /* Zero or more SQLITE_DESERIALIZE_* flags */);
SQLITE_API void sqlite3session_delete(sqlite3_session* pSession);
SQLITE_API int sqlite3session_object_config(int op, void* pArg);
SQLITE_API int sqlite3session_enable(sqlite3_session* pSession, int bEnable);
SQLITE_API int sqlite3session_indirect(sqlite3_session* pSession, int bIndirect);
SQLITE_API int sqlite3session_attach(sqlite3_session* pSession, /* Session object */ const char* zTab /* Table name */);
SQLITE_API int sqlite3session_changeset(sqlite3_session* pSession, /* Session object */ int* pnChangeset, /* OUT: Size of buffer at *ppChangeset */ void** ppChangeset /* OUT: Buffer containing changeset */);
SQLITE_API sqlite3_int64 sqlite3session_changeset_size(sqlite3_session* pSession);
SQLITE_API int sqlite3session_diff(sqlite3_session* pSession, const char* zFromDb, const char* zTbl, char** pzErrMsg);
SQLITE_API int sqlite3session_patchset(sqlite3_session* pSession, /* Session object */ int* pnPatchset, /* OUT: Size of buffer at *ppPatchset */ void** ppPatchset /* OUT: Buffer containing patchset */);
SQLITE_API int sqlite3session_isempty(sqlite3_session* pSession);
SQLITE_API sqlite3_int64 sqlite3session_memory_used(sqlite3_session* pSession);
SQLITE_API int sqlite3changeset_start(sqlite3_changeset_iter** pp, /* OUT: New changeset iterator handle */ int nChangeset, /* Size of changeset blob in bytes */ void* pChangeset /* Pointer to blob containing changeset */);
SQLITE_API int sqlite3changeset_start_v2(sqlite3_changeset_iter** pp, /* OUT: New changeset iterator handle */ int nChangeset, /* Size of changeset blob in bytes */ void* pChangeset, /* Pointer to blob containing changeset */ int flags /* SESSION_CHANGESETSTART_* flags */);
SQLITE_API int sqlite3changeset_next(sqlite3_changeset_iter* pIter);
SQLITE_API int sqlite3changeset_op(sqlite3_changeset_iter* pIter, /* Iterator object */ const char** pzTab, /* OUT: Pointer to table name */ int* pnCol, /* OUT: Number of columns in table */ int* pOp, /* OUT: SQLITE_INSERT, DELETE or UPDATE */ int* pbIndirect /* OUT: True for an 'indirect' change */);
SQLITE_API int sqlite3changeset_pk(sqlite3_changeset_iter* pIter, /* Iterator object */ unsigned char** pabPK, /* OUT: Array of boolean - true for PK cols */ int* pnCol /* OUT: Number of entries in output array */);
SQLITE_API int sqlite3changeset_conflict(sqlite3_changeset_iter* pIter, /* Changeset iterator */ int iVal, /* Column number */ sqlite3_value** ppValue /* OUT: Value from conflicting row */);
SQLITE_API int sqlite3changeset_fk_conflicts(sqlite3_changeset_iter* pIter, /* Changeset iterator */ int* pnOut /* OUT: Number of FK violations */);
SQLITE_API int sqlite3changeset_finalize(sqlite3_changeset_iter* pIter);
SQLITE_API int sqlite3changeset_invert(int nIn, const void* pIn, /* Input changeset */ int* pnOut, void** ppOut /* OUT: Inverse of input */);
SQLITE_API int sqlite3changeset_concat(int nA, /* Number of bytes in buffer pA */ void* pA, /* Pointer to buffer containing changeset A */ int nB, /* Number of bytes in buffer pB */ void* pB, /* Pointer to buffer containing changeset B */ int* pnOut, /* OUT: Number of bytes in output changeset */ void** ppOut /* OUT: Buffer containing output changeset */);
SQLITE_API int sqlite3changeset_upgrade(sqlite3* db, const char* zDb, int nIn, const void* pIn, /* Input changeset */ int* pnOut, void** ppOut /* OUT: Inverse of input */);
SQLITE_API int sqlite3changegroup_new(sqlite3_changegroup** pp);
SQLITE_API int sqlite3changegroup_schema(const char* zDb);
SQLITE_API int sqlite3changegroup_add(int nData, void* pData);
SQLITE_API int sqlite3changegroup_add_change(void);
SQLITE_API int sqlite3changegroup_output(int* pnData, /* OUT: Size of output buffer in bytes */ void** ppData /* OUT: Pointer to output buffer */);
SQLITE_API void sqlite3changegroup_delete(void);
INSERT INTO t1 VALUES(void);
INSERT INTO t1 VALUES(void);
SQLITE_API int sqlite3rebaser_create(sqlite3_rebaser** ppNew);
SQLITE_API int sqlite3rebaser_configure(int nRebase, const void* pRebase);
SQLITE_API int sqlite3rebaser_rebase(int nIn, const void* pIn, int* pnOut, void** ppOut);
SQLITE_API void sqlite3rebaser_delete(sqlite3_rebaser* p);
SQLITE_API int sqlite3session_config(int op, void* pArg);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ZDICTLIB_API size_t ZDICT_trainFromBuffer(void* dictBuffer, size_t dictBufferCapacity, const void* samplesBuffer, const size_t* samplesSizes, unsigned nbSamples);
ZDICTLIB_API size_t ZDICT_finalizeDictionary(void* dstDictBuffer, size_t maxDictSize, const void* dictContent, size_t dictContentSize, const void* samplesBuffer, const size_t* samplesSizes, unsigned nbSamples, ZDICT_params_t parameters);
ZDICTLIB_API unsigned ZDICT_getDictID(const void* dictBuffer, size_t dictSize);
ZDICTLIB_API size_t ZDICT_getDictHeaderSize(const void* dictBuffer, size_t dictSize);
ZDICTLIB_API unsigned ZDICT_isError(size_t errorCode);
ZDICTLIB_API const char* ZDICT_getErrorName(size_t errorCode);
ZDICTLIB_STATIC_API size_t ZDICT_trainFromBuffer_cover(void* dictBuffer, size_t dictBufferCapacity, const void* samplesBuffer, const size_t* samplesSizes, unsigned nbSamples, ZDICT_cover_params_t parameters);
ZDICTLIB_STATIC_API size_t ZDICT_optimizeTrainFromBuffer_cover(void* dictBuffer, size_t dictBufferCapacity, const void* samplesBuffer, const size_t* samplesSizes, unsigned nbSamples, ZDICT_cover_params_t* parameters);
ZDICTLIB_STATIC_API size_t ZDICT_trainFromBuffer_fastCover(void* dictBuffer, size_t dictBufferCapacity, const void* samplesBuffer, const size_t* samplesSizes, unsigned nbSamples, ZDICT_fastCover_params_t parameters);
ZDICTLIB_STATIC_API size_t ZDICT_optimizeTrainFromBuffer_fastCover(void* dictBuffer, size_t dictBufferCapacity, const void* samplesBuffer, const size_t* samplesSizes, unsigned nbSamples, ZDICT_fastCover_params_t* parameters);
ZDICTLIB_STATIC_API size_t ZDICT_trainFromBuffer_legacy(void* dictBuffer, size_t dictBufferCapacity, const void* samplesBuffer, const size_t* samplesSizes, unsigned nbSamples, ZDICT_legacy_params_t parameters);
ZDICTLIB_STATIC_API
size_t ZDICT_addEntropyTablesFromBuffer(void* dictBuffer, size_t dictContentSize, size_t dictBufferCapacity, const void* samplesBuffer, const size_t* samplesSizes, unsigned nbSamples);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ZEXTERN const char* ZEXPORT zlibVersion(void);
ZEXTERN int ZEXPORT deflateInit(z_streamp strm, int level);
ZEXTERN int ZEXPORT deflate(z_streamp strm, int flush);
ZEXTERN int ZEXPORT deflateEnd(z_streamp strm);
ZEXTERN int ZEXPORT inflateInit(z_streamp strm);
ZEXTERN int ZEXPORT inflate(z_streamp strm, int flush);
ZEXTERN int ZEXPORT inflateEnd(z_streamp strm);
ZEXTERN int ZEXPORT deflateInit2(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy);
ZEXTERN int ZEXPORT deflateSetDictionary(z_streamp strm, const Bytef* dictionary, uInt dictLength);
ZEXTERN int ZEXPORT deflateGetDictionary(z_streamp strm, Bytef* dictionary, uInt* dictLength);
ZEXTERN int ZEXPORT deflateCopy(z_streamp dest, z_streamp source);
ZEXTERN int ZEXPORT deflateReset(z_streamp strm);
ZEXTERN int ZEXPORT deflateParams(z_streamp strm, int level, int strategy);
ZEXTERN int ZEXPORT deflateTune(z_streamp strm, int good_length, int max_lazy, int nice_length, int max_chain);
ZEXTERN uLong ZEXPORT deflateBound(z_streamp strm, uLong sourceLen);
ZEXTERN int ZEXPORT deflatePending(z_streamp strm, unsigned* pending, int* bits);
ZEXTERN int ZEXPORT deflatePrime(z_streamp strm, int bits, int value);
ZEXTERN int ZEXPORT deflateSetHeader(z_streamp strm, gz_headerp head);
ZEXTERN int ZEXPORT inflateInit2(z_streamp strm, int windowBits);
ZEXTERN int ZEXPORT inflateSetDictionary(z_streamp strm, const Bytef* dictionary, uInt dictLength);
ZEXTERN int ZEXPORT inflateGetDictionary(z_streamp strm, Bytef* dictionary, uInt* dictLength);
ZEXTERN int ZEXPORT inflateSync(z_streamp strm);
ZEXTERN int ZEXPORT inflateCopy(z_streamp dest, z_streamp source);
ZEXTERN int ZEXPORT inflateReset(z_streamp strm);
ZEXTERN int ZEXPORT inflateReset2(z_streamp strm, int windowBits);
ZEXTERN int ZEXPORT inflatePrime(z_streamp strm, int bits, int value);
ZEXTERN long ZEXPORT inflateMark(z_streamp strm);
ZEXTERN int ZEXPORT inflateGetHeader(z_streamp strm, gz_headerp head);
ZEXTERN int ZEXPORT inflateBackInit(z_streamp strm, int windowBits, unsigned char FAR* window);
ZEXTERN int ZEXPORT inflateBack(z_streamp strm, in_func in, void FAR* in_desc, out_func out, void FAR* out_desc);
ZEXTERN int ZEXPORT inflateBackEnd(z_streamp strm);
ZEXTERN uLong ZEXPORT zlibCompileFlags(void);
ZEXTERN int ZEXPORT compress(Bytef* dest, uLongf* destLen, const Bytef* source, uLong sourceLen);
ZEXTERN int ZEXPORT compress2(Bytef* dest, uLongf* destLen, const Bytef* source, uLong sourceLen, int level);
ZEXTERN uLong ZEXPORT compressBound(uLong sourceLen);
ZEXTERN int ZEXPORT uncompress(Bytef* dest, uLongf* destLen, const Bytef* source, uLong sourceLen);
ZEXTERN int ZEXPORT uncompress2(Bytef* dest, uLongf* destLen, const Bytef* source, uLong* sourceLen);
ZEXTERN gzFile ZEXPORT gzopen(const char* path, const char* mode);
ZEXTERN gzFile ZEXPORT gzdopen(int fd, const char* mode);
ZEXTERN int ZEXPORT gzbuffer(gzFile file, unsigned size);
ZEXTERN int ZEXPORT gzsetparams(gzFile file, int level, int strategy);
ZEXTERN int ZEXPORT gzread(gzFile file, voidp buf, unsigned len);
ZEXTERN z_size_t ZEXPORT gzfread(voidp buf, z_size_t size, z_size_t nitems, gzFile file);
ZEXTERN int ZEXPORT gzwrite(gzFile file, voidpc buf, unsigned len);
ZEXTERN z_size_t ZEXPORT gzfwrite(voidpc buf, z_size_t size, z_size_t nitems, gzFile file);
ZEXTERN int ZEXPORTVA gzprintf(gzFile file, const char* format);
ZEXTERN int ZEXPORT gzputs(gzFile file, const char* s);
ZEXTERN char* ZEXPORT gzgets(gzFile file, char* buf, int len);
ZEXTERN int ZEXPORT gzputc(gzFile file, int c);
ZEXTERN int ZEXPORT gzgetc(gzFile file);
ZEXTERN int ZEXPORT gzungetc(int c, gzFile file);
ZEXTERN int ZEXPORT gzflush(gzFile file, int flush);
ZEXTERN z_off_t ZEXPORT gzseek(gzFile file, z_off_t offset, int whence);
The whence parameter is defined as in lseek(void);
ZEXTERN int ZEXPORT gzrewind(gzFile file);
ZEXTERN z_off_t ZEXPORT gztell(gzFile file);
ZEXTERN z_off_t ZEXPORT gzoffset(gzFile file);
ZEXTERN int ZEXPORT gzeof(gzFile file);
ZEXTERN int ZEXPORT gzdirect(gzFile file);
ZEXTERN int ZEXPORT gzclose(gzFile file);
ZEXTERN int ZEXPORT gzclose_r(gzFile file);
ZEXTERN int ZEXPORT gzclose_w(gzFile file);
ZEXTERN const char* ZEXPORT gzerror(gzFile file, int* errnum);
ZEXTERN void ZEXPORT gzclearerr(gzFile file);
ZEXTERN uLong ZEXPORT adler32(uLong adler, const Bytef* buf, uInt len);
ZEXTERN uLong ZEXPORT adler32_z(uLong adler, const Bytef* buf, z_size_t len);
ZEXTERN uLong ZEXPORT adler32_combine(uLong adler1, uLong adler2, z_off_t len2);
ZEXTERN uLong ZEXPORT crc32(uLong crc, const Bytef* buf, uInt len);
ZEXTERN uLong ZEXPORT crc32_z(uLong crc, const Bytef* buf, z_size_t len);
ZEXTERN uLong ZEXPORT crc32_combine(uLong crc1, uLong crc2, z_off_t len2);
ZEXTERN uLong ZEXPORT crc32_combine_gen(z_off_t len2);
ZEXTERN uLong ZEXPORT crc32_combine_op(uLong crc1, uLong crc2, uLong op);
ZEXTERN int ZEXPORT deflateInit_(z_streamp strm, int level, const char* version, int stream_size);
ZEXTERN int ZEXPORT inflateInit_(z_streamp strm, const char* version, int stream_size);
ZEXTERN int ZEXPORT deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char* version, int stream_size);
ZEXTERN int ZEXPORT inflateInit2_(z_streamp strm, int windowBits, const char* version, int stream_size);
ZEXTERN int ZEXPORT inflateBackInit_(z_streamp strm, int windowBits, unsigned char FAR* window, const char* version, int stream_size);
ZEXTERN int ZEXPORT gzgetc_(gzFile file);
ifdef Z_LARGE64
ZEXTERN gzFile ZEXPORT gzopen64(const char*, const char*);
ZEXTERN z_off64_t ZEXPORT gzseek64(void);
ZEXTERN z_off64_t ZEXPORT gztell64(void);
ZEXTERN z_off64_t ZEXPORT gzoffset64(void);
ZEXTERN uLong ZEXPORT adler32_combine64(void);
ZEXTERN uLong ZEXPORT crc32_combine64(void);
ZEXTERN uLong ZEXPORT crc32_combine_gen64(void);
ifndef Z_LARGE64
ZEXTERN gzFile ZEXPORT gzopen64(const char*, const char*);
ZEXTERN z_off_t ZEXPORT gzseek64(void);
ZEXTERN z_off_t ZEXPORT gztell64(void);
ZEXTERN z_off_t ZEXPORT gzoffset64(void);
ZEXTERN uLong ZEXPORT adler32_combine64(void);
ZEXTERN uLong ZEXPORT crc32_combine64(void);
ZEXTERN uLong ZEXPORT crc32_combine_gen64(void);
else
ZEXTERN gzFile ZEXPORT gzopen(const char*, const char*);
ZEXTERN z_off_t ZEXPORT gzseek(void);
ZEXTERN z_off_t ZEXPORT gztell(void);
ZEXTERN z_off_t ZEXPORT gzoffset(void);
ZEXTERN uLong ZEXPORT adler32_combine(void);
ZEXTERN uLong ZEXPORT crc32_combine(void);
ZEXTERN uLong ZEXPORT crc32_combine_gen(void);
ZEXTERN uLong ZEXPORT adler32_combine(void);
ZEXTERN uLong ZEXPORT crc32_combine(void);
ZEXTERN uLong ZEXPORT crc32_combine_gen(void);
ZEXTERN const char* ZEXPORT zError(void);
ZEXTERN int            ZEXPORT inflateSyncPoint(void);
ZEXTERN const z_crc_t FAR* ZEXPORT get_crc_table(void);
ZEXTERN int            ZEXPORT inflateUndermine(void);
ZEXTERN int            ZEXPORT inflateValidate(void);
ZEXTERN unsigned long  ZEXPORT inflateCodesUsed(void);
ZEXTERN int            ZEXPORT inflateResetKeep(void);
ZEXTERN int            ZEXPORT deflateResetKeep(void);
ZEXTERN gzFile         ZEXPORT gzopen_w(const wchar_t* path, const char* mode);
ifndef Z_SOLO
ZEXTERN int            ZEXPORTVA gzvprintf(gzFile file, const char* format, va_list va);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ZSTDLIB_API unsigned ZSTD_versionNumber(void);
ZSTDLIB_API const char* ZSTD_versionString(void);
ZSTDLIB_API size_t ZSTD_compress(void* dst, size_t dstCapacity, const void* src, size_t srcSize, int compressionLevel);
ZSTDLIB_API size_t ZSTD_decompress(void* dst, size_t dstCapacity, const void* src, size_t compressedSize);
ZSTDLIB_API unsigned long long ZSTD_getFrameContentSize(const void* src, size_t srcSize);
ZSTDLIB_API
unsigned long long ZSTD_getDecompressedSize(const void* src, size_t srcSize);
ZSTDLIB_API size_t ZSTD_findFrameCompressedSize(const void* src, size_t srcSize);
ZSTDLIB_API size_t ZSTD_compressBound(size_t srcSize);
ZSTDLIB_API unsigned ZSTD_isError(size_t code);
ZSTDLIB_API const char* ZSTD_getErrorName(size_t code);
ZSTDLIB_API int ZSTD_minCLevel(void);
ZSTDLIB_API int ZSTD_maxCLevel(void);
ZSTDLIB_API int ZSTD_defaultCLevel(void);
ZSTDLIB_API ZSTD_CCtx* ZSTD_createCCtx(void);
ZSTDLIB_API size_t ZSTD_freeCCtx(ZSTD_CCtx * cctx);
ZSTDLIB_API size_t ZSTD_compressCCtx(ZSTD_CCtx * cctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize, int compressionLevel);
ZSTDLIB_API ZSTD_DCtx* ZSTD_createDCtx(void);
ZSTDLIB_API size_t ZSTD_freeDCtx(ZSTD_DCtx * dctx);
ZSTDLIB_API size_t ZSTD_decompressDCtx(ZSTD_DCtx * dctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize);
ZSTDLIB_API ZSTD_bounds ZSTD_cParam_getBounds(ZSTD_cParameter cParam);
ZSTDLIB_API size_t ZSTD_CCtx_setParameter(ZSTD_CCtx * cctx, ZSTD_cParameter param, int value);
ZSTDLIB_API size_t ZSTD_CCtx_setPledgedSrcSize(ZSTD_CCtx * cctx, unsigned long long pledgedSrcSize);
ZSTDLIB_API size_t ZSTD_CCtx_reset(ZSTD_CCtx * cctx, ZSTD_ResetDirective reset);
ZSTDLIB_API size_t ZSTD_compress2(ZSTD_CCtx * cctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize);
ZSTDLIB_API ZSTD_bounds ZSTD_dParam_getBounds(ZSTD_dParameter dParam);
ZSTDLIB_API size_t ZSTD_DCtx_setParameter(ZSTD_DCtx * dctx, ZSTD_dParameter param, int value);
ZSTDLIB_API size_t ZSTD_DCtx_reset(ZSTD_DCtx * dctx, ZSTD_ResetDirective reset);
ZSTDLIB_API ZSTD_CStream* ZSTD_createCStream(void);
ZSTDLIB_API size_t ZSTD_freeCStream(ZSTD_CStream * zcs);
ZSTDLIB_API size_t ZSTD_compressStream2(ZSTD_CCtx * cctx, ZSTD_outBuffer * output, ZSTD_inBuffer * input, ZSTD_EndDirective endOp);
ZSTDLIB_API size_t ZSTD_CStreamInSize(void);
ZSTDLIB_API size_t ZSTD_CStreamOutSize(void);
ZSTDLIB_API size_t ZSTD_initCStream(ZSTD_CStream * zcs, int compressionLevel);
ZSTDLIB_API size_t ZSTD_compressStream(ZSTD_CStream * zcs, ZSTD_outBuffer * output, ZSTD_inBuffer * input);
ZSTDLIB_API size_t ZSTD_flushStream(ZSTD_CStream * zcs, ZSTD_outBuffer * output);
ZSTDLIB_API size_t ZSTD_endStream(ZSTD_CStream * zcs, ZSTD_outBuffer * output);
ZSTDLIB_API ZSTD_DStream* ZSTD_createDStream(void);
ZSTDLIB_API size_t ZSTD_freeDStream(ZSTD_DStream * zds);
ZSTDLIB_API size_t ZSTD_initDStream(ZSTD_DStream * zds);
ZSTDLIB_API size_t ZSTD_decompressStream(ZSTD_DStream * zds, ZSTD_outBuffer * output, ZSTD_inBuffer * input);
ZSTDLIB_API size_t ZSTD_DStreamInSize(void);
ZSTDLIB_API size_t ZSTD_DStreamOutSize(void);
ZSTDLIB_API size_t ZSTD_compress_usingDict(ZSTD_CCtx * ctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize, const void* dict, size_t dictSize, int compressionLevel);
ZSTDLIB_API size_t ZSTD_decompress_usingDict(ZSTD_DCtx * dctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize, const void* dict, size_t dictSize);
ZSTDLIB_API ZSTD_CDict* ZSTD_createCDict(const void* dictBuffer, size_t dictSize, int compressionLevel);
ZSTDLIB_API size_t ZSTD_freeCDict(ZSTD_CDict * CDict);
ZSTDLIB_API size_t ZSTD_compress_usingCDict(ZSTD_CCtx * cctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize, const ZSTD_CDict * cdict);
ZSTDLIB_API ZSTD_DDict* ZSTD_createDDict(const void* dictBuffer, size_t dictSize);
ZSTDLIB_API size_t ZSTD_freeDDict(ZSTD_DDict * ddict);
ZSTDLIB_API size_t ZSTD_decompress_usingDDict(ZSTD_DCtx * dctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize, const ZSTD_DDict * ddict);
ZSTDLIB_API unsigned ZSTD_getDictID_fromDict(const void* dict, size_t dictSize);
ZSTDLIB_API unsigned ZSTD_getDictID_fromCDict(const ZSTD_CDict * cdict);
ZSTDLIB_API unsigned ZSTD_getDictID_fromDDict(const ZSTD_DDict * ddict);
ZSTDLIB_API unsigned ZSTD_getDictID_fromFrame(const void* src, size_t srcSize);
ZSTDLIB_API size_t ZSTD_CCtx_loadDictionary(ZSTD_CCtx * cctx, const void* dict, size_t dictSize);
ZSTDLIB_API size_t ZSTD_CCtx_refCDict(ZSTD_CCtx * cctx, const ZSTD_CDict * cdict);
ZSTDLIB_API size_t ZSTD_CCtx_refPrefix(ZSTD_CCtx * cctx, const void* prefix, size_t prefixSize);
ZSTDLIB_API size_t ZSTD_DCtx_loadDictionary(ZSTD_DCtx * dctx, const void* dict, size_t dictSize);
ZSTDLIB_API size_t ZSTD_DCtx_refDDict(ZSTD_DCtx * dctx, const ZSTD_DDict * ddict);
ZSTDLIB_API size_t ZSTD_DCtx_refPrefix(ZSTD_DCtx * dctx, const void* prefix, size_t prefixSize);
ZSTDLIB_API size_t ZSTD_sizeof_CCtx(const ZSTD_CCtx * cctx);
ZSTDLIB_API size_t ZSTD_sizeof_DCtx(const ZSTD_DCtx * dctx);
ZSTDLIB_API size_t ZSTD_sizeof_CStream(const ZSTD_CStream * zcs);
ZSTDLIB_API size_t ZSTD_sizeof_DStream(const ZSTD_DStream * zds);
ZSTDLIB_API size_t ZSTD_sizeof_CDict(const ZSTD_CDict * cdict);
ZSTDLIB_API size_t ZSTD_sizeof_DDict(const ZSTD_DDict * ddict);
ZSTDLIB_STATIC_API unsigned long long ZSTD_findDecompressedSize(const void* src, size_t srcSize);
ZSTDLIB_STATIC_API unsigned long long ZSTD_decompressBound(const void* src, size_t srcSize);
ZSTDLIB_STATIC_API size_t ZSTD_frameHeaderSize(const void* src, size_t srcSize);
ZSTDLIB_STATIC_API size_t ZSTD_getFrameHeader(ZSTD_frameHeader * zfhPtr, const void* src, size_t srcSize);
ZSTDLIB_STATIC_API size_t ZSTD_getFrameHeader_advanced(ZSTD_frameHeader * zfhPtr, const void* src, size_t srcSize, ZSTD_format_e format);
ZSTDLIB_STATIC_API size_t ZSTD_decompressionMargin(const void* src, size_t srcSize);
ZSTDLIB_STATIC_API size_t ZSTD_sequenceBound(size_t srcSize);
ZSTDLIB_STATIC_API size_t ZSTD_generateSequences(ZSTD_CCtx * zc, ZSTD_Sequence * outSeqs, size_t outSeqsSize, const void* src, size_t srcSize);
ZSTDLIB_STATIC_API size_t ZSTD_mergeBlockDelimiters(ZSTD_Sequence * sequences, size_t seqsSize);
ZSTDLIB_STATIC_API size_t ZSTD_compressSequences(ZSTD_CCtx * cctx, void* dst, size_t dstSize, const ZSTD_Sequence * inSeqs, size_t inSeqsSize, const void* src, size_t srcSize);
ZSTDLIB_STATIC_API size_t ZSTD_writeSkippableFrame(void* dst, size_t dstCapacity, const void* src, size_t srcSize, unsigned magicVariant);
ZSTDLIB_API size_t ZSTD_readSkippableFrame(void* dst, size_t dstCapacity, unsigned* magicVariant, const void* src, size_t srcSize);
ZSTDLIB_API unsigned ZSTD_isSkippableFrame(const void* buffer, size_t size);
ZSTDLIB_STATIC_API size_t ZSTD_estimateCCtxSize(int maxCompressionLevel);
ZSTDLIB_STATIC_API size_t ZSTD_estimateCCtxSize_usingCParams(ZSTD_compressionParameters cParams);
ZSTDLIB_STATIC_API size_t ZSTD_estimateCCtxSize_usingCCtxParams(const ZSTD_CCtx_params * params);
ZSTDLIB_STATIC_API size_t ZSTD_estimateDCtxSize(void);
using ZSTD_estimateDStreamSize_fromFrame(void);
ZSTDLIB_STATIC_API size_t ZSTD_estimateCStreamSize(int maxCompressionLevel);
ZSTDLIB_STATIC_API size_t ZSTD_estimateCStreamSize_usingCParams(ZSTD_compressionParameters cParams);
ZSTDLIB_STATIC_API size_t ZSTD_estimateCStreamSize_usingCCtxParams(const ZSTD_CCtx_params * params);
ZSTDLIB_STATIC_API size_t ZSTD_estimateDStreamSize(size_t maxWindowSize);
ZSTDLIB_STATIC_API size_t ZSTD_estimateDStreamSize_fromFrame(const void* src, size_t srcSize);
ZSTDLIB_STATIC_API size_t ZSTD_estimateCDictSize(size_t dictSize, int compressionLevel);
ZSTDLIB_STATIC_API size_t ZSTD_estimateCDictSize_advanced(size_t dictSize, ZSTD_compressionParameters cParams, ZSTD_dictLoadMethod_e dictLoadMethod);
ZSTDLIB_STATIC_API size_t ZSTD_estimateDDictSize(size_t dictSize, ZSTD_dictLoadMethod_e dictLoadMethod);
ZSTDLIB_STATIC_API ZSTD_CCtx* ZSTD_initStaticCCtx(void* workspace, size_t workspaceSize);
ZSTDLIB_STATIC_API ZSTD_CStream* ZSTD_initStaticCStream(void* workspace, size_t workspaceSize);
ZSTDLIB_STATIC_API ZSTD_DCtx* ZSTD_initStaticDCtx(void* workspace, size_t workspaceSize);
ZSTDLIB_STATIC_API ZSTD_DStream* ZSTD_initStaticDStream(void* workspace, size_t workspaceSize);
ZSTDLIB_STATIC_API const ZSTD_CDict* ZSTD_initStaticCDict(void* workspace, size_t workspaceSize, const void* dict, size_t dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType, ZSTD_compressionParameters cParams);
ZSTDLIB_STATIC_API const ZSTD_DDict* ZSTD_initStaticDDict(void* workspace, size_t workspaceSize, const void* dict, size_t dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType);
ZSTDLIB_STATIC_API ZSTD_CCtx* ZSTD_createCCtx_advanced(ZSTD_customMem customMem);
ZSTDLIB_STATIC_API ZSTD_CStream* ZSTD_createCStream_advanced(ZSTD_customMem customMem);
ZSTDLIB_STATIC_API ZSTD_DCtx* ZSTD_createDCtx_advanced(ZSTD_customMem customMem);
ZSTDLIB_STATIC_API ZSTD_DStream* ZSTD_createDStream_advanced(ZSTD_customMem customMem);
ZSTDLIB_STATIC_API ZSTD_CDict* ZSTD_createCDict_advanced(const void* dict, size_t dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType, ZSTD_compressionParameters cParams, ZSTD_customMem customMem);
ZSTDLIB_STATIC_API ZSTD_threadPool* ZSTD_createThreadPool(size_t numThreads);
ZSTDLIB_STATIC_API size_t ZSTD_CCtx_refThreadPool(ZSTD_CCtx * cctx, ZSTD_threadPool * pool);
ZSTDLIB_STATIC_API ZSTD_CDict* ZSTD_createCDict_advanced2(const void* dict, size_t dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType, const ZSTD_CCtx_params * cctxParams, ZSTD_customMem customMem);
ZSTDLIB_STATIC_API ZSTD_DDict* ZSTD_createDDict_advanced(const void* dict, size_t dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType, ZSTD_customMem customMem);
ZSTDLIB_STATIC_API ZSTD_CDict* ZSTD_createCDict_byReference(const void* dictBuffer, size_t dictSize, int compressionLevel);
ZSTDLIB_STATIC_API ZSTD_compressionParameters ZSTD_getCParams(int compressionLevel, unsigned long long estimatedSrcSize, size_t dictSize);
ZSTDLIB_STATIC_API ZSTD_parameters ZSTD_getParams(int compressionLevel, unsigned long long estimatedSrcSize, size_t dictSize);
ZSTDLIB_STATIC_API size_t ZSTD_checkCParams(ZSTD_compressionParameters params);
ZSTDLIB_STATIC_API ZSTD_compressionParameters ZSTD_adjustCParams(ZSTD_compressionParameters cPar, unsigned long long srcSize, size_t dictSize);
ZSTDLIB_STATIC_API size_t ZSTD_CCtx_setCParams(ZSTD_CCtx * cctx, ZSTD_compressionParameters cparams);
ZSTDLIB_STATIC_API size_t ZSTD_CCtx_setFParams(ZSTD_CCtx * cctx, ZSTD_frameParameters fparams);
ZSTDLIB_STATIC_API size_t ZSTD_CCtx_setParams(ZSTD_CCtx * cctx, ZSTD_parameters params);
ZSTDLIB_STATIC_API
size_t ZSTD_compress_advanced(ZSTD_CCtx * cctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize, const void* dict, size_t dictSize, ZSTD_parameters params);
ZSTDLIB_STATIC_API
size_t ZSTD_compress_usingCDict_advanced(ZSTD_CCtx * cctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize, const ZSTD_CDict * cdict, ZSTD_frameParameters fParams);
ZSTDLIB_STATIC_API size_t ZSTD_CCtx_loadDictionary_byReference(ZSTD_CCtx * cctx, const void* dict, size_t dictSize);
ZSTDLIB_STATIC_API size_t ZSTD_CCtx_loadDictionary_advanced(ZSTD_CCtx * cctx, const void* dict, size_t dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType);
ZSTDLIB_STATIC_API size_t ZSTD_CCtx_refPrefix_advanced(ZSTD_CCtx * cctx, const void* prefix, size_t prefixSize, ZSTD_dictContentType_e dictContentType);
ZSTDLIB_STATIC_API size_t ZSTD_CCtx_getParameter(const ZSTD_CCtx * cctx, ZSTD_cParameter param, int* value);
ZSTDLIB_STATIC_API ZSTD_CCtx_params* ZSTD_createCCtxParams(void);
ZSTDLIB_STATIC_API size_t ZSTD_freeCCtxParams(ZSTD_CCtx_params * params);
ZSTDLIB_STATIC_API size_t ZSTD_CCtxParams_reset(ZSTD_CCtx_params * params);
ZSTDLIB_STATIC_API size_t ZSTD_CCtxParams_init(ZSTD_CCtx_params * cctxParams, int compressionLevel);
ZSTDLIB_STATIC_API size_t ZSTD_CCtxParams_init_advanced(ZSTD_CCtx_params * cctxParams, ZSTD_parameters params);
ZSTDLIB_STATIC_API size_t ZSTD_CCtxParams_setParameter(ZSTD_CCtx_params * params, ZSTD_cParameter param, int value);
ZSTDLIB_STATIC_API size_t ZSTD_CCtxParams_getParameter(const ZSTD_CCtx_params * params, ZSTD_cParameter param, int* value);
ZSTDLIB_STATIC_API size_t ZSTD_CCtx_setParametersUsingCCtxParams(ZSTD_CCtx * cctx, const ZSTD_CCtx_params * params);
ZSTDLIB_STATIC_API unsigned ZSTD_isFrame(const void* buffer, size_t size);
ZSTDLIB_STATIC_API ZSTD_DDict* ZSTD_createDDict_byReference(const void* dictBuffer, size_t dictSize);
ZSTDLIB_STATIC_API size_t ZSTD_DCtx_loadDictionary_byReference(ZSTD_DCtx * dctx, const void* dict, size_t dictSize);
ZSTDLIB_STATIC_API size_t ZSTD_DCtx_loadDictionary_advanced(ZSTD_DCtx * dctx, const void* dict, size_t dictSize, ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType);
ZSTDLIB_STATIC_API size_t ZSTD_DCtx_refPrefix_advanced(ZSTD_DCtx * dctx, const void* prefix, size_t prefixSize, ZSTD_dictContentType_e dictContentType);
ZSTDLIB_STATIC_API size_t ZSTD_DCtx_setMaxWindowSize(ZSTD_DCtx * dctx, size_t maxWindowSize);
ZSTDLIB_STATIC_API size_t ZSTD_DCtx_getParameter(ZSTD_DCtx * dctx, ZSTD_dParameter param, int* value);
ZSTDLIB_STATIC_API
size_t ZSTD_DCtx_setFormat(ZSTD_DCtx * dctx, ZSTD_format_e format);
ZSTDLIB_STATIC_API
size_t ZSTD_initCStream_srcSize(ZSTD_CStream * zcs, int compressionLevel, unsigned long long pledgedSrcSize);
ZSTDLIB_STATIC_API
size_t ZSTD_initCStream_usingDict(ZSTD_CStream * zcs, const void* dict, size_t dictSize, int compressionLevel);
ZSTDLIB_STATIC_API
size_t ZSTD_initCStream_advanced(ZSTD_CStream * zcs, const void* dict, size_t dictSize, ZSTD_parameters params, unsigned long long pledgedSrcSize);
ZSTDLIB_STATIC_API
size_t ZSTD_initCStream_usingCDict(ZSTD_CStream * zcs, const ZSTD_CDict * cdict);
ZSTDLIB_STATIC_API
size_t ZSTD_initCStream_usingCDict_advanced(ZSTD_CStream * zcs, const ZSTD_CDict * cdict, ZSTD_frameParameters fParams, unsigned long long pledgedSrcSize);
ZSTDLIB_STATIC_API
size_t ZSTD_resetCStream(ZSTD_CStream * zcs, unsigned long long pledgedSrcSize);
ZSTDLIB_STATIC_API ZSTD_frameProgression ZSTD_getFrameProgression(const ZSTD_CCtx * cctx);
ZSTDLIB_STATIC_API size_t ZSTD_toFlushNow(ZSTD_CCtx * cctx);
ZSTDLIB_STATIC_API size_t ZSTD_initDStream_usingDict(ZSTD_DStream * zds, const void* dict, size_t dictSize);
ZSTDLIB_STATIC_API size_t ZSTD_initDStream_usingDDict(ZSTD_DStream * zds, const ZSTD_DDict * ddict);
ZSTDLIB_STATIC_API size_t ZSTD_resetDStream(ZSTD_DStream * zds);
ZSTDLIB_STATIC_API void ZSTD_registerSequenceProducer(ZSTD_CCtx * cctx, void* sequenceProducerState, ZSTD_sequenceProducer_F sequenceProducer);
ZSTDLIB_STATIC_API void ZSTD_CCtxParams_registerSequenceProducer(ZSTD_CCtx_params * params, void* sequenceProducerState, ZSTD_sequenceProducer_F sequenceProducer);
ZSTDLIB_STATIC_API size_t ZSTD_compressBegin(ZSTD_CCtx * cctx, int compressionLevel);
ZSTDLIB_STATIC_API size_t ZSTD_compressBegin_usingDict(ZSTD_CCtx * cctx, const void* dict, size_t dictSize, int compressionLevel);
ZSTDLIB_STATIC_API size_t ZSTD_compressBegin_usingCDict(ZSTD_CCtx * cctx, const ZSTD_CDict * cdict);
ZSTDLIB_STATIC_API
size_t ZSTD_copyCCtx(ZSTD_CCtx * cctx, const ZSTD_CCtx * preparedCCtx, unsigned long long pledgedSrcSize);
ZSTDLIB_STATIC_API size_t ZSTD_compressContinue(ZSTD_CCtx * cctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize);
ZSTDLIB_STATIC_API size_t ZSTD_compressEnd(ZSTD_CCtx * cctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize);
ZSTDLIB_STATIC_API
size_t ZSTD_compressBegin_advanced(ZSTD_CCtx * cctx, const void* dict, size_t dictSize, ZSTD_parameters params, unsigned long long pledgedSrcSize);
ZSTDLIB_STATIC_API
size_t ZSTD_compressBegin_usingCDict_advanced(ZSTD_CCtx* const cctx, const ZSTD_CDict* const cdict, ZSTD_frameParameters const fParams, unsigned long long const pledgedSrcSize);
ZSTDLIB_STATIC_API size_t ZSTD_decodingBufferSize_min(unsigned long long windowSize, unsigned long long frameContentSize);
ZSTDLIB_STATIC_API size_t ZSTD_decompressBegin(ZSTD_DCtx * dctx);
ZSTDLIB_STATIC_API size_t ZSTD_decompressBegin_usingDict(ZSTD_DCtx * dctx, const void* dict, size_t dictSize);
ZSTDLIB_STATIC_API size_t ZSTD_decompressBegin_usingDDict(ZSTD_DCtx * dctx, const ZSTD_DDict * ddict);
ZSTDLIB_STATIC_API size_t ZSTD_nextSrcSizeToDecompress(ZSTD_DCtx * dctx);
ZSTDLIB_STATIC_API size_t ZSTD_decompressContinue(ZSTD_DCtx * dctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize);
ZSTDLIB_STATIC_API void ZSTD_copyDCtx(ZSTD_DCtx * dctx, const ZSTD_DCtx * preparedDCtx);
ZSTDLIB_STATIC_API ZSTD_nextInputType_e ZSTD_nextInputType(ZSTD_DCtx * dctx);
ZSTDLIB_STATIC_API size_t ZSTD_decompressBlock(ZSTD_DCtx * dctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ZSTDERRORLIB_API ZSTD_ErrorCode ZSTD_getErrorCode(size_t functionResult);
ZSTDERRORLIB_API const char* ZSTD_getErrorString(ZSTD_ErrorCode code);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

size_t boost_cont_size(const void* p);
void* boost_cont_malloc(size_t bytes);
void boost_cont_free(void* mem);
void* boost_cont_memalign(size_t bytes, size_t alignment);
void boost_cont_multidealloc(boost_cont_memchain * pchain);
size_t boost_cont_footprint(void);
size_t boost_cont_allocated_memory(void);
size_t boost_cont_chunksize(const void* p);
int boost_cont_all_deallocated(void);
boost_cont_malloc_stats_t boost_cont_malloc_stats(void);
size_t boost_cont_in_use_memory(void);
int boost_cont_trim(size_t pad);
int boost_cont_mallopt(int parameter_number, int parameter_value);
int boost_cont_malloc_check(void);
void boost_cont_sync_destroy(void* sync);
int boost_cont_sync_lock(void* sync);
void boost_cont_sync_unlock(void* sync);
int boost_cont_global_sync_lock(void);
void boost_cont_global_sync_unlock(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

define BOOST_PREDEF_INTERNAL_GENERATE_TESTS

void* add_predef_entry(const char* name, const char* description, unsigned value);
return strcmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void* b3AlignedAllocInternal(size_t size, int alignment, int line, char* filename);
void b3AlignedFreeInternal(void* ptr, int line, char* filename);
else
void* b3AlignedAllocInternal(size_t size, int alignment);
void b3AlignedFreeInternal(void* ptr);
using b3AlignedAllocSetCustom
void b3AlignedAllocSetCustom(b3AllocFunc* allocFunc, b3FreeFunc* freeFunc);
void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc * allocFunc, b3AlignedFreeFunc * freeFunc);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return size(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

bool GetCmdLineArgument(const char* arg_name, T & val);
istringstream strstream(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifdef _MSC_VER sprintf_s(void);
else sprintf(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return find(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef B3_NO_PROFILE

void b3EnterProfileZone(const char* name);
void b3LeaveProfileZone(void);
The developer can route b3Printf output using their own implementation
void b3SetCustomPrintfFunc(b3PrintfFunc* printfFunc);
void b3SetCustomWarningMessageFunc(b3WarningMessageFunc * warningMsgFunc);
void b3SetCustomErrorMessageFunc(b3ErrorMessageFunc * errorMsgFunc);
void b3SetCustomEnterProfileZoneFunc(b3EnterProfileZoneFunc * enterFunc);
void b3SetCustomLeaveProfileZoneFunc(b3LeaveProfileZoneFunc * leaveFunc);
void b3OutputPrintfVarArgsInternal(const char* str);
void b3OutputWarningMessageVarArgsInternal(const char* str);
void b3OutputErrorMessageVarArgsInternal(const char* str);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return b3MakeVector3(void);
static const b3Matrix3x3 identityMatrix(void);
s* b3Scalar(void);
s* b3Scalar(void);
s* b3Scalar(void);
return b3Matrix3x3(m_el[0] * s, m_el[1] * s, m_el[2] * s);
void deSerialize(const struct b3Matrix3x3Data& dataIn);
void deSerializeFloat(const struct b3Matrix3x3FloatData& dataIn);
void deSerializeDouble(const struct b3Matrix3x3DoubleData& dataIn);
else setValue(m_el[0][0] + m.m_el[0][0], m_el[0][1] + m.m_el[0][1], m_el[0][2] + m.m_el[0][2], m_el[1][0] + m.m_el[1][0], m_el[1][1] + m.m_el[1][1], m_el[1][2] + m.m_el[1][2], m_el[2][0] + m.m_el[2][0], m_el[2][1] + m.m_el[2][1], m_el[2][2] + m.m_el[2][2]);
return b3Matrix3x3(m1[0].mVec128 + m2[0].mVec128, m1[1].mVec128 + m2[1].mVec128, m1[2].mVec128 + m2[2].mVec128);
else
return b3Matrix3x3(m1[0][0] + m2[0][0], m1[0][1] + m2[0][1], m1[0][2] + m2[0][2], m1[1][0] + m2[1][0], m1[1][1] + m2[1][1], m1[1][2] + m2[1][2], m1[2][0] + m2[2][0], m1[2][1] + m2[2][1], m1[2][2] + m2[2][2]);
return b3Matrix3x3(m1[0].mVec128 - m2[0].mVec128, m1[1].mVec128 - m2[1].mVec128, m1[2].mVec128 - m2[2].mVec128);
else
return b3Matrix3x3(m1[0][0] - m2[0][0], m1[0][1] - m2[0][1], m1[0][2] - m2[0][2], m1[1][0] - m2[1][0], m1[1][1] - m2[1][1], m1[1][2] - m2[1][2], m1[2][0] - m2[2][0], m1[2][1] - m2[2][1], m1[2][2] - m2[2][2]);
else setValue(m_el[0][0] - m.m_el[0][0], m_el[0][1] - m.m_el[0][1], m_el[0][2] - m.m_el[0][2], m_el[1][0] - m.m_el[1][0], m_el[1][1] - m.m_el[1][1], m_el[1][2] - m.m_el[1][2], m_el[2][0] - m.m_el[2][0], m_el[2][1] - m.m_el[2][1], m_el[2][2] - m.m_el[2][2]);
z0 z1 z2 0

return b3Matrix3x3(void);
z0 z1 z2  0
return b3Matrix3x3(void);
return b3Matrix3x3(void);
return b3Matrix3x3(void);
return b3Matrix3x3(void);
return b3Matrix3x3(void);
return b3MakeVector3(void);
return b3Matrix3x3(void);
return b3Matrix3x3(void);
return b3Matrix3x3(m1[0][0] * m2[0][0] + m1[1][0] * m2[1][0] + m1[2][0] * m2[2][0], m1[0][0] * m2[0][1] + m1[1][0] * m2[1][1] + m1[2][0] * m2[2][1], m1[0][0] * m2[0][2] + m1[1][0] * m2[1][2] + m1[2][0] * m2[2][2], m1[0][1] * m2[0][0] + m1[1][1] * m2[1][0] + m1[2][1] * m2[2][0], m1[0][1] * m2[0][1] + m1[1][1] * m2[1][1] + m1[2][1] * m2[2][1], m1[0][1] * m2[0][2] + m1[1][1] * m2[1][2] + m1[2][1] * m2[2][2], m1[0][2] * m2[0][0] + m1[1][2] * m2[1][0] + m1[2][2] * m2[2][0], m1[0][2] * m2[0][1] + m1[1][2] * m2[1][1] + m1[2][2] * m2[2][1], m1[0][2] * m2[0][2] + m1[1][2] * m2[1][2] + m1[2][2] * m2[2][2]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

else b3SetMax(void);
else b3SetMin(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef B3_EULER_DEFAULT_ZYX setEuler(void);
else setEulerZYX(void);
formerly yzx normalize(void);
return _mm_cvtss_f32(void);
return vget_lane_f32(void);
return dot(void);
Check for divide by zero
return b3MakeVector3(void);
return b3MakeVector3(m_floats[0] * s, m_floats[1] * s, m_floats[2] * s);
else
return b3Quaternion(void);
AB12

return b3Quaternion(void);
AB12

return b3Quaternion(void);
AB3

return b3Quaternion(void);
AB3

return b3Quaternion(void);
AB3

return b3Quaternion(void);
AB3

return b3Quaternion(void);
return b3ShortestArcQuat(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return genrand_int32(void);
return rand(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

asm volatile(void);
return _mm_add_ps(void);
return _mm_sub_ps(void);
return _mm_mul_ps(void);
return b3AlignedAlloc(void);
return b3AlignedAlloc(void);
return sqrt(void);
return fabs(void);
return cos(void);
return sin(void);
return tan(void);
return acos(void);
return asin(void);
return atan(void);
return atan2(void);
return exp(void);
return log(void);
return pow(void);
return fmod(void);
y* b3Scalar(void);
else
return sqrtf(void);
return fabsf(void);
return cosf(void);
return sinf(void);
return tanf(void);
return acosf(void);
return asinf(void);
return atanf(void);
return atan2f(void);
return expf(void);
return logf(void);
return powf(void);
return fmodf(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

const unsigned int nus(usedsize + size);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return b3Transform(inv * -m_origin);
void deSerialize(const struct b3TransformData& dataIn);
void deSerializeDouble(const struct b3TransformDoubleData& dataIn);
void deSerializeFloat(const struct b3TransformFloatData& dataIn);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

inline b3Vector3 b3MakeVector3(b3SimdFloat4 v);
inline b3Vector4 b3MakeVector4(b3SimdFloat4 vec);
endif

inline b3Vector3 b3MakeVector3(b3Scalar x, b3Scalar y, b3Scalar z);
inline b3Vector3 b3MakeVector3(b3Scalar x, b3Scalar y, b3Scalar z, b3Scalar w);
inline b3Vector4 b3MakeVector4(b3Scalar x, b3Scalar y, b3Scalar z, b3Scalar w);
return _mm_cvtss_f32(void);
return vget_lane_f32(void);
return dot(void);
return b3MakeVector3(void);
return b3Vector3(void);
else
return b3MakeVector3(m_floats[1] * v.m_floats[2] - m_floats[2] * v.m_floats[1], m_floats[2] * v.m_floats[0] - m_floats[0] * v.m_floats[2], m_floats[0] * v.m_floats[1] - m_floats[1] * v.m_floats[0]);
return _mm_cvtss_f32(void);
return vget_lane_f32(void);
return b3MakeVector3(void);
return b3Vector3(void);
else b3SetMax(void);
else b3SetMin(void);
B3_FORCE_INLINE void deSerialize(const struct b3Vector3Data& dataIn);
B3_FORCE_INLINE void deSerializeFloat(const struct b3Vector3FloatData& dataIn);
B3_FORCE_INLINE void deSerializeDouble(const struct b3Vector3DoubleData& dataIn);
return b3MakeVector3(void);
else
return b3MakeVector3(v1.m_floats[0] + v2.m_floats[0], v1.m_floats[1] + v2.m_floats[1], v1.m_floats[2] + v2.m_floats[2]);
else
return b3MakeVector3(v1.m_floats[0] * v2.m_floats[0], v1.m_floats[1] * v2.m_floats[1], v1.m_floats[2] * v2.m_floats[2]);
else
return b3MakeVector3(v1.m_floats[0] - v2.m_floats[0], v1.m_floats[1] - v2.m_floats[1], v1.m_floats[2] - v2.m_floats[2]);
else
return b3MakeVector3(void);
else
return b3MakeVector3(v.m_floats[0] * s, v.m_floats[1] * s, v.m_floats[2] * s);
return b3MakeVector3(void);
y

return b3Vector3(void);
else
return b3MakeVector3(v1.m_floats[0] / v2.m_floats[0], v1.m_floats[1] / v2.m_floats[1], v1.m_floats[2] / v2.m_floats[2]);
return b3MakeVector3(void);
long b3_maxdot_large(const float* array, const float* vec, unsigned long array_count, float* dotOut);
long b3_mindot_large(const float* array, const float* vec, unsigned long array_count, float* dotOut);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return dot(void);
return cross(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return b3Mat3x3(void);
__inline b3Mat3x3 mtZero(void);
__inline b3Mat3x3 mtIdentity(void);
__inline b3Mat3x3 mtTranspose(b3Mat3x3 m);
__inline b3Mat3x3 mtMul(b3Mat3x3 a, b3Mat3x3 b);
__inline b3Float4 mtMul1(b3Mat3x3 a, b3Float4 b);
__inline b3Float4 mtMul3(b3Float4 a, b3Mat3x3 b);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return tr(void);
return fast_normalize(void);
inline b3Quat b3QuatMul(b3Quat a, b3Quat b);
inline b3Quat b3QuatNormalized(b3QuatConstArg in);
inline b3Quat b3QuatRotate(b3QuatConstArg q, b3QuatConstArg vec);
inline b3Quat b3QuatInvert(b3QuatConstArg q);
inline b3Quat b3QuatInverse(b3QuatConstArg q);
return b3FastNormalize4(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

deallocation
BP_FP_INT_TYPE allocHandle(void);
void freeHandle(BP_FP_INT_TYPE handle);
bool testOverlap2D(const Handle * pHandleA, const Handle * pHandleB, int axis0, int axis1);
ifdef DEBUG_BROADPHASE
void debugPrintAxis(int axis, bool checkCardinality = true);
Overlap* AddOverlap(BP_FP_INT_TYPE handleA, BP_FP_INT_TYPE handleB);
void RemoveOverlap(BP_FP_INT_TYPE handleA, BP_FP_INT_TYPE handleB);
void sortMinDown(int axis, BP_FP_INT_TYPE edge, btDispatcher * dispatcher, bool updateOverlaps);
void sortMinUp(int axis, BP_FP_INT_TYPE edge, btDispatcher * dispatcher, bool updateOverlaps);
void sortMaxDown(int axis, BP_FP_INT_TYPE edge, btDispatcher * dispatcher, bool updateOverlaps);
void sortMaxUp(int axis, BP_FP_INT_TYPE edge, btDispatcher * dispatcher, bool updateOverlaps);
virtual void calculateOverlappingPairs(btDispatcher * dispatcher);
BP_FP_INT_TYPE addHandle(const btVector3 & aabbMin, const btVector3 & aabbMax, void* pOwner, int collisionFilterGroup, int collisionFilterMask, btDispatcher * dispatcher);
void removeHandle(BP_FP_INT_TYPE handle, btDispatcher * dispatcher);
void updateHandle(BP_FP_INT_TYPE handle, const btVector3 & aabbMin, const btVector3 & aabbMax, btDispatcher * dispatcher);
virtual void resetPool(btDispatcher * dispatcher);
void processAllOverlappingPairs(btOverlapCallback * callback);
Broadphase Interface
virtual btBroadphaseProxy* createProxy(const btVector3 & aabbMin, const btVector3 & aabbMax, int shapeType, void* userPtr, int collisionFilterGroup, int collisionFilterMask, btDispatcher * dispatcher);
virtual void destroyProxy(btBroadphaseProxy * proxy, btDispatcher * dispatcher);
virtual void setAabb(btBroadphaseProxy * proxy, const btVector3 & aabbMin, const btVector3 & aabbMax, btDispatcher * dispatcher);
virtual void aabbTest(const btVector3 & aabbMin, const btVector3 & aabbMax, btBroadphaseAabbCallback & callback);
bool testAabbOverlap(btBroadphaseProxy * proxy0, btBroadphaseProxy * proxy1);
ifdef DEBUG_BROADPHASE debugPrintAxis(void);
87
btVector3 clampedPoint(void);
now sort the new edges to their correct position sortMinDown(void);
ifdef DEBUG_BROADPHASE debugPrintAxis(void);
free the handle freeHandle(void);
should have no algorithm btAssert(void);
ifdef DEBUG_BROADPHASE debugPrintAxis(void);
ifdef DEBUG_BROADPHASE debugPrintAxis(void);
ifdef DEBUG_BROADPHASE debugPrintAxis(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int getDispatcherId(void);
int getDispatcherId(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static inline btDbvtAabbMm FromCE(const btVector3 & c, const btVector3 & e);
static inline btDbvtAabbMm FromCR(const btVector3 & c, btScalar r);
static inline btDbvtAabbMm FromMM(const btVector3 & mi, const btVector3 & mx);
static inline btDbvtAabbMm FromPoints(const btVector3 * pts, int n);
static inline btDbvtAabbMm FromPoints(const btVector3 * *ppts, int n);
DBVT_INLINE void Expand(const btVector3 & e);
DBVT_INLINE void SignedExpand(const btVector3 & e);
DBVT_INLINE friend bool Intersect(const btDbvtAabbMm & a, const btDbvtAabbMm & b);
DBVT_INLINE friend bool Intersect(const btDbvtAabbMm & a, const btVector3 & b);
DBVT_INLINE friend btScalar Proximity(const btDbvtAabbMm & a, const btDbvtAabbMm & b);
DBVT_INLINE friend int Select(const btDbvtAabbMm & o, const btDbvtAabbMm & a, const btDbvtAabbMm & b);
DBVT_INLINE friend void Merge(const btDbvtAabbMm & a, const btDbvtAabbMm & b, btDbvtAabbMm & r);
DBVT_INLINE friend bool NotEqual(const btDbvtAabbMm & a, const btDbvtAabbMm & b);
Methods btDbvt(void);
void clear(void);
void optimizeBottomUp(void);
void optimizeTopDown(int bu_treshold = 128);
void optimizeIncremental(int passes);
btDbvtNode* insert(const btDbvtVolume & box, void* data);
void update(btDbvtNode * leaf, int lookahead = -1);
void update(btDbvtNode * leaf, btDbvtVolume & volume);
bool update(btDbvtNode * leaf, btDbvtVolume & volume, const btVector3 & velocity, btScalar margin);
bool update(btDbvtNode * leaf, btDbvtVolume & volume, const btVector3 & velocity);
bool update(btDbvtNode * leaf, btDbvtVolume & volume, btScalar margin);
void remove(btDbvtNode * leaf);
static int maxdepth(const btDbvtNode * node);
static int countLeaves(const btDbvtNode * node);
static void extractLeaves(const btDbvtNode * node, btAlignedObjectArray<const btDbvtNode*>&leaves);
if DBVT_ENABLE_BENCHMARK
static void benchmark(void);
interface
	DBVT_PREFIX
	static void enumNodes(const btDbvtNode * root);
DBVT_PREFIX
static void enumLeaves(const btDbvtNode * root);
DBVT_PREFIX
void collideTT(const btDbvtNode * root0, const btDbvtNode * root1);
DBVT_PREFIX
void selfCollideT(const btDbvntNode * root);
DBVT_PREFIX
void selfCollideTT(const btDbvtNode * root);
DBVT_PREFIX
void collideTTpersistentStack(const btDbvtNode * root0, const btDbvtNode * root1);
if 0
DBVT_PREFIX
void collideTT(const btDbvtNode * root0, const btDbvtNode * root1, const btTransform & xform);
DBVT_PREFIX
void collideTT(const btDbvtNode * root0, const btTransform & xform0, const btDbvtNode * root1, const btTransform & xform1);
rayDirectionInverses each time
DBVT_PREFIX
static void rayTest(const btDbvtNode * root, const btVector3 & rayFrom, const btVector3 & rayTo);
DBVT_PREFIX
static void collideKDOP(const btDbvtNode * root, const btVector3 * normals, const btScalar * offsets, int count);
DBVT_PREFIX
static void collideOCL(const btDbvtNode * root, const btVector3 * normals, const btScalar * offsets, const btVector3 & sortaxis, int count, bool fullsort = true);
DBVT_PREFIX
static void collideTU(const btDbvtNode * root);
else ATTRIBUTE_ALIGNED16(__int32 r[1]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void collide(btDispatcher * dispatcher);
void optimize(void);
btBroadphaseProxy* createProxy(const btVector3 & aabbMin, const btVector3 & aabbMax, int shapeType, void* userPtr, int collisionFilterGroup, int collisionFilterMask, btDispatcher * dispatcher);
virtual void destroyProxy(btBroadphaseProxy * proxy, btDispatcher * dispatcher);
virtual void setAabb(btBroadphaseProxy * proxy, const btVector3 & aabbMin, const btVector3 & aabbMax, btDispatcher * dispatcher);
virtual void aabbTest(const btVector3 & aabbMin, const btVector3 & aabbMax, btBroadphaseAabbCallback & callback);
virtual void calculateOverlappingPairs(btDispatcher * dispatcher);
virtual btOverlappingPairCache* getOverlappingPairCache(void);
virtual void printStats(void);
reproducability
virtual void resetPool(btDispatcher * dispatcher);
void performDeferredRemoval(btDispatcher * dispatcher);
223
void setAabbForceUpdate(btBroadphaseProxy * absproxy, const btVector3 & aabbMin, const btVector3 & aabbMax, btDispatcher* /*dispatcher*/);
static void benchmark(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void removeOverlappingPairsContainingProxy(btBroadphaseProxy * proxy, btDispatcher * dispatcher);
virtual void* removeOverlappingPair(btBroadphaseProxy * proxy0, btBroadphaseProxy * proxy1, btDispatcher * dispatcher);
return internalAddPair(void);
void cleanProxyFromPairs(btBroadphaseProxy * proxy, btDispatcher * dispatcher);
virtual void processAllOverlappingPairs(btDispatcher * dispatcher);
virtual void processAllOverlappingPairs(btOverlapCallback * callback, btDispatcher * dispatcher, const struct btDispatcherInfo& dispatchInfo);
void cleanOverlappingPair(btBroadphasePair & pair, btDispatcher * dispatcher);
btBroadphasePair* findPair(btBroadphaseProxy * proxy0, btBroadphaseProxy * proxy1);
btBroadphasePair* internalAddPair(btBroadphaseProxy * proxy0, btBroadphaseProxy * proxy1);
void growTables(void);
virtual void sortOverlappingPairs(btDispatcher * dispatcher);
virtual void processAllOverlappingPairs(btDispatcher * dispatcher);
void* removeOverlappingPair(btBroadphaseProxy * proxy0, btBroadphaseProxy * proxy1, btDispatcher * dispatcher);
void cleanOverlappingPair(btBroadphasePair & pair, btDispatcher * dispatcher);
btBroadphasePair* addOverlappingPair(btBroadphaseProxy * proxy0, btBroadphaseProxy * proxy1);
btBroadphasePair* findPair(btBroadphaseProxy * proxy0, btBroadphaseProxy * proxy1);
void cleanProxyFromPairs(btBroadphaseProxy * proxy, btDispatcher * dispatcher);
void removeOverlappingPairsContainingProxy(btBroadphaseProxy * proxy, btDispatcher * dispatcher);
virtual void sortOverlappingPairs(btDispatcher * dispatcher);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return unQuantize(void);
return unQuantize(void);
void swapLeafNodes(int firstIndex, int secondIndex);
void assignInternalNodeFromLeafNode(int internalNode, int leafNodeIndex);
void buildTree(int startIndex, int endIndex);
int calcSplittingAxis(int startIndex, int endIndex);
int sortAndCalcSplittingIndex(int startIndex, int endIndex, int splitAxis);
void updateSubtreeHeaders(int leftChildNodexIndex, int rightChildNodexIndex);
assumes that setQuantizationValues and LeafNodeArray are initialized
void buildInternal(void);
btVector3 clampedPoint(void);
static btQuantizedBvh* deSerializeInPlace(void* i_alignedDataBuffer, unsigned int i_dataBufferSize, bool i_swapEndian);
static unsigned int getAlignmentSerializationPadding(void);
virtual void deSerializeFloat(struct btQuantizedBvhFloatData& quantizedBvhFloatData);
virtual void deSerializeDouble(struct btQuantizedBvhDoubleData& quantizedBvhDoubleData);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

reproducability
virtual void resetPool(btDispatcher * dispatcher);
void validate(void);
static bool aabbOverlap(btSimpleBroadphaseProxy * proxy0, btSimpleBroadphaseProxy * proxy1);
virtual btBroadphaseProxy* createProxy(const btVector3 & aabbMin, const btVector3 & aabbMax, int shapeType, void* userPtr, int collisionFilterGroup, int collisionFilterMask, btDispatcher * dispatcher);
virtual void calculateOverlappingPairs(btDispatcher * dispatcher);
virtual void destroyProxy(btBroadphaseProxy * proxy, btDispatcher * dispatcher);
virtual void setAabb(btBroadphaseProxy * proxy, const btVector3 & aabbMin, const btVector3 & aabbMax, btDispatcher * dispatcher);
virtual void aabbTest(const btVector3 & aabbMin, const btVector3 & aabbMax, btBroadphaseAabbCallback & callback);
bool testAabbOverlap(btBroadphaseProxy * proxy0, btBroadphaseProxy * proxy1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
virtual btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
virtual btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void getClosestPoints(const ClosestPointInput & input, Result & output, class btIDebugDraw* debugDraw, bool swapResults = false);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

alternative collision create functions
void registerCollisionCreateFunc(int proxyType0, int proxyType1, btCollisionAlgorithmCreateFunc * createFunc);
void registerClosestPointsCreateFunc(int proxyType0, int proxyType1, btCollisionAlgorithmCreateFunc * createFunc);
virtual btPersistentManifold* getNewManifold(const btCollisionObject * b0, const btCollisionObject * b1);
virtual void releaseManifold(btPersistentManifold * manifold);
virtual void clearManifold(btPersistentManifold * manifold);
btCollisionAlgorithm* findAlgorithm(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, btPersistentManifold * sharedManifold, ebtDispatcherQueryType queryType);
virtual bool needsCollision(const btCollisionObject * body0, const btCollisionObject * body1);
virtual bool needsResponse(const btCollisionObject * body0, const btCollisionObject * body1);
virtual void dispatchAllCollisionPairs(btOverlappingPairCache * pairCache, const btDispatcherInfo & dispatchInfo, btDispatcher * dispatcher);
Bullet will use this near callback
static void defaultNearCallback(btBroadphasePair & collisionPair, btCollisionDispatcher & dispatcher, const btDispatcherInfo & dispatchInfo);
virtual void* allocateCollisionAlgorithm(int size);
virtual void freeCollisionAlgorithm(void* ptr);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return checkCollideWithOverride(void);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void* operator new(size_t size);
void operator delete(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void serializeCollisionObjects(btSerializer * serializer);
void serializeContactManifolds(btSerializer * serializer);
broadphase btCollisionWorld(btDispatcher * dispatcher, btBroadphaseInterface * broadphasePairCache, btCollisionConfiguration * collisionConfiguration);
void updateSingleAabb(btCollisionObject * colObj);
virtual void updateAabbs(void);
simulation
virtual void computeOverlappingPairs(void);
virtual void debugDrawWorld(void);
virtual void debugDrawObject(const btTransform & worldTransform, const btCollisionShape * shape, const btVector3 & color);
caller already does the filter on the m_closestHitFraction btAssert(rayResult.m_hitFraction <= m_closestHitFraction);
caller already does the filter on the m_closestHitFraction btAssert(convexResult.m_hitFraction <= m_closestHitFraction);
void contactTest(btCollisionObject * colObj, ContactResultCallback & resultCallback);
void contactPairTest(btCollisionObject * colObjA, btCollisionObject * colObjB, ContactResultCallback & resultCallback);
static void rayTestSingle(const btTransform & rayFromTrans, const btTransform & rayToTrans, btCollisionObject * collisionObject, const btCollisionShape * collisionShape, const btTransform & colObjWorldTransform, RayResultCallback & resultCallback);
static void rayTestSingleInternal(const btTransform & rayFromTrans, const btTransform & rayToTrans, const btCollisionObjectWrapper * collisionObjectWrap, RayResultCallback & resultCallback);
static void objectQuerySingle(const btConvexShape * castShape, const btTransform & rayFromTrans, const btTransform & rayToTrans, btCollisionObject * collisionObject, const btCollisionShape * collisionShape, const btTransform & colObjWorldTransform, ConvexResultCallback & resultCallback, btScalar allowedPenetration);
static void objectQuerySingleInternal(const btConvexShape * castShape, const btTransform & convexFromTrans, const btTransform & convexToTrans, const btCollisionObjectWrapper * colObjWrap, ConvexResultCallback & resultCallback, btScalar allowedPenetration);
virtual void addCollisionObject(btCollisionObject * collisionObject, int collisionFilterGroup = btBroadphaseProxy::DefaultFilter, int collisionFilterMask = btBroadphaseProxy::AllFilter);
virtual void refreshBroadphaseProxy(btCollisionObject * collisionObject);
virtual void removeCollisionObject(btCollisionObject * collisionObject);
virtual void performDiscreteCollisionDetection(void);
virtual void serialize(btSerializer * serializer);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

methods

char* duplicateName(const char* name);
btCollisionShape* convertCollisionShape(btCollisionShapeData * shapeData);
bool convertAllObjects(btBulletSerializedArrays * arrays);
t use the dynamics world containing objects after you call this method
virtual void deleteAllData(void);
btCollisionShape* getCollisionShapeByIndex(int index);
queris involving named objects
btCollisionShape* getCollisionShapeByName(const char* name);
btCollisionObject* getCollisionObjectByName(const char* name);
bodies

virtual btCollisionObject* createCollisionObject(const btTransform & startTransform, btCollisionShape * shape, const char* bodyName);
shapes

virtual btCollisionShape* createPlaneShape(const btVector3 & planeNormal, btScalar planeConstant);
virtual btCollisionShape* createBoxShape(const btVector3 & halfExtents);
virtual btCollisionShape* createSphereShape(btScalar radius);
virtual btCollisionShape* createCapsuleShapeX(btScalar radius, btScalar height);
virtual btCollisionShape* createCapsuleShapeY(btScalar radius, btScalar height);
virtual btCollisionShape* createCapsuleShapeZ(btScalar radius, btScalar height);
virtual btCollisionShape* createCylinderShapeX(btScalar radius, btScalar height);
virtual btCollisionShape* createCylinderShapeY(btScalar radius, btScalar height);
virtual btCollisionShape* createCylinderShapeZ(btScalar radius, btScalar height);
virtual btCollisionShape* createConeShapeX(btScalar radius, btScalar height);
virtual btCollisionShape* createConeShapeY(btScalar radius, btScalar height);
virtual btCollisionShape* createConeShapeZ(btScalar radius, btScalar height);
virtual class btTriangleIndexVertexArray* createTriangleMeshContainer(void);
virtual btBvhTriangleMeshShape* createBvhTriangleMeshShape(btStridingMeshInterface * trimesh, btOptimizedBvh * bvh);
virtual btCollisionShape* createConvexTriangleMeshShape(btStridingMeshInterface * trimesh);
ifdef SUPPORT_GIMPACT_SHAPE_IMPORT
virtual btGImpactMeshShape* createGimpactShape(btStridingMeshInterface * trimesh);
SUPPORT_GIMPACT_SHAPE_IMPORT
virtual btStridingMeshInterfaceData* createStridingMeshInterfaceData(btStridingMeshInterfaceData * interfaceData);
virtual class btConvexHullShape* createConvexHullShape(void);
virtual class btCompoundShape* createCompoundShape(void);
virtual class btScaledBvhTriangleMeshShape* createScaledTrangleMeshShape(btBvhTriangleMeshShape * meshShape, const btVector3 & localScalingbtBvhTriangleMeshShape);
virtual class btMultiSphereShape* createMultiSphereShape(const btVector3 * positions, const btScalar * radi, int numSpheres);
virtual btTriangleIndexVertexArray* createMeshInterface(btStridingMeshInterfaceData & meshData);
acceleration and connectivity structures
virtual btOptimizedBvh* createOptimizedBvh(void);
virtual btTriangleInfoMap* createTriangleInfoMap(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

so that childAlgorithm array can be updated

void removeChildAlgorithms(void);
void preallocateChildAlgorithms(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap);
virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void removeChildAlgorithms(void);
void preallocateChildAlgorithms(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap);
virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
virtual void getAllContactManifolds(btManifoldArray & manifoldArray);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
virtual btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
void setLowLevelOfDetail(bool useLowLevel);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void setTimeStepAndCounters(btScalar collisionMarginTriangle, const btDispatcherInfo & dispatchInfo, const btCollisionObjectWrapper * convexBodyWrap, const btCollisionObjectWrapper * triBodyWrap, btManifoldResult * resultOut);
virtual void processTriangle(btVector3 * triangle, int partId, int triangleIndex);
void clearCache(void);
virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
virtual void getAllContactManifolds(btManifoldArray & manifoldArray);
void clearCache(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
virtual btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
void setLowLevelOfDetail(bool useLowLevel);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
void collideSingleContact(const btQuaternion & perturbeRot, const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
virtual btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual btCollisionAlgorithmCreateFunc* getCollisionAlgorithmCreateFunc(int proxyType0, int proxyType1);
virtual btCollisionAlgorithmCreateFunc* getClosestPointsAlgorithmCreateFunc(int proxyType0, int proxyType1);
void setConvexConvexMultipointIterations(int numPerturbationIterations = 3, int minimumPointsPerturbationThreshold = 3);
void setPlaneConvexMultipointIterations(int numPerturbationIterations = 3, int minimumPointsPerturbationThreshold = 3);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
virtual btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void addOverlappingObjectInternal(btBroadphaseProxy * otherProxy, btBroadphaseProxy * thisProxy = 0);
virtual void removeOverlappingObjectInternal(btBroadphaseProxy * otherProxy, btDispatcher * dispatcher, btBroadphaseProxy * thisProxy = 0);
virtual void addOverlappingObjectInternal(btBroadphaseProxy * otherProxy, btBroadphaseProxy * thisProxy = 0);
virtual void removeOverlappingObjectInternal(btBroadphaseProxy * otherProxy, btDispatcher * dispatcher, btBroadphaseProxy * thisProxy = 0);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void removeAllPairs(void);
virtual void* removeOverlappingPair(int indexA, int indexB);
endif

return internalAddPair(void);
btSimplePair* findPair(int indexA, int indexB);
btSimplePair* internalAddPair(int indexA, int indexB);
void growTables(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void btGenerateInternalEdgeInfo(btBvhTriangleMeshShape * trimeshShape, btTriangleInfoMap * triangleInfoMap);
void btGenerateInternalEdgeInfo(btHeightfieldTerrainShape * trimeshShape, btTriangleInfoMap * triangleInfoMap);
nothing will be done
void btAdjustInternalEdgeContacts(btManifoldPoint & cp, const btCollisionObjectWrapper * trimeshColObj0Wrap, const btCollisionObjectWrapper * otherColObj1Wrap, int partId0, int index0, int normalAdjustFlags = 0);
ifdef BT_INTERNAL_EDGE_DEBUG_DRAW
void btSetDebugDrawer(btIDebugDraw * debugDrawer);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void addContactPoint(const btVector3 & normalOnBInWorld, const btVector3 & pointInWorld, btScalar depth);
in the future we can let the user override the methods to combine restitution and friction
static btScalar calculateCombinedRestitution(const btCollisionObject * body0, const btCollisionObject * body1);
static btScalar calculateCombinedFriction(const btCollisionObject * body0, const btCollisionObject * body1);
static btScalar calculateCombinedRollingFriction(const btCollisionObject * body0, const btCollisionObject * body1);
static btScalar calculateCombinedSpinningFriction(const btCollisionObject * body0, const btCollisionObject * body1);
static btScalar calculateCombinedContactDamping(const btCollisionObject * body0, const btCollisionObject * body1);
static btScalar calculateCombinedContactStiffness(const btCollisionObject * body0, const btCollisionObject * body1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void initUnionFind(int n);
virtual void updateActivationState(btCollisionWorld * colWorld, btDispatcher * dispatcher);
virtual void storeIslandActivationState(btCollisionWorld * world);
void findUnions(btDispatcher * dispatcher, btCollisionWorld * colWorld);
void buildAndProcessIslands(btDispatcher * dispatcher, btCollisionWorld * collisionWorld, IslandCallback * callback);
void buildIslands(btDispatcher * dispatcher, btCollisionWorld * colWorld);
void processIslands(btDispatcher * dispatcher, btCollisionWorld * collisionWorld, IslandCallback * callback);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
virtual btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
bool getSphereDistance(const btCollisionObjectWrapper * boxObjWrap, btVector3 & v3PointOnBox, btVector3 & normal, btScalar & penetrationDepth, const btVector3 & v3SphereCenter, btScalar fRadius, btScalar maxContactDistance);
btScalar getSpherePenetration(btVector3 const& boxHalfExtent, btVector3 const& sphereRelPos, btVector3 & closestPoint, btVector3 & normal);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
virtual btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
virtual btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

in order to make it easy to iterate over islands
void sortIslands(void);
void reset(int N);
void allocate(int N);
void Free(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void getClosestPoints(const ClosestPointInput & input, Result & output, class btIDebugDraw* debugDraw, bool swapResults = false);
bool collide(const btVector3 & sphereCenter, btVector3 & point, btVector3 & resultNormal, btScalar & depth, btScalar & timeOfImpact, btScalar contactBreakingThreshold);
bool pointInTriangle(const btVector3 vertices[], const btVector3 & normal, btVector3 * p);
bool facecontains(const btVector3 & p, const btVector3 * vertices, btVector3 & normal);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

This allows for deformations within this aabb btBvhTriangleMeshShape(btStridingMeshInterface * meshInterface, bool useQuantizedAabbCompression, const btVector3 & bvhAabbMin, const btVector3 & bvhAabbMax, bool buildBvh = true);
void performRaycast(btTriangleCallback * callback, const btVector3 & raySource, const btVector3 & rayTarget);
void performConvexcast(btTriangleCallback * callback, const btVector3 & boxSource, const btVector3 & boxTarget, const btVector3 & boxMin, const btVector3 & boxMax);
void refitTree(const btVector3 & aabbMin, const btVector3 & aabbMax);
it never shrinks
void partialRefitTree(const btVector3 & aabbMin, const btVector3 & aabbMax);
virtual void setLocalScaling(const btVector3 & scaling);
void buildOptimizedBvh(void);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

btVector3 aniDir(void);
SIMD_FORCE_INLINE void deSerializeFloat(struct btCapsuleShapeData* dataBuffer);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return btVector3(void);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

explicit btCompoundShape(bool enableDynamicAabbTree = true, const int initialChildCapacity = 0);
void addChildShape(const btTransform & localTransform, btCollisionShape * shape);
Remove all children shapes that contain the specified shape
virtual void removeChildShape(btCollisionShape * shape);
void removeChildShapeByIndex(int childShapeindex);
void updateChildTransform(int childIndex, const btTransform & newChildTransform, bool shouldRecalculateLocalAabb = true);
virtual void recalculateLocalAabb(void);
virtual void setLocalScaling(const btVector3 & scaling);
void createAabbTreeFromChildren(void);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

mass* btScalar(void);
choose upAxis index
void setConeUpIndex(int upIndex);
return btVector3(void);
virtual void setLocalScaling(const btVector3 & scaling);
return btVector3(void);
return btVector3(void);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void setLocalScaling(const btVector3 & scaling);
virtual void setMargin(btScalar margin);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void addPoint(const btVector3 & point, bool recalculateLocalAabb = true);
return getUnscaledPoints(void);
void optimizeConvexHull(void);
in case we receive negative scaling
virtual void setLocalScaling(const btVector3 & scaling);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void setLocalScaling(const btVector3 & scaling);
return sizeof(void);
lazy evaluation of local aabb btAssert(void);
virtual void setLocalScaling(const btVector3 & scaling);
void recalcLocalAabb(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

in case we receive negative scaling
virtual void setLocalScaling(const btVector3 & scaling);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void initialize(void);
void initialize2(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void setLocalScaling(const btVector3 & scaling);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

btVector3 aniDir(void);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void initialize(int heightStickWidth, int heightStickLength, const void* heightfieldData, btScalar heightScale, btScalar minHeight, btScalar maxHeight, int upAxis, PHY_ScalarType heightDataType, bool flipQuadEdges);
preferred constructors btHeightfieldTerrainShape(int heightStickWidth, int heightStickLength, const float* heightfieldData, btScalar minHeight, btScalar maxHeight, int upAxis, bool flipQuadEdges);
virtual void setLocalScaling(const btVector3 & scaling);
void buildAccelerator(int chunkSize = 16);
void clearAccelerator(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return TestPointAgainstAabb2(void);
bool load(const char* data, int size);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void build(btStridingMeshInterface * triangles, bool useQuantizedAabbCompression, const btVector3 & bvhAabbMin, const btVector3 & bvhAabbMax);
void refit(btStridingMeshInterface * triangles, const btVector3 & aabbMin, const btVector3 & aabbMax);
void refitPartial(btStridingMeshInterface * triangles, const btVector3 & aabbMin, const btVector3 & aabbMax);
void updateBvhNodes(btStridingMeshInterface * meshInterface, int firstNode, int endNode, int index);
static btOptimizedBvh* deSerializeInPlace(void* i_alignedDataBuffer, unsigned int i_dataBufferSize, bool i_swapEndian);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

progress
virtual bool initializePolyhedralFeatures(int shiftVerticesByMargin = 0);
virtual void setPolyhedralFeatures(btConvexPolyhedron & polyhedron);
lazy evaluation of local aabb btAssert(void);
virtual void setLocalScaling(const btVector3 & scaling);
void recalcLocalAabb(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void setLocalScaling(const btVector3 & scaling);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

bool initializeSDF(const char* sdfData, int sizeInBytes);
virtual void setLocalScaling(const btVector3 & scaling);
virtual void setMargin(btScalar margin);
bool queryPoint(const btVector3 & ptInSDF, btScalar & distOut, btVector3 & normal);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static btVector3* getUnitSpherePoints(int highres = 0);
bool buildHull(btScalar margin, int highres = 0);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

uniform scaling is not supported anymore
return getRadius(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void setLocalScaling(const btVector3 & scaling);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

brute force method to calculate aabb
void calculateAabbBruteForce(btVector3 & aabbMin, btVector3 & aabbMax);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void addVertex(const btVector3 & pt);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void processTriangle(btVector3 * triangle, int partId, int triangleIndex);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

just to be backwards compatible btTriangleIndexVertexArray(int numTriangles, int* triangleIndexBase, int triangleIndexStride, int numVertices, btScalar * vertexBase, int vertexStride);
virtual void getLockedVertexIndexBase(unsigned char** vertexbase, int& numverts, PHY_ScalarType & type, int& vertexStride, unsigned char** indexbase, int& indexstride, int& numfaces, PHY_ScalarType & indicestype, int subpart = 0);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void getLockedMaterialBase(unsigned char** materialBase, int& numMaterials, PHY_ScalarType & materialType, int& materialStride, unsigned char** triangleMaterialBase, int& numTriangles, int& triangleMaterialStride, PHY_ScalarType & triangleType, int subpart = 0);
virtual void getLockedReadOnlyMaterialBase(const unsigned char** materialBase, int& numMaterials, PHY_ScalarType & materialType, int& materialStride, const unsigned char** triangleMaterialBase, int& numTriangles, int& triangleMaterialStride, PHY_ScalarType & triangleType, int subpart = 0);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void deSerialize(struct btTriangleInfoMapData& data);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void addTriangle(const btVector3 & vertex0, const btVector3 & vertex1, const btVector3 & vertex2, bool removeDuplicateVertices = false);
void addTriangleIndices(int index1, int index2, int index3);
virtual void preallocateVertices(int numverts);
virtual void preallocateIndices(int numindices);
use addTriangle instead
int findOrAddVertex(const btVector3 & vertex, bool removeDuplicateVertices);
use addTriangle instead
void addIndex(int index);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return localGetSupportingVertex(void);
void recalcLocalAabb(void);
virtual void setLocalScaling(const btVector3 & scaling);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void setLocalScaling(const btVector3 & scaling);
virtual void setMargin(btScalar margin);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return test_cross_edge_box(void);
return test_cross_edge_box(void);
return test_cross_edge_box(void);
static const btVector3 vepsi(void);
return has_collision(void);
return has_collision(void);
extends get_center_extend(void);
const btVector3 v1(p1 - center);
const btVector3 v2(p2 - center);
const btVector3 v3(p3 - center);
First axis
btVector3 diff(v2 - v1);
Test With X axis TEST_CROSS_EDGE_BOX_X_AXIS_MCR(void);
Test With Y axis TEST_CROSS_EDGE_BOX_Y_AXIS_MCR(void);
Test With Z axis TEST_CROSS_EDGE_BOX_Z_AXIS_MCR(void);
Test With X axis TEST_CROSS_EDGE_BOX_X_AXIS_MCR(void);
Test With Y axis TEST_CROSS_EDGE_BOX_Y_AXIS_MCR(void);
Test With Z axis TEST_CROSS_EDGE_BOX_Z_AXIS_MCR(void);
Test With X axis TEST_CROSS_EDGE_BOX_X_AXIS_MCR(void);
Test With Y axis TEST_CROSS_EDGE_BOX_Y_AXIS_MCR(void);
Test With Z axis TEST_CROSS_EDGE_BOX_Z_AXIS_MCR(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

RETURN TO FIRST  point bt_plane_clip_polygon_collect(polygon_points[polygon_point_count - 1]);
RETURN TO FIRST  point0 bt_plane_clip_polygon_collect(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

MyCallback cb(void);
new btBU_Simplex1to4(void);
new btCompoundFromGimpactShape(void);
MyInternalTriangleIndexCallback cb(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void merge_contacts(const btContactArray & contacts, bool normal_contact_average = true);
void merge_contacts_unique(const btContactArray & contacts);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

btVector3 vec_sum(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

size_t allocate_from_free_nodes(size_t num_elements);
size_t allocate_from_pool(size_t num_elements);
void init_pool(size_t element_size, size_t element_count);
void end_pool(void);
bool freeMemory(void* pointer);
bool failback_free(void* pointer);
bool freeMemory(void* pointer);
void btPoolFree(void* ptr);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int _sort_and_calc_splitting_index(GIM_BVH_DATA_ARRAY & primitive_boxes, int startIndex, int endIndex, int splitAxis);
int _calc_splitting_axis(GIM_BVH_DATA_ARRAY & primitive_boxes, int startIndex, int endIndex);
void _build_sub_tree(GIM_BVH_DATA_ARRAY & primitive_boxes, int startIndex, int endIndex);
void build_tree(GIM_BVH_DATA_ARRAY & primitive_boxes);
stackless refit
void refit(void);
this rebuild the entire set
void buildSet(void);
return boxQuery(void);
ifdef TRI_COLLISION_PROFILING
static float getAverageTreeCollisionTime(void);
TRI_COLLISION_PROFILING

static void find_collision(btGImpactBvh * boxset1, const btTransform & trans1, btGImpactBvh * boxset2, const btTransform & trans2, btPairSet & collision_pairs);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void addContactPoint(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btVector3 & point, const btVector3 & normal, btScalar distance);
void collide_gjk_triangles(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btGImpactMeshShapePart * shape0, const btGImpactMeshShapePart * shape1, const int* pairs, int pair_count);
void collide_sat_triangles(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btGImpactMeshShapePart * shape0, const btGImpactMeshShapePart * shape1, const int* pairs, int pair_count);
void shape_vs_shape_collision(const btCollisionObjectWrapper * body0, const btCollisionObjectWrapper * body1, const btCollisionShape * shape0, const btCollisionShape * shape1);
void convex_vs_convex_collision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btCollisionShape * shape0, const btCollisionShape * shape1);
void gimpact_vs_gimpact_find_pairs(const btTransform & trans0, const btTransform & trans1, const btGImpactShapeInterface * shape0, const btGImpactShapeInterface * shape1, btPairSet & pairset);
void gimpact_vs_shape_find_pairs(const btTransform & trans0, const btTransform & trans1, const btGImpactShapeInterface * shape0, const btCollisionShape * shape1, btAlignedObjectArray<int>&collided_primitives);
void gimpacttrimeshpart_vs_plane_collision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btGImpactMeshShapePart * shape0, const btStaticPlaneShape * shape1, bool swapped);
virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
Use this function for register the algorithm externally
static void registerAlgorithm(btCollisionDispatcher * dispatcher);
Gets the average time in miliseconds of tree collisions
static float getAverageTreeCollisionTime(void);
Gets the average time in miliseconds of triangle collisions
static float getAverageTriangleCollisionTime(void);
void gimpact_vs_gimpact(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btGImpactShapeInterface * shape0, const btGImpactShapeInterface * shape1);
void gimpact_vs_shape(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btGImpactShapeInterface * shape0, const btCollisionShape * shape1, bool swapped);
void gimpact_vs_compoundshape(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btGImpactShapeInterface * shape0, const btCompoundShape * shape1, bool swapped);
void gimpact_vs_concave(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btGImpactShapeInterface * shape0, const btConcaveShape * shape1, bool swapped);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return btVector3(source_inertia[0] + ix, source_inertia[1] + iy, source_inertia[2] + iz);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int _sort_and_calc_splitting_index(GIM_BVH_DATA_ARRAY & primitive_boxes, int startIndex, int endIndex, int splitAxis);
int _calc_splitting_axis(GIM_BVH_DATA_ARRAY & primitive_boxes, int startIndex, int endIndex);
void _build_sub_tree(GIM_BVH_DATA_ARRAY & primitive_boxes, int startIndex, int endIndex);
void build_tree(GIM_BVH_DATA_ARRAY & primitive_boxes);
stackless refit
void refit(void);
this rebuild the entire set
void buildSet(void);
return boxQuery(void);
ifdef TRI_COLLISION_PROFILING
static float getAverageTreeCollisionTime(void);
TRI_COLLISION_PROFILING

static void find_collision(const btGImpactQuantizedBvh * boxset1, const btTransform & trans1, const btGImpactQuantizedBvh * boxset2, const btTransform & trans2, btPairSet & collision_pairs);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

enlarge the AABB to avoid division by zero when initializing the quantization values
btVector3 clampValue(void);
btVector3 clampedPoint(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

classify points that are closer
void merge_points(const btVector4 & plane, btScalar margin, const btVector3 * points, int point_count);
Test if triangles could collide
bool overlap_test_conservative(const btPrimitiveTriangle & other);
int clip_triangle(btPrimitiveTriangle & other, btVector3 * clipped_points);
bool find_triangle_collision_clip_method(btPrimitiveTriangle & other, GIM_TRIANGLE_CONTACT & contacts);
btAABB trianglebox(void);
bool overlap_test_conservative(const btTriangleShapeEx & other);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return resizeData(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

plane VEC_DIFF(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return test_cross_edge_box(void);
return test_cross_edge_box(void);
return test_cross_edge_box(void);
static const btVector3 vepsi(void);
return has_collision(void);
extends get_center_extend(void);
const btVector3 v1(p1 - center);
const btVector3 v2(p2 - center);
const btVector3 v3(p3 - center);
First axis
btVector3 diff(v2 - v1);
Test With X axis TEST_CROSS_EDGE_BOX_X_AXIS_MCR(void);
Test With Y axis TEST_CROSS_EDGE_BOX_Y_AXIS_MCR(void);
Test With Z axis TEST_CROSS_EDGE_BOX_Z_AXIS_MCR(void);
Test With X axis TEST_CROSS_EDGE_BOX_X_AXIS_MCR(void);
Test With Y axis TEST_CROSS_EDGE_BOX_Y_AXIS_MCR(void);
Test With Z axis TEST_CROSS_EDGE_BOX_Z_AXIS_MCR(void);
Test With X axis TEST_CROSS_EDGE_BOX_X_AXIS_MCR(void);
Test With Y axis TEST_CROSS_EDGE_BOX_Y_AXIS_MCR(void);
Test With Z axis TEST_CROSS_EDGE_BOX_Z_AXIS_MCR(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

GUINT _sort_and_calc_splitting_index(gim_array<GIM_AABB_DATA>&primitive_boxes, GUINT startIndex, GUINT endIndex, GUINT splitAxis);
GUINT _calc_splitting_axis(gim_array<GIM_AABB_DATA>&primitive_boxes, GUINT startIndex, GUINT endIndex);
void _build_sub_tree(gim_array<GIM_AABB_DATA>&primitive_boxes, GUINT startIndex, GUINT endIndex);
void build_tree(gim_array<GIM_AABB_DATA>&primitive_boxes);
return boxQuery(void);
perform primitive vs box collision retrieve_node0_triangle(void);
perform primitive vs box collision retrieve_node1_triangle(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return DISTANCE_PLANE_POINT(void);
RETURN TO FIRST  point PLANE_CLIP_POLYGON_COLLECT(polygon_points[polygon_point_count - 1]);
RETURN TO FIRST  point PLANE_CLIP_POLYGON_COLLECT(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

btVector3 vec_sum(void);
void merge_contacts(const gim_contact_array & contacts, bool normal_contact_average = true);
void merge_contacts_unique(const gim_contact_array & contacts);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

repeated key btAssert(m_hash_table[index] == nodekey);
Clear memory _clear_table_memory(void);
Alloc the data _reserve_table_memory(void);
Invalidate keys and rehash _rehash(void);
rehashing _resize_table(m_table_size + 1);
Insert anyway _insert_unsorted(void);
Insert anyway _insert_unsorted(void);
return sort(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

typedef void gim_free_function(void* ptr);
void gim_set_alloc_handler(gim_alloc_function * fn);
void gim_set_alloca_handler(gim_alloca_function * fn);
void gim_set_realloc_handler(gim_realloc_function * fn);
void gim_set_free_handler(gim_free_function * fn);
void gim_free(void* ptr);
else memcpy(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return GIM_AABB(void);
test box collisioin
GIM_AABB boxu(void);
GIM_AABB boxv(void);
do hard test
return collide_triangle_hard_test(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void computeClosestPoints(const btTransform & transA, const btTransform & transB, struct btPointCollector& pointCollector);
virtual bool calcTimeOfImpact(const btTransform & fromA, const btTransform & toA, const btTransform & fromB, const btTransform & toB, CastResult & result);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

cast a convex against another convex object
virtual bool calcTimeOfImpact(const btTransform & fromA, const btTransform & toA, const btTransform & fromB, const btTransform & toB, CastResult & result);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static int StackSizeRequirement(void);
static bool Distance(const btConvexShape * shape0, const btTransform & wtrs0, const btConvexShape * shape1, const btTransform & wtrs1, const btVector3 & guess, sResults & results);
static bool Penetration(const btConvexShape * shape0, const btTransform & wtrs0, const btConvexShape * shape1, const btTransform & wtrs1, const btVector3 & guess, sResults & results, bool usemargins = true);
ifndef __SPU__
static btScalar SignedDistance(const btVector3 & position, btScalar margin, const btConvexShape * shape, const btTransform & wtrs, sResults & results);
static bool SignedDistance(const btConvexShape * shape0, const btTransform & wtrs0, const btConvexShape * shape1, const btTransform & wtrs1, const btVector3 & guess, sResults & results);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

bool calcPenDepth(btSimplexSolverInterface & simplexSolver, const btConvexShape * pConvexA, const btConvexShape * pConvexB, const btTransform & transformA, const btTransform & transformB, btVector3 & v, btVector3 & wWitnessOnA, btVector3 & wWitnessOnB, class btIDebugDraw* debugDraw);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void getClosestPoints(const ClosestPointInput & input, Result & output, class btIDebugDraw* debugDraw, bool swapResults = false);
void getClosestPointsNonVirtual(const ClosestPointInput & input, Result & output, class btIDebugDraw* debugDraw);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static btVector3* getPenetrationDirections(void);
virtual bool calcPenDepth(btSimplexSolverInterface & simplexSolver, const btConvexShape * convexA, const btConvexShape * convexB, const btTransform & transA, const btTransform & transB, btVector3 & v, btVector3 & pa, btVector3 & pb, class btIDebugDraw* debugDraw);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return btMprVec3Dot(void);
vertex 0 is center of portal btMprSimplexSetSize(void);
get next support point btMprSupport(void);
ifdef MPR_AVERAGE_CONTACT_POSITIONS btMprVec3Copy(void);
else btMprVec3Copy(void);
return btMprVec3Len2(void);
direction of segment btMprVec3Sub2(void);
precompute vector from P to x0 btMprVec3Sub2(void);
f* btMprVec3Dot(void);
recycling variables btMprVec3Scale(void);
compute portal direction and obtain next support point btPortalDir(void);
Penetration info btFindPenetr(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

sort cached points so most isolated points come first
int sortCachedPoints(const btManifoldPoint & pt);
int findContactPoint(const btManifoldPoint * unUsed, int numUnused, const btManifoldPoint & pt);
void clearUserCache(btManifoldPoint & pt);
ifdef DEBUG_PERSISTENCY
void DebugPersistency(void);
int addManifoldPoint(const btManifoldPoint & newPoint, bool isPredictive = false);
else clearUserCache(void);
and reject points that exceed the collision margin
void refreshContactPoints(const btTransform & trA, const btTransform & trB);
void deSerialize(const struct btPersistentManifoldDoubleData* manifoldDataPtr);
void deSerialize(const struct btPersistentManifoldFloatData* manifoldDataPtr);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static void clipHullAgainstHull(const btVector3 & separatingNormal1, const btConvexPolyhedron & hullA, const btConvexPolyhedron & hullB, const btTransform & transA, const btTransform & transB, const btScalar minDist, btScalar maxDist, btVertexArray & worldVertsB1, btVertexArray & worldVertsB2, btDiscreteCollisionDetectorInterface::Result & resultOut);
static void clipFaceAgainstHull(const btVector3 & separatingNormal, const btConvexPolyhedron & hullA, const btTransform & transA, btVertexArray & worldVertsB1, btVertexArray & worldVertsB2, const btScalar minDist, btScalar maxDist, btDiscreteCollisionDetectorInterface::Result & resultOut);
static bool findSeparatingAxis(const btConvexPolyhedron & hullA, const btConvexPolyhedron & hullB, const btTransform & transA, const btTransform & transB, btVector3 & sep, btDiscreteCollisionDetectorInterface::Result & resultOut);
the clipFace method is used internally
static void clipFace(const btVertexArray & pVtxIn, btVertexArray & ppVtxOut, const btVector3 & planeNormalWS, btScalar planeEqWS);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void processTriangle(btVector3 * triangle, int partId, int triangleIndex);
virtual void processTriangle(btVector3 * triangle, int partId, int triangleIndex);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual bool calcTimeOfImpact(const btTransform & fromA, const btTransform & toA, const btTransform & fromB, const btTransform & toB, CastResult & result);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void removeVertex(int index);
void reduceVertices(const btUsageBitfield & usedVerts);
bool updateClosestVectorAndPoints(void);
bool closestPtPointTetrahedron(const btVector3 & p, const btVector3 & a, const btVector3 & b, const btVector3 & c, const btVector3 & d, btSubSimplexClosestResult & finalResult);
int pointOutsideOfPlane(const btVector3 & p, const btVector3 & a, const btVector3 & b, const btVector3 & c, const btVector3 & d);
bool closestPtPointTriangle(const btVector3 & p, const btVector3 & a, const btVector3 & b, const btVector3 & c, btSubSimplexClosestResult & result);
void reset(void);
void addVertex(const btVector3 & w, const btVector3 & p, const btVector3 & q);
bool closest(btVector3 & v);
btScalar maxVertex(void);
bool inSimplex(const btVector3 & w);
void backup_closest(btVector3 & v);
void compute_points(btVector3 & p1, btVector3 & p2);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static btVector3* getUpAxisDirections(void);
btVector3 computeReflectionDirection(const btVector3 & direction, const btVector3 & normal);
btVector3 parallelComponent(const btVector3 & direction, const btVector3 & normal);
btVector3 perpindicularComponent(const btVector3 & direction, const btVector3 & normal);
bool recoverFromPenetration(btCollisionWorld * collisionWorld);
void stepUp(btCollisionWorld * collisionWorld);
void stepForwardAndStrafe(btCollisionWorld * collisionWorld, const btVector3 & walkMove);
void stepDown(btCollisionWorld * collisionWorld, btScalar dt);
virtual bool needsCollision(const btCollisionObject * body0, const btCollisionObject * body1);
void setUpVector(const btVector3 & up);
btActionInterface interface
void debugDraw(btIDebugDraw * debugDrawer);
void setUp(const btVector3 & up);
virtual void setWalkDirection(const btVector3 & walkDirection);
virtual void setVelocityForTimeInterval(const btVector3 & velocity, btScalar timeInterval);
virtual void setAngularVelocity(const btVector3 & velocity);
virtual void setLinearVelocity(const btVector3 & velocity);
void reset(btCollisionWorld * collisionWorld);
void warp(const btVector3 & origin);
void preStep(btCollisionWorld * collisionWorld);
void playerStep(btCollisionWorld * collisionWorld, btScalar dt);
void setStepHeight(btScalar h);
void setFallSpeed(btScalar fallSpeed);
void setJumpSpeed(btScalar jumpSpeed);
void setMaxJumpHeight(btScalar maxJumpHeight);
void setGravity(const btVector3 & gravity);
void setMaxSlope(btScalar slopeRadians);
void setMaxPenetrationDepth(btScalar d);
btPairCachingGhostObject* getGhostObject(void);
void setUpInterpolate(bool value);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void setup(btConstraintArray * constraints, const btAlignedObjectArray<btSolverBody>&bodies, BatchingMethod batchingMethod, int minBatchSize, int maxBatchSize, btAlignedObjectArray<char>*scratchMemory);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void init(void);
void computeConeLimitInfo(const btQuaternion & qCone, // in btScalar& swingAngle, btVector3& vSwingAxis, btScalar& swingLimit);
	all outs

	void computeTwistLimitInfo(const btQuaternion & qTwist, // in btScalar& twistAngle, btVector3& vTwistAxis);
		virtual void buildJacobian(void);
virtual void getInfo1(btConstraintInfo1 * info);
void getInfo1NonVirtual(btConstraintInfo1 * info);
virtual void getInfo2(btConstraintInfo2 * info);
void getInfo2NonVirtual(btConstraintInfo2 * info, const btTransform & transA, const btTransform & transB, const btMatrix3x3 & invInertiaWorldA, const btMatrix3x3 & invInertiaWorldB);
virtual void solveConstraintObsolete(btSolverBody & bodyA, btSolverBody & bodyB, btScalar timeStep);
void updateRHS(btScalar timeStep);
void calcAngleInfo(void);
void calcAngleInfo2(const btTransform & transA, const btTransform & transB, const btMatrix3x3 & invInertiaWorldA, const btMatrix3x3 & invInertiaWorldB);
void setMotorTarget(const btQuaternion & q);
but q is the desired rotation of frameA wrt frameB in constraint space
void setMotorTargetInConstraintSpace(const btQuaternion & q);
virtual void setParam(int num, btScalar value, int axis = -1);
virtual void setFrames(const btTransform & frameA, const btTransform & frameB);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void setContactManifold(btPersistentManifold * contactManifold);
virtual void getInfo1(btConstraintInfo1 * info);
virtual void getInfo2(btConstraintInfo2 * info);
obsolete methods
virtual void buildJacobian(void);
very basic collision resolution without friction
btScalar resolveSingleCollision(btRigidBody * body1, class btCollisionObject* colObj2, const btVector3 & contactPositionWorld, const btVector3 & contactNormalOnB, const struct btContactSolverInfo& solverInfo, btScalar distance);
resolveSingleBilateral is an obsolete methods used for vehicle friction between two dynamic objects
void resolveSingleBilateral(btRigidBody & body1, const btVector3 & pos1, btRigidBody & body2, const btVector3 & pos2, btScalar distance, const btVector3 & normal, btScalar & impulse, btScalar timeStep);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

t use them directly
virtual void getInfo1(btConstraintInfo1 * info);
t use them directly
virtual void getInfo2(btConstraintInfo2 * info);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int testLimitValue(btScalar test_value);
apply the correction impulses for two bodies
btScalar solveAngularLimits(btScalar timeStep, btVector3 & axis, btScalar jacDiagABInv, btRigidBody * body0, btRigidBody * body1);
int testLimitValue(int limitIndex, btScalar test_value);
btScalar solveLinearAxis(btScalar timeStep, btScalar jacDiagABInv, btRigidBody & body1, const btVector3 & pointInA, btRigidBody & body2, const btVector3 & pointInB, int limit_index, const btVector3 & axis_normal_on_a, const btVector3 & anchorPos);
int setAngularLimits(btConstraintInfo2 * info, int row_offset, const btTransform & transA, const btTransform & transB, const btVector3 & linVelA, const btVector3 & linVelB, const btVector3 & angVelA, const btVector3 & angVelB);
int setLinearLimits(btConstraintInfo2 * info, int row, const btTransform & transA, const btTransform & transB, const btVector3 & linVelA, const btVector3 & linVelB, const btVector3 & angVelA, const btVector3 & angVelB);
void buildLinearJacobian(btJacobianEntry & jacLinear, const btVector3 & normalWorld, const btVector3 & pivotAInW, const btVector3 & pivotBInW);
void buildAngularJacobian(btJacobianEntry & jacAngular, const btVector3 & jointAxisW);
tests linear limits
void calculateLinearInfo(void);
void calculateAngleInfo(void);
void calculateTransforms(const btTransform & transA, const btTransform & transB);
void calculateTransforms(void);
and also calculates angle differences and axis
virtual void buildJacobian(void);
virtual void getInfo1(btConstraintInfo1 * info);
void getInfo1NonVirtual(btConstraintInfo1 * info);
virtual void getInfo2(btConstraintInfo2 * info);
void getInfo2NonVirtual(btConstraintInfo2 * info, const btTransform & transA, const btTransform & transB, const btVector3 & linVelA, const btVector3 & linVelB, const btVector3 & angVelA, const btVector3 & angVelB);
void updateRHS(btScalar timeStep);
void setFrames(const btTransform & frameA, const btTransform & frameB);
bool testAngularLimitMotor(int axis_index);
virtual void calcAnchorPos(void);
overridable

int get_limit_motor_info2(btRotationalLimitMotor * limot, const btTransform & transA, const btTransform & transB, const btVector3 & linVelA, const btVector3 & linVelB, const btVector3 & angVelA, const btVector3 & angVelB, btConstraintInfo2 * info, int row, btVector3 & ax1, int rotational, int rotAllowed = false);
virtual void setParam(int num, btScalar value, int axis = -1);
void setAxis(const btVector3 & axis1, const btVector3 & axis2);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void testLimitValue(btScalar test_value);
void testLimitValue(int limitIndex, btScalar test_value);
int setAngularLimits(btConstraintInfo2 * info, int row_offset, const btTransform & transA, const btTransform & transB, const btVector3 & linVelA, const btVector3 & linVelB, const btVector3 & angVelA, const btVector3 & angVelB);
int setLinearLimits(btConstraintInfo2 * info, int row, const btTransform & transA, const btTransform & transB, const btVector3 & linVelA, const btVector3 & linVelB, const btVector3 & angVelA, const btVector3 & angVelB);
void calculateLinearInfo(void);
void calculateAngleInfo(void);
void testAngularLimitMotor(int axis_index);
void calculateJacobi(btRotationalLimitMotor2 * limot, const btTransform & transA, const btTransform & transB, btConstraintInfo2 * info, int srow, btVector3 & ax1, int rotational, int rotAllowed);
int get_limit_motor_info2(btRotationalLimitMotor2 * limot, const btTransform & transA, const btTransform & transB, const btVector3 & linVelA, const btVector3 & linVelB, const btVector3 & angVelA, const btVector3 & angVelB, btConstraintInfo2 * info, int row, btVector3 & ax1, int rotational, int rotAllowed = false);
virtual void getInfo1(btConstraintInfo1 * info);
virtual void getInfo2(btConstraintInfo2 * info);
void calculateTransforms(const btTransform & transA, const btTransform & transB);
void calculateTransforms(void);
void setFrames(const btTransform & frameA, const btTransform & frameB);
void setAxis(const btVector3 & axis1, const btVector3 & axis2);
void setBounce(int index, btScalar bounce);
void enableMotor(int index, bool onOff);
void setServo(int index, bool onOff);
void setTargetVelocity(int index, btScalar velocity);
void setServoTarget(int index, btScalar target);
void setMaxMotorForce(int index, btScalar force);
void enableSpring(int index, bool onOff);
void setStiffness(int index, btScalar stiffness, bool limitIfNeeded = true);
if limitIfNeeded is true the system will automatically limit the stiffness in necessary situations where otherwise the spring would move unrealistically too widely
void setDamping(int index, btScalar damping, bool limitIfNeeded = true);
if limitIfNeeded is true the system will automatically limit the damping in necessary situations where otherwise the spring would blow up
void setEquilibriumPoint(void);
orientation as an equilibrium point for all DOF
void setEquilibriumPoint(int index);
orientation as an equilibrium point for given DOF
void setEquilibriumPoint(int index, btScalar val);
virtual void setParam(int num, btScalar value, int axis = -1);
static btScalar btGetMatrixElem(const btMatrix3x3 & mat, int index);
static bool matrixToEulerXYZ(const btMatrix3x3 & mat, btVector3 & xyz);
static bool matrixToEulerXZY(const btMatrix3x3 & mat, btVector3 & xyz);
static bool matrixToEulerYXZ(const btMatrix3x3 & mat, btVector3 & xyz);
static bool matrixToEulerYZX(const btMatrix3x3 & mat, btVector3 & xyz);
static bool matrixToEulerZXY(const btMatrix3x3 & mat, btVector3 & xyz);
static bool matrixToEulerZYX(const btMatrix3x3 & mat, btVector3 & xyz);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void init(void);
void internalUpdateSprings(btConstraintInfo2 * info);
void enableSpring(int index, bool onOff);
void setStiffness(int index, btScalar stiffness);
void setDamping(int index, btScalar damping);
void setEquilibriumPoint(void);
orientation as an equilibrium point for all DOF
void setEquilibriumPoint(int index);
orientation as an equilibrium point for given DOF
void setEquilibriumPoint(int index, btScalar val);
virtual void setAxis(const btVector3 & axis1, const btVector3 & axis2);
virtual void getInfo2(btConstraintInfo2 * info);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

axis1 must be orthogonal to axis2 btHinge2Constraint(btRigidBody & rbA, btRigidBody & rbB, btVector3 & anchor, btVector3 & axis1, btVector3 & axis2);
return getAngle(void);
return getAngle(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void buildJacobian(void);
virtual void getInfo1(btConstraintInfo1 * info);
void getInfo1NonVirtual(btConstraintInfo1 * info);
virtual void getInfo2(btConstraintInfo2 * info);
void getInfo2NonVirtual(btConstraintInfo2 * info, const btTransform & transA, const btTransform & transB, const btVector3 & angVelA, const btVector3 & angVelB);
void getInfo2Internal(btConstraintInfo2 * info, const btTransform & transA, const btTransform & transB, const btVector3 & angVelA, const btVector3 & angVelB);
void getInfo2InternalUsingFrameOffset(btConstraintInfo2 * info, const btTransform & transA, const btTransform & transB, const btVector3 & angVelA, const btVector3 & angVelB);
void updateRHS(btScalar timeStep);
void setFrames(const btTransform & frameA, const btTransform & frameB);
void setMotorTarget(const btQuaternion & qAinB, btScalar dt);
void setMotorTarget(btScalar targetAngle, btScalar dt);
btScalar getHingeAngle(void);
btScalar getHingeAngle(const btTransform & transA, const btTransform & transB);
void testLimit(const btTransform & transA, const btTransform & transB);
virtual void setParam(int num, btScalar value, int axis = -1);
btScalar getAccumulatedHingeAngle(void);
void setAccumulatedHingeAngle(btScalar accAngle);
virtual void getInfo1(btConstraintInfo1 * info);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual btScalar solveGroupCacheFriendlyFinish(btCollisionObject * *bodies, int numBodies, const btContactSolverInfo & infoGlobal);
virtual btScalar solveSingleIteration(int iteration, btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);
virtual btScalar solveGroupCacheFriendlySetup(btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void buildJacobian(void);
virtual void getInfo1(btConstraintInfo1 * info);
void getInfo1NonVirtual(btConstraintInfo1 * info);
virtual void getInfo2(btConstraintInfo2 * info);
void getInfo2NonVirtual(btConstraintInfo2 * info, const btTransform & body0_trans, const btTransform & body1_trans);
void updateRHS(btScalar timeStep);
virtual void setParam(int num, btScalar value, int axis = -1);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

used to check if SOLVER_SIMD flag has been changed
void setupSolverFunctions(bool useSimd);
void setupFrictionConstraint(btSolverConstraint & solverConstraint, const btVector3 & normalAxis, int solverBodyIdA, int solverBodyIdB, btManifoldPoint & cp, const btVector3 & rel_pos1, const btVector3 & rel_pos2, btCollisionObject * colObj0, btCollisionObject * colObj1, btScalar relaxation, const btContactSolverInfo & infoGlobal, btScalar desiredVelocity = 0., btScalar cfmSlip = 0.);
void setupTorsionalFrictionConstraint(btSolverConstraint & solverConstraint, const btVector3 & normalAxis, int solverBodyIdA, int solverBodyIdB, btManifoldPoint & cp, btScalar combinedTorsionalFriction, const btVector3 & rel_pos1, const btVector3 & rel_pos2, btCollisionObject * colObj0, btCollisionObject * colObj1, btScalar relaxation, btScalar desiredVelocity = 0., btScalar cfmSlip = 0.);
btSolverConstraint& addFrictionConstraint(const btVector3 & normalAxis, int solverBodyIdA, int solverBodyIdB, int frictionIndex, btManifoldPoint & cp, const btVector3 & rel_pos1, const btVector3 & rel_pos2, btCollisionObject * colObj0, btCollisionObject * colObj1, btScalar relaxation, const btContactSolverInfo & infoGlobal, btScalar desiredVelocity = 0., btScalar cfmSlip = 0.);
btSolverConstraint& addTorsionalFrictionConstraint(const btVector3 & normalAxis, int solverBodyIdA, int solverBodyIdB, int frictionIndex, btManifoldPoint & cp, btScalar torsionalFriction, const btVector3 & rel_pos1, const btVector3 & rel_pos2, btCollisionObject * colObj0, btCollisionObject * colObj1, btScalar relaxation, btScalar desiredVelocity = 0, btScalar cfmSlip = 0.f);
void setupContactConstraint(btSolverConstraint & solverConstraint, int solverBodyIdA, int solverBodyIdB, btManifoldPoint & cp, const btContactSolverInfo & infoGlobal, btScalar & relaxation, const btVector3 & rel_pos1, const btVector3 & rel_pos2);
static void applyAnisotropicFriction(btCollisionObject * colObj, btVector3 & frictionDirection, int frictionMode);
void setFrictionConstraintImpulse(btSolverConstraint & solverConstraint, int solverBodyIdA, int solverBodyIdB, btManifoldPoint & cp, const btContactSolverInfo & infoGlobal);
btScalar restitutionCurve(btScalar rel_vel, btScalar restitution, btScalar velocityThreshold);
virtual void convertContacts(btPersistentManifold * *manifoldPtr, int numManifolds, const btContactSolverInfo & infoGlobal);
void convertContact(btPersistentManifold * manifold, const btContactSolverInfo & infoGlobal);
virtual void convertJoints(btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal);
void convertJoint(btSolverConstraint * currentConstraintRow, btTypedConstraint * constraint, const btTypedConstraint::btConstraintInfo1 & info1, int solverBodyIdA, int solverBodyIdB, const btContactSolverInfo & infoGlobal);
virtual void convertBodies(btCollisionObject * *bodies, int numBodies, const btContactSolverInfo & infoGlobal);
return m_resolveSplitPenetrationImpulse(void);
return m_resolveSplitPenetrationImpulse(void);
internal method
int getOrInitSolverBody(btCollisionObject & body, btScalar timeStep);
void initSolverBody(btSolverBody * solverBody, btCollisionObject * collisionObject, btScalar timeStep);
btScalar resolveSingleConstraintRowGeneric(btSolverBody & bodyA, btSolverBody & bodyB, const btSolverConstraint & contactConstraint);
btScalar resolveSingleConstraintRowGenericSIMD(btSolverBody & bodyA, btSolverBody & bodyB, const btSolverConstraint & contactConstraint);
btScalar resolveSingleConstraintRowLowerLimit(btSolverBody & bodyA, btSolverBody & bodyB, const btSolverConstraint & contactConstraint);
btScalar resolveSingleConstraintRowLowerLimitSIMD(btSolverBody & bodyA, btSolverBody & bodyB, const btSolverConstraint & contactConstraint);
return m_resolveSplitPenetrationImpulse(void);
void writeBackContacts(int iBegin, int iEnd, const btContactSolverInfo & infoGlobal);
void writeBackJoints(int iBegin, int iEnd, const btContactSolverInfo & infoGlobal);
void writeBackBodies(int iBegin, int iEnd, const btContactSolverInfo & infoGlobal);
virtual void solveGroupCacheFriendlySplitImpulseIterations(btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);
virtual btScalar solveGroupCacheFriendlyFinish(btCollisionObject * *bodies, int numBodies, const btContactSolverInfo & infoGlobal);
virtual btScalar solveSingleIteration(int iteration, btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);
virtual btScalar solveGroupCacheFriendlySetup(btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);
virtual btScalar solveGroupCacheFriendlyIterations(btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);
virtual btScalar solveGroup(btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifold, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & info, btIDebugDraw * debugDrawer, btDispatcher * dispatcher);
clear internal cached data and reset random seed
virtual void reset(void);
unsigned long btRand2(void);
int btRandInt2(int n);
SSE2 or SSE4
btSingleConstraintRowSolver getScalarConstraintRowSolverGeneric(void);
btSingleConstraintRowSolver getSSE2ConstraintRowSolverGeneric(void);
btSingleConstraintRowSolver getSSE4_1ConstraintRowSolverGeneric(void);
SSE2 or SSE4
btSingleConstraintRowSolver getScalarConstraintRowSolverLowerLimit(void);
btSingleConstraintRowSolver getSSE2ConstraintRowSolverLowerLimit(void);
btSingleConstraintRowSolver getSSE4_1ConstraintRowSolverLowerLimit(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void internalInitMultipleJoints(btTypedConstraint * *constraints, int iBegin, int iEnd);
void internalConvertMultipleJoints(const btAlignedObjectArray<JointParams>&jointParamsArray, btTypedConstraint * *constraints, int iBegin, int iEnd, const btContactSolverInfo & infoGlobal);
virtual void randomizeConstraintOrdering(int iteration, int numIterations);
virtual btScalar resolveAllJointConstraints(int iteration);
virtual btScalar resolveAllContactConstraints(void);
virtual btScalar resolveAllContactFrictionConstraints(void);
virtual btScalar resolveAllContactConstraintsInterleaved(void);
virtual btScalar resolveAllRollingFrictionConstraints(void);
virtual void setupBatchedContactConstraints(void);
virtual void setupBatchedJointConstraints(void);
int getOrInitSolverBodyThreadsafe(btCollisionObject & body, btScalar timeStep);
void allocAllContactConstraints(btPersistentManifold * *manifoldPtr, int numManifolds, const btContactSolverInfo & infoGlobal);
void setupAllContactConstraints(const btContactSolverInfo & infoGlobal);
void randomizeBatchedConstraintOrdering(btBatchedConstraints * batchedConstraints);
btScalar resolveMultipleJointConstraints(const btAlignedObjectArray<int>&consIndices, int batchBegin, int batchEnd, int iteration);
btScalar resolveMultipleContactConstraints(const btAlignedObjectArray<int>&consIndices, int batchBegin, int batchEnd);
btScalar resolveMultipleContactSplitPenetrationImpulseConstraints(const btAlignedObjectArray<int>&consIndices, int batchBegin, int batchEnd);
btScalar resolveMultipleContactFrictionConstraints(const btAlignedObjectArray<int>&consIndices, int batchBegin, int batchEnd);
btScalar resolveMultipleContactRollingFrictionConstraints(const btAlignedObjectArray<int>&consIndices, int batchBegin, int batchEnd);
btScalar resolveMultipleContactConstraintsInterleaved(const btAlignedObjectArray<int>&contactIndices, int batchBegin, int batchEnd);
void internalCollectContactManifoldCachedInfo(btContactManifoldCachedInfo * cachedInfoArray, btPersistentManifold * *manifoldPtr, int numManifolds, const btContactSolverInfo & infoGlobal);
void internalAllocContactConstraints(const btContactManifoldCachedInfo * cachedInfoArray, int numManifolds);
void internalSetupContactConstraints(int iContactConstraint, const btContactSolverInfo & infoGlobal);
void internalConvertBodies(btCollisionObject * *bodies, int iBegin, int iEnd, const btContactSolverInfo & infoGlobal);
void internalWriteBackContacts(int iBegin, int iEnd, const btContactSolverInfo & infoGlobal);
void internalWriteBackJoints(int iBegin, int iEnd, const btContactSolverInfo & infoGlobal);
void internalWriteBackBodies(int iBegin, int iEnd, const btContactSolverInfo & infoGlobal);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void initParams(void);
constructors btSliderConstraint(btRigidBody & rbA, btRigidBody & rbB, const btTransform & frameInA, const btTransform & frameInB, bool useLinearReferenceFrameA);
overrides

virtual void getInfo1(btConstraintInfo1 * info);
void getInfo1NonVirtual(btConstraintInfo1 * info);
virtual void getInfo2(btConstraintInfo2 * info);
void getInfo2NonVirtual(btConstraintInfo2 * info, const btTransform & transA, const btTransform & transB, const btVector3 & linVelA, const btVector3 & linVelB, btScalar rbAinvMass, btScalar rbBinvMass);
shared code used by ODE solver
void calculateTransforms(const btTransform & transA, const btTransform & transB);
void testLinLimits(void);
void testAngLimits(void);
access for PE Solver
btVector3 getAncorInA(void);
btVector3 getAncorInB(void);
virtual void setParam(int num, btScalar value, int axis = -1);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void resolveUnilateralPairConstraint(btRigidBody * body0, btRigidBody * body1, const btMatrix3x3 & world2A, const btMatrix3x3 & world2B, const btVector3 & invInertiaADiag, const btScalar invMassA, const btVector3 & linvelA, const btVector3 & angvelA, const btVector3 & rel_posA1, const btVector3 & invInertiaBDiag, const btScalar invMassB, const btVector3 & linvelB, const btVector3 & angvelB, const btVector3 & rel_posA2, btScalar depthA, const btVector3 & normalA, const btVector3 & rel_posB1, const btVector3 & rel_posB2, btScalar depthB, const btVector3 & normalB, btScalar & imp0, btScalar & imp1);
void resolveBilateralPairConstraint(btRigidBody * body0, btRigidBody * body1, const btMatrix3x3 & world2A, const btMatrix3x3 & world2B, const btVector3 & invInertiaADiag, const btScalar invMassA, const btVector3 & linvelA, const btVector3 & angvelA, const btVector3 & rel_posA1, const btVector3 & invInertiaBDiag, const btScalar invMassB, const btVector3 & linvelB, const btVector3 & angvelB, const btVector3 & rel_posA2, btScalar depthA, const btVector3 & normalA, const btVector3 & rel_posB1, const btVector3 & rel_posB2, btScalar depthB, const btVector3 & normalB, btScalar & imp0, btScalar & imp1);
void resolveAngularConstraint(const btMatrix3x3 & invInertiaAWS, const btScalar invMassA, const btVector3 & linvelA, const btVector3 & angvelA, const btVector3 & rel_posA1, const btMatrix3x3 & invInertiaBWS, const btScalar invMassB, const btVector3 & linvelB, const btVector3 & angvelB, const btVector3 & rel_posA2, btScalar depthA, const btVector3 & normalA, const btVector3 & rel_posB1, const btVector3 & rel_posB2, btScalar depthB, const btVector3 & normalB, btScalar & imp0, btScalar & imp1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

t use them directly
btScalar getMotorFactor(btScalar pos, btScalar lowLim, btScalar uppLim, btScalar vel, btScalar timeFact);
static btRigidBody& getFixedBody(void);
return btTypedConstraintType(void);
return sizeof(void);
2PI limit is ineffective too becouse no angle can exceed the limit
void set(btScalar low, btScalar high, btScalar _softness = 0.9f, btScalar _biasFactor = 0.3f, btScalar _relaxationFactor = 1.0f);
void test(const btScalar angle);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

axis1 must be orthogonal to axis2 btUniversalConstraint(btRigidBody & rbA, btRigidBody & rbB, const btVector3 & anchor, const btVector3 & axis1, const btVector3 & axis2);
return getAngle(void);
return getAngle(void);
void setAxis(const btVector3 & axis1, const btVector3 & axis2);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static btRigidBody& getFixedBody(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

used to synchronize threads creating predictive contacts

virtual void predictUnconstraintMotion(btScalar timeStep);
void integrateTransformsInternal(btRigidBody * *bodies, int numBodies, btScalar timeStep);
can be called in parallel
virtual void integrateTransforms(btScalar timeStep);
virtual void calculateSimulationIslands(void);
virtual void updateActivationState(btScalar timeStep);
void updateActions(btScalar timeStep);
void startProfiling(btScalar timeStep);
virtual void internalSingleStepSimulation(btScalar timeStep);
void releasePredictiveContacts(void);
void createPredictiveContactsInternal(btRigidBody * *bodies, int numBodies, btScalar timeStep);
can be called in parallel
virtual void createPredictiveContacts(btScalar timeStep);
virtual void saveKinematicState(btScalar timeStep);
void serializeRigidBodies(btSerializer * serializer);
void serializeDynamicsWorldInfo(btSerializer * serializer);
and will not delete those btDiscreteDynamicsWorld(btDispatcher * dispatcher, btBroadphaseInterface * pairCache, btConstraintSolver * constraintSolver, btCollisionConfiguration * collisionConfiguration);
virtual void solveConstraints(btContactSolverInfo & solverInfo);
virtual void synchronizeMotionStates(void);
graphics object
void synchronizeSingleMotionState(btRigidBody * body);
virtual void addConstraint(btTypedConstraint * constraint, bool disableCollisionsBetweenLinkedBodies = false);
virtual void removeConstraint(btTypedConstraint * constraint);
virtual void addAction(void);
virtual void removeAction(void);
virtual void setGravity(const btVector3 & gravity);
virtual void addCollisionObject(btCollisionObject * collisionObject, int collisionFilterGroup = btBroadphaseProxy::StaticFilter, int collisionFilterMask = btBroadphaseProxy::AllFilter ^ btBroadphaseProxy::StaticFilter);
virtual void addRigidBody(btRigidBody * body);
virtual void addRigidBody(btRigidBody * body, int group, int mask);
virtual void removeRigidBody(btRigidBody * body);
removeCollisionObject
virtual void removeCollisionObject(btCollisionObject * collisionObject);
virtual void debugDrawConstraint(btTypedConstraint * constraint);
virtual void debugDrawWorld(void);
virtual void setConstraintSolver(btConstraintSolver * solver);
virtual btConstraintSolver* getConstraintSolver(void);
virtual btTypedConstraint* getConstraint(int index);
virtual void clearForces(void);
call this once per timestep
virtual void applyGravity(void);
use addAction instead
virtual void addVehicle(btActionInterface * vehicle);
use removeAction instead
virtual void removeVehicle(btActionInterface * vehicle);
use addAction instead
virtual void addCharacter(btActionInterface * character);
use removeAction instead
virtual void removeCharacter(btActionInterface * character);
virtual void serialize(btSerializer * serializer);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

create the solvers for me
explicit btConstraintSolverPoolMt(int numSolvers);
ThreadSolver* getAndLockThreadSolver(void);
void init(btConstraintSolver * *solvers, int numSolvers);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

btRigidBody constructor using construction info btRigidBody(const btRigidBodyConstructionInfo& constructionInfo);
setupRigidBody is only used internally by the constructor
void setupRigidBody(const btRigidBodyConstructionInfo & constructionInfo);
void proceedToTransform(const btTransform & newTrans);
continuous collision detection needs prediction
void predictIntegratedTransform(btScalar step, btTransform & predictedTransform);
void saveKinematicState(btScalar step);
void applyGravity(void);
void clearGravity(void);
void setGravity(const btVector3 & acceleration);
void setDamping(btScalar lin_damping, btScalar ang_damping);
void applyDamping(btScalar timeStep);
void setMassProps(btScalar mass, const btVector3 & inertia);
void integrateVelocities(btScalar step);
void setCenterOfMassTransform(const btTransform & xform);
0 clampVelocity(void);
0 clampVelocity(void);
0 clampVelocity(void);
0 clampVelocity(void);
0 clampVelocity(void);
0 clampVelocity(void);
void updateInertiaTensor(void);
0 clampVelocity(void);
0 clampVelocity(void);
axis* getInvInertiaTensorWorld(void);
void addConstraintRef(btTypedConstraint * c);
void removeConstraintRef(btTypedConstraint * c);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void predictUnconstraintMotion(btScalar timeStep);
void integrateTransforms(btScalar timeStep);
broadphase pairCache and constraintSolver btSimpleDynamicsWorld(btDispatcher * dispatcher, btBroadphaseInterface * pairCache, btConstraintSolver * constraintSolver, btCollisionConfiguration * collisionConfiguration);
virtual void setGravity(const btVector3 & gravity);
virtual void addRigidBody(btRigidBody * body);
virtual void addRigidBody(btRigidBody * body, int group, int mask);
virtual void removeRigidBody(btRigidBody * body);
virtual void debugDrawWorld(void);
virtual void addAction(btActionInterface * action);
virtual void removeAction(btActionInterface * action);
removeCollisionObject
virtual void removeCollisionObject(btCollisionObject * collisionObject);
virtual void updateAabbs(void);
virtual void synchronizeMotionStates(void);
virtual void setConstraintSolver(btConstraintSolver * solver);
virtual btConstraintSolver* getConstraintSolver(void);
virtual void clearForces(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void append(const Island & other);
static void solveIsland(btConstraintSolver * solver, Island & island, const SolverParams & solverParams);
static void serialIslandDispatch(btAlignedObjectArray<Island*>*islandsPtr, const SolverParams & solverParams);
static void parallelIslandDispatch(btAlignedObjectArray<Island*>*islandsPtr, const SolverParams & solverParams);
Island* getIsland(int id);
virtual Island* allocateIsland(int id, int numBodies);
virtual void initIslandPools(void);
virtual void addBodiesToIslands(btCollisionWorld * collisionWorld);
virtual void addManifoldsToIslands(btDispatcher * dispatcher);
virtual void addConstraintsToIslands(btAlignedObjectArray<btTypedConstraint*>&constraints);
virtual void mergeIslands(void);
virtual void buildAndProcessIslands(btDispatcher * dispatcher, btCollisionWorld * collisionWorld, btAlignedObjectArray<btTypedConstraint*>&constraints, const SolverParams & solverParams);
virtual void buildIslands(btDispatcher * dispatcher, btCollisionWorld * colWorld);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

fixed link collision with parent is always disabled
void setupFixed(int i, //linkIndex btScalar mass, const btVector3 &inertia, int parent, const btQuaternion &rotParentToThis, const btVector3 &parentComToThisPivotOffset, const btVector3 &thisPivotToThisComOffset, bool deprecatedDisableParentCollision = true);
	void setupPrismatic(int i, btScalar mass, const btVector3 & inertia, int parent, const btQuaternion & rotParentToThis, const btVector3 & jointAxis, const btVector3 & parentComToThisPivotOffset, const btVector3 & thisPivotToThisComOffset, bool disableParentCollision);
void setupRevolute(int i, // 0 to num_links-1 btScalar mass, const btVector3 &inertia, int parentIndex, const btQuaternion &rotParentToThis, // rotate points in parent frame to this frame, when q = 0 const btVector3 &jointAxis, // in my frame const btVector3 &parentComToThisPivotOffset, // vector from parent COM to joint axis, in PARENT frame const btVector3 &thisPivotToThisComOffset, // vector from joint axis to my COM, in MY frame bool disableParentCollision = false);
	void setupSpherical(int i, // linkIndex, 0 to num_links-1 btScalar mass, const btVector3 &inertia, int parent, const btQuaternion &rotParentToThis, // rotate points in parent frame to this frame, when q = 0 const btVector3 &parentComToThisPivotOffset, // vector from parent COM to joint axis, in PARENT frame const btVector3 &thisPivotToThisComOffset, // vector from joint axis to my COM, in MY frame bool disableParentCollision = false);
		void setupPlanar(int i, // 0 to num_links-1 btScalar mass, const btVector3 &inertia, int parent, const btQuaternion &rotParentToThis, // rotate points in parent frame to this frame, when q = 0 const btVector3 &rotationAxis, const btVector3 &parentComToThisComOffset, // vector from parent COM to this COM, in PARENT frame bool disableParentCollision = false);
			return btVector3(void);
return btVector3(void);
void saveKinematicState(btScalar timeStep);
void setJointPos(int i, btScalar q);
void setJointVel(int i, btScalar qdot);
void setJointPosMultiDof(int i, const double* q);
void setJointVelMultiDof(int i, const double* qdot);
void setJointPosMultiDof(int i, const float* q);
void setJointVelMultiDof(int i, const float* qdot);
void clearForcesAndTorques(void);
void clearConstraintForces(void);
void clearVelocities(void);
void addLinkForce(int i, const btVector3 & f);
void addLinkTorque(int i, const btVector3 & t);
void addLinkConstraintForce(int i, const btVector3 & f);
void addLinkConstraintTorque(int i, const btVector3 & t);
void addJointTorque(int i, btScalar Q);
void addJointTorqueMultiDof(int i, int dof, btScalar Q);
void addJointTorqueMultiDof(int i, const btScalar * Q);
void computeAccelerationsArticulatedBodyAlgorithmMultiDof(btScalar dt, btAlignedObjectArray<btScalar> &scratch_r, btAlignedObjectArray<btVector3> &scratch_v, btAlignedObjectArray<btMatrix3x3> &scratch_m, bool isConstraintPass, bool jointFeedbackInWorldSpace, bool jointFeedbackInJointFrame);
void stepPositionsMultiDof(btScalar dt, btScalar * pq = 0, btScalar * pqd = 0);
predict the positions
void predictPositionsMultiDof(btScalar dt);
void wakeUp(void);
void goToSleep(void);
void checkMotionAndSleepIfRequired(btScalar timestep);
void setBaseDynamicType(int dynamicType);
else setBaseDynamicType(void);
void finalizeMultiDof(void);
void forwardKinematics(btAlignedObjectArray<btQuaternion>&world_to_local, btAlignedObjectArray<btVector3> &local_origin);
void updateCollisionObjectWorldTransforms(btAlignedObjectArray<btQuaternion> &world_to_local, btAlignedObjectArray<btVector3> &local_origin);
void updateCollisionObjectInterpolationWorldTransforms(btAlignedObjectArray<btQuaternion> &world_to_local, btAlignedObjectArray<btVector3> &local_origin);
static void spatialTransform(const btMatrix3x3 & rotation_matrix, // rotates vectors in 'from' frame to vectors in 'to' frame const btVector3 &displacement, // vector from origin of 'from' frame to origin of 'to' frame, in 'to' coordinates const btVector3 &top_in, // top part of input vector const btVector3 &bottom_in, // bottom part of input vector btVector3 &top_out, // top part of output vector btVector3 &bottom_out);
	bottom part of output vector

	void setLinkDynamicType(const int i, int type);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void applyDeltaVee(btMultiBodyJacobianData & data, btScalar * delta_vee, btScalar impulse, int velocityIndex, int ndof);
btScalar fillMultiBodyConstraint(btMultiBodySolverConstraint & solverConstraint, btMultiBodyJacobianData & data, btScalar * jacOrgA, btScalar * jacOrgB, const btVector3 & constraintNormalAng, const btVector3 & constraintNormalLin, const btVector3 & posAworld, const btVector3 & posBworld, btScalar posError, const btContactSolverInfo & infoGlobal, btScalar lowerLimit, btScalar upperLimit, bool angConstraint = false, btScalar relaxation = 1.f, bool isFriction = false, btScalar desiredVelocity = 0, btScalar cfmSlip = 0, btScalar damping = 1.0);
void updateJacobianSizes(void);
void allocateJacobiansMultiDof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

btScalar resolveSingleConstraintRowGeneric(const btMultiBodySolverConstraint & c);
solve 2 friction directions and clamp against the implicit friction cone
btScalar resolveConeFrictionConstraintRows(const btMultiBodySolverConstraint & cA1, const btMultiBodySolverConstraint & cB);
void convertContacts(btPersistentManifold * *manifoldPtr, int numManifolds, const btContactSolverInfo & infoGlobal);
btMultiBodySolverConstraint & addMultiBodyFrictionConstraint(const btVector3 & normalAxis, const btScalar & appliedImpulse, btPersistentManifold * manifold, int frictionIndex, btManifoldPoint & cp, btCollisionObject * colObj0, btCollisionObject * colObj1, btScalar relaxation, const btContactSolverInfo & infoGlobal, btScalar desiredVelocity = 0, btScalar cfmSlip = 0);
btMultiBodySolverConstraint & addMultiBodyTorsionalFrictionConstraint(const btVector3 & normalAxis, btPersistentManifold * manifold, int frictionIndex, btManifoldPoint & cp, btScalar combinedTorsionalFriction, btCollisionObject * colObj0, btCollisionObject * colObj1, btScalar relaxation, const btContactSolverInfo & infoGlobal, btScalar desiredVelocity = 0, btScalar cfmSlip = 0);
btMultiBodySolverConstraint & addMultiBodySpinningFrictionConstraint(const btVector3 & normalAxis, btPersistentManifold * manifold, int frictionIndex, btManifoldPoint & cp, btScalar combinedTorsionalFriction, btCollisionObject * colObj0, btCollisionObject * colObj1, btScalar relaxation, const btContactSolverInfo & infoGlobal, btScalar desiredVelocity = 0, btScalar cfmSlip = 0);
void setupMultiBodyJointLimitConstraint(btMultiBodySolverConstraint & constraintRow, btScalar * jacA, btScalar * jacB, btScalar penetration, btScalar combinedFrictionCoeff, btScalar combinedRestitutionCoeff, const btContactSolverInfo & infoGlobal);
void setupMultiBodyContactConstraint(btMultiBodySolverConstraint & solverConstraint, const btVector3 & contactNormal, const btScalar & appliedImpulse, btManifoldPoint & cp, const btContactSolverInfo & infoGlobal, btScalar & relaxation, bool isFriction, btScalar desiredVelocity = 0, btScalar cfmSlip = 0);
either rolling or spinning friction
void setupMultiBodyTorsionalFrictionConstraint(btMultiBodySolverConstraint & solverConstraint, const btVector3 & contactNormal, btManifoldPoint & cp, btScalar combinedTorsionalFriction, const btContactSolverInfo & infoGlobal, btScalar & relaxation, bool isFriction, btScalar desiredVelocity = 0, btScalar cfmSlip = 0);
void convertMultiBodyContact(btPersistentManifold * manifold, const btContactSolverInfo & infoGlobal);
virtual btScalar solveGroupCacheFriendlySetup(btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);
virtual btScalar solveGroupCacheFriendlyIterations(btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);
virtual btScalar solveSingleIteration(int iteration, btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);
void applyDeltaVee(btScalar * deltaV, btScalar impulse, int velocityIndex, int ndof);
void writeBackSolverBodyToMultiBody(btMultiBodySolverConstraint & constraint, btScalar deltaTime);
virtual btScalar solveGroup(btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifold, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & info, btIDebugDraw * debugDrawer, btDispatcher * dispatcher);
virtual btScalar solveGroupCacheFriendlyFinish(btCollisionObject * *bodies, int numBodies, const btContactSolverInfo & infoGlobal);
virtual void solveMultiBodyGroup(btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifold, int numManifolds, btTypedConstraint * *constraints, int numConstraints, btMultiBodyConstraint * *multiBodyConstraints, int numMultiBodyConstraints, const btContactSolverInfo & info, btIDebugDraw * debugDrawer, btDispatcher * dispatcher);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void calculateSimulationIslands(void);
virtual void updateActivationState(btScalar timeStep);
virtual void serializeMultiBodies(btSerializer * serializer);
virtual void solveConstraints(btContactSolverInfo & solverInfo);
virtual void addMultiBody(btMultiBody * body, int group = btBroadphaseProxy::DefaultFilter, int mask = btBroadphaseProxy::AllFilter);
virtual void removeMultiBody(btMultiBody * body);
virtual void addMultiBodyConstraint(btMultiBodyConstraint * constraint);
virtual void removeMultiBodyConstraint(btMultiBodyConstraint * constraint);
virtual void integrateTransforms(btScalar timeStep);
void integrateMultiBodyTransforms(btScalar timeStep);
void predictMultiBodyTransforms(btScalar timeStep);
virtual void predictUnconstraintMotion(btScalar timeStep);
virtual void debugDrawWorld(void);
virtual void debugDrawMultiBodyConstraint(btMultiBodyConstraint * constraint);
void forwardKinematics(void);
virtual void clearForces(void);
virtual void clearMultiBodyConstraintForces(void);
virtual void clearMultiBodyForces(void);
virtual void applyGravity(void);
virtual void serialize(btSerializer * serializer);
virtual void setMultiBodyConstraintSolver(btMultiBodyConstraintSolver * solver);
virtual void setConstraintSolver(btConstraintSolver * solver);
virtual void solveExternalForces(btContactSolverInfo & solverInfo);
virtual void solveInternalConstraints(btContactSolverInfo & solverInfo);
void buildIslands(void);
virtual void saveKinematicState(btScalar timeStep);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void finalizeMultiDof(void);
virtual void createConstraintRows(btMultiBodyConstraintArray & constraintRows, btMultiBodyJacobianData & data, const btContactSolverInfo & infoGlobal);
virtual void debugDraw(class btIDebugDraw* drawer);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void finalizeMultiDof(void);
virtual void createConstraintRows(btMultiBodyConstraintArray & constraintRows, btMultiBodyJacobianData & data, const btContactSolverInfo & infoGlobal);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void finalizeMultiDof(void);
virtual void createConstraintRows(btMultiBodyConstraintArray & constraintRows, btMultiBodyJacobianData & data, const btContactSolverInfo & infoGlobal);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void finalizeMultiDof(void);
virtual void createConstraintRows(btMultiBodyConstraintArray & constraintRows, btMultiBodyJacobianData & data, const btContactSolverInfo & infoGlobal);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

invalid type btAssert(void);
invalid type btAssert(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return isStaticOrKinematicObject(void);
return isKinematicObject(void);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void createMLCPFast(const btContactSolverInfo & infoGlobal);
Constructs MLCP terms for constraints of two rigid bodies
void createMLCPFastRigidBody(const btContactSolverInfo & infoGlobal);
bodies or one rigid body and one multibody
void createMLCPFastMultiBody(const btContactSolverInfo & infoGlobal);
Solves MLCP and returns the success
virtual bool solveMLCP(const btContactSolverInfo & infoGlobal);
Documentation inherited
btScalar solveGroupCacheFriendlyIterations(btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);
explicit btMultiBodyMLCPConstraintSolver(btMLCPSolverInterface * solver);
void setMLCPSolver(btMLCPSolverInterface * solver);
void setNumFallbacks(int num);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void finalizeMultiDof(void);
virtual void createConstraintRows(btMultiBodyConstraintArray & constraintRows, btMultiBodyJacobianData & data, const btContactSolverInfo & infoGlobal);
virtual void debugDraw(class btIDebugDraw* drawer);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void finalizeMultiDof(void);
virtual void createConstraintRows(btMultiBodyConstraintArray & constraintRows, btMultiBodyJacobianData & data, const btContactSolverInfo & infoGlobal);
virtual void debugDraw(class btIDebugDraw* drawer);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void finalizeMultiDof(void);
virtual void createConstraintRows(btMultiBodyConstraintArray & constraintRows, btMultiBodyJacobianData & data, const btContactSolverInfo & infoGlobal);
virtual void debugDraw(class btIDebugDraw* drawer);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void finalizeMultiDof(void);
virtual void createConstraintRows(btMultiBodyConstraintArray & constraintRows, btMultiBodyJacobianData & data, const btContactSolverInfo & infoGlobal);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return false if solving failed
bool btSolveDantzigLCP(int n, btScalar * A, btScalar * x, btScalar * b, btScalar * w, int nub, btScalar * lo, btScalar * hi, int* findex, btDantzigScratchMemory & scratch);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

btVectorXu solve(unsigned int maxloops = 0);
int findLexicographicMinimum(const btMatrixXu & A, const int& pivotColIndex, const int& z0Row, bool& isRayTermination);
void GaussJordanEliminationStep(btMatrixXu & A, int pivotRowIndex, int pivotColumnIndex, const btAlignedObjectArray<int>&basis);
bool greaterZero(const btVectorXu & vector);
bool validBasis(const btAlignedObjectArray<int>&basis);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

btVectorXu solution(void);
btMatrixXu B(void);
btMatrixXu b1(void);
btMatrixXu M(n * 2, n * 2);
btLemkeAlgorithm lemke(void);
btMatrixXu y1_b1(void);
btLemkeAlgorithm lemke(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual btScalar solveGroupCacheFriendlySetup(btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);
virtual btScalar solveGroupCacheFriendlyIterations(btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);
virtual void createMLCP(const btContactSolverInfo & infoGlobal);
virtual void createMLCPFast(const btContactSolverInfo & infoGlobal);
return true is it solves the problem successfully
virtual bool solveMLCP(const btContactSolverInfo & infoGlobal);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifdef VERBOSE_PRINTF_RESIDUAL printf("totalLenSqr = %f at iteration #%d\n");

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void defaultInit(const btVehicleTuning & tuning);
constructor to create a car from an existing rigidbody btRaycastVehicle(const btVehicleTuning & tuning, btRigidBody * chassis, btVehicleRaycaster * raycaster);
btActionInterface interface
void debugDraw(btIDebugDraw * debugDrawer);
btScalar rayCast(btWheelInfo & wheel);
virtual void updateVehicle(btScalar step);
void resetSuspension(void);
void setSteeringValue(btScalar steering, int wheel);
void applyEngineForce(btScalar force, int wheel);
void updateWheelTransform(int wheelIndex, bool interpolatedTransform = true);
void setRaycastWheelInfo(int wheelIndex, bool isInContact, const btVector3 & hitPoint, const btVector3 & hitNormal, btScalar depth);
btWheelInfo& addWheel(const btVector3 & connectionPointCS0, const btVector3 & wheelDirectionCS0, const btVector3 & wheelAxleCS, btScalar suspensionRestLength, btScalar wheelRadius, const btVehicleTuning & tuning, bool isFrontWheel);
btWheelInfo& getWheelInfo(int index);
void updateWheelTransformsWS(btWheelInfo & wheel, bool interpolatedTransform = true);
void setBrake(btScalar brake, int wheelIndex);
void updateSuspension(btScalar deltaTime);
virtual void updateFriction(btScalar timeStep);
virtual void* castRay(const btVector3 & from, const btVector3 & to, btVehicleRaycasterResult & result);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void updateWheel(const btRigidBody & chassis, RaycastInfo & raycastInfo);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual bool checkInitialized(void);
virtual void updateSoftBodies(void);
virtual void optimize(btAlignedObjectArray<btSoftBody*> &softBodies, bool forceUpdate = false);
virtual void copyBackToSoftBodies(bool bMove = true);
virtual void solveConstraints(btScalar solverdt);
virtual void predictMotion(btScalar solverdt);
virtual void copySoftBodyToVertexBuffer(const btSoftBody* const softBody, btVertexBufferDescriptor * vertexBuffer);
virtual void processCollision(btSoftBody*, const btCollisionObjectWrapper*);
virtual void processCollision(btSoftBody*, btSoftBody*);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

add the dt scaled implicit force to residual
void computeResidual(btScalar dt, TVStack & residual);
add explicit force to the velocity
void applyExplicitForce(TVStack & force);
apply force to velocity and optionally reset the force to zero
void applyForce(TVStack & force, bool setZero);
void computeStep(TVStack & dv, const TVStack & residual, const btScalar & dt);
set initial guess for CG solve
void initialGuess(TVStack & dv, const TVStack & residual);
reset data structure and reset dt
void reinitialize(bool nodeUpdated, btScalar dt);
void setDt(btScalar dt);
add friction force to residual
void applyDynamicFriction(TVStack & r);
add dv to velocity
void updateVelocity(const TVStack & dv);
set constraints as projections
void setConstraints(const btContactSolverInfo & infoGlobal);
Calculate the total potential energy in the system
btScalar totalEnergy(btScalar dt);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

update soft body normals
virtual void updateSoftBodies(void);
virtual btScalar solveContactConstraints(btCollisionObject * *deformableBodies, int numDeformableBodies, const btContactSolverInfo & infoGlobal);
solve the momentum equation
virtual void solveDeformableConstraints(btScalar solverdt);
clear data structures
virtual void reinitialize(const btAlignedObjectArray<btSoftBody*>&softBodies, btScalar dt);
set up contact constraints
virtual void setConstraints(const btContactSolverInfo & infoGlobal);
and calls predictDeformableMotion
virtual void predictMotion(btScalar solverdt);
is stored in m_q
void predictDeformableMotion(btSoftBody * psb, btScalar dt);
save the current velocity to m_backupVelocity
void backupVelocity(void);
set m_dv and m_backupVelocity to desired value to prepare for momentum solve
virtual void setupDeformableSolve(bool implicit);
set the current velocity to that backed up in m_backupVelocity
void revertVelocity(void);
m_backupVelocity
void updateVelocity(void);
update the node count
bool updateNodes(void);
calculate the change in dv resulting from the momentum solve
void computeStep(TVStack & ddv, const TVStack & residual);
calculate the change in dv resulting from the momentum solve when line search is turned on
btScalar computeDescentStep(TVStack & ddv, const TVStack & residual, bool verbose = false);
explicit time stepping scheme is used
void setImplicit(bool implicit);
s method with line search is used when implicit time stepping scheme is turned on
void setLineSearch(bool lineSearch);
void updateState(void);
scale* ddv
void updateDv(btScalar scale = 1);
void updateTempPosition(void);
void backupDv(void);
up value
void revertDv(void);
void updateEnergy(btScalar scale);
used in line search
btScalar kineticEnergy(void);
add explicit force to the velocity in the objective class
virtual void applyExplicitForce(void);
velocity update and apply anchor constraints in the integrateTransforms from the Dynamics world
virtual void applyTransforms(btScalar timeStep);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return btVector3(void);
return btVector3(void);
return btVector3(void);
virtual btScalar solveConstraint(const btContactSolverInfo & infoGlobal);
return btVector3(void);
virtual void applyImpulse(const btVector3 & impulse);
virtual btScalar solveConstraint(const btContactSolverInfo & infoGlobal);
btScalar solveSplitImpulse(const btContactSolverInfo & infoGlobal);
virtual void applyImpulse(const btVector3 & impulse);
virtual void applySplitImpulse(const btVector3 & impulse);
virtual void applyImpulse(const btVector3 & impulse);
virtual void applySplitImpulse(const btVector3 & impulse);
virtual btScalar solveConstraint(const btContactSolverInfo & infoGlobal);
virtual void applyImpulse(const btVector3 & impulse);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

apply the constraints to the rhs of the linear solve
virtual void project(TVStack & x);
add friction force to the rhs of the linear solve
virtual void applyDynamicFriction(TVStack & f);
update and solve the constraints
virtual btScalar update(btCollisionObject * *deformableBodies, int numDeformableBodies, const btContactSolverInfo & infoGlobal);
virtual void setConstraints(const btContactSolverInfo & infoGlobal);
Set up projections for each vertex by adding the projection direction to
virtual void setProjection(void);
virtual void reinitialize(bool nodeUpdated);
btScalar solveSplitImpulse(btCollisionObject * *deformableBodies, int numDeformableBodies, const btContactSolverInfo & infoGlobal);
virtual void setLagrangeMultiplier(void);
void checkConstraints(const TVStack & x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

else PolarDecomposition(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

set df addScaledElasticForceDifferential(void);
set f1 addScaledForces(void);
set f2 addScaledForces(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

m_element_measure* elasticEnergyDensity(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual btScalar solveGroupCacheFriendlyIterations(btCollisionObject * *bodies, int numBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);
write the velocity of the the solver body to the underlying rigid body
void solverBodyWriteBack(const btContactSolverInfo & infoGlobal);
write the velocity of the underlying rigid body to the the the solver body
void writeToSolverBody(btCollisionObject * *bodies, int numBodies, const btContactSolverInfo & infoGlobal);
let each deformable body knows which solver body is in constact
void pairDeformableAndSolverBody(btCollisionObject * *bodies, int numBodies, int numDeformableBodies, const btContactSolverInfo & infoGlobal);
virtual void solveGroupCacheFriendlySplitImpulseIterations(btCollisionObject * *bodies, int numBodies, btCollisionObject * *deformableBodies, int numDeformableBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);
virtual btScalar solveDeformableGroupIterations(btCollisionObject * *bodies, int numBodies, btCollisionObject * *deformableBodies, int numDeformableBodies, btPersistentManifold * *manifoldPtr, int numManifolds, btTypedConstraint * *constraints, int numConstraints, const btContactSolverInfo & infoGlobal, btIDebugDraw * debugDrawer);
virtual void solveDeformableBodyGroup(btCollisionObject * *bodies, int numBodies, btCollisionObject * *deformableBodies, int numDeformableBodies, btPersistentManifold * *manifold, int numManifolds, btTypedConstraint * *constraints, int numConstraints, btMultiBodyConstraint * *multiBodyConstraints, int numMultiBodyConstraints, const btContactSolverInfo & info, btIDebugDraw * debugDrawer, btDispatcher * dispatcher);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void internalSingleStepSimulation(btScalar timeStep);
virtual void integrateTransforms(btScalar timeStep);
void positionCorrection(btScalar timeStep);
void solveConstraints(btScalar timeStep);
void updateActivationState(btScalar timeStep);
void clearGravity(void);
virtual void debugDrawWorld(void);
virtual void predictUnconstraintMotion(btScalar timeStep);
virtual void addSoftBody(btSoftBody * body, int collisionFilterGroup = btBroadphaseProxy::DefaultFilter, int collisionFilterMask = btBroadphaseProxy::AllFilter);
virtual void setGravity(const btVector3 & gravity);
void reinitialize(btScalar timeStep);
void applyRigidBodyGravity(btScalar timeStep);
void beforeSolverCallbacks(btScalar timeStep);
void afterSolverCallbacks(btScalar timeStep);
void addForce(btSoftBody * psb, btDeformableLagrangianForce * force);
void removeForce(btSoftBody * psb, btDeformableLagrangianForce * force);
void removeSoftBodyForce(btSoftBody * psb);
void removeSoftBody(btSoftBody * body);
void removeCollisionObject(btCollisionObject * collisionObject);
void setupConstraints(void);
void performDeformableCollisionDetection(void);
void solveMultiBodyConstraints(void);
void solveContactConstraints(void);
void sortConstraints(void);
void softBodySelfCollision(void);
void applyRepulsionForce(btScalar timeStep);
void performGeometricCollisions(btScalar timeStep);
perform an exact ray test
btDeformableSingleRayCallback rayCB(void);
LocalRayResult rayResult(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

m_element_measure* elasticEnergyDensity(void);
5 * log(s.m_trace + 1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return dot(void);
btScalar ans(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

c0 BT_DECLARE_ALIGNED_ALLOCATOR(void);
static const btMatrix3x3 iwi(void);
virtual void Prepare(btScalar dt, int iterations);
void Prepare(btScalar dt, int iterations);
void Solve(btScalar dt, btScalar sor);
void Terminate(btScalar dt);
void Prepare(btScalar dt, int iterations);
void Solve(btScalar dt, btScalar sor);
void Terminate(btScalar dt);
void Prepare(btScalar dt, int iterations);
void Solve(btScalar dt, btScalar sor);
void Terminate(btScalar dt);
void Process(const btDbvtNode * leaf);
btScalar rayFromToTriangle(const btVector3 & rayFrom, const btVector3 & rayTo, const btVector3 & rayNormalizedDirection, const btVector3 & a, const btVector3 & b, const btVector3 & c, btScalar maxt = SIMD_INFINITY);
void initDefaults(void);
Material* appendMaterial(void);
void appendNote(const char* text, const btVector3 & o, Node * feature);
void appendNote(const char* text, const btVector3 & o, Link * feature);
void appendNote(const char* text, const btVector3 & o, Face * feature);
void appendNode(const btVector3 & x, btScalar m);
void appendLink(int model = -1, Material * mat = 0);
void appendLink(int node0, int node1, Material * mat = 0, bool bcheckexist = false);
void appendLink(Node * node0, Node * node1, Material * mat = 0, bool bcheckexist = false);
void appendFace(int model = -1, Material * mat = 0);
void appendFace(int node0, int node1, int node2, Material * mat = 0);
void appendTetra(int model, Material * mat);
void appendTetra(int node0, int node1, int node2, int node3, Material * mat = 0);
void appendDeformableAnchor(int node, btRigidBody * body);
void appendDeformableAnchor(int node, btMultiBodyLinkCollider * link);
void appendAnchor(int node, btRigidBody * body, bool disableCollisionBetweenLinkedBodies = false, btScalar influence = 1);
void appendAnchor(int node, btRigidBody * body, const btVector3 & localPivot, bool disableCollisionBetweenLinkedBodies = false, btScalar influence = 1);
void removeAnchor(int node);
void appendLinearJoint(const LJoint::Specs & specs, Cluster * body0, Body body1);
void appendLinearJoint(const LJoint::Specs & specs, btSoftBody * body);
void appendAngularJoint(const AJoint::Specs & specs, Cluster * body0, Body body1);
void appendAngularJoint(const AJoint::Specs & specs, btSoftBody * body);
void addForce(const btVector3 & force);
void addForce(const btVector3 & force, int node);
void addAeroForceToNode(const btVector3 & windVelocity, int nodeIndex);
void addAeroForceToFace(const btVector3 & windVelocity, int faceIndex);
void addVelocity(const btVector3 & velocity);
void setVelocity(const btVector3 & velocity);
void addVelocity(const btVector3 & velocity, int node);
void setMass(int node, btScalar mass);
void setTotalMass(btScalar mass, bool fromfaces = false);
void setTotalDensity(btScalar density);
void setVolumeMass(btScalar mass);
void setVolumeDensity(btScalar density);
btVector3 getLinearVelocity(void);
void setLinearVelocity(const btVector3 & linVel);
void setAngularVelocity(const btVector3 & angVel);
btTransform getRigidTransform(void);
virtual void transformTo(const btTransform & trs);
virtual void transform(const btTransform & trs);
virtual void translate(const btVector3 & trs);
virtual void rotate(const btQuaternion & rot);
virtual void scale(const btVector3 & scl);
btScalar getRestLengthScale(void);
void setRestLengthScale(btScalar restLength);
void setPose(bool bvolume, bool bframe);
void resetLinkRestLengths(void);
btVector3 com(void);
static btVector3 clusterCom(const Cluster * cluster);
static btVector3 clusterVelocity(const Cluster * cluster, const btVector3 & rpos);
static void clusterVImpulse(Cluster * cluster, const btVector3 & rpos, const btVector3 & impulse);
static void clusterDImpulse(Cluster * cluster, const btVector3 & rpos, const btVector3 & impulse);
static void clusterImpulse(Cluster * cluster, const btVector3 & rpos, const Impulse & impulse);
static void clusterVAImpulse(Cluster * cluster, const btVector3 & impulse);
static void clusterDAImpulse(Cluster * cluster, const btVector3 & impulse);
static void clusterAImpulse(Cluster * cluster, const Impulse & impulse);
static void clusterDCImpulse(Cluster * cluster, const btVector3 & impulse);
int generateBendingConstraints(int distance, Material * mat = 0);
void randomizeConstraints(void);
void updateState(const btAlignedObjectArray<btVector3>&qs, const btAlignedObjectArray<btVector3>&vs);
void releaseCluster(int index);
void releaseClusters(void);
int generateClusters(int k, int maxiterations = 8192);
void refine(ImplicitFn * ifn, btScalar accurary, bool cut);
bool cutLink(int node0, int node1, btScalar position);
bool cutLink(const Node * node0, const Node * node1, btScalar position);
bool rayTest(const btVector3 & rayFrom, const btVector3 & rayTo, sRayCast & results);
bool rayFaceTest(const btVector3 & rayFrom, const btVector3 & rayTo, sRayCast & results);
void setSolver(eSolverPresets::_ preset);
void predictMotion(btScalar dt);
void solveConstraints(void);
void staticSolve(int iterations);
static void solveCommonConstraints(btSoftBody * *bodies, int count, int iterations);
static void solveClusters(const btAlignedObjectArray<btSoftBody*>&bodies);
void integrateMotion(void);
void defaultCollisionHandler(const btCollisionObjectWrapper * pcoWrap);
void defaultCollisionHandler(btSoftBody * psb);
void setSelfCollision(bool useSelfCollision);
bool useSelfCollision(void);
void updateDeactivation(btScalar timeStep);
void setZeroVelocity(void);
bool wantsSleeping(void);
void setWindVelocity(const btVector3 & velocity);
const btVector3& getWindVelocity(void);
void pointersToIndices(void);
void indicesToPointers(const int* map = 0);
void initializeFaceTree(void);
void rebuildNodeTree(void);
void updateNormals(void);
void updateBounds(void);
void updatePose(void);
void updateConstants(void);
void updateLinkConstants(void);
void updateArea(bool averageArea = true);
void initializeClusters(void);
void updateClusters(void);
void cleanupClusters(void);
void prepareClusters(int iterations);
void solveClusters(btScalar sor);
void applyClusters(bool drift);
void dampClusters(void);
void setSpringStiffness(btScalar k);
void setGravityFactor(btScalar gravFactor);
void setCacheBarycenter(bool cacheBarycenter);
void initializeDmInverse(void);
void updateDeformation(void);
void advanceDeformation(void);
void applyForces(void);
void setMaxStress(btScalar maxStress);
void interpolateRenderMesh(void);
void setCollisionQuadrature(int N);
static void PSolve_Anchors(btSoftBody * psb, btScalar kst, btScalar ti);
static void PSolve_RContacts(btSoftBody * psb, btScalar kst, btScalar ti);
static void PSolve_SContacts(btSoftBody * psb, btScalar ti);
static void PSolve_Links(btSoftBody * psb, btScalar kst, btScalar ti);
static void VSolve_Links(btSoftBody * psb, btScalar kst);
static psolver_t getSolver(ePSolver::_ solver);
static vsolver_t getSolver(eVSolver::_ solver);
void geometricCollisionHandler(btSoftBody * psb);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void setTimeStepAndCounters(btScalar collisionMarginTriangle, const btCollisionObjectWrapper * triObjWrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
virtual void processTriangle(btVector3 * triangle, int partId, int triangleIndex);
void clearCache(void);
virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
void clearCache(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static void Draw(btSoftBody * psb, btIDebugDraw * idraw, int drawflags = fDrawFlags::Std);
static void DrawInfos(btSoftBody * psb, btIDebugDraw * idraw, bool masses, bool areas, bool stress);
static void DrawNodeTree(btSoftBody * psb, btIDebugDraw * idraw, int mindepth = 0, int maxdepth = -1);
static void DrawFaceTree(btSoftBody * psb, btIDebugDraw * idraw, int mindepth = 0, int maxdepth = -1);
static void DrawClusterTree(btSoftBody * psb, btIDebugDraw * idraw, int mindepth = 0, int maxdepth = -1);
static void DrawFrame(btSoftBody * psb, btIDebugDraw * idraw);
static btSoftBody* CreateRope(btSoftBodyWorldInfo & worldInfo, const btVector3 & from, const btVector3 & to, int res, int fixeds);
static btSoftBody* CreatePatch(btSoftBodyWorldInfo & worldInfo, const btVector3 & corner00, const btVector3 & corner10, const btVector3 & corner01, const btVector3 & corner11, int resx, int resy, int fixeds, bool gendiags, btScalar perturbation = 0.);
static btSoftBody* CreatePatchUV(btSoftBodyWorldInfo & worldInfo, const btVector3 & corner00, const btVector3 & corner10, const btVector3 & corner01, const btVector3 & corner11, int resx, int resy, int fixeds, bool gendiags, float* tex_coords = 0);
static float CalculateUV(int resx, int resy, int ix, int iy, int id);
static btSoftBody* CreateEllipsoid(btSoftBodyWorldInfo & worldInfo, const btVector3 & center, const btVector3 & radius, int res);
static btSoftBody* CreateFromTriMesh(btSoftBodyWorldInfo & worldInfo, const btScalar * vertices, const int* triangles, int ntriangles, bool randomizeConstraints = true);
static btSoftBody* CreateFromConvexHull(btSoftBodyWorldInfo & worldInfo, const btVector3 * vertices, int nvertices, bool randomizeConstraints = true);
static void ExportAsSMeshFile(btSoftBody * psb, // const char* filename);
	static btSoftBody * CreateFromTetGenFile(btSoftBodyWorldInfo & worldInfo, // const char* ele, // const char* face, // const char* node, // bool bfacelinks, // bool btetralinks, // bool bfacesfromtetras);
		static btSoftBody * CreateFromTetGenData(btSoftBodyWorldInfo & worldInfo, const char* ele, const char* face, const char* node, bool bfacelinks, bool btetralinks, bool bfacesfromtetras);
static btSoftBody * CreateFromVtkFile(btSoftBodyWorldInfo & worldInfo, const char* vtk_file);
static void writeObj(const char* file, const btSoftBody * psb);
static void writeState(const char* file, const btSoftBody * psb);
string loadDeformableState(btAlignedObjectArray<btVector3>&qs, btAlignedObjectArray<btVector3>&vs, const char* filename, CommonFileIOInterface * fileIO);
static void getBarycentricWeights(const btVector3 & a, const btVector3 & b, const btVector3 & c, const btVector3 & d, const btVector3 & p, btVector4 & bary);
static void getBarycentricWeights(const btVector3 & a, const btVector3 & b, const btVector3 & c, const btVector3 & p, btVector4 & bary);
static void interpolateBarycentricWeights(btSoftBody * psb);
static void extrapolateBarycentricWeights(btSoftBody * psb);
static void generateBoundaryFaces(btSoftBody * psb);
static void duplicateFaces(const char* filename, const btSoftBody * psb);
order processors can execute instructions from multiple iterations at once
static void ReoptimizeLinkOrder(btSoftBody * psb);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return diffSign(void);
return diffSign(void);
p1 getJs(void);
p2 getJs(void);
p3 getJs(void);
p1 getJs(void);
p2 getJs(void);
p3 getJs(void);
inside test
return signDetermination2(void);
inside test
return signDetermination1(void);
return coplanarAndInsideTest(void);
return coplanarAndInsideTest(void);
not yet btAssert(void);
static const btVector3 dummy(void);
not yet btAssert(void);
btSoftClusterCollisionShape cshape(void);
btSoftClusterCollisionShape csa(void);
btSoftClusterCollisionShape csb(void);
static const btMatrix3x3 iwiStatic(void);
static const btMatrix3x3 iwiStatic(void);
static const btMatrix3x3 iwiStatic(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

and otherwise fallback to base class implementation
virtual btCollisionAlgorithmCreateFunc* getCollisionAlgorithmCreateFunc(int proxyType0, int proxyType1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void predictUnconstraintMotion(btScalar timeStep);
virtual void internalSingleStepSimulation(btScalar timeStep);
void solveSoftBodiesConstraints(btScalar timeStep);
void serializeSoftBodies(btSerializer * serializer);
virtual void debugDrawWorld(void);
void addSoftBody(btSoftBody * body, int collisionFilterGroup = btBroadphaseProxy::DefaultFilter, int collisionFilterMask = btBroadphaseProxy::AllFilter);
void removeSoftBody(btSoftBody * body);
removeCollisionObject
virtual void removeCollisionObject(btCollisionObject * collisionObject);
static void rayTestSingle(const btTransform & rayFromTrans, const btTransform & rayToTrans, btCollisionObject * collisionObject, const btCollisionShape * collisionShape, const btTransform & colObjWorldTransform, RayResultCallback & resultCallback);
virtual void serialize(btSerializer * serializer);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
virtual btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void predictUnconstraintMotion(btScalar timeStep);
virtual void internalSingleStepSimulation(btScalar timeStep);
void solveSoftBodiesConstraints(btScalar timeStep);
void serializeSoftBodies(btSerializer * serializer);
virtual void debugDrawWorld(void);
void addSoftBody(btSoftBody * body, int collisionFilterGroup = btBroadphaseProxy::DefaultFilter, int collisionFilterMask = btBroadphaseProxy::AllFilter);
void removeSoftBody(btSoftBody * body);
removeCollisionObject
virtual void removeCollisionObject(btCollisionObject * collisionObject);
static void rayTestSingle(const btTransform & rayFromTrans, const btTransform & rayToTrans, btCollisionObject * collisionObject, const btCollisionShape * collisionShape, const btTransform & colObjWorldTransform, RayResultCallback & resultCallback);
virtual void serialize(btSerializer * serializer);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual void processCollision(const btCollisionObjectWrapper * body0Wrap, const btCollisionObjectWrapper * body1Wrap, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);
virtual btScalar calculateTimeOfImpact(btCollisionObject * body0, btCollisionObject * body1, const btDispatcherInfo & dispatchInfo, btManifoldResult * resultOut);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

2 * sizeof(unsigned short);
new Cell(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int SolveP2(btScalar * x, btScalar a, btScalar b);
int SolveP3(btScalar * x, btScalar a, btScalar b, btScalar c);
int SolveP4(btScalar * x, btScalar a, btScalar b, btScalar c, btScalar d);
int SolveP5(btScalar * x, btScalar a, btScalar b, btScalar c, btScalar d, btScalar e);
Your may remove this definitions from here
int SolveP4Bi(btScalar * x, btScalar b, btScalar d);
0
int SolveP4De(btScalar * x, btScalar b, btScalar c, btScalar d);
0
void CSqrt(btScalar x, btScalar y, btScalar & a, btScalar & b);
btScalar N4Step(btScalar x, btScalar a, btScalar b, btScalar c, btScalar d);
d
btScalar SolveP5_1(btScalar a, btScalar b, btScalar c, btScalar d, btScalar e);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void internalInitialization(void);
void setReducedModes(int num_modes, int full_size);
void setMassProps(const tDenseArray & mass_array);
void setInertiaProps(void);
void setRigidVelocity(const btVector3 & v);
void setRigidAngularVelocity(const btVector3 & omega);
void setStiffnessScale(const btScalar ks);
void setMassScale(const btScalar rho);
void setFixedNodes(const int n_node);
void setDamping(const btScalar alpha, const btScalar beta);
void disableReducedModes(const bool rigid_only);
virtual void setTotalMass(btScalar mass, bool fromfaces = false);
virtual void transformTo(const btTransform & trs);
virtual void transform(const btTransform & trs);
virtual void scale(const btVector3 & scl);
void updateRestNodalPositions(void);
void updateInitialInertiaTensor(const btMatrix3x3 & rotation);
void updateLocalInertiaTensorFromNodes(void);
void updateInertiaTensor(void);
void updateModesByRotation(const btMatrix3x3 & rotation);
void updateLocalMomentArm(void);
void predictIntegratedTransform(btScalar dt, btTransform & predictedTransform);
update the external force projection matrix
void updateExternalForceProjectMatrix(bool initialized);
void endOfTimeStepZeroing(void);
void applyInternalVelocityChanges(void);
compute reduced degree of freedoms
void updateReducedDofs(btScalar solverdt);
void updateReducedVelocity(btScalar solverdt);
map to full degree of freedoms
void mapToFullPosition(const btTransform & ref_trans);
compute full space velocity from the reduced velocity
void mapToFullVelocity(const btTransform & ref_trans);
void applyDamping(btScalar timeStep);
void applyCentralImpulse(const btVector3 & impulse);
void applyTorqueImpulse(const btVector3 & torque);
void proceedToTransform(btScalar dt, bool end_of_time_step);
apply impulse to the rigid frame
void internalApplyRigidImpulse(const btVector3 & impulse, const btVector3 & rel_pos);
apply impulse to nodes in the full space
void internalApplyFullSpaceImpulse(const btVector3 & impulse, const btVector3 & rel_pos, int n_node, btScalar dt);
apply nodal external force in the full space
void applyFullSpaceNodalForce(const btVector3 & f_ext, int n_node);
apply gravity to the rigid frame
void applyRigidGravity(const btVector3 & gravity, btScalar dt);
apply reduced elastic force
void applyReducedElasticForce(const tDenseArray & reduce_dofs);
apply reduced damping force
void applyReducedDampingForce(const tDenseArray & reduce_vel);
calculate the impulse factor
virtual btMatrix3x3 getImpulseFactor(int n_node);
get relative position from a node to the CoM of the rigid frame
btVector3 getRelativePos(int n_node);
btTransform& getRigidTransform(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

create a reduced deformable object
static btReducedDeformableBody* createReducedDeformableObject(btSoftBodyWorldInfo & worldInfo, const std::string & file_path, const std::string & vtk_file, const int num_modes, bool rigid_only);
read in geometry info from Vtk file
static btReducedDeformableBody* createFromVtkFile(btSoftBodyWorldInfo & worldInfo, const char* vtk_file);
read in all reduced files
static void readReducedDeformableInfoFromFiles(btReducedDeformableBody * rsb, const char* file_path);
read in a binary vector
static void readBinaryVec(btReducedDeformableBody::tDenseArray & vec, const unsigned int n_size, const char* file);
read in a binary matrix
static void readBinaryMat(btReducedDeformableBody::tDenseMatrix & mat, const unsigned int n_modes, const unsigned int n_full, const char* file);
calculate the local inertia tensor for a box shape reduced deformable object
static void calculateLocalInertia(btVector3 & inertia, const btScalar mass, const btVector3 & half_extents, const btVector3 & margin);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void predictReduceDeformableMotion(btScalar solverdt);
void applyExplicitForce(btScalar solverdt);
virtual void setGravity(const btVector3 & gravity);
clear data structures
virtual void reinitialize(const btAlignedObjectArray<btSoftBody*>&bodies, btScalar dt);
virtual void predictMotion(btScalar solverdt);
virtual void applyTransforms(btScalar timeStep);
set up contact constraints
virtual void setConstraints(const btContactSolverInfo & infoGlobal);
virtual btScalar solveContactConstraints(btCollisionObject * *deformableBodies, int numDeformableBodies, const btContactSolverInfo & infoGlobal);
apply all the delta velocities
virtual void deformableBodyInternalWriteBack(void);
virtual void setupDeformableSolve(bool implicit);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual btScalar solveConstraint(const btContactSolverInfo & infoGlobal);
s applyFullSpaceImpulse
virtual void applyImpulse(const btVector3 & impulse);
void setSolverBody(const int bodyId, btSolverBody & solver_body);
virtual btScalar solveConstraint(const btContactSolverInfo & infoGlobal);
void calculateTangentialImpulse(btScalar & deltaImpulse_tangent, btScalar & appliedImpulse, const btScalar rhs_tangent, const btScalar tangentImpulseFactorInv, const btVector3 & tangent, const btScalar lower_limit, const btScalar upper_limit, const btVector3 & deltaV_rel);
virtual void warmStarting(void);
s applyFullSpaceImpulse
virtual void applyImpulse(const btVector3 & impulse);
s applyFullSpaceImpulse
virtual void applyImpulse(const btVector3 & impulse);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

btVector3 hitNormal(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifdef BT_DEBUG_MEMORY_ALLOCATIONS

int btDumpMemoryLeaks(void);
void* btAlignedAllocInternal(size_t size, int alignment, int line, const char* filename);
void btAlignedFreeInternal(void* ptr, int line, const char* filename);
else
void* btAlignedAllocInternal(size_t size, int alignment);
void btAlignedFreeInternal(void* ptr);
using btAlignedAllocSetCustom
void btAlignedAllocSetCustom(btAllocFunc* allocFunc, btFreeFunc* freeFunc);
void btAlignedAllocSetCustomAligned(btAlignedAllocFunc * allocFunc, btAlignedFreeFunc * freeFunc);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return size(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

HullError CreateConvexHull(const HullDesc & desc, // describes the input request HullResult& result);
	contains the resulst
	HullError ReleaseResult(HullResult & result);
bool ComputeHull(unsigned int vcount, const btVector3 * vertices, PHullResult & result, unsigned int vlimit);
class btHullTriangle* allocateTriangle(int a, int b, int c);
void deAllocateTriangle(void);
void b2bfix(btHullTriangle * s, btHullTriangle * t);
void removeb2b(btHullTriangle * s, btHullTriangle * t);
void checkit(btHullTriangle * t);
btHullTriangle * extrudable(btScalar epsilon);
int calchull(btVector3 * verts, int verts_count, TUIntArray & tris_out, int& tris_count, int vlimit);
int calchullgen(btVector3 * verts, int verts_count, int vlimit);
int4 FindSimplex(btVector3 * verts, int verts_count, btAlignedObjectArray<int>&allow);
class ConvexH* ConvexHCrop(ConvexH & convex, const btPlane & slice);
void extrude(class btHullTriangle* t0, int v);
ConvexH * test_cube(void);
void BringOutYourDead(const btVector3 * verts, unsigned int vcount, btVector3 * overts, unsigned int& ocount, unsigned int* indices, unsigned indexcount);
bool CleanupVertices(unsigned int svcount, const btVector3 * svertices, unsigned int stride, unsigned int& vcount, // output number of vertices btVector3* vertices, // location to store the results. btScalar normalepsilon, btVector3& scale);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

	// Auto-generated bindings for fftw3_integration

	btScalar compute(const void* coords, bool doubleCoords, int stride, int count, btScalar shrink, btScalar shrinkClamp);
return compute(void);
return compute(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static void getPlaneEquationsFromVertices(btAlignedObjectArray<btVector3>&vertices, btAlignedObjectArray<btVector3>&planeEquationsOut);
static void getVerticesFromPlaneEquations(const btAlignedObjectArray<btVector3>&planeEquations, btAlignedObjectArray<btVector3>&verticesOut);
static bool isInside(const btAlignedObjectArray<btVector3>&vertices, const btVector3 & planeNormal, btScalar margin);
static bool isPointInsidePlanes(const btAlignedObjectArray<btVector3>&planeEquations, const btVector3 & point, btScalar margin);
static bool areVerticesBehindPlane(const btVector3 & planeNormal, const btAlignedObjectArray<btVector3>&vertices, btScalar margin);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

with this anchor
btAngleCompareFunc comp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return find(void);
return find(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

radiusB* vy* btSin(void);
radiusB* vy* btSin(void);
radius* btSin(void);
radius* btCos(void);
btVector3 capStart(void);
btVector3 capEnd(void);
btVector3 offsetHeight(void);
btVector3 capStart(void);
btVector3 capEnd(void);
Drawing top and bottom caps of the cylinder
btVector3 yaxis(void);
btVector3 xaxis(void);
btVector3 offsetHeight(void);
height* btScalar(void);
btVector3 offsetRadius(void);
btVector3 offset2Radius(void);
btVector3 capEnd(void);
Drawing the base of the cone
btVector3 yaxis(void);
btVector3 xaxis(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

GivensRotation r(void);
GivensRotation r1(void);
GivensRotation r2(void);
GivensRotation r3(void);
GivensRotation r(void);
GivensRotation r1(void);
GivensRotation r2(void);
GivensRotation r(void);
GivensRotation gv(void);
GivensRotation gu(void);
GivensRotation u(void);
GivensRotation v(void);
V swapCol(void);
GivensRotation r(void);
GivensRotation r1(void);
GivensRotation r1(void);
GivensRotation r2(void);
GivensRotation r1(void);
GivensRotation r2(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return btVector3(void);
static const btMatrix3x3 identityMatrix(void);
s* btScalar(void);
s* btScalar(void);
s* btScalar(void);
return btMatrix3x3(m_el[0] * s, m_el[1] * s, m_el[2] * s);
btMatrix3x3 R(void);
void deSerialize(const struct btMatrix3x3Data& dataIn);
void deSerializeFloat(const struct btMatrix3x3FloatData& dataIn);
void deSerializeDouble(const struct btMatrix3x3DoubleData& dataIn);
else setValue(m_el[0][0] + m.m_el[0][0], m_el[0][1] + m.m_el[0][1], m_el[0][2] + m.m_el[0][2], m_el[1][0] + m.m_el[1][0], m_el[1][1] + m.m_el[1][1], m_el[1][2] + m.m_el[1][2], m_el[2][0] + m.m_el[2][0], m_el[2][1] + m.m_el[2][1], m_el[2][2] + m.m_el[2][2]);
return btMatrix3x3(m1[0].mVec128 + m2[0].mVec128, m1[1].mVec128 + m2[1].mVec128, m1[2].mVec128 + m2[2].mVec128);
else
return btMatrix3x3(m1[0][0] + m2[0][0], m1[0][1] + m2[0][1], m1[0][2] + m2[0][2], m1[1][0] + m2[1][0], m1[1][1] + m2[1][1], m1[1][2] + m2[1][2], m1[2][0] + m2[2][0], m1[2][1] + m2[2][1], m1[2][2] + m2[2][2]);
return btMatrix3x3(m1[0].mVec128 - m2[0].mVec128, m1[1].mVec128 - m2[1].mVec128, m1[2].mVec128 - m2[2].mVec128);
else
return btMatrix3x3(m1[0][0] - m2[0][0], m1[0][1] - m2[0][1], m1[0][2] - m2[0][2], m1[1][0] - m2[1][0], m1[1][1] - m2[1][1], m1[1][2] - m2[1][2], m1[2][0] - m2[2][0], m1[2][1] - m2[2][1], m1[2][2] - m2[2][2]);
else setValue(m_el[0][0] - m.m_el[0][0], m_el[0][1] - m.m_el[0][1], m_el[0][2] - m.m_el[0][2], m_el[1][0] - m.m_el[1][0], m_el[1][1] - m.m_el[1][1], m_el[1][2] - m.m_el[1][2], m_el[2][0] - m.m_el[2][0], m_el[2][1] - m.m_el[2][1], m_el[2][2] - m.m_el[2][2]);
z0 z1 z2 0

return btMatrix3x3(void);
z0 z1 z2  0
return btMatrix3x3(void);
return btMatrix3x3(void);
return btMatrix3x3(void);
return btMatrix3x3(void);
return btMatrix3x3(void);
return btVector3(void);
return btMatrix3x3(void);
return btMatrix3x3(void);
return btMatrix3x3(m1[0][0] * m2[0][0] + m1[1][0] * m2[1][0] + m1[2][0] * m2[2][0], m1[0][0] * m2[0][1] + m1[1][0] * m2[1][1] + m1[2][0] * m2[2][1], m1[0][0] * m2[0][2] + m1[1][0] * m2[1][2] + m1[2][0] * m2[2][2], m1[0][1] * m2[0][0] + m1[1][1] * m2[1][0] + m1[2][1] * m2[2][0], m1[0][1] * m2[0][1] + m1[1][1] * m2[1][1] + m1[2][1] * m2[2][1], m1[0][1] * m2[0][2] + m1[1][1] * m2[1][2] + m1[2][1] * m2[2][2], m1[0][2] * m2[0][0] + m1[1][2] * m2[1][0] + m1[2][2] * m2[2][0], m1[0][2] * m2[0][1] + m1[1][2] * m2[1][1] + m1[2][2] * m2[2][1], m1[0][2] * m2[0][2] + m1[1][2] * m2[1][2] + m1[2][2] * m2[2][2]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return rows(void);
scale* sqrt(void);
transpose is optimized for sparse matrices
btMatrixX tr(void);
w* other(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

TV v(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

unsigned int polarDecompose(const btMatrix3x3 & a, btMatrix3x3 & u, btMatrix3x3 & h);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

else btSetMax(void);
else btSetMin(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef BT_EULER_DEFAULT_ZYX setEuler(void);
else setEulerZYX(void);
return _mm_cvtss_f32(void);
return vget_lane_f32(void);
return dot(void);
Check for divide by zero
return btVector3(void);
return btVector3(m_floats[0] * s, m_floats[1] * s, m_floats[2] * s);
else
return btQuaternion(void);
SIMD_FORCE_INLINE void deSerialize(const struct btQuaternionFloatData& dataIn);
SIMD_FORCE_INLINE void deSerialize(const struct btQuaternionDoubleData& dataIn);
SIMD_FORCE_INLINE void deSerializeFloat(const struct btQuaternionFloatData& dataIn);
SIMD_FORCE_INLINE void deSerializeDouble(const struct btQuaternionDoubleData& dataIn);
AB12

return btQuaternion(void);
AB12

return btQuaternion(void);
AB3

return btQuaternion(void);
AB3

return btQuaternion(void);
AB3

return btQuaternion(void);
AB3

return btQuaternion(void);
return shortestArcQuat(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void reset(void);
unsigned long long int getTimeMilliseconds(void);
unsigned long long int getTimeMicroseconds(void);
unsigned long long int getTimeNanoseconds(void);
btScalar getTimeSeconds(void);
btEnterProfileZoneFunc* btGetCurrentEnterProfileZoneFunc(void);
btLeaveProfileZoneFunc* btGetCurrentLeaveProfileZoneFunc(void);
void btSetCustomEnterProfileZoneFunc(btEnterProfileZoneFunc * enterFunc);
void btSetCustomLeaveProfileZoneFunc(btLeaveProfileZoneFunc * leaveFunc);
unsigned int btQuickprofGetCurrentThreadIndex2(void);
CProfileNode* Get_Sub_Node(const char* name);
void CleanupMemory(void);
void Reset(void);
void Call(void);
bool Return(void);
Access all the children of the current parent
void First(void);
void Next(void);
bool Is_Done(void);
void Enter_Child(int index);
Make the given child the new parent
void Enter_Largest_Child(void);
Make the largest child the new parent
void Enter_Parent(void);
static void Start_Profile(const char* name);
static void Stop_Profile(void);
static void CleanupMemory(void);
static void Reset(void);
static void Increment_Frame_Counter(void);
static float Get_Time_Since_Reset(void);
static CProfileIterator* Get_Iterator(void);
return new CProfileIterator(void);
static void dumpRecursive(CProfileIterator * profileIterator, int spacing);
static void dumpAll(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return genrand_int32(void);
return rand(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

btReducedVector ret(void);
btReducedVector ret(void);
btReducedVector ret(void);
void normalize(void);
btReducedVector ret(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

char BT_NOT_EMPTY_FILE_CAT(void);
return _mm_add_ps(void);
return _mm_sub_ps(void);
return _mm_mul_ps(void);
return btAlignedAlloc(void);
return btAlignedAlloc(void);
return sqrt(void);
return fabs(void);
return cos(void);
return sin(void);
return tan(void);
return acos(void);
return asin(void);
return atan(void);
return atan2(void);
return exp(void);
return log(void);
return pow(void);
return fmod(void);
y* btScalar(void);
else
return sqrtf(void);
return fabsf(void);
return cosf(void);
return sinf(void);
return tanf(void);
return acosf(void);
return asinf(void);
return atanf(void);
return atan2f(void);
return expf(void);
return logf(void);
return powf(void);
return fmodf(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

btHashString key(void);
else btAssert(void);
else btAssert(void);
ifdef BT_USE_DOUBLE_PRECISION memcpy(void);
else memcpy(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return btSpatialForceVector(m_bottomVec - vec.m_bottomVec, m_topVec - vec.m_topVec);
return btSpatialForceVector(m_bottomVec + vec.m_bottomVec, m_topVec + vec.m_topVec);
return btSpatialForceVector(void);
return btSpatialForceVector(s * m_bottomVec, s * m_topVec);
return btSpatialMotionVector(m_topVec - vec.m_topVec, m_bottomVec - vec.m_bottomVec);
return btSpatialMotionVector(m_topVec + vec.m_topVec, m_bottomVec + vec.m_bottomVec);
return btSpatialMotionVector(void);
return btSpatialMotionVector(s * m_topVec, s * m_bottomVec);
const btMatrix3x3 r_cross(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

const unsigned int nus(usedsize + size);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

for internal use only
bool btIsMainThread(void);
bool btThreadsAreRunning(void);
unsigned int btGetCurrentThreadIndex(void);
void btResetThreadIndexCounter(void);
void lock(void);
void unlock(void);
bool tryLock(void);
internal use only
virtual void activate(void);
virtual void deactivate(void);
classes
void btSetTaskScheduler(btITaskScheduler * ts);
get the current task scheduler
btITaskScheduler* btGetTaskScheduler(void);
btITaskScheduler* btGetSequentialTaskScheduler(void);
btITaskScheduler* btCreateDefaultTaskScheduler(void);
btITaskScheduler* btGetOpenMPTaskScheduler(void);
btITaskScheduler* btGetTBBTaskScheduler(void);
btITaskScheduler* btGetPPLTaskScheduler(void);
void btParallelFor(int iBegin, int iEnd, int grainSize, const btIParallelForBody & body);
btScalar btParallelSum(int iBegin, int iEnd, int grainSize, const btIParallelSumBody & body);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return btTransform(inv * -m_origin);
void deSerialize(const struct btTransformData& dataIn);
void deSerializeDouble(const struct btTransformDoubleData& dataIn);
void deSerializeFloat(const struct btTransformFloatData& dataIn);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm_cvtss_f32(void);
return vget_lane_f32(void);
return dot(void);
return length(void);
return btSqrt(void);
return btScalar(void);
return btVector3(void);
return btVector3(void);
else
return btVector3(m_floats[1] * v.m_floats[2] - m_floats[2] * v.m_floats[1], m_floats[2] * v.m_floats[0] - m_floats[0] * v.m_floats[2], m_floats[0] * v.m_floats[1] - m_floats[1] * v.m_floats[0]);
return _mm_cvtss_f32(void);
return vget_lane_f32(void);
return btVector3(void);
return btVector3(void);
else btSetMax(void);
else btSetMin(void);
SIMD_FORCE_INLINE void deSerialize(const struct btVector3DoubleData& dataIn);
SIMD_FORCE_INLINE void deSerialize(const struct btVector3FloatData& dataIn);
SIMD_FORCE_INLINE void deSerializeFloat(const struct btVector3FloatData& dataIn);
SIMD_FORCE_INLINE void deSerializeDouble(const struct btVector3DoubleData& dataIn);
return btVector3(void);
else
return btVector3(v1.m_floats[0] + v2.m_floats[0], v1.m_floats[1] + v2.m_floats[1], v1.m_floats[2] + v2.m_floats[2]);
else
return btVector3(v1.m_floats[0] * v2.m_floats[0], v1.m_floats[1] * v2.m_floats[1], v1.m_floats[2] * v2.m_floats[2]);
else
return btVector3(v1.m_floats[0] - v2.m_floats[0], v1.m_floats[1] - v2.m_floats[1], v1.m_floats[2] - v2.m_floats[2]);
else
return btVector3(void);
else
return btVector3(v.m_floats[0] * s, v.m_floats[1] * s, v.m_floats[2] * s);
return btVector3(void);
y

return btVector3(void);
else
return btVector3(v1.m_floats[0] / v2.m_floats[0], v1.m_floats[1] / v2.m_floats[1], v1.m_floats[2] / v2.m_floats[2]);
return btVector3(void);
long _maxdot_large(const float* array, const float* vec, unsigned long array_count, float* dotOut);
long _mindot_large(const float* array, const float* vec, unsigned long array_count, float* dotOut);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static btThreadSupportInterface* create(const ConstructionInfo & info);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * key, unsigned int length, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void Update(const byte * input, size_t length);
void TruncatedFinal(byte * hash, size_t size);
return StaticAlgorithmName(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int cryptogams_AES_set_encrypt_key(const unsigned char* userKey, const int bits, unsigned int* rkey);
int cryptogams_AES_set_decrypt_key(const unsigned char* userKey, const int bits, unsigned int* rkey);
void cryptogams_AES_encrypt_block(const unsigned char* in, unsigned char* out, const unsigned int* rkey);
void cryptogams_AES_decrypt_block(const unsigned char* in, unsigned char* out, const unsigned int* rkey);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Element GeneralCascadeMultiplication(const AbstractGroup<Element> &group, Iterator begin, Iterator end);
Element GeneralCascadeExponentiation(const AbstractRing<Element> &ring, Iterator begin, Iterator end);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

CRYPTOPP_DLL bool AssignIntToInteger(const std::type_info & valueType, void* pInteger, const void* pInt);
type_info& CRYPTOPP_API IntegerTypeId(void);
throw ParameterNotUsed(void);
endif AlgorithmParameters(const AlgorithmParameters & x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

UnalignedDeallocate
CRYPTOPP_DLL void CRYPTOPP_API CallNewHandler(void);
CRYPTOPP_DLL void* CRYPTOPP_API AlignedAllocate(size_t size);
CRYPTOPP_DLL void CRYPTOPP_API AlignedDeallocate(void* ptr);
CRYPTOPP_DLL void* CRYPTOPP_API UnalignedAllocate(size_t size);
CRYPTOPP_DLL void CRYPTOPP_API UnalignedDeallocate(void* ptr);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void GenerateBlock(byte * output, size_t size);
void DiscardBytes(size_t n);
void ProcessData(byte * outString, const byte * inString, size_t length);
void UncheckedSetKey(const byte * key, unsigned int length, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * key, unsigned int keylen, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return __crc32b(void);
return __crc32w(void);
return __crc32cb(void);
return __crc32cw(void);
return vmull_p64(void);
return vmull_p64(void);
return vmull_p64(void);
return vmull_p64(void);
return vmull_p64(void);
return vmull_p64(void);
return veor3q_u64(void);
return vxarq_u64(void);
return vxarq_u64(void);
return vrax1q_u64(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

throw BERDecodeErr(void);
return the number of octets used for the encoding
CRYPTOPP_DLL size_t CRYPTOPP_API DERLengthEncode(BufferedTransformation & bt, lword length);
CRYPTOPP_DLL bool CRYPTOPP_API BERLengthDecode(BufferedTransformation & bt, size_t & length);
param bt BufferedTransformation object for writing
CRYPTOPP_DLL void CRYPTOPP_API DEREncodeNull(BufferedTransformation & bt);
param bt BufferedTransformation object for reading
CRYPTOPP_DLL void CRYPTOPP_API BERDecodeNull(BufferedTransformation & bt);
return the number of octets used for the encoding
CRYPTOPP_DLL size_t CRYPTOPP_API DEREncodeOctetString(BufferedTransformation & bt, const byte * str, size_t strLen);
return the number of octets used for the encoding
CRYPTOPP_DLL size_t CRYPTOPP_API DEREncodeOctetString(BufferedTransformation & bt, const SecByteBlock & str);
return the number of octets used for the encoding
CRYPTOPP_DLL size_t CRYPTOPP_API BERDecodeOctetString(BufferedTransformation & bt, SecByteBlock & str);
return the number of octets used for the encoding
CRYPTOPP_DLL size_t CRYPTOPP_API BERDecodeOctetString(BufferedTransformation & bt, BufferedTransformation & str);
3
CRYPTOPP_DLL size_t CRYPTOPP_API DEREncodeTextString(BufferedTransformation & bt, const byte * str, size_t strLen, byte asnTag);
3
CRYPTOPP_DLL size_t CRYPTOPP_API DEREncodeTextString(BufferedTransformation & bt, const SecByteBlock & str, byte asnTag);
0
CRYPTOPP_DLL size_t CRYPTOPP_API DEREncodeTextString(BufferedTransformation & bt, const std::string & str, byte asnTag);
3
CRYPTOPP_DLL size_t CRYPTOPP_API BERDecodeTextString(BufferedTransformation & bt, SecByteBlock & str, byte asnTag);
0
CRYPTOPP_DLL size_t CRYPTOPP_API BERDecodeTextString(BufferedTransformation & bt, std::string & str, byte asnTag);
3
CRYPTOPP_DLL size_t CRYPTOPP_API DEREncodeDate(BufferedTransformation & bt, const SecByteBlock & str, byte asnTag);
3
CRYPTOPP_DLL size_t CRYPTOPP_API BERDecodeDate(BufferedTransformation & bt, SecByteBlock & str, byte asnTag);
CRYPTOPP_DLL size_t CRYPTOPP_API DEREncodeBitString(BufferedTransformation & bt, const byte * str, size_t strLen, unsigned int unusedBits = 0);
CRYPTOPP_DLL size_t CRYPTOPP_API BERDecodeBitString(BufferedTransformation & bt, SecByteBlock & str, unsigned int& unusedBits);
param dest BufferedTransformation object
CRYPTOPP_DLL void CRYPTOPP_API DERReencode(BufferedTransformation & bt, BufferedTransformation & dest);
3
CRYPTOPP_DLL size_t CRYPTOPP_API BERDecodePeekLength(const BufferedTransformation & bt);
param bt BufferedTransformation object
void BERDecode(BufferedTransformation & bt);
BERSequenceDecoder key(void);
BERSequenceDecoder algorithm(void);
static void EncodeValue(BufferedTransformation & bt, word32 v);
static size_t DecodeValue(BufferedTransformation & bt, word32 & v);
Flag EncodedObjectFilter(BufferedTransformation * attachment = NULLPTR, unsigned int nObjects = 1, word32 flags = 0);
in bytes
void Put(const byte * inString, size_t length);
BufferedTransformation& CurrentTarget(void);
details BERGeneralDecoder uses DefaultTag
explicit BERGeneralDecoder(BufferedTransformation & inQueue);
1 tag
explicit BERGeneralDecoder(BufferedTransformation & inQueue, byte asnTag);
1 tag
explicit BERGeneralDecoder(BERGeneralDecoder & inQueue, byte asnTag);
throw BERDecodeError if the next octet is not b
void CheckByte(byte b);
size_t TransferTo2(BufferedTransformation & target, lword & transferBytes, const std::string & channel = DEFAULT_CHANNEL, bool blocking = true);
details Call this to denote end of sequence
void MessageEnd(void);
void Init(byte asnTag);
lword ReduceLength(lword delta);
details DERGeneralEncoder uses DefaultTag
explicit DERGeneralEncoder(BufferedTransformation & outQueue);
1 tag
explicit DERGeneralEncoder(BufferedTransformation & outQueue, byte asnTag);
1 tag
explicit DERGeneralEncoder(DERGeneralEncoder & outQueue, byte asnTag);
details Call this to denote end of sequence
void MessageEnd(void);
void BERDecode(BufferedTransformation & bt);
void BERDecode(BufferedTransformation & bt);
DEREncodeOptionalAttributes
virtual void BERDecodeOptionalAttributes(BufferedTransformation & bt);
Issue 346 BERDecodeError(void);
1 BERDecodeError(void);
4 BERDecodeError(void);
SecByteBlock buf(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void SetKey(const byte * userKey, size_t keylength, const NameValuePairs & params);
void Resynchronize(const byte * iv, int length = -1);
void Update(const byte * input, size_t length);
void ProcessData(byte * outString, const byte * inString, size_t length);
void TruncatedFinal(byte * mac, size_t macSize);
void AuthenticateData(const byte * data, size_t len);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Base32HexEncoder and Base32HexDecoder
void IsolatedInitialize(const NameValuePairs & parameters);
Base32HexEncoder and Base32HexDecoder
void IsolatedInitialize(const NameValuePairs & parameters);
return default decoding lookup table
static const int* CRYPTOPP_API GetDefaultDecodingLookupArray(void);
void IsolatedInitialize(const NameValuePairs & parameters);
void IsolatedInitialize(const NameValuePairs & parameters);
return default decoding lookup table
static const int* CRYPTOPP_API GetDefaultDecodingLookupArray(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void IsolatedInitialize(const NameValuePairs & parameters);
void IsolatedInitialize(const NameValuePairs & parameters);
return default decoding lookup table
static const int* CRYPTOPP_API GetDecodingLookupArray(void);
void IsolatedInitialize(const NameValuePairs & parameters);
void IsolatedInitialize(const NameValuePairs & parameters);
return default decoding lookup table
static const int* CRYPTOPP_API GetDecodingLookupArray(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void IsolatedInitialize(const NameValuePairs & parameters);
size_t Put2(const byte * begin, size_t length, int messageEnd, bool blocking);
void IsolatedInitialize(const NameValuePairs & parameters);
size_t Put2(const byte * begin, size_t length, int messageEnd, bool blocking);
static void CRYPTOPP_API InitializeDecodingLookupArray(int* lookup, const byte * alphabet, unsigned int base, bool caseInsensitive);
void IsolatedInitialize(const NameValuePairs & parameters);
size_t Put2(const byte * begin, size_t length, int messageEnd, bool blocking);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void Reset(size_t digestLength = DIGESTSIZE, size_t keyLength = 0);
void Reset(size_t digestLength = DIGESTSIZE, size_t keyLength = 0);
void Reset(void);
side CRYPTOPP_CONSTANT(BLOCKSIZE = BLAKE2s_Info::BLOCKSIZE);
void Reset(void);
side CRYPTOPP_CONSTANT(BLOCKSIZE = BLAKE2b_Info::BLOCKSIZE);
4 BLAKE2s(bool treeMode = false, unsigned int digestSize = DIGESTSIZE);
2 BLAKE2s(unsigned int digestSize);
4 BLAKE2s(const byte * key, size_t keyLength, const byte * salt = NULLPTR, size_t saltLength = 0, const byte * personalization = NULLPTR, size_t personalizationLength = 0, bool treeMode = false, unsigned int digestSize = DIGESTSIZE);
void Update(const byte * input, size_t length);
void Restart(void);
void Restart(const BLAKE2s_ParameterBlock & block, const word32 counter[2]);
void TruncatedFinal(byte * hash, size_t size);
void Compress(const byte * input);
inline void IncrementCounter(size_t count = BLOCKSIZE);
void UncheckedSetKey(const byte * key, unsigned int length, const CryptoPP::NameValuePairs & params);
4 BLAKE2b(bool treeMode = false, unsigned int digestSize = DIGESTSIZE);
2 BLAKE2b(unsigned int digestSize);
4 BLAKE2b(const byte * key, size_t keyLength, const byte * salt = NULLPTR, size_t saltLength = 0, const byte * personalization = NULLPTR, size_t personalizationLength = 0, bool treeMode = false, unsigned int digestSize = DIGESTSIZE);
void Update(const byte * input, size_t length);
void Restart(void);
void Restart(const BLAKE2b_ParameterBlock & block, const word64 counter[2]);
void TruncatedFinal(byte * hash, size_t size);
void Compress(const byte * input);
inline void IncrementCounter(size_t count = BLOCKSIZE);
void UncheckedSetKey(const byte * key, unsigned int length, const CryptoPP::NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * key_string, unsigned int keylength, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

unsigned int GenerateBit(void);
byte GenerateByte(void);
void GenerateBlock(byte * output, size_t size);
void ProcessData(byte * outString, const byte * inString, size_t length);
void Seek(lword index);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * key, unsigned int keylen, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);
void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);
static void Omega(int i, word32 kappa[8]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * key, unsigned int length, const NameValuePairs & params);
void Update(const byte * input, size_t length);
void TruncatedFinal(byte * mac, size_t size);
void ProcessBuf(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSpecifyDataLengths(lword headerLength, lword messageLength, lword footerLength);
void SetKeyWithoutResync(const byte * userKey, size_t keylength, const NameValuePairs & params);
void Resync(const byte * iv, size_t len);
size_t AuthenticateBlocks(const byte * data, size_t len);
void AuthenticateLastHeaderBlock(void);
void AuthenticateLastConfidentialBlock(void);
void AuthenticateLastFooterBlock(byte * mac, size_t macSize);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void CipherSetKey(const NameValuePairs & params, const byte * key, size_t length);
void OperateKeystream(KeystreamOperation operation, byte * output, const byte * input, size_t iterationCount);
void CipherResynchronize(byte * keystreamBuffer, const byte * IV, size_t length);
void SeekToIteration(lword iterationCount);
void CipherSetKey(const NameValuePairs & params, const byte * key, size_t length);
void OperateKeystream(KeystreamOperation operation, byte * output, const byte * input, size_t iterationCount);
void CipherResynchronize(byte * keystreamBuffer, const byte * IV, size_t length);
void SeekToIteration(lword iterationCount);
Index into m_state CRYPTOPP_CONSTANT(CTR = 24);
void CipherSetKey(const NameValuePairs & params, const byte * key, size_t length);
void OperateKeystream(KeystreamOperation operation, byte * output, const byte * input, size_t iterationCount);
void CipherResynchronize(byte * keystreamBuffer, const byte * IV, size_t length);
void SeekToIteration(lword iterationCount);
Default rounds CRYPTOPP_CONSTANT(KEY = 16);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return W64LIT(void);
virtual void EncryptAndAuthenticate(byte * ciphertext, byte * mac, size_t macSize, const byte * iv, int ivLength, const byte * aad, size_t aadLength, const byte * message, size_t messageLength);
virtual bool DecryptAndVerify(byte * message, const byte * mac, size_t macSize, const byte * iv, int ivLength, const byte * aad, size_t aadLength, const byte * ciphertext, size_t ciphertextLength);
void SetKeyWithoutResync(const byte * userKey, size_t keylength, const NameValuePairs & params);
void Resync(const byte * iv, size_t len);
size_t AuthenticateBlocks(const byte * data, size_t len);
void AuthenticateLastHeaderBlock(void);
void AuthenticateLastConfidentialBlock(void);
void AuthenticateLastFooterBlock(byte * mac, size_t macSize);
cpp
void RekeyCipherAndMac(const byte * userKey, size_t userKeyLength, const NameValuePairs & params);
return W64LIT(void);
virtual void EncryptAndAuthenticate(byte * ciphertext, byte * mac, size_t macSize, const byte * iv, int ivLength, const byte * aad, size_t aadLength, const byte * message, size_t messageLength);
virtual bool DecryptAndVerify(byte * message, const byte * mac, size_t macSize, const byte * iv, int ivLength, const byte * aad, size_t aadLength, const byte * ciphertext, size_t ciphertextLength);
void SetKeyWithoutResync(const byte * userKey, size_t keylength, const NameValuePairs & params);
void Resync(const byte * iv, size_t len);
size_t AuthenticateBlocks(const byte * data, size_t len);
void AuthenticateLastHeaderBlock(void);
void AuthenticateLastConfidentialBlock(void);
void AuthenticateLastFooterBlock(byte * mac, size_t macSize);
cpp
void RekeyCipherAndMac(const byte * userKey, size_t userKeyLength, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);
void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void AddDefaultRoute(BufferedTransformation & destination, const std::string & channel);
void AddRoute(unsigned int begin, unsigned int end, BufferedTransformation & destination, const std::string & channel);
void Put(byte inByte);
void Put(const byte * inString, unsigned int length);
void Flush(bool completeFlush, int propagation = -1);
void MessageEnd(int propagation = -1);
void PutMessageEnd(const byte * inString, unsigned int length, int propagation = -1);
void MessageSeriesEnd(int propagation = -1);
void Reset(const std::string & channel);
void Next(void);
BufferedTransformation& Destination(void);
string& Channel(void);
void IsolatedInitialize(const NameValuePairs & parameters = g_nullNameValuePairs);
size_t ChannelPut2(const std::string & channel, const byte * begin, size_t length, int messageEnd, bool blocking);
size_t ChannelPutModifiable2(const std::string & channel, byte * begin, size_t length, int messageEnd, bool blocking);
bool ChannelFlush(const std::string & channel, bool completeFlush, int propagation = -1, bool blocking = true);
bool ChannelMessageSeriesEnd(const std::string & channel, int propagation = -1, bool blocking = true);
byte* ChannelCreatePutSpace(const std::string & channel, size_t & size);
void AddDefaultRoute(BufferedTransformation & destination);
void RemoveDefaultRoute(BufferedTransformation & destination);
void AddDefaultRoute(BufferedTransformation & destination, const std::string & outChannel);
void RemoveDefaultRoute(BufferedTransformation & destination, const std::string & outChannel);
void AddRoute(const std::string & inChannel, BufferedTransformation & destination, const std::string & outChannel);
void RemoveRoute(const std::string & inChannel, BufferedTransformation & destination, const std::string & outChannel);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * key, unsigned int length, const NameValuePairs & params);
void Update(const byte * input, size_t length);
void TruncatedFinal(byte * mac, size_t size);
void ProcessBuf(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

CRYPTOPP_DLL void CRYPTOPP_API DetectX86Features(void);
CRYPTOPP_DLL bool CRYPTOPP_API CpuId(word32 func, word32 subfunc, word32 output[4]);
void CRYPTOPP_API DetectArmFeatures(void);
void CRYPTOPP_API DetectPowerPcFeatures(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void Update(const byte * input, size_t length);
void TruncatedFinal(byte * hash, size_t size);
return StaticAlgorithmName(void);
void Update(const byte * input, size_t length);
void TruncatedFinal(byte * hash, size_t size);
return StaticAlgorithmName(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return GetValue(void);
return GetValueWithDefault(void);
return GetValue(void);
return GetValueWithDefault(void);
throw ValueTypeMismatch(void);
param params additional initialization parameters to configure this object
virtual void SetKey(const byte * key, size_t length, const NameValuePairs & params = g_nullNameValuePairs);
void SetKeyWithRounds(const byte * key, size_t length, int rounds);
void SetKeyWithIV(const byte * key, size_t length, const byte * iv, size_t ivLength);
return IVSize(void);
return IVSize(void);
return IVSize(void);
virtual void GetNextIV(RandomNumberGenerator & rng, byte * iv);
throw InvalidKeyLength if the key length is invalid
void ThrowIfInvalidKeyLength(size_t length);
note called when no IV is passed
void ThrowIfResynchronizable(void);
void ThrowIfInvalidIV(const byte * iv);
throw InvalidArgument if the IV length is invalid
size_t ThrowIfInvalidIVLength(int length);
throw InvalidArgument if the number of rounds are invalid
const byte* GetIVAndThrowIfInvalid(const NameValuePairs & params, size_t & size);
return MandatoryBlockSize(void);
IsLastBlockSpecial
virtual size_t ProcessLastBlock(byte * outString, size_t outLength, const byte * inString, size_t inLength);
throw NotImplemented("StreamTransformation: this object doesn't support random access");
return DigestSize(void);
return Verify(void);
virtual bool TruncatedVerify(const byte * digest, size_t digestLength);
return TruncatedVerify(void);
void SpecifyDataLengths(lword headerLength, lword messageLength, lword footerLength = 0);
virtual void EncryptAndAuthenticate(byte * ciphertext, byte * mac, size_t macSize, const byte * iv, int ivLength, const byte * header, size_t headerLength, const byte * message, size_t messageLength);
virtual bool DecryptAndVerify(byte * message, const byte * mac, size_t macSize, const byte * iv, int ivLength, const byte * header, size_t headerLength, const byte * ciphertext, size_t ciphertextLength);
throw NotImplemented("RandomNumberGenerator: IncorporateEntropy not implemented");
virtual byte GenerateByte(void);
virtual unsigned int GenerateBit(void);
virtual word32 GenerateWord32(word32 min = 0, word32 max = 0xffffffffUL);
virtual void GenerateBlock(byte * output, size_t size);
virtual void GenerateIntoBufferedTransformation(BufferedTransformation & target, const std::string & channel, lword length);
param n the number of bytes to generate and discard
virtual void DiscardBytes(size_t n);
virtual void SetParameters(const NameValuePairs & params);
CRYPTOPP_DLL RandomNumberGenerator& CRYPTOPP_API NullRNG(void);
bool Wait(unsigned long milliseconds, CallStack const& callStack);
return Put(void);
return Put2(void);
size_t PutWord16(word16 value, ByteOrder order = BIG_ENDIAN_ORDER, bool blocking = true);
size_t PutWord32(word32 value, ByteOrder order = BIG_ENDIAN_ORDER, bool blocking = true);
size_t PutWord64(word64 value, ByteOrder order = BIG_ENDIAN_ORDER, bool blocking = true);
return PutModifiable2(void);
return Put2(propagation < 0 ? -1 : propagation + 1);
return Put2(void);
void GetWaitObjects(WaitObjectContainer & container, CallStack const& callStack);
throw NotImplemented("BufferedTransformation: this object can't be reinitialized");
virtual void Initialize(const NameValuePairs & parameters = g_nullNameValuePairs, int propagation = -1);
virtual bool Flush(bool hardFlush, int propagation = -1, bool blocking = true);
virtual bool MessageSeriesEnd(int propagation = -1, bool blocking = true);
virtual size_t Get(byte & outByte);
virtual size_t Get(byte * outString, size_t getMax);
size_t GetWord16(word16 & value, ByteOrder order = BIG_ENDIAN_ORDER);
size_t GetWord32(word32 & value, ByteOrder order = BIG_ENDIAN_ORDER);
3
size_t GetWord64(word64 & value, ByteOrder order = BIG_ENDIAN_ORDER);
virtual lword Skip(lword skipMax = LWORD_MAX);
return CopyRangeTo(void);
virtual bool GetNextMessage(void);
virtual unsigned int SkipMessages(unsigned int count = UINT_MAX);
brief Skip all messages in the series
virtual void SkipAll(void);
return NumberOfMessages(void);
size_t TransferMessagesTo2(BufferedTransformation & target, unsigned int& messageCount, const std::string & channel = DEFAULT_CHANNEL, bool blocking = true);
size_t TransferAllTo2(BufferedTransformation & target, const std::string & channel = DEFAULT_CHANNEL, bool blocking = true);
return ChannelPut(void);
return ChannelPut2(void);
return ChannelPutModifiable2(void);
size_t ChannelPutWord16(const std::string & channel, word16 value, ByteOrder order = BIG_ENDIAN_ORDER, bool blocking = true);
size_t ChannelPutWord32(const std::string & channel, word32 value, ByteOrder order = BIG_ENDIAN_ORDER, bool blocking = true);
size_t ChannelPutWord64(const std::string & channel, word64 value, ByteOrder order = BIG_ENDIAN_ORDER, bool blocking = true);
return ChannelPut2(propagation < 0 ? -1 : propagation + 1);
virtual byte* ChannelCreatePutSpace(const std::string & channel, size_t & size);
virtual size_t ChannelPut2(const std::string & channel, const byte * inString, size_t length, int messageEnd, bool blocking);
virtual size_t ChannelPutModifiable2(const std::string & channel, byte * inString, size_t length, int messageEnd, bool blocking);
virtual bool ChannelFlush(const std::string & channel, bool hardFlush, int propagation = -1, bool blocking = true);
virtual bool ChannelMessageSeriesEnd(const std::string & channel, int propagation = -1, bool blocking = true);
virtual void SetRetrievalChannel(const std::string & channel);
throw NotImplemented("BufferedTransformation: this object is not attachable");
param newAttachment the attachment to add to the end of the chain
virtual void Attach(BufferedTransformation * newAttachment);
return a reference to a BufferedTransformation object that discards all input
CRYPTOPP_DLL BufferedTransformation & TheBitBucket(void);
throw InvalidMaterial("CryptoMaterial: this object contains invalid values");
throw NotImplemented("CryptoMaterial: this object does not support saving");
throw NotImplemented("CryptoMaterial: this object does not support loading");
throw NotImplemented("CryptoMaterial: this object does not support precomputation");
throw NotImplemented("CryptoMaterial: this object does not support precomputation");
throw NotImplemented("CryptoMaterial: this object does not support precomputation");
throw NotImplemented("GeneratableCryptoMaterial: this object does not support key/parameter generation");
void GenerateRandomWithKeySize(RandomNumberGenerator & rng, unsigned int keySize);
return AccessPublicKey(void);
return GetPublicKey(void);
return AccessPrivateKey(void);
return GetPrivateKey(void);
return AccessCryptoParameters(void);
return GetCryptoParameters(void);
return SignatureLength(void);
receive incoming message ProcessIncomingMessage(void);
void InitializePasswordAuthenticatedKeyAgreementSession(RandomNumberGenerator & rng, const byte * myId, unsigned int myIdLength, const byte * counterPartyId, unsigned int counterPartyIdLength, const byte * passwordOrVerifier, unsigned int passwordOrVerifierLength);
int LibraryVersion(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

throw DARN_Err if the random number generator is not available DARN(void);
in bytes
virtual void GenerateBlock(byte * output, size_t size);
virtual void DiscardBytes(size_t n);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

param attachment a BufferedTransformation to attach to this object DataEncryptor(const char* passphrase, BufferedTransformation * attachment = NULLPTR);
param attachment a BufferedTransformation to attach to this object DataEncryptor(const byte * passphrase, size_t passphraseLength, BufferedTransformation * attachment = NULLPTR);
void FirstPut(const byte*);
void LastPut(const byte * inString, size_t length);
param throwException a flag specifying whether an Exception should be thrown on error DataDecryptor(const char* passphrase, BufferedTransformation * attachment = NULLPTR, bool throwException = true);
param throwException a flag specifying whether an Exception should be thrown on error DataDecryptor(const byte * passphrase, size_t passphraseLength, BufferedTransformation * attachment = NULLPTR, bool throwException = true);
void FirstPut(const byte * inString);
void LastPut(const byte * inString, size_t length);
void CheckKey(const byte * salt, const byte * keyCheck);
param attachment a BufferedTransformation to attach to this object DataEncryptorWithMAC(const char* passphrase, BufferedTransformation * attachment = NULLPTR);
param attachment a BufferedTransformation to attach to this object DataEncryptorWithMAC(const byte * passphrase, size_t passphraseLength, BufferedTransformation * attachment = NULLPTR);
void LastPut(const byte * inString, size_t length);
param throwException a flag specifying whether an Exception should be thrown on error DataDecryptorWithMAC(const char* passphrase, BufferedTransformation * attachment = NULLPTR, bool throwException = true);
param throwException a flag specifying whether an Exception should be thrown on error DataDecryptorWithMAC(const byte * passphrase, size_t passphraseLength, BufferedTransformation * attachment = NULLPTR, bool throwException = true);
void LastPut(const byte * inString, size_t length);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void RawSetKey(CipherDir direction, const byte * userKey);
void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);
check DES key parity bits
static bool CheckKeyParityBits(const byte * key);
correct DES key parity bits
static void CorrectKeyParityBits(byte * key);
void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);
void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);
void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return StaticAlgorithmName(void);
DH dh(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * key, unsigned int length, const NameValuePairs & params);
void Update(const byte * input, size_t length);
void TruncatedFinal(byte * mac, size_t size);
Encryption cipher(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int curve25519_mult(byte publicKey[32], const byte secretKey[32]);
int curve25519_mult(byte sharedKey[32], const byte secretKey[32], const byte othersKey[32]);
int ed25519_publickey(byte publicKey[32], const byte secretKey[32]);
int ed25519_sign(const byte * message, size_t messageLength, const byte secretKey[32], const byte publicKey[32], byte signature[64]);
int ed25519_sign(std::istream & stream, const byte secretKey[32], const byte publicKey[32], byte signature[64]);
int ed25519_sign_open(const byte * message, size_t messageLength, const byte publicKey[32], const byte signature[64]);
int ed25519_sign_open(std::istream & stream, const byte publicKey[32], const byte signature[64]);
extern int curve25519_mult_SSE2(byte sharedKey[32], const byte secretKey[32], const byte othersKey[32]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return DRBG_Reseed(void);
return DRBG_Reseed(void);
return Hash_Generate(void);
return Hash_Generate(void);
void DRBG_Instantiate(const byte * entropy, size_t entropyLength, const byte * nonce, size_t nonceLength, const byte * personalization, size_t personalizationLength);
void DRBG_Reseed(const byte * entropy, size_t entropyLength, const byte * additional, size_t additionaLength);
void Hash_Generate(const byte * additional, size_t additionaLength, byte * output, size_t size);
void Hash_Update(const byte * input1, size_t inlen1, const byte * input2, size_t inlen2, const byte * input3, size_t inlen3, const byte * input4, size_t inlen4, byte * output, size_t outlen);
return DRBG_Reseed(void);
return DRBG_Reseed(void);
return HMAC_Generate(void);
return HMAC_Generate(void);
void DRBG_Instantiate(const byte * entropy, size_t entropyLength, const byte * nonce, size_t nonceLength, const byte * personalization, size_t personalizationLength);
void DRBG_Reseed(const byte * entropy, size_t entropyLength, const byte * additional, size_t additionaLength);
void HMAC_Generate(const byte * additional, size_t additionaLength, byte * output, size_t size);
void HMAC_Update(const byte * input1, size_t inlen1, const byte * input2, size_t inlen2, const byte * input3, size_t inlen3);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

0
size_t DSAConvertSignatureFormat(byte * buffer, size_t bufferSize, DSASignatureFormat toFormat, const byte * signature, size_t signatureLen, DSASignatureFormat fromFormat);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void SetKeyWithoutResync(const byte * userKey, size_t keylength, const NameValuePairs & params);
void Resync(const byte * iv, size_t len);
size_t AuthenticateBlocks(const byte * data, size_t len);
void AuthenticateLastHeaderBlock(void);
void AuthenticateLastFooterBlock(byte * mac, size_t macSize);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

details This constructor will decode and extract the fields fieldID and curve of the sequence ECParameters EC2N(BufferedTransformation & bt);
return ScalarMultiply(void);
return CascadeScalarMultiply(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void Initialize(const OID & oid);
void AssignFrom(const NameValuePairs & source);
void GenerateRandom(RandomNumberGenerator & rng, const NameValuePairs & alg);
throw DL_BadElement(void);
throw DL_BadElement(void);
to get first one
static OID CRYPTOPP_API GetNextRecommendedParametersOID(const OID & oid);
void BERDecode(BufferedTransformation & bt);
X509PublicKey
void BERDecodePublicKey(BufferedTransformation & bt, bool parametersPresent, size_t size);
PKCS8PrivateKey
void BERDecodePrivateKey(BufferedTransformation & bt, bool parametersPresent, size_t size);
PKCS8PrivateKey
void BERDecodePrivateKey(BufferedTransformation & bt, bool parametersPresent, size_t size);
X509PublicKey
void BERDecodePublicKey(BufferedTransformation & bt, bool parametersPresent, size_t size);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

MontgomeryRepresentation ECP(const ECP & ecp, bool convertToMontgomeryRepresentation);
fieldID and curve of the sequence ECParameters ECP(BufferedTransformation & bt);
return ScalarMultiply(void);
return CascadeScalarMultiply(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return STDMIN(void);
SecByteBlock block(void);
return DecodingResult(void);
return DecodingResult(void);
return DecodingResult(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return HashIdentifier(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void SetBase(const DL_GroupPrecomputation<Element> &group, const Element & base);
void Precompute(const DL_GroupPrecomputation<Element> &group, unsigned int maxExpBits, unsigned int storage);
void Load(const DL_GroupPrecomputation<Element> &group, BufferedTransformation & storedPrecomputation);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PublicKey
void BERDecode(BufferedTransformation & bt);
void AssignFrom(const NameValuePairs & source);
void BERDecode(BufferedTransformation & bt);
void AssignFrom(const NameValuePairs & source);
void GenerateRandom(RandomNumberGenerator & rng, const NameValuePairs & alg);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return AccessAbstractGroupParameters(void);
return StaticPublicKeyLength(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

size_t TransferTo2(BufferedTransformation & target, lword & transferBytes, const std::string & channel = DEFAULT_CHANNEL, bool blocking = true);
lword Skip(lword skipMax = ULONG_MAX);
void StoreInitialize(const NameValuePairs & parameters);
void IsolatedInitialize(const NameValuePairs & parameters);
size_t Put2(const byte * inString, size_t length, int messageEnd, bool blocking);
bool IsolatedFlush(bool hardFlush, bool blocking);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Pass NULL to remove an existing BufferedTransformation or chain of filters
void Detach(BufferedTransformation * newAttachment = NULLPTR);
h
size_t TransferTo2(BufferedTransformation & target, lword & transferBytes, const std::string & channel = DEFAULT_CHANNEL, bool blocking = true);
h
void Initialize(const NameValuePairs & parameters = g_nullNameValuePairs, int propagation = -1);
bool Flush(bool hardFlush, int propagation = -1, bool blocking = true);
bool MessageSeriesEnd(int propagation = -1, bool blocking = true);
void Insert(Filter * nextFilter);
void PropagateInitialize(const NameValuePairs & parameters, int propagation);
size_t Output(int outputSite, const byte * inString, size_t length, int messageEnd, bool blocking, const std::string & channel = DEFAULT_CHANNEL);
size_t OutputModifiable(int outputSite, byte * inString, size_t length, int messageEnd, bool blocking, const std::string & channel = DEFAULT_CHANNEL);
bool OutputMessageEnd(int outputSite, int propagation, bool blocking, const std::string & channel = DEFAULT_CHANNEL);
bool OutputFlush(int outputSite, bool hardFlush, int propagation, bool blocking, const std::string & channel = DEFAULT_CHANNEL);
bool OutputMessageSeriesEnd(int outputSite, int propagation, bool blocking, const std::string & channel = DEFAULT_CHANNEL);
return HelpCreatePutSpace(void);
return HelpCreatePutSpace(void);
void AddRangeToSkip(unsigned int message, lword position, lword size, bool sortNow = true);
void ResetMeter(void);
size_t Put2(const byte * inString, size_t length, int messageEnd, bool blocking);
size_t PutModifiable2(byte * inString, size_t length, int messageEnd, bool blocking);
bool IsolatedMessageSeriesEnd(bool blocking);
size_t PutMaybeModifiable(byte * inString, size_t length, int messageEnd, bool blocking, bool modifiable);
param attachment an attached transformation FilterWithBufferedInput(BufferedTransformation * attachment);
void IsolatedInitialize(const NameValuePairs & parameters);
return PutMaybeModifiable(void);
note  hardFlush must be used with care
bool IsolatedFlush(bool hardFlush, bool blocking);
void ForceNextPut(void);
must be overridden
virtual void NextPutMultiple(const byte * inString, size_t length);
size_t PutMaybeModifiable(byte * begin, size_t length, int messageEnd, bool blocking, bool modifiable);
else NextPutMultiple(void);
void ResetQueue(size_t blockSize, size_t maxBlocks);
size_t GetAll(byte * outString);
void Put(const byte * inString, size_t length);
throw BlockingInputOnly(void);
void InitializeDerivedAndReturnNewSizes(const NameValuePairs & parameters, size_t & firstSize, size_t & blockSize, size_t & lastSize);
void FirstPut(const byte * inString);
void NextPutMultiple(const byte * inString, size_t length);
void NextPutModifiable(byte * inString, size_t length);
void LastPut(const byte * inString, size_t length);
static size_t LastBlockSize(StreamTransformation & c, BlockPaddingScheme padding);
param hashPutChannel the channel on which the digest should be output HashFilter(HashTransformation & hm, BufferedTransformation * attachment = NULLPTR, bool putMessage = false, int truncatedDigestSize = -1, const std::string & messagePutChannel = DEFAULT_CHANNEL, const std::string & hashPutChannel = DEFAULT_CHANNEL);
void IsolatedInitialize(const NameValuePairs & parameters);
size_t Put2(const byte * inString, size_t length, int messageEnd, bool blocking);
void InitializeDerivedAndReturnNewSizes(const NameValuePairs & parameters, size_t & firstSize, size_t & blockSize, size_t & lastSize);
void FirstPut(const byte * inString);
void NextPutMultiple(const byte * inString, size_t length);
void LastPut(const byte * inString, size_t length);
0 AuthenticatedEncryptionFilter(AuthenticatedSymmetricCipher & c, BufferedTransformation * attachment = NULLPTR, bool putAAD = false, int truncatedDigestSize = -1, const std::string & macChannel = DEFAULT_CHANNEL, BlockPaddingScheme padding = DEFAULT_PADDING);
void IsolatedInitialize(const NameValuePairs & parameters);
byte* ChannelCreatePutSpace(const std::string & channel, size_t & size);
size_t ChannelPut2(const std::string & channel, const byte * begin, size_t length, int messageEnd, bool blocking);
void LastPut(const byte * inString, size_t length);
0 AuthenticatedDecryptionFilter(AuthenticatedSymmetricCipher & c, BufferedTransformation * attachment = NULLPTR, word32 flags = DEFAULT_FLAGS, int truncatedDigestSize = -1, BlockPaddingScheme padding = DEFAULT_PADDING);
byte* ChannelCreatePutSpace(const std::string & channel, size_t & size);
size_t ChannelPut2(const std::string & channel, const byte * begin, size_t length, int messageEnd, bool blocking);
return ChannelPut2(void);
void InitializeDerivedAndReturnNewSizes(const NameValuePairs & parameters, size_t & firstSize, size_t & blockSize, size_t & lastSize);
void FirstPut(const byte * inString);
void NextPutMultiple(const byte * inString, size_t length);
void LastPut(const byte * inString, size_t length);
void IsolatedInitialize(const NameValuePairs & parameters);
size_t Put2(const byte * inString, size_t length, int messageEnd, bool blocking);
param flags flags indicating behaviors for the filter SignatureVerificationFilter(const PK_Verifier & verifier, BufferedTransformation * attachment = NULLPTR, word32 flags = DEFAULT_FLAGS);
void InitializeDerivedAndReturnNewSizes(const NameValuePairs & parameters, size_t & firstSize, size_t & blockSize, size_t & lastSize);
void FirstPut(const byte * inString);
void NextPutMultiple(const byte * inString, size_t length);
void LastPut(const byte * inString, size_t length);
void Initialize(const NameValuePairs & parameters, int propagation);
param attachment an attached transformation ProxyFilter(BufferedTransformation * filter, size_t firstSize, size_t lastSize, BufferedTransformation * attachment);
bool IsolatedFlush(bool hardFlush, bool blocking);
param filter an OutputProxy filter
void SetFilter(Filter * filter);
void NextPutMultiple(const byte * s, size_t len);
void NextPutModifiable(byte * inString, size_t length);
throw InvalidArgument("StringSink: OutputStringPointer not specified");
void IsolatedInitialize(const NameValuePairs & parameters);
size_t Put2(const byte * inString, size_t length, int messageEnd, bool blocking);
return SaturatingSubtract(void);
void IsolatedInitialize(const NameValuePairs & parameters);
byte* CreatePutSpace(size_t & size);
size_t Put2(const byte * inString, size_t length, int messageEnd, bool blocking);
size_t Put2(const byte * inString, size_t length, int messageEnd, bool blocking);
CRYPTOPP_DLL size_t TransferTo2(BufferedTransformation & target, lword & transferBytes, const std::string & channel = DEFAULT_CHANNEL, bool blocking = true);
CRYPTOPP_DLL void StoreInitialize(const NameValuePairs & parameters);
size_t TransferTo2(BufferedTransformation & target, lword & transferBytes, const std::string & channel = DEFAULT_CHANNEL, bool blocking = true);
void StoreInitialize(const NameValuePairs & parameters);
size_t TransferTo2(BufferedTransformation & target, lword & transferBytes, const std::string & channel = DEFAULT_CHANNEL, bool blocking = true);
MaxRetrievable
virtual size_t PumpAll2(bool blocking = true);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

CRYPTOPP_DLL bool CRYPTOPP_API FIPS_140_2_ComplianceEnabled(void);
CRYPTOPP_DLL void CRYPTOPP_API DoPowerUpSelfTest(const char* moduleFilename, const byte * expectedModuleMac);
CRYPTOPP_DLL void CRYPTOPP_API DoDllPowerUpSelfTest(void);
CRYPTOPP_DLL void CRYPTOPP_API SimulatePowerUpSelfTestFailure(void);
up self test status
CRYPTOPP_DLL PowerUpSelfTestStatus CRYPTOPP_API GetPowerUpSelfTestStatus(void);
return the MAC for the module
CRYPTOPP_DLL MessageAuthenticationCode* CRYPTOPP_API NewIntegrityCheckingMAC(void);
false otherwise
CRYPTOPP_DLL bool CRYPTOPP_API IntegrityCheckModule(const char* moduleFilename, const byte * expectedModuleMac, SecByteBlock * pActualMac = NULLPTR, unsigned long* pMacFileLocation = NULLPTR);
this is used by Algorithm constructor to allow Algorithm objects to be constructed for the self test
bool PowerUpSelfTestInProgressOnThisThread(void);
void SetPowerUpSelfTestInProgressOnThisThread(bool inProgress);
void SignaturePairwiseConsistencyTest(const PK_Signer & signer, const PK_Verifier & verifier);
void EncryptionPairwiseConsistencyTest(const PK_Encryptor & encryptor, const PK_Decryptor & decryptor);
void SignaturePairwiseConsistencyTest_FIPS_140_Only(const PK_Signer & signer, const PK_Verifier & verifier);
void EncryptionPairwiseConsistencyTest_FIPS_140_Only(const PK_Encryptor & encryptor, const PK_Decryptor & decryptor);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void SetKeyWithoutResync(const byte * userKey, size_t keylength, const NameValuePairs & params);
void Resync(const byte * iv, size_t len);
size_t AuthenticateBlocks(const byte * data, size_t len);
void AuthenticateLastHeaderBlock(void);
void AuthenticateLastConfidentialBlock(void);
void AuthenticateLastFooterBlock(byte * mac, size_t macSize);
inline void ReverseHashBufferIfNeeded(void);
void IncrementCounterBy256(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Multiply(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

brief Construct the zero polynomial PolynomialMod2(void);
Copy construct a PolynomialMod2 PolynomialMod2(const PolynomialMod2 & t);
bitLength denotes how much memory to allocate initially PolynomialMod2(word value, size_t bitLength = WORD_BITS);
i
static PolynomialMod2 CRYPTOPP_API Monomial(size_t i);
t2
static PolynomialMod2 CRYPTOPP_API Trinomial(size_t t0, size_t t1, size_t t2);
t4
static PolynomialMod2 CRYPTOPP_API Pentanomial(size_t t0, size_t t1, size_t t2, size_t t3, size_t t4);
1
static PolynomialMod2 CRYPTOPP_API AllOnes(size_t n);
return the zero polynomial
static const PolynomialMod2 & CRYPTOPP_API Zero(void);
return the one polynomial
static const PolynomialMod2 & CRYPTOPP_API One(void);
void Decode(const byte * input, size_t inputLen);
inputLen
void Decode(BufferedTransformation & bt, size_t inputLen);
endian octet string
void BERDecodeAsOctetString(BufferedTransformation & bt, size_t length);
return BitCount(void);
return GetCoefficient(void);
void Randomize(RandomNumberGenerator & rng, size_t bitcount);
void SetBit(size_t i, int value = 1);
th byte to value
void SetByte(size_t n, byte value);
return Xor(void);
return Xor(void);
return Zero(void);
greatest common divisor
static PolynomialMod2 CRYPTOPP_API Gcd(const PolynomialMod2 & a, const PolynomialMod2 & n);
static void CRYPTOPP_API Divide(PolynomialMod2 & r, PolynomialMod2 & q, const PolynomialMod2 & a, const PolynomialMod2 & d);
return new GF2NP(void);
t2 GF2NT(unsigned int t0, unsigned int t1, unsigned int t2);
return new GF2NT(void);
t2 GF2NT233(unsigned int t0, unsigned int t1, unsigned int t2);
return new GF2NT233(void);
return new GF2NPP(void);
two
CRYPTOPP_DLL GF2NP* CRYPTOPP_API BERDecodeGF2NP(BufferedTransformation & bt);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Multiply(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ASN1Object interface
void BERDecode(BufferedTransformation & bt);
are invalid
void GenerateRandom(RandomNumberGenerator & rng, const NameValuePairs & alg);
param source NameValuePairs to assign
void AssignFrom(const NameValuePairs & source);
SecByteBlock V(void);
SecByteBlock K(void);
SecByteBlock temp(void);
SecByteBlock t(void);
void GenerateRandom(RandomNumberGenerator & rng, const NameValuePairs & alg);
Coverity finding xorbuf(void);
MAC mac(void);
MAC mac(void);
return DecodingResult(void);
Coverity finding xorbuf(void);
return DecodingResult(void);
Decryptor decryptor(void);
Encryptor encryptor(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);
static void PrecalculateSTable(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void SetFilename(const std::string & filename, bool throwOnEncodingError = false);
void SetComment(const std::string & comment, bool throwOnEncodingError = false);
void IsolatedInitialize(const NameValuePairs & parameters);
void WritePrestreamHeader(void);
void ProcessUncompressedData(const byte * string, size_t length);
void WritePoststreamTail(void);
param autoSignalPropagation 0 to turn off MessageEnd signal Gunzip(BufferedTransformation * attachment = NULLPTR, bool repeat = false, int autoSignalPropagation = -1);
void ProcessPrestreamHeader(void);
void ProcessDecompressedData(const byte * string, size_t length);
void ProcessPoststreamTail(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void CipherSetKey(const NameValuePairs & params, const byte * key, size_t length);
void OperateKeystream(KeystreamOperation operation, byte * output, const byte * input, size_t iterationCount);
void CipherResynchronize(byte * keystreamBuffer, const byte * iv, size_t length);
void GenerateKeystream(word32 * keystream);
void SetupUpdate(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void CipherSetKey(const NameValuePairs & params, const byte * key, size_t length);
void OperateKeystream(KeystreamOperation operation, byte * output, const byte * input, size_t iterationCount);
void CipherResynchronize(byte * keystreamBuffer, const byte * iv, size_t length);
word32 H1(word32 u);
word32 H2(word32 u);
void GenerateKeystream(word32 * keystream);
word32 Generate(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void IsolatedInitialize(const NameValuePairs & parameters);
void IsolatedInitialize(const NameValuePairs & parameters);
static const int* CRYPTOPP_API GetDefaultDecodingLookupArray(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return StaticAlgorithmName(void);
return MaxDerivedKeyLength(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int keylength, const NameValuePairs & params);
void Restart(void);
void Update(const byte * input, size_t length);
void TruncatedFinal(byte * mac, size_t size);
void KeyInnerHash(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return AccessAbstractGroupParameters(void);
return StaticPublicKeyLength(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

brief Start the timer
void StartTimer(void);
ElapsedTime
double ElapsedTimeAsDouble(void);
ElapsedTimeAsDouble
unsigned long ElapsedTime(void);
double ConvertTo(TimerWord t, Unit unit);
TimerWord GetCurrentTimerValue(void);
TimerWord TicksPerSecond(void);
TimerWord GetCurrentTimerValue(void);
TimerWord TicksPerSecond(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void AddOutputChannel(word32 channelId);
void ChannelData(word32 channelId, const byte * inString, size_t length, bool messageEnd);
void IsolatedInitialize(const NameValuePairs & parameters = g_nullNameValuePairs);
throw BlockingInputOnly(void);
virtual void FlushOutputQueues(void);
virtual void OutputMessageEnds(void);
unsigned int InsertInputChannel(word32 channelId);
void ComputeV(unsigned int);
void PrepareInterpolation(void);
void ProcessInputQueues(void);
void IsolatedInitialize(const NameValuePairs & parameters = g_nullNameValuePairs);
size_t Put2(const byte * begin, size_t length, int messageEnd, bool blocking);
void IsolatedInitialize(const NameValuePairs & parameters = g_nullNameValuePairs);
void FlushOutputQueues(void);
void OutputMessageEnds(void);
void IsolatedInitialize(const NameValuePairs & parameters = g_nullNameValuePairs);
size_t Put2(const byte * begin, size_t length, int messageEnd, bool blocking);
void IsolatedInitialize(const NameValuePairs & parameters = g_nullNameValuePairs);
void FlushOutputQueues(void);
void OutputMessageEnds(void);
size_t Put2(const byte * begin, size_t length, int messageEnd, bool blocking);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);
void EnKey(const byte*);
void DeKey(void);
ifdef IDEA_LARGECACHE
static inline void LookupMUL(word & a, word b);
void LookupKeyLogs(void);
static void BuildLogTables(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

brief Creates the zero integer Integer(void);
copy constructor Integer(const Integer & t);
brief Convert from signed long Integer(signed long value);
param value the long word Integer(Sign sign, lword value);
param lowWord the low word Integer(Sign sign, word highWord, word lowWord);
explicit Integer(const char* str, ByteOrder order = BIG_ENDIAN_ORDER);
explicit Integer(const wchar_t* str, ByteOrder order = BIG_ENDIAN_ORDER);
param bt BufferedTransformation object with BER encoded byte array
explicit Integer(BufferedTransformation & bt);
avoids calling constructors for frequently used integers
static const Integer& CRYPTOPP_API Zero(void);
avoids calling constructors for frequently used integers
static const Integer& CRYPTOPP_API One(void);
avoids calling constructors for frequently used integers
static const Integer& CRYPTOPP_API Two(void);
static Integer CRYPTOPP_API Power2(size_t e);
param sign enumeration indicating Signedness
void Decode(const byte * input, size_t inputLen, Signedness sign = UNSIGNED);
void Decode(BufferedTransformation & bt, size_t inputLen, Signedness sign = UNSIGNED);
param inputLen length of the byte array
void BERDecode(const byte * input, size_t inputLen);
param bt BufferedTransformation object
void BERDecode(BufferedTransformation & bt);
param length length of the byte array
void BERDecodeAsOctetString(BufferedTransformation & bt, size_t length);
param inputLen length of the byte array
void OpenPGPDecode(const byte * input, size_t inputLen);
param bt BufferedTransformation object
void OpenPGPDecode(BufferedTransformation & bt);
void Randomize(RandomNumberGenerator & rng, size_t bitCount);
void Randomize(RandomNumberGenerator & rng, const Integer & min, const Integer & max);
bool GenerateRandomNoThrow(RandomNumberGenerator & rng, const NameValuePairs & params = g_nullNameValuePairs);
throw RandomNumberNotFound(void);
void SetBit(size_t n, bool value = 1);
void SetByte(size_t n, byte value);
brief Reverse the Sign of the Integer
void Negate(void);
brief Swaps this Integer with another Integer
void swap(Integer & a);
return Plus(void);
return Times(void);
static void CRYPTOPP_API Divide(Integer & r, Integer & q, const Integer & a, const Integer & d);
static void CRYPTOPP_API Divide(word & r, Integer & q, const Integer & a, word d);
static void CRYPTOPP_API DivideByPowerOf2(Integer & r, Integer & q, const Integer & a, unsigned int n);
static Integer CRYPTOPP_API Gcd(const Integer & a, const Integer & n);
CRYPTOPP_DLL friend Integer CRYPTOPP_API a_times_b_mod_c(const Integer & x, const Integer & y, const Integer & m);
CRYPTOPP_DLL friend Integer CRYPTOPP_API a_exp_b_mod_c(const Integer & x, const Integer & e, const Integer & m);
friend void PositiveAdd(Integer & sum, const Integer & a, const Integer & b);
friend void PositiveSubtract(Integer & diff, const Integer & a, const Integer & b);
friend void PositiveMultiply(Integer & product, const Integer & a, const Integer & b);
friend void PositiveDivide(Integer & remainder, Integer & quotient, const Integer & dividend, const Integer & divisor);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

in bytes
void Update(const byte * input, size_t length);
byte* CreateUpdateSpace(size_t & size);
and restart for a new message
void Restart(void);
void TruncatedFinal(byte * digest, size_t digestSize);
void PadLastBlock(unsigned int lastBlockSize, byte padFirst = 0x80);
virtual size_t HashMultipleBlocks(const T * input, size_t length);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * key, unsigned int keylen, const NameValuePairs & params);
void SetKey_22(const word64 key[2]);
void SetKey_24(const word64 key[4]);
void UncheckedSetKey(const byte * key, unsigned int keylen, const NameValuePairs & params);
void SetKey_44(const word64 key[4]);
void SetKey_48(const word64 key[8]);
void UncheckedSetKey(const byte * key, unsigned int keylen, const NameValuePairs & params);
void SetKey_88(const word64 key[8]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void Update(const byte * input, size_t length);
void Restart(void);
void TruncatedFinal(byte * hash, size_t size);
return BlockSize(void);
return StaticAlgorithmName(void);
ensure there was no underflow in the math CRYPTOPP_COMPILE_ASSERT(BLOCKSIZE < 200);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

which is 128 CRYPTOPP_CONSTANT(BLOCKSIZE = 128);
void Restart(void);
void Update(const byte * input, size_t size);
void TruncatedFinal(byte * hash, size_t size);
which is 28 CRYPTOPP_CONSTANT(DIGESTSIZE = 28);
which is 128 CRYPTOPP_CONSTANT(BLOCKSIZE = LSH256_Base::BLOCKSIZE);
return StaticAlgorithmName(void);
which is 32 CRYPTOPP_CONSTANT(DIGESTSIZE = 32);
which is 128 CRYPTOPP_CONSTANT(BLOCKSIZE = LSH256_Base::BLOCKSIZE);
return StaticAlgorithmName(void);
which is 256 CRYPTOPP_CONSTANT(BLOCKSIZE = 256);
void Restart(void);
void Update(const byte * input, size_t size);
void TruncatedFinal(byte * hash, size_t size);
which is 48 CRYPTOPP_CONSTANT(DIGESTSIZE = 48);
which is 256 CRYPTOPP_CONSTANT(BLOCKSIZE = LSH512_Base::BLOCKSIZE);
return StaticAlgorithmName(void);
which is 64 CRYPTOPP_CONSTANT(DIGESTSIZE = 64);
which is 256 CRYPTOPP_CONSTANT(BLOCKSIZE = LSH512_Base::BLOCKSIZE);
return StaticAlgorithmName(void);
which is 32 CRYPTOPP_CONSTANT(DIGESTSIZE = 32);
which is 256 CRYPTOPP_CONSTANT(BLOCKSIZE = LSH512_Base::BLOCKSIZE);
return StaticAlgorithmName(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

else memcpy_s(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void BERDecode(BufferedTransformation & bt);
void AssignFrom(const NameValuePairs & source);
void Initialize(RandomNumberGenerator & rng, unsigned int modulusBits, const Integer & eStart = 17);
void BERDecode(BufferedTransformation & bt);
void AssignFrom(const NameValuePairs & source);
void GenerateRandom(RandomNumberGenerator & rng, const NameValuePairs & alg);
return Integer(void);
t be called
throw NotImplemented("DL_BasePrecomputation_LUC: CascadeExponentiate not implemented");
throw NotImplemented("LUC_GroupParameters: MultiplyElements can not be implemented");
throw NotImplemented("LUC_GroupParameters: MultiplyElements can not be implemented");

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void Update(const byte * input, size_t length);
void TruncatedFinal(byte * hash, size_t size);
return StaticAlgorithmName(void);
void Transform(void);
void Init(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static void InitState(HashWordType * state);
static void Transform(word32 * digest, const word32 * data);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static void InitState(HashWordType * state);
static void Transform(word32 * digest, const word32 * data);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return NextMersenneWord(void);
Wipe temp SecureWipeArray(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

3
byte * BytePtr(SecByteBlock & str);
3
const byte * ConstBytePtr(const SecByteBlock & str);
3
size_t BytePtrSize(const SecByteBlock & str);
otherwise undefined behavior CRYPTOPP_ASSERT(dest != NULLPTR);
Destination buffer must be large enough to satisfy request CRYPTOPP_ASSERT(sizeInBytes >= count);
throw InvalidArgument("memcpy_s: buffer overflow");
otherwise undefined behavior CRYPTOPP_ASSERT(dest != NULLPTR);
Destination buffer must be large enough to satisfy request CRYPTOPP_ASSERT(sizeInBytes >= count);
throw InvalidArgument("memmove_s: buffer overflow");
aspx CRYPTOPP_ASSERT(v != 0);
aspx CRYPTOPP_ASSERT(v != 0);
CRYPTOPP_DLL void CRYPTOPP_API xorbuf(byte * buf, const byte * mask, size_t count);
CRYPTOPP_DLL void CRYPTOPP_API xorbuf(byte * output, const byte * input, const byte * mask, size_t count);
sa ModPowerOf2
CRYPTOPP_DLL bool CRYPTOPP_API VerifyBufsEqual(const byte * buf1, const byte * buf2, size_t count);
endif CRYPTOPP_ASSERT(!std::numeric_limits<T1>::is_signed || n > 0);
endif CRYPTOPP_ASSERT(!std::numeric_limits<T1>::is_signed || n > 0);
throw InvalidArgument("RoundUpToMultipleOf: integer overflow");
return alignof(void);
return __alignof(void);
return __alignof__(void);
return __alignof__(void);
return __alignof__(void);
else
return sizeof(void);
string StringNarrow(const wchar_t* str, bool throwOnError = true);
wstring StringWiden(const char* str, bool throwOnError = true);
return GETBYTE(void);
return bswap_16(void);
return _byteswap_ushort(void);
else
return rotlFixed(void);
return bswap_32(void);
return _byteswap_ulong(void);
return rotlFixed(void);
return bswap_64(void);
return _byteswap_uint64(void);
return rotlFixed(void);
return rotlFixed(void);
return word16(rvalue >> 16);
return ByteReverse(void);
return ByteReverse(void);
return ByteReverse(void);
return ConditionalByteReverse(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

param bt BER encoded ModularArithmetic ModularArithmetic(BufferedTransformation & bt);
return new ModularArithmetic(void);
return Add(void);
return new MontgomeryRepresentation(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return BlockSize(void);
throw InvalidArgument("CipherModeBase: feedback size cannot be specified for this cipher mode");
virtual void ResizeBuffers(void);
void CipherSetKey(const NameValuePairs & params, const byte * key, size_t length);
void Iterate(byte * output, const byte * input, CipherDir dir, size_t iterationCount);
void TransformRegister(void);
void CipherResynchronize(const byte * iv, size_t length);
void SetFeedbackSize(unsigned int feedbackSize);
void ResizeBuffers(void);
byte* GetRegisterBegin(void);
return BlockSize(void);
void WriteKeystream(byte * keystreamBuffer, size_t iterationCount);
void CipherResynchronize(byte * keystreamBuffer, const byte * iv, size_t length);
virtual void IncrementCounterBy256(void);
return BlockSize(void);
void OperateKeystream(KeystreamOperation operation, byte * output, const byte * input, size_t iterationCount);
void CipherResynchronize(byte * keystreamBuffer, const byte * iv, size_t length);
void SeekToIteration(lword iterationCount);
void UncheckedSetKey(const byte * key, unsigned int length, const NameValuePairs & params);
return BlockSize(void);
virtual void ResizeBuffers(void);
void ProcessData(byte * outString, const byte * inString, size_t length);
void ProcessData(byte * outString, const byte * inString, size_t length);
size_t ProcessLastBlock(byte * outString, size_t outLength, const byte * inString, size_t inLength);
void ProcessData(byte * outString, const byte * inString, size_t length);
virtual void ResizeBuffers(void);
size_t ProcessLastBlock(byte * outString, size_t outLength, const byte * inString, size_t inLength);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Integer(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

param nodeSize the initial node size MessageQueue(unsigned int nodeSize = 256);
size_t TransferTo2(BufferedTransformation & target, lword & transferBytes, const std::string & channel = DEFAULT_CHANNEL, bool blocking = true);
bool GetNextMessage(void);
param rhs the other MessageQueue
void swap(MessageQueue & rhs);
BufferedTransformation
size_t ChannelPut2(const std::string & channel, const byte * begin, size_t length, int messageEnd, bool blocking);
bool ChannelMessageSeriesEnd(const std::string & channel, int propagation = -1, bool blocking = true);
bool HandleMismatchDetected(bool blocking);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return AccessAbstractGroupParameters(void);
return StaticPublicKeyLength(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

0
int crypto_box(byte * c, const byte * m, word64 d, const byte * n, const byte * y, const byte * x);
0
int crypto_box_open(byte * m, const byte * c, word64 d, const byte * n, const byte * y, const byte * x);
0
int crypto_box_keypair(byte * y, byte * x);
0
int crypto_box_beforenm(byte * k, const byte * y, const byte * x);
0
int crypto_box_afternm(byte * c, const byte * m, word64 d, const byte * n, const byte * k);
0
int crypto_box_open_afternm(byte * m, const byte * c, word64 d, const byte * n, const byte * k);
0
int crypto_box_unchecked(byte * c, const byte * m, word64 d, const byte * n, const byte * y, const byte * x);
0
int crypto_box_open_unchecked(byte * m, const byte * c, word64 d, const byte * n, const byte * y, const byte * x);
0
int crypto_box_beforenm_unchecked(byte * k, const byte * y, const byte * x);
brief TODO
int crypto_core_salsa20(byte * out, const byte * in, const byte * k, const byte * c);
0
int crypto_core_hsalsa20(byte * out, const byte * in, const byte * k, const byte * c);
0
int crypto_hashblocks(byte * x, const byte * m, word64 n);
0
int crypto_hash(byte * out, const byte * m, word64 n);
0
int crypto_onetimeauth(byte * out, const byte * m, word64 n, const byte * k);
0
int crypto_onetimeauth_verify(const byte * h, const byte * m, word64 n, const byte * k);
0
int crypto_scalarmult(byte * q, const byte * n, const byte * p);
0
int crypto_scalarmult_base(byte * q, const byte * n);
0
int crypto_secretbox(byte * c, const byte * m, word64 d, const byte * n, const byte * k);
0
int crypto_secretbox_open(byte * m, const byte * c, word64 d, const byte * n, const byte * k);
0
int crypto_sign(byte * sm, word64 * smlen, const byte * m, word64 n, const byte * sk);
0
int crypto_sign_open(byte * m, word64 * mlen, const byte * sm, word64 n, const byte * pk);
0
int crypto_sign_keypair(byte * pk, byte * sk);
0
int crypto_sign_sk2pk(byte * pk, const byte * sk);
0
int crypto_stream(byte * c, word64 d, const byte * n, const byte * k);
0
int crypto_stream_xor(byte * c, const byte * m, word64 d, const byte * n, const byte * k);
0
int crypto_stream_salsa20(byte * c, word64 d, const byte * n, const byte * k);
0
int crypto_stream_salsa20_xor(byte * c, const byte * m, word64 b, const byte * n, const byte * k);
0
int crypto_verify_16(const byte * x, const byte * y);
0
int crypto_verify_32(const byte * x, const byte * y);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

CRYPTOPP_DLL const word16* CRYPTOPP_API GetPrimeTable(unsigned int& size);
s tests for primality
CRYPTOPP_DLL Integer CRYPTOPP_API MaurerProvablePrime(RandomNumberGenerator & rng, unsigned int bits);
CRYPTOPP_DLL Integer CRYPTOPP_API MihailescuProvablePrime(RandomNumberGenerator & rng, unsigned int bits);
CRYPTOPP_DLL bool CRYPTOPP_API IsSmallPrime(const Integer & p);
CRYPTOPP_DLL bool CRYPTOPP_API TrialDivision(const Integer & p, unsigned bound);
CRYPTOPP_DLL bool CRYPTOPP_API SmallDivisorsTest(const Integer & p);
IsStrongLucasProbablePrime
CRYPTOPP_DLL bool CRYPTOPP_API IsFermatProbablePrime(const Integer & n, const Integer & b);
IsStrongLucasProbablePrime
CRYPTOPP_DLL bool CRYPTOPP_API IsLucasProbablePrime(const Integer & n);
CRYPTOPP_DLL bool CRYPTOPP_API IsStrongProbablePrime(const Integer & n, const Integer & b);
CRYPTOPP_DLL bool CRYPTOPP_API IsStrongLucasProbablePrime(const Integer & n);
on Crypto Stack Exchange
CRYPTOPP_DLL bool CRYPTOPP_API RabinMillerTest(RandomNumberGenerator & rng, const Integer & n, unsigned int rounds);
CRYPTOPP_DLL bool CRYPTOPP_API IsPrime(const Integer & p);
CRYPTOPP_DLL bool CRYPTOPP_API VerifyPrime(RandomNumberGenerator & rng, const Integer & p, unsigned int level = 1);
CRYPTOPP_DLL bool CRYPTOPP_API FirstPrime(Integer & p, const Integer & max, const Integer & equiv, const Integer & mod, const PrimeSelector * pSelector);
CRYPTOPP_DLL unsigned int CRYPTOPP_API PrimeSearchInterval(const Integer & max);
CRYPTOPP_DLL AlgorithmParameters CRYPTOPP_API MakeParametersForTwoPrimesOfEqualSize(unsigned int productBitLength);
CRYPTOPP_DLL Integer CRYPTOPP_API CRT(const Integer & xp, const Integer & p, const Integer & xq, const Integer & q, const Integer & u);
CRYPTOPP_DLL int CRYPTOPP_API Jacobi(const Integer & a, const Integer & b);
CRYPTOPP_DLL Integer CRYPTOPP_API Lucas(const Integer & e, const Integer & p, const Integer & n);
CRYPTOPP_DLL Integer CRYPTOPP_API InverseLucas(const Integer & e, const Integer & m, const Integer & p, const Integer & q, const Integer & u);
return a_times_b_mod_c(void);
return a_exp_b_mod_c(void);
prime
CRYPTOPP_DLL Integer CRYPTOPP_API ModularSquareRoot(const Integer & a, const Integer & p);
CRYPTOPP_DLL Integer CRYPTOPP_API ModularRoot(const Integer & a, const Integer & dp, const Integer & dq, const Integer & p, const Integer & q, const Integer & u);
CRYPTOPP_DLL bool CRYPTOPP_API SolveModularQuadraticEquation(Integer & r1, Integer & r2, const Integer & a, const Integer & b, const Integer & c, const Integer & p);
CRYPTOPP_DLL unsigned int CRYPTOPP_API DiscreteLogWorkFactor(unsigned int bitlength);
CRYPTOPP_DLL unsigned int CRYPTOPP_API FactoringWorkFactor(unsigned int bitlength);
void Generate(signed int delta, RandomNumberGenerator & rng, unsigned int pbits, unsigned qbits);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

param operation the operation or API call when the error occurs OS_RNG_Err(const std::string & operation);
brief Construct a MicrosoftCryptoProvider MicrosoftCryptoProvider(void);
brief Construct a NonblockingRng NonblockingRng(void);
void GenerateBlock(byte * output, size_t size);
brief Construct a BlockingRng BlockingRng(void);
void GenerateBlock(byte * output, size_t size);
CRYPTOPP_DLL void CRYPTOPP_API OS_GenerateRandomBlock(bool blocking, byte * output, size_t size);
in bytes
void Reseed(bool blocking = false, unsigned int seedSize = 32);
void Reseed(bool blocking = false, const byte * input = NULLPTR, size_t length = 0);
void Reseed(const byte * key, size_t keylength, const byte * seed, const byte * timeVector);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Not copyable SignalHandler(const SignalHandler&);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

GetDivisor PadlockRNG(word32 divisor = 1);
in bytes
virtual void GenerateBlock(byte * output, size_t size);
virtual void DiscardBytes(size_t n);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void Reset(void);
void Iterate(size_t count, const word32 * p = NULLPTR, byte * output = NULLPTR, const byte * input = NULLPTR, KeystreamOperation operation = WRITE_KEYSTREAM);
void TruncatedFinal(byte * hash, size_t size);
push
size_t HashMultipleBlocks(const word32 * input, size_t length);
void CipherSetKey(const NameValuePairs & params, const byte * key, size_t length);
void OperateKeystream(KeystreamOperation operation, byte * output, const byte * input, size_t iterationCount);
void CipherResynchronize(byte * keystreamBuffer, const byte * iv, size_t length);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return HashIdentifier(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * key, unsigned int length, const NameValuePairs & params);
void Update(const byte * input, size_t length);
void TruncatedFinal(byte * mac, size_t size);
void Restart(void);
Remove at next major version bump
void HashBlocks(const byte * input, size_t length, word32 padbit);
void HashFinal(byte * mac, size_t length);
void UncheckedSetKey(const byte * key, unsigned int length, const NameValuePairs & params);
void Update(const byte * input, size_t length);
void TruncatedFinal(byte * mac, size_t size);
void Restart(void);
SecByteBlock key(void);
SecByteBlock key(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

endian byte array PolynomialOver(const byte * encodedPolynomialOver, unsigned int byteCount);
convert from Basic Encoding Rules encoded byte array
explicit PolynomialOver(const byte * BEREncodedPolynomialOver);
convert from BER encoded byte array stored in a BufferedTransformation object
explicit PolynomialOver(BufferedTransformation & bt);
void Randomize(RandomNumberGenerator & rng, const RandomizationParameter & parameter, const Ring & ring);
i to value
void SetCoefficient(unsigned int i, const CoefficientType & value, const Ring & ring);
void Negate(const Ring & ring);
void swap(PolynomialOver<Ring> &t);
return Plus(void);
return Times(void);
static void Divide(PolynomialOver<Ring> &r, PolynomialOver<Ring> &q, const PolynomialOver<Ring> &a, const PolynomialOver<Ring> &d, const Ring & ring);
istream& Input(std::istream & in, const Ring & ring);
void FromStr(const char* str, const Ring & ring);
return ThisType(void);
return ThisType(void);
return Element(void);
void PrepareBulkPolynomialInterpolation(const Ring & ring, Element * w, const Element x[], unsigned int n);
void PrepareBulkPolynomialInterpolationAt(const Ring & ring, Element * v, const Element & position, const Element x[], const Element w[], unsigned int n);
Element BulkPolynomialInterpolateAt(const Ring & ring, const Element y[], const Element v[], unsigned int n);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return VecLoad_ALTIVEC(void);
return vec_rl(void);
return vec_rl(void);
return vec_sl(void);
return vec_sr(void);
return vec_rl(void);
return vec_sl(void);
return vec_rl(void);
return vec_sr(void);
return vec_mergel(void);
return vec_mergeh(void);
return vec_splats(void);
return VecLoad(void);
return vec_splat(void);
return vec_splat(void);
return vec_perm(void);
return vec_perm(void);
return vec_add(void);
return vec_sub(void);
return VecPermute(void);
return VecPermute(void);
return vec_or(void);
return VecPermute(void);
return VecPermute(void);
return VecPermute(void);
return VecPermute(void);
return vec_or(void);
return VecPermute(void);
return VecPermute(void);
return vec_splat(void);
else CRYPTOPP_ASSERT(void);
else CRYPTOPP_ASSERT(void);
else CRYPTOPP_ASSERT(void);
else CRYPTOPP_ASSERT(void);
else CRYPTOPP_ASSERT(void);
else CRYPTOPP_ASSERT(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return ApplyFunction(void);
return CalculateInverse(void);
throw NotImplemented("PK_MessageEncodingMethod: this signature scheme does not support message recovery");
throw NotImplemented("PK_MessageEncodingMethod: this signature scheme does not support message recovery");
throw NotImplemented("PK_MessageEncodingMethod: this signature scheme does not support message recovery");
throw NotImplemented("PK_MessageEncodingMethod: this signature scheme does not support message recovery");
return AccessKey(void);
return GetKey(void);
return AccessKey(void);
return GetKey(void);
return GetKey(void);
return GetKey(void);
return GetKey(void);
throw NotImplemented("TF_ObjectImplExtRef: cannot modify refererenced key");
param counterStart starting counter value used in generation function
CRYPTOPP_DLL void CRYPTOPP_API P1363_MGF1KDF2_Common(HashTransformation & hash, byte * output, size_t outputLength, const byte * input, size_t inputLength, const byte * derivationParams, size_t derivationParamsLength, bool mask, unsigned int counterStart);
param source NameValuePairs to assign
void AssignFrom(const NameValuePairs & source);
Signer signer(void);
Verifier verifier(void);
throw NotImplemented("DL_ElgamalLikeSignatureAlgorithm: this signature scheme does not support message recovery");
throw InvalidDataFormat("DL_VerifierBase: signature length is not valid.");
return DecodingResult(void);
return HashIdentifier(void);
return AccessAbstractGroupParameters(void);
throw DL_BadElement(void);
throw DL_BadElement(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return StaticAlgorithmName(void);
return MaxDerivedKeyLength(void);
return StaticAlgorithmName(void);
return MaxDerivedKeyLength(void);
throw InvalidArgument("PKCS5_PBKDF2_HMAC: DigestSize cannot be 0");
return StaticAlgorithmName(void);
return MaxDerivedKeyLength(void);
SecByteBlock buffer(DLen + SLen + PLen);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

param copy the other ByteQueue ByteQueue(const ByteQueue & copy);
return CurrentSize(void);
void IsolatedInitialize(const NameValuePairs & parameters);
byte* CreatePutSpace(size_t & size);
size_t Put2(const byte * inString, size_t length, int messageEnd, bool blocking);
size_t Get(byte & outByte);
size_t Get(byte * outString, size_t getMax);
size_t TransferTo2(BufferedTransformation & target, lword & transferBytes, const std::string & channel = DEFAULT_CHANNEL, bool blocking = true);
void SetNodeSize(size_t nodeSize);
brief Empty the queue
void Clear(void);
inserts a byte at the head of the queue
void Unget(byte inByte);
inserts a byte array at the head of the queue
void Unget(const byte * inString, size_t length);
sa LazyPutter
void LazyPut(const byte * inString, size_t size);
sa LazyPutter
void LazyPutModifiable(byte * inString, size_t size);
sa LazyPutter
void UndoLazyPut(size_t size);
sa LazyPutter
void FinalizeLazyPut(void);
param rhs the other ByteQueue
void swap(ByteQueue & rhs);
void IsolatedInitialize(const NameValuePairs & parameters);
size_t Get(byte & outByte);
size_t Get(byte * outString, size_t getMax);
size_t TransferTo2(BufferedTransformation & target, lword & transferBytes, const std::string & channel = DEFAULT_CHANNEL, bool blocking = true);
void CleanupUsedNodes(void);
void CopyFrom(const ByteQueue & copy);
void Destroy(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void CipherSetKey(const NameValuePairs & params, const byte * key, size_t length);
void OperateKeystream(KeystreamOperation operation, byte * output, const byte * input, size_t iterationCount);
void CipherSetKey(const NameValuePairs & params, const byte * key, size_t length);
void OperateKeystream(KeystreamOperation operation, byte * output, const byte * input, size_t iterationCount);
void CipherResynchronize(byte * keystreamBuffer, const byte * iv, size_t length);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void BERDecode(BufferedTransformation & bt);
void AssignFrom(const NameValuePairs & source);
void BERDecode(BufferedTransformation & bt);
void AssignFrom(const NameValuePairs & source);
void GenerateRandom(RandomNumberGenerator & rng, const NameValuePairs & alg);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

brief Construct a RandomPool RandomPool(void);
void IncorporateEntropy(const byte * input, size_t length);
void GenerateIntoBufferedTransformation(BufferedTransformation & target, const std::string & channel, lword size);
details poolSize must be greater than 16 OldRandomPool(unsigned int poolSize = 384);
void IncorporateEntropy(const byte * input, size_t length);
void GenerateIntoBufferedTransformation(BufferedTransformation & target, const std::string & channel, lword size);
byte GenerateByte(void);
void GenerateBlock(byte * output, size_t size);
void Stir(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

throw RDRAND_Err if the random number generator is not available RDRAND(void);
in bytes
virtual void GenerateBlock(byte * output, size_t size);
virtual void DiscardBytes(size_t n);
throw RDSEED_Err if the random number generator is not available RDSEED(void);
in bytes
virtual void GenerateBlock(byte * output, size_t size);
virtual void DiscardBytes(size_t n);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);
static void FillEncTable(void);
static void FillDecTable(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static void InitState(HashWordType * state);
static void Transform(word32 * digest, const word32 * data);
static void InitState(HashWordType * state);
static void Transform(word32 * digest, const word32 * data);
static void InitState(HashWordType * state);
static void Transform(word32 * digest, const word32 * data);
static void InitState(HashWordType * state);
static void Transform(word32 * digest, const word32 * data);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void GenerateBlock(byte * output, size_t size);
sa AutoSeededX917RNG X917RNG(BlockTransformation * cipher, const byte * seed, const byte * deterministicTimeVector = NULLPTR);
void GenerateIntoBufferedTransformation(BufferedTransformation & target, const std::string & channel, lword size);
brief Construct a MaurerRandomnessTest MaurerRandomnessTest(void);
size_t Put2(const byte * inString, size_t length, int messageEnd, bool blocking);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void BERDecodePublicKey(BufferedTransformation & bt, bool parametersPresent, size_t size);
void AssignFrom(const NameValuePairs & source);
void Initialize(RandomNumberGenerator & rng, unsigned int modulusBits, const Integer & e = 17);
void Initialize(const Integer & n, const Integer & e, const Integer & d);
void BERDecodePrivateKey(BufferedTransformation & bt, bool parametersPresent, size_t size);
void GenerateRandom(RandomNumberGenerator & rng, const NameValuePairs & alg);
void AssignFrom(const NameValuePairs & source);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void BERDecode(BufferedTransformation & bt);
void AssignFrom(const NameValuePairs & source);
void Initialize(const Integer & n, const Integer & p, const Integer & q, const Integer & u);
void BERDecode(BufferedTransformation & bt);
void AssignFrom(const NameValuePairs & source);
void GenerateRandom(RandomNumberGenerator & rng, const NameValuePairs & alg);
virtual void LoadPrecomputation(BufferedTransformation & storedPrecomputation);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userkey, unsigned int length, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void Salsa20_Core(word32 * data, unsigned int rounds);
void CipherSetKey(const NameValuePairs & params, const byte * key, size_t length);
void OperateKeystream(KeystreamOperation operation, byte * output, const byte * input, size_t iterationCount);
void CipherResynchronize(byte * keystreamBuffer, const byte * IV, size_t length);
void SeekToIteration(lword iterationCount);
void CipherSetKey(const NameValuePairs & params, const byte * key, size_t length);
void CipherResynchronize(byte * keystreamBuffer, const byte * IV, size_t length);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return StaticAlgorithmName(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void CipherSetKey(const NameValuePairs & params, const byte * key, size_t length);
void OperateKeystream(KeystreamOperation operation, byte * output, const byte * input, size_t iterationCount);
void CipherResynchronize(byte * keystreamBuffer, const byte * IV, size_t length);
void SeekToIteration(lword iterationCount);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

throw InvalidArgument("AllocatorBase: requested size would cause integer overflow");
return AlignedDeallocate(void);
endif UnalignedDeallocate(void);
return StandardReallocate(void);
return GetAlignedArray(void);
return GetAlignedArray(void);
return GetAlignedArray(void);
return GetAlignedArray(void);
throw InvalidArgument("SecBlock: buffer overflow");
throw InvalidArgument("SecBlock: buffer overflow");
throw InvalidArgument("SecBlock: buffer overflow");
assignment Assign(void);
Append guards for overflow Append(void);
return SecBlock(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

not bits CRYPTOPP_CONSTANT(void);
not bits CRYPTOPP_CONSTANT(void);
not bits CRYPTOPP_CONSTANT(void);
not bits CRYPTOPP_CONSTANT(void);
Make these private to avoid Doxygen documenting them in all derived classes CRYPTOPP_COMPILE_ASSERT(Q > 0);
not bits CRYPTOPP_CONSTANT(void);
not bits CRYPTOPP_CONSTANT(void);
not bits CRYPTOPP_CONSTANT(void);
not bits CRYPTOPP_CONSTANT(void);
not bits CRYPTOPP_CONSTANT(void);
not bits CRYPTOPP_CONSTANT(void);
not bits CRYPTOPP_CONSTANT(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * key, unsigned int length, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void Serpent_KeySchedule(word32 * k, unsigned int rounds, const byte * userKey, size_t keylen);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static void CRYPTOPP_API InitState(HashWordType * state);
static void CRYPTOPP_API Transform(HashWordType * digest, const HashWordType * data);
size_t HashMultipleBlocks(const HashWordType * input, size_t length);
static void CRYPTOPP_API InitState(HashWordType * state);
static void CRYPTOPP_API Transform(HashWordType * digest, const HashWordType * data);
size_t HashMultipleBlocks(const HashWordType * input, size_t length);
static void CRYPTOPP_API InitState(HashWordType * state);
size_t HashMultipleBlocks(const HashWordType * input, size_t length);
static void CRYPTOPP_API InitState(HashWordType * state);
static void CRYPTOPP_API Transform(HashWordType * digest, const HashWordType * data);
static void CRYPTOPP_API InitState(HashWordType * state);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void cryptogams_sha1_block_data_order(void* state, const void* data, size_t blocks);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void cryptogams_sha256_block_data_order(void* state, const void* data, size_t blocks);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void Update(const byte * input, size_t length);
void Restart(void);
void TruncatedFinal(byte * hash, size_t size);
return BlockSize(void);
return StaticAlgorithmName(void);
ensure there was no underflow in the math CRYPTOPP_COMPILE_ASSERT(BLOCKSIZE < 200);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void cryptogams_sha512_block_data_order(void* state, const void* data, size_t blocks);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void Update(const byte * input, size_t length);
void Restart(void);
void TruncatedFinal(byte * hash, size_t size);
return BlockSize(void);
return StaticAlgorithmName(void);
ensure there was no underflow in the math CRYPTOPP_COMPILE_ASSERT(BLOCKSIZE < 200);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * key, unsigned int length, const NameValuePairs & param);
used by Base to do key setup
void InitForKeySetup(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);
void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);
void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return ChannelFlush(void);
throw CannotFlush("Unflushable<T>: this object has buffered input that cannot be flushed");
throw InputRejected(void);
throw InputRejected(void);
throw InputRejected(void);
throw InputRejected(void);
return ChannelPut2(void);
bool GetNextMessage(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

SecByteBlock key(void);
SecByteBlock key(void);
return sizeof(void);
virtual void Update(const byte * input, size_t length);
virtual void TruncatedFinal(byte * digest, size_t digestSize);
virtual void UncheckedSetKey(const byte * key, unsigned int length, const NameValuePairs & params);
virtual void Restart(void);
SecByteBlock key(void);
SecByteBlock key(void);
Pointer is valid ThrowIfInvalidTruncatedSize(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static void InitState(HashWordType * state);
static void Transform(HashWordType * digest, const HashWordType * data);
size_t HashMultipleBlocks(const HashWordType * input, size_t length);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void reset(T * p = NULLPTR);
explicit counted_ptr(T * p = NULLPTR);
return get(void);
T* get(void);
void attach(const T & p);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void CipherSetKey(const NameValuePairs & params, const byte * key, size_t length);
void OperateKeystream(KeystreamOperation operation, byte * output, const byte * input, size_t iterationCount);
void CipherResynchronize(byte * keystreamBuffer, const byte * iv, size_t length);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);
void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return GetBytesPerIteration(void);
throw NotImplemented("SimpleKeyingInterface: this object doesn't support resynchronization");
throw NotImplemented("StreamTransformation: this object doesn't support random access");
void GenerateBlock(byte * output, size_t size);
ChaCha20 chacha(void);
void ProcessData(byte * outString, const byte * inString, size_t length);
param length the size of the IV array
void Resynchronize(const byte * iv, int length = -1);
void Seek(lword position);
void UncheckedSetKey(const byte * key, unsigned int length, const NameValuePairs & params);
throw Exception("SimpleKeyingInterface: unexpected error");
throw NotImplemented("SimpleKeyingInterface: this object doesn't support resynchronization");
return sizeof(void);
ChaCha20 chacha(void);
void ProcessData(byte * outString, const byte * inString, size_t length);
param length the size of the IV array
void Resynchronize(const byte * iv, int length = -1);
void UncheckedSetKey(const byte * key, unsigned int length, const NameValuePairs & params);
void CombineMessageAndShiftRegister(byte * output, byte * reg, const byte * message, size_t length);
void CombineMessageAndShiftRegister(byte * output, byte * reg, const byte * message, size_t length);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);
void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);
void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);
void UncheckedSetKey(const byte * userKey, unsigned int keyLength, const NameValuePairs & params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

param state the state of the hash
static void InitState(HashWordType * state);
param data the data to be digested
static void Transform(word64 * digest, const word64 * data);
void TruncatedFinal(byte * digest, size_t digestSize);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void __stdcall DebugBreak(void);
int __stdcall IsDebuggerPresent(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int keylength, const NameValuePairs & params);
void TruncatedFinal(byte * mac, size_t size);
void Init(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

define crypto_auth_hmacsha512256_tweet_KEYBYTES 32
extern int crypto_auth_hmacsha512256_tweet(unsigned char*, const unsigned char*, unsigned long long, const unsigned char*);
extern int crypto_auth_hmacsha512256_tweet_verify(const unsigned char*, const unsigned char*, unsigned long long, const unsigned char*);
define crypto_box_curve25519xsalsa20poly1305_tweet_BOXZEROBYTES 16
extern int crypto_box_curve25519xsalsa20poly1305_tweet(unsigned char*, const unsigned char*, unsigned long long, const unsigned char*, const unsigned char*, const unsigned char*);
extern int crypto_box_curve25519xsalsa20poly1305_tweet_open(unsigned char*, const unsigned char*, unsigned long long, const unsigned char*, const unsigned char*, const unsigned char*);
extern int crypto_box_curve25519xsalsa20poly1305_tweet_keypair(unsigned char*, unsigned char*);
extern int crypto_box_curve25519xsalsa20poly1305_tweet_beforenm(unsigned char*, const unsigned char*, const unsigned char*);
extern int crypto_box_curve25519xsalsa20poly1305_tweet_afternm(unsigned char*, const unsigned char*, unsigned long long, const unsigned char*, const unsigned char*);
extern int crypto_box_curve25519xsalsa20poly1305_tweet_open_afternm(unsigned char*, const unsigned char*, unsigned long long, const unsigned char*, const unsigned char*);
define crypto_core_salsa20_tweet_CONSTBYTES 16
extern int crypto_core_salsa20_tweet(unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*);
define crypto_core_hsalsa20_tweet_CONSTBYTES 16
extern int crypto_core_hsalsa20_tweet(unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*);
define crypto_hashblocks_sha512_tweet_BLOCKBYTES 128
extern int crypto_hashblocks_sha512_tweet(unsigned char*, const unsigned char*, unsigned long long);
define crypto_hashblocks_sha256_tweet_BLOCKBYTES 64
extern int crypto_hashblocks_sha256_tweet(unsigned char*, const unsigned char*, unsigned long long);
define crypto_hash_sha512_tweet_BYTES 64
extern int crypto_hash_sha512_tweet(unsigned char*, const unsigned char*, unsigned long long);
define crypto_hash_sha256_tweet_BYTES 32
extern int crypto_hash_sha256_tweet(unsigned char*, const unsigned char*, unsigned long long);
define crypto_onetimeauth_poly1305_tweet_KEYBYTES 32
extern int crypto_onetimeauth_poly1305_tweet(unsigned char*, const unsigned char*, unsigned long long, const unsigned char*);
extern int crypto_onetimeauth_poly1305_tweet_verify(const unsigned char*, const unsigned char*, unsigned long long, const unsigned char*);
define crypto_scalarmult_curve25519_tweet_SCALARBYTES 32
extern int crypto_scalarmult_curve25519_tweet(unsigned char*, const unsigned char*, const unsigned char*);
extern int crypto_scalarmult_curve25519_tweet_base(unsigned char*, const unsigned char*);
define crypto_secretbox_xsalsa20poly1305_tweet_BOXZEROBYTES 16
extern int crypto_secretbox_xsalsa20poly1305_tweet(unsigned char*, const unsigned char*, unsigned long long, const unsigned char*, const unsigned char*);
extern int crypto_secretbox_xsalsa20poly1305_tweet_open(unsigned char*, const unsigned char*, unsigned long long, const unsigned char*, const unsigned char*);
define crypto_sign_ed25519_tweet_SECRETKEYBYTES 64
extern int crypto_sign_ed25519_tweet(unsigned char*, unsigned long long*, const unsigned char*, unsigned long long, const unsigned char*);
extern int crypto_sign_ed25519_tweet_open(unsigned char*, unsigned long long*, const unsigned char*, unsigned long long, const unsigned char*);
extern int crypto_sign_ed25519_tweet_keypair(unsigned char*, unsigned char*);
define crypto_stream_xsalsa20_tweet_NONCEBYTES 24
extern int crypto_stream_xsalsa20_tweet(unsigned char*, unsigned long long, const unsigned char*, const unsigned char*);
extern int crypto_stream_xsalsa20_tweet_xor(unsigned char*, const unsigned char*, unsigned long long, const unsigned char*, const unsigned char*);
define crypto_stream_salsa20_tweet_NONCEBYTES 8
extern int crypto_stream_salsa20_tweet(unsigned char*, unsigned long long, const unsigned char*, const unsigned char*);
extern int crypto_stream_salsa20_tweet_xor(unsigned char*, const unsigned char*, unsigned long long, const unsigned char*, const unsigned char*);
define crypto_verify_16_tweet_BYTES 16
extern int crypto_verify_16_tweet(const unsigned char*, const unsigned char*);
define crypto_verify_32_tweet_BYTES 32
extern int crypto_verify_32_tweet(const unsigned char*, const unsigned char*);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UncheckedSetKey(const byte * userKey, unsigned int length, const NameValuePairs & params);
static word32 h0(word32 x, const word32 * key, unsigned int kLen);
static word32 h(word32 x, const word32 * key, unsigned int kLen);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void Resynchronize(const byte * nonce, int length = -1);
void GetNextIV(RandomNumberGenerator & rng, byte * IV);
void UncheckedSetKey(const byte * userKey, unsigned int keylength, const NameValuePairs & params);
void TruncatedFinal(byte * mac, size_t size);
void HashEndianCorrectedBlock(const word64 * data);
size_t HashMultipleBlocks(const word64 * input, size_t length);
void VHASH_Update_SSE2(const word64 * data, size_t blocksRemainingInWord64, int tagPart);
void VHASH_Update_Template(const word64 * data, size_t blockRemainingInWord128);
void VHASH_Update(const word64 * data, size_t blocksRemainingInWord128);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

word32 M(word32 x, word32 y);
void GenKey(word32 k0, word32 k1, word32 k2, word32 k3);
void CipherSetKey(const NameValuePairs & params, const byte * key, size_t length);
OFB
void OperateKeystream(KeystreamOperation operation, byte * output, const byte * input, size_t iterationCount);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static void InitState(HashWordType * state);
static void Transform(word64 * digest, const word64 * data);
void TruncatedFinal(byte * hash, size_t size);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

if CRYPTOPP_MSC_VERSION memcpy_s(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Integer x(void);
void AssignFrom(const NameValuePairs & source);
PKCS8PrivateKey
void BERDecode(BufferedTransformation & bt);
void BERDecodePrivateKey(BufferedTransformation & bt, bool parametersPresent, size_t size);
void BERDecodeAndCheckAlgorithmID(BufferedTransformation & bt);
DL_PrivateKey
void GenerateRandom(RandomNumberGenerator & rng, const NameValuePairs & params);
void AssignFrom(const NameValuePairs & source);
PKCS8PrivateKey
void BERDecode(BufferedTransformation & bt);
void BERDecodePrivateKey(BufferedTransformation & bt, bool parametersPresent, size_t size);
void BERDecodeAndCheckAlgorithmID(BufferedTransformation & bt);
PKCS8PrivateKey
void GenerateRandom(RandomNumberGenerator & rng, const NameValuePairs & params);
void SetPrivateExponent(const byte x[SECRET_KEYLENGTH]);
void SetPrivateExponent(const Integer & x);
6 ed25519Signer(const PKCS8PrivateKey & key);
return new ed25519_MessageAccumulator(void);
throw NotImplemented("ed25519Signer: this object does not support recoverable messages");
X509PublicKey
void BERDecode(BufferedTransformation & bt);
void BERDecodePublicKey(BufferedTransformation & bt, bool parametersPresent, size_t size);
void BERDecodeAndCheckAlgorithmID(BufferedTransformation & bt);
void AssignFrom(const NameValuePairs & source);
DL_PublicKey
void SetPublicElement(const byte y[PUBLIC_KEYLENGTH]);
void SetPublicElement(const Element & y);
6 ed25519Verifier(const X509PublicKey & key);
throw NotImplemented("ed25519Verifier: this object does not support recoverable messages");

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static const GFP2Element& Zero(void);
throw InvalidArgument("GFP2_ONB: modulus must be equivalent to 2 mod 3");
return GFP2Element(void);
q and generator g for XTR
void XTR_FindPrimesAndGenerator(RandomNumberGenerator & rng, Integer & p, Integer & q, GFP2Element & g, unsigned int pbits, unsigned int qbits);
GFP2Element XTR_Exponentiate(const GFP2Element & b, const Integer & e, const Integer & p);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void AssignFrom(const NameValuePairs & source);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

throw InvalidKeyLength if the key length is invalid
void ThrowIfInvalidKeyLength(size_t length);
void ThrowIfInvalidBlockSize(size_t length);
void SetKey(const byte * key, size_t length, const NameValuePairs & params = g_nullNameValuePairs);
void Resynchronize(const byte * iv, int ivLength = -1);
void ProcessData(byte * outString, const byte * inString, size_t length);
size_t ProcessLastBlock(byte * outString, size_t outLength, const byte * inString, size_t inLength);
void Resynchronize(word64 sector, ByteOrder order = BIG_ENDIAN_ORDER);
virtual void ResizeBuffers(void);
inline size_t ProcessLastPlainBlock(byte * outString, size_t outLength, const byte * inString, size_t inLength);
inline size_t ProcessLastCipherBlock(byte * outString, size_t outLength, const byte * inString, size_t inLength);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

param attachment an attached transformation LowFirstBitWriter(BufferedTransformation * attachment);
void PutBits(unsigned long value, unsigned int length);
void FlushBitBuffer(void);
void ClearBitBuffer(void);
void StartCounting(void);
unsigned long FinishCounting(void);
param nCodes the number of codes in the table HuffmanEncoder(const unsigned int* codeBits, unsigned int nCodes);
param nCodes the number of codes in the table
void Initialize(const unsigned int* codeBits, unsigned int nCodes);
static void GenerateCodeLengths(unsigned int* codeBits, unsigned int maxCodeBits, const unsigned int* codeCounts, size_t nCodes);
DetectUncompressible Deflator(const NameValuePairs & parameters, BufferedTransformation * attachment = NULLPTR);
details SetDeflateLevel can be used to set the deflate level in the middle of compression
void SetDeflateLevel(int deflateLevel);
void IsolatedInitialize(const NameValuePairs & parameters);
size_t Put2(const byte * inString, size_t length, int messageEnd, bool blocking);
bool IsolatedFlush(bool hardFlush, bool blocking);
void InitializeStaticEncoders(void);
void Reset(bool forceReset = false);
unsigned int FillWindow(const byte * str, size_t length);
void InsertString(unsigned int start);
void ProcessBuffer(void);
void LiteralByte(byte b);
void MatchFound(unsigned int distance, unsigned int length);
void EncodeBlock(bool eof, unsigned int blockType);
void EndBlock(bool eof);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

bool FillBuffer(unsigned int length);
unsigned long PeekBits(unsigned int length);
void SkipBits(unsigned int length);
unsigned long GetBits(unsigned int length);
void Initialize(const unsigned int* codeBitLengths, unsigned int nCodes);
static code_t NormalizeCode(code_t code, unsigned int codeBits);
param autoSignalPropagation 0 to turn off MessageEnd signal Inflator(BufferedTransformation * attachment = NULLPTR, bool repeat = false, int autoSignalPropagation = -1);
void IsolatedInitialize(const NameValuePairs & parameters);
size_t Put2(const byte * inString, size_t length, int messageEnd, bool blocking);
bool IsolatedFlush(bool hardFlush, bool blocking);
void ProcessInput(bool flush);
void DecodeHeader(void);
bool DecodeBody(void);
void FlushOutput(void);
void OutputByte(byte b);
void OutputString(const byte * string, size_t length);
void OutputPast(unsigned int length, unsigned int distance);
void CreateFixedDistanceDecoder(void);
void CreateFixedLiteralDecoder(void);
const HuffmanDecoder& GetLiteralDecoder(void);
const HuffmanDecoder& GetDistanceDecoder(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void WritePrestreamHeader(void);
void ProcessUncompressedData(const byte * string, size_t length);
void WritePoststreamTail(void);
param autoSignalPropagation 0 to turn off MessageEnd signal ZlibDecompressor(BufferedTransformation * attachment = NULLPTR, bool repeat = false, int autoSignalPropagation = -1);
void ProcessPrestreamHeader(void);
void ProcessDecompressedData(const byte * string, size_t length);
void ProcessPoststreamTail(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LDLT& compute(const EigenBase<InputType>&matrix);
LDLT& rankUpdate(const MatrixBase<Derived>&w, const RealScalar & alpha = 1);
return MatrixL(void);
return MatrixU(void);
MatrixType res(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LLT& compute(const EigenBase<InputType>&matrix);
LLT& rankUpdate(const VectorType & vec, const RealScalar & sigma = 1);
return unblocked(void);
return MatrixL(void);
return MatrixU(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

auto seq(FirstType f, LastType l, IncrType incr);
code
* seqN(void);
auto seq(FirstType f, LastType l);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC explicit Array(const Scalar * data);
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE explicit Array(Index dim);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
explicit ArrayBase(void);
explicit ArrayBase(const ArrayBase<OtherDerived>&);
return derived(void);
return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

SrcEvaluatorType srcEvaluator(void);
DstEvaluatorType dstEvaluator(void);
type tmp(void);
ActualDstType actualDst(void);
SrcEvaluatorType srcEvaluator(void);
DstEvaluatorType dstEvaluator(void);
void check_for_aliasing(const Dst & dst, const Src & src);
endif call_dense_assignment_loop(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Vector sign_vector(void);
return RealScalar(void);
return RealScalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC evaluator_base(const evaluator_base&);
ifndef EIGEN_INTERNAL_DEBUGGING EIGEN_UNUSED_VARIABLE(void);
endif eigen_internal_assert(void);
return op(void);
return op(void);
return op(void);
return op(void);
return op(void);
return op(void);
return m_wrapper(void);
return m_wrapper(void);
col* colStride(void);
col* colStride(void);
return coeff(RowsAtCompileTime == 1 ? 0 : index, RowsAtCompileTime == 1 ? index : 0);
return coeffRef(RowsAtCompileTime == 1 ? 0 : index, RowsAtCompileTime == 1 ? index : 0);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator result(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return isApproxToConstant(void);
return setConstant(void);
return setConstant(void);
return setIdentity(void);
return derived(void);
return setUnit(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return size(void);
EIGEN_DEPRECATED EIGEN_DEVICE_FUNC
Derived& lazyAssign(const DenseBase<OtherDerived>&other);
return derived(void);
EIGEN_DEVICE_FUNC
TransposeReturnType transpose(void);
EIGEN_DEVICE_FUNC
void transposeInPlace(void);
EIGEN_DEVICE_FUNC static const ConstantReturnType Constant(Index rows, Index cols, const Scalar & value);
EIGEN_DEVICE_FUNC static const ConstantReturnType Constant(Index size, const Scalar & value);
EIGEN_DEVICE_FUNC static const ConstantReturnType Constant(const Scalar & value);
EIGEN_DEPRECATED EIGEN_DEVICE_FUNC static const RandomAccessLinSpacedReturnType LinSpaced(Index size, const Scalar & low, const Scalar & high);
EIGEN_DEPRECATED EIGEN_DEVICE_FUNC static const RandomAccessLinSpacedReturnType LinSpaced(const Scalar & low, const Scalar & high);
EIGEN_DEVICE_FUNC static const RandomAccessLinSpacedReturnType LinSpaced(Index size, const Scalar & low, const Scalar & high);
EIGEN_DEVICE_FUNC static const RandomAccessLinSpacedReturnType LinSpaced(const Scalar & low, const Scalar & high);
EIGEN_DEVICE_FUNC static const ConstantReturnType Zero(Index rows, Index cols);
EIGEN_DEVICE_FUNC static const ConstantReturnType Zero(Index size);
EIGEN_DEVICE_FUNC static const ConstantReturnType Zero(void);
EIGEN_DEVICE_FUNC static const ConstantReturnType Ones(Index rows, Index cols);
EIGEN_DEVICE_FUNC static const ConstantReturnType Ones(Index size);
EIGEN_DEVICE_FUNC static const ConstantReturnType Ones(void);
EIGEN_DEVICE_FUNC void fill(const Scalar & value);
EIGEN_DEVICE_FUNC Derived& setConstant(const Scalar & value);
EIGEN_DEVICE_FUNC Derived& setLinSpaced(Index size, const Scalar & low, const Scalar & high);
EIGEN_DEVICE_FUNC Derived& setLinSpaced(const Scalar & low, const Scalar & high);
EIGEN_DEVICE_FUNC Derived& setZero(void);
EIGEN_DEVICE_FUNC Derived& setOnes(void);
EIGEN_DEVICE_FUNC Derived& setRandom(void);
type forceAlignedAccessIf(void);
EIGEN_DEVICE_FUNC RowwiseReturnType rowwise(void);
EIGEN_DEVICE_FUNC ColwiseReturnType colwise(void);
static const RandomReturnType Random(Index rows, Index cols);
static const RandomReturnType Random(Index size);
static const RandomReturnType Random(void);
EIGEN_DEVICE_FUNC ReverseReturnType reverse(void);
EIGEN_DEVICE_FUNC void reverseInPlace(void);
endif

inline iterator begin(void);
inline iterator end(void);
EIGEN_DEVICE_FUNC explicit DenseBase(void);
EIGEN_DEVICE_FUNC DenseBase(void);
EIGEN_DEVICE_FUNC explicit DenseBase(const DenseBase<OtherDerived>&);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return coeff(void);
return coeff(void);
return coeff(void);
void coeffRef(void);
void coeffRefByOuterInner(void);
void writePacket(void);
void writePacketByOuterInner(void);
void copyCoeff(void);
void copyCoeffByOuterInner(void);
void copyPacket(void);
void copyPacketByOuterInner(void);
void stride(void);
void innerStride(void);
void outerStride(void);
void rowStride(void);
void colStride(void);
return coeffRef(void);
return coeffRef(void);
return coeffRef(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

DenseStorage tmp(void);
DenseStorage tmp(void);
DenseStorage tmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return RealScalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

type nested(void);
type otherNested(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

type actual_rhs(void);
type actual_rhs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC inline Target preinterpret(const Packet & a);
return T(void);
return T(void);
return op(void);
return Func(void);
return arg(void);
type ploadu(const typename unpacket_traits<Packet>::type * from, typename unpacket_traits<Packet>::mask_t umask);
EIGEN_DEVICE_FUNC inline Packet pset1frombits(BitsType a);
type pstoreu(Scalar * to, const Packet & from, typename unpacket_traits<Packet>::mask_t umask);
return sin(void);
return cos(void);
return tan(void);
return asin(void);
return acos(void);
return atan(void);
return sinh(void);
return cosh(void);
return tanh(void);
return exp(void);
return log(void);
return log10(void);
return round(void);
return floor(void);
return rint(void);
return ceil(void);
return bool(void);
else pstoreu(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ostream& print_matrix(std::ostream & s, const Derived & _m, const IOFormat & fmt);
compute the largest width for (Index j = 0; j < m.cols();

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

	// Auto-generated bindings for fftw3_integration

	return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

	// Auto-generated bindings for fftw3_integration

	return real(void);
return RealScalar(void);
return imag(void);
return Scalar(void);
return Scalar(void);
return conj(void);
return sqrt(void);
return abs(void);
if EIGEN_HAS_CXX11_MATH EIGEN_USING_STD(void);
if EIGEN_HAS_CXX11_MATH EIGEN_USING_STD(void);
endif
return rint(void);
else EIGEN_USING_STD(void);
return arg(void);
return RealScalar(void);
endif
return expm1(void);
return complex_log(void);
endif
return log1p(void);
return pow(void);
ScalarX res(void);
return isinf_msvc_helper(void);
return isinf_msvc_helper(void);
return isinf_msvc_helper(void);
return __builtin_isnan(void);
return __builtin_isnan(void);
return __builtin_isnan(void);
return __builtin_isinf(void);
return __builtin_isinf(void);
return __builtin_isinf(void);
EIGEN_DEVICE_FUNC bool isfinite_impl(const std::complex<T>&x);
EIGEN_DEVICE_FUNC bool isnan_impl(const std::complex<T>&x);
EIGEN_DEVICE_FUNC bool isinf_impl(const std::complex<T>&x);
return fminf(void);
return fmin(void);
else
return fminl(void);
return fmaxf(void);
return fmax(void);
else
return fmaxl(void);
return fabsf(x - y);
return fabs(x - y);
return fabsl(x - y);
return floor(void);
return ceil(void);
unsigned int v(void);
return sqrt(void);
return abs(void);
return exp(void);
return cos(void);
return sin(void);
return tan(void);
return acos(void);
return asin(void);
return tanh(void);
return fmod(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return RealScalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

VectorXd v(void);
MatrixXi m(void);
EIGEN_DEVICE_FUNC
explicit Matrix(const Scalar * data);
EIGEN_STRONG_INLINE explicit Matrix(Index dim);
EIGEN_DEVICE_FUNC Matrix(Index rows, Index cols);
EIGEN_DEVICE_FUNC
explicit Matrix(const RotationBase<OtherDerived, ColsAtCompileTime>&r);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void applyOnTheLeft(const EigenBase<OtherDerived>&other);
void applyOnTheRight(const EigenBase<OtherDerived>&other);
EIGEN_DEVICE_FUNC void normalize(void);
EIGEN_DEVICE_FUNC void stableNormalize(void);
EIGEN_DEVICE_FUNC void adjointInPlace(void);
EIGEN_DEVICE_FUNC
DiagonalReturnType diagonal(void);
Type diagonal(void);
EIGEN_DEVICE_FUNC
DiagonalDynamicIndexReturnType diagonal(Index index);
Type triangularView(void);
Type selfadjointView(void);
EIGEN_DEVICE_FUNC static const IdentityReturnType Identity(void);
EIGEN_DEVICE_FUNC static const IdentityReturnType Identity(Index rows, Index cols);
EIGEN_DEVICE_FUNC static const BasisReturnType Unit(Index size, Index i);
EIGEN_DEVICE_FUNC static const BasisReturnType Unit(Index i);
EIGEN_DEVICE_FUNC static const BasisReturnType UnitX(void);
EIGEN_DEVICE_FUNC static const BasisReturnType UnitY(void);
EIGEN_DEVICE_FUNC static const BasisReturnType UnitZ(void);
EIGEN_DEVICE_FUNC static const BasisReturnType UnitW(void);
EIGEN_DEVICE_FUNC
Derived& setIdentity(void);
EIGEN_DEVICE_FUNC
Derived& setIdentity(Index rows, Index cols);
EIGEN_DEVICE_FUNC Derived& setUnit(Index i);
EIGEN_DEVICE_FUNC Derived& setUnit(Index newSize, Index i);
EIGEN_DEVICE_FUNC noalias(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
EIGEN_DEVICE_FUNC
void makeHouseholderInPlace(Scalar & tau, RealScalar & beta);
EIGEN_DEVICE_FUNC
void applyHouseholderOnTheLeft(const EssentialPart & essential, const Scalar & tau, Scalar * workspace);
EIGEN_DEVICE_FUNC
void applyHouseholderOnTheRight(const EssentialPart & essential, const Scalar & tau, Scalar * workspace);
EIGEN_DEVICE_FUNC
void applyOnTheLeft(Index p, Index q, const JacobiRotation<OtherScalar>&j);
EIGEN_DEVICE_FUNC
void applyOnTheRight(Index p, Index q, const JacobiRotation<OtherScalar>&j);
EIGEN_DEVICE_FUNC explicit MatrixBase(void);
EIGEN_DEVICE_FUNC MatrixBase(void);
EIGEN_DEVICE_FUNC explicit MatrixBase(const MatrixBase<OtherDerived>&);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

trivially copyable types EIGEN_STATIC_ASSERT(void);
point types
return Real(void);
string epsilon(void);
string dummy_precision(void);
string lowest(void);
string highest(void);
string infinity(void);
string quiet_NaN(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

type zero(void);
return coeff(Direction == Vertical ? j : i);
PanelEvaluator panel_eval(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _set(void);
return ConstMapType(void);
return MapType(void);
return ConstMapType(void);
return MapType(void);
return ConstMapType(void);
return MapType(void);
return ConstAlignedMapType(void);
return AlignedMapType(void);
return ConstAlignedMapType(void);
return AlignedMapType(void);
return ConstAlignedMapType(void);
return AlignedMapType(void);
EIGEN_DEVICE_FUNC Derived& setConstant(Index size, const Scalar & val);
EIGEN_DEVICE_FUNC Derived& setConstant(Index rows, Index cols, const Scalar & val);
EIGEN_DEVICE_FUNC Derived& setConstant(Index cols, const Scalar & val);
EIGEN_DEVICE_FUNC Derived& setConstant(Index rows, const Scalar & val);
EIGEN_DEVICE_FUNC Derived& setZero(Index size);
EIGEN_DEVICE_FUNC Derived& setZero(Index rows, Index cols);
EIGEN_DEVICE_FUNC Derived& setZero(Index cols);
EIGEN_DEVICE_FUNC Derived& setZero(Index rows);
EIGEN_DEVICE_FUNC Derived& setOnes(Index size);
EIGEN_DEVICE_FUNC Derived& setOnes(Index rows, Index cols);
EIGEN_DEVICE_FUNC Derived& setOnes(Index cols);
EIGEN_DEVICE_FUNC Derived& setOnes(Index rows);
Derived& setRandom(Index size);
Derived& setRandom(Index rows, Index cols);
Derived& setRandom(Index cols);
Derived& setRandom(Index rows);
else resizeLike(void);
Derived tmp(void);
Derived tmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LhsNested actual_lhs(void);
RhsNested actual_rhs(void);
MatrixType mat(void);
MatrixType mat(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return setRandom(void);
return setRandom(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Scalar(void);
return Scalar(void);
return Scalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void foo1(Ref<VectorXf> x);
void foo2(const Ref<const VectorXf>&x);
The row is copied into a contiguous temporary
* foo2(void);
void foo3(InnerStride<> > x);
void foo(const Ref<MatrixXf>&A);
void foo(const Ref<MatrixXf, Stride<> >&A);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return preverse(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

type tmp1(void);
type tmp2(void);
TransposeReturnType tmp(void);
return TransposeReturnType(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

DecompositionType dec(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

OtherCopy otherCopy(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

const VectorTypeCopy copy(void);
RealScalar scale(void);
RealScalar invScale(void);
RealScalar ssq(void);
sum of squares stable_norm_impl_inner_step(void);
return scale * sqrt(void);
RealScalar scale(void);
RealScalar invScale(void);
RealScalar ssq(void);
sum of squares for (Index j = 0; j < mat.outerSize();
	return scale * sqrt(void);
	InnerIterator iter(void);
else
return sqrt(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
pointer_based_stl_iterator prev(void);
pointer_based_stl_iterator prev(void);
pointer_based_stl_iterator ret(void);
pointer_based_stl_iterator ret(void);
pointer_based_stl_iterator ret(void);
pointer_based_stl_iterator ret(void);
return cbegin(void);
return cend(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return coeff(void);
return coeffRef(void);
TransposeReturnType tmp(void);
return TransposeReturnType(void);
return derived(void);
return derived(void);
EIGEN_DEPRECATED EIGEN_DEVICE_FUNC
void lazyAssign(const TriangularBase<OtherDerived>&other);
EIGEN_DEPRECATED EIGEN_DEVICE_FUNC
void lazyAssign(const MatrixBase<OtherDerived>&other);
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE TriangularViewType& _assignProduct(const ProductType & prod, const Scalar & alpha, bool beta);
return derived(void);
return derived(void);
SrcEvaluatorType srcEvaluator(void);
DstEvaluatorType dstEvaluator(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return BinaryOp(void);
return const_iterator(void);
return const_iterator(void);
EIGEN_DEVICE_FUNC inline void reverseInPlace(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

called for the first coefficient
* void init(const Scalar & value, Index i, Index j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Packet2cf(void);
endif
return Packet2cf(void);
return Packet2cf(a.v + b.v);
return Packet2cf(a.v - b.v);
return Packet2cf(void);
return Packet1cd(void);
return Packet1cd(a.v + b.v);
return Packet1cd(a.v - b.v);
return pfirst(void);
return pfirst(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return plog_float(void);
return pexp_float(void);
return psin_float(void);
return pcos_float(void);
return vec_rsqrt(void);
return vec_rsqrt(void);
return vec_sqrt(void);
return vec_sqrt(void);
return pexp_double(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
return Packet(void);
return Packet(void);
return Packet(void);
return Packet2d(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
endif gemm_function(void);
endif gemm_function(void);
endif gemm_function(void);
endif gemm_function(void);
endif gemm_function(void);
endif gemm_function(void);
endif gemm_function(void);
endif gemm_function(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_STRONG_INLINE void gemm_extra_col(const DataMapper & res, const Scalar * lhs_base, const Scalar * rhs_base, Index depth, Index strideA, Index offsetA, Index row, Index col, Index remaining_rows, Index remaining_cols, const Packet & pAlpha);
EIGEN_STRONG_INLINE void gemm_extra_row(const DataMapper & res, const Scalar * lhs_base, const Scalar * rhs_base, Index depth, Index strideA, Index offsetA, Index row, Index col, Index rows, Index cols, Index remaining_rows, const Packet & pAlpha, const Packet & pMask);
EIGEN_STRONG_INLINE void gemm_unrolled_col(const DataMapper & res, const Scalar * lhs_base, const Scalar * rhs_base, Index depth, Index strideA, Index offsetA, Index & row, Index rows, Index col, Index remaining_cols, const Packet & pAlpha);
EIGEN_ALWAYS_INLINE Packet bmask(const int remaining_rows);
EIGEN_STRONG_INLINE void gemm_complex_extra_col(const DataMapper & res, const Scalar * lhs_base, const Scalar * rhs_base, Index depth, Index strideA, Index offsetA, Index strideB, Index row, Index col, Index remaining_rows, Index remaining_cols, const Packet & pAlphaReal, const Packet & pAlphaImag);
EIGEN_STRONG_INLINE void gemm_complex_extra_row(const DataMapper & res, const Scalar * lhs_base, const Scalar * rhs_base, Index depth, Index strideA, Index offsetA, Index strideB, Index row, Index col, Index rows, Index cols, Index remaining_rows, const Packet & pAlphaReal, const Packet & pAlphaImag, const Packet & pMask);
EIGEN_STRONG_INLINE void gemm_complex_unrolled_col(const DataMapper & res, const Scalar * lhs_base, const Scalar * rhs_base, Index depth, Index strideA, Index offsetA, Index strideB, Index & row, Index rows, Index col, Index remaining_cols, const Packet & pAlphaReal, const Packet & pAlphaImag);
EIGEN_ALWAYS_INLINE Packet ploadLhs(const Scalar * lhs);
EIGEN_ALWAYS_INLINE void bload(4 > &acc, const DataMapper & res, Index row, Index col);
EIGEN_ALWAYS_INLINE void bload(8 > &acc, const DataMapper & res, Index row, Index col);
EIGEN_ALWAYS_INLINE void bscale(4 > &acc, 4 > &accZ, const Packet & pAlpha);
EIGEN_ALWAYS_INLINE void bscalec(N > &aReal, N > &aImag, const Packet & bReal, const Packet & bImag, N > &cReal, N > &cImag);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

agnostic
static _EIGEN_DECLARE_CONST_FAST_Packet4f(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4i(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4i(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4i(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4i(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
static _EIGEN_DECLARE_CONST_FAST_Packet8us(void);
static _EIGEN_DECLARE_CONST_FAST_Packet16uc(void);
else
return vec_ld(void);
ifdef __VSX__ vec_xst(void);
else vec_st(void);
return vec_madd(void);
return vec_mul(void);
return vec_mul(void);
return vec_mul(void);
return vec_mul(void);
return vec_madd(void);
else
return vec_div(void);
return vec_madd(void);
return vec_madd(void);
return vec_madd(void);
else
return vec_min(void);
return vec_min(void);
return vec_min(void);
return vec_min(void);
return vec_min(void);
return vec_min(void);
else
return vec_max(void);
return vec_max(void);
return vec_max(void);
return vec_max(void);
return vec_max(void);
return vec_max(void);
return vec_nor(void);
return vec_and(void);
return vec_and(void);
return vec_and(void);
return vec_and(void);
return vec_or(void);
return vec_or(void);
return vec_or(void);
return vec_or(void);
return vec_xor(void);
return vec_xor(void);
return vec_andc(void);
return vec_andc(void);
return vec_ceil(void);
return vec_floor(void);
return vec_perm(void);
return vec_perm(void);
return vec_perm(void);
return vec_perm(void);
return vec_perm(void);
return vec_perm(void);
return vec_perm(void);
else vec_xst(void);
return vec_perm(void);
return vec_perm(void);
return vec_abs(void);
return vec_abs(void);
return vec_abs(void);
return vec_abs(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
return vec_sr(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
return vec_sl(void);
const _EIGEN_DECLARE_CONST_FAST_Packet8us(void);
return vec_sl(void);
const _EIGEN_DECLARE_CONST_FAST_Packet8us(void);
return vec_sr(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
Begin
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
return F32ToBf16(void);
return F32ToBf16(void);
return F32ToBf16Bool(void);
return pldexp_generic(void);
return pfrexp_generic(void);
return F32ToBf16(void);
return F32ToBf16(void);
return pfirst(void);
endif
return pfirst(void);
return bfloat16(void);
return pfirst(void);
return pfirst(void);
return bfloat16(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return bfloat16(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return bfloat16(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return vec_sel(void);
return vec_sel(void);
return vec_sel(void);
return vec_sel(void);
return vec_cts(void);
return vec_ctu(void);
return vec_ctf(void);
return vec_ctf(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
bfloat16
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
return F32ToBf16(void);
return vec_splat(void);
EIGEN_DEBUG_ALIGNED_STORE vec_xst(void);
return vec_madd(void);
return vec_div(void);
return vec_madd(void);
return vec_nor(void);
return vec_and(void);
return vec_or(void);
return vec_xor(void);
return vec_ceil(void);
return vec_floor(void);
EIGEN_DEBUG_UNALIGNED_STORE vec_xst(void);
return vec_abs(void);
return vec_cts(void);
return vec_sl(void);
return vec_sr(void);
ifdef  _BIG_ENDIAN
return vec_perm(void);
else
return vec_perm(void);
ifdef  _BIG_ENDIAN
return vec_perm(void);
else
return vec_perm(void);
return pfrexp_generic(void);
return vec_sel(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Packet4cf(void);
return Packet4cf(void);
return Packet2cd(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return psin_float(void);
return pcos_float(void);
return plog_float(void);
return plog_double(void);
return plog2_float(void);
return plog2_double(void);
return generic_plog1p(void);
return generic_expm1(void);
return pexp_float(void);
return pexp_double(void);
return _mm256_sqrt_ps(void);
return _mm256_sqrt_pd(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm256_set1_ps(void);
return _mm256_set1_pd(void);
return _mm256_set1_epi32(void);
return _mm256_setzero_ps(void);
return _mm256_setzero_pd(void);
return _mm256_setzero_si256(void);
return _mm256_set_epi32(void);
return _mm256_broadcast_ss(void);
return _mm256_broadcast_sd(void);
return _mm256_add_ps(void);
return _mm256_add_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_add_epi32(void);
return _mm256_sub_ps(void);
return _mm256_sub_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_sub_epi32(void);
return _mm256_mul_ps(void);
return _mm256_mul_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_mullo_epi32(void);
return _mm256_div_ps(void);
return _mm256_div_pd(void);
else
return _mm256_fmadd_ps(void);
else
return _mm256_fmadd_pd(void);
return _mm256_cmp_ps(void);
return _mm256_cmp_ps(void);
return _mm256_cmp_ps(void);
return _mm256_cmp_ps(void);
return _mm256_cmp_pd(void);
return _mm256_cmp_pd(void);
return _mm256_cmp_pd(void);
return _mm256_cmp_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_cmpeq_epi32(void);
return _mm256_min_ps(void);
return _mm256_min_pd(void);
return _mm256_max_ps(void);
return _mm256_max_pd(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return _mm256_round_ps(void);
return _mm256_round_pd(void);
return _mm256_ceil_ps(void);
return _mm256_ceil_pd(void);
return _mm256_floor_ps(void);
return _mm256_floor_pd(void);
vpcmpeqd has lower latency than the more general vcmpps
return _mm256_cmpeq_epi32(void);
else
return _mm256_cmp_ps(void);
else
return _mm256_cmp_pd(void);
return _mm256_and_ps(void);
return _mm256_and_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_and_si256(void);
return _mm256_or_ps(void);
return _mm256_or_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_or_si256(void);
return _mm256_xor_ps(void);
return _mm256_xor_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_xor_si256(void);
return _mm256_andnot_ps(void);
return _mm256_andnot_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_andnot_si256(void);
return _mm256_blendv_ps(void);
return _mm256_blendv_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_srai_epi32(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_srli_epi32(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_slli_epi32(void);
EIGEN_DEBUG_ALIGNED_LOAD return _mm256_load_ps(void);
EIGEN_DEBUG_ALIGNED_LOAD return _mm256_load_pd(void);
EIGEN_DEBUG_UNALIGNED_LOAD return _mm256_loadu_ps(void);
EIGEN_DEBUG_UNALIGNED_LOAD return _mm256_loadu_pd(void);
EIGEN_DEBUG_UNALIGNED_LOAD return _mm256_maskload_ps(void);
return _mm256_unpacklo_ps(void);
return _mm256_permute_pd(void);
EIGEN_DEBUG_ALIGNED_STORE _mm256_store_ps(void);
EIGEN_DEBUG_ALIGNED_STORE _mm256_store_pd(void);
EIGEN_DEBUG_UNALIGNED_STORE _mm256_storeu_ps(void);
EIGEN_DEBUG_UNALIGNED_STORE _mm256_storeu_pd(void);
EIGEN_DEBUG_UNALIGNED_STORE return _mm256_maskstore_ps(void);
return _mm256_set_ps(void);
return _mm256_set_pd(void);
return _mm256_permute2f128_ps(void);
return _mm256_permute2f128_pd(void);
return _mm256_permute_pd(void);
return _mm256_and_ps(void);
return _mm256_and_pd(void);
return pfrexp_generic(void);
return pfrexp_generic(void);
return pldexp_generic(void);
return _mm256_blendv_ps(void);
return _mm256_blendv_pd(void);
return _mm_set_epi16(void);
return _mm_set_epi16(void);
return _mm_cmpeq_epi32(void);
return _mm_andnot_si128(void);
ifdef EIGEN_HAS_FP16_C
return _mm256_cvtph_ps(void);
float f0(void);
float f1(void);
float f2(void);
float f3(void);
float f4(void);
float f5(void);
float f6(void);
float f7(void);
return _mm256_set_ps(void);
ifdef EIGEN_HAS_FP16_C
return _mm256_cvtps_ph(void);
return _mm_set_epi16(void);
return _mm_or_si128(void);
return _mm_xor_si128(void);
return _mm_and_si128(void);
return _mm_andnot_si128(void);
return _mm_blendv_epi8(void);
return _mm_xor_si128(void);
return float2half(void);
return float2half(void);
return float2half(void);
return float2half(void);
return _mm_set_epi16(void);
return _mm_shuffle_epi8(void);
return _mm_packus_epi32(void);
return _mm_set_epi16(void);
return _mm_set_epi16(void);
return _mm_cmpeq_epi32(void);
return _mm_andnot_si128(void);
return _mm_or_si128(void);
return _mm_xor_si128(void);
return _mm_and_si128(void);
return _mm_andnot_si128(void);
return _mm_blendv_epi8(void);
return _mm_xor_si128(void);
return _mm_set_epi16(void);
return _mm_shuffle_epi8(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm256_cvttps_epi32(void);
return _mm256_cvtepi32_ps(void);
return _mm256_castps_si256(void);
return _mm256_castsi256_ps(void);
return half2float(void);
return Bf16ToF32(void);
return float2half(void);
return F32ToBf16(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Packet4cf(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return plog_float(void);
return plog_double(void);
return plog2_float(void);
return plog2_double(void);
return pexp_double(void);
return _mm512_sqrt_ps(void);
return _mm512_sqrt_pd(void);
return _mm512_rsqrt28_ps(void);
return _mm512_mask_blend_ps(void);
return _mm512_mask_blend_pd(void);
return generic_plog1p(void);
return generic_expm1(void);
return psin_float(void);
return pcos_float(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm512_set1_ps(void);
return _mm512_set1_pd(void);
return _mm512_set1_epi32(void);
return _mm512_setzero_ps(void);
return _mm512_setzero_pd(void);
return _mm512_setzero_si512(void);
return _mm512_set_epi32(void);
return _mm512_set1_pd(void);
return _mm512_add_ps(void);
return _mm512_add_pd(void);
return _mm512_add_epi32(void);
return _mm512_sub_ps(void);
return _mm512_sub_pd(void);
return _mm512_sub_epi32(void);
return _mm512_mul_ps(void);
return _mm512_mul_pd(void);
return _mm512_mullo_epi32(void);
return _mm512_div_ps(void);
return _mm512_div_pd(void);
return _mm512_fmadd_ps(void);
return _mm512_fmadd_pd(void);
return _mm512_mask_blend_ps(void);
return _mm512_mask_blend_pd(void);
return _mm512_min_ps(void);
return _mm512_min_pd(void);
return _mm512_max_ps(void);
return _mm512_max_pd(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return _mm512_extractf32x8_ps(void);
return _mm512_extractf64x2_pd(void);
return _mm512_roundscale_ps(void);
return _mm512_roundscale_pd(void);
return _mm512_roundscale_ps(void);
return _mm512_roundscale_pd(void);
return _mm512_roundscale_ps(void);
return _mm512_roundscale_pd(void);
return _mm512_set1_epi32(void);
return _mm512_and_si512(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_and_ps(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_and_pd(void);
return _mm512_or_si512(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_or_ps(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_or_pd(void);
return _mm512_xor_si512(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_xor_ps(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_xor_pd(void);
return _mm512_andnot_si512(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_andnot_ps(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_andnot_pd(void);
return _mm512_srai_epi32(void);
return _mm512_srli_epi32(void);
return _mm512_slli_epi32(void);
EIGEN_DEBUG_ALIGNED_LOAD return _mm512_load_ps(void);
EIGEN_DEBUG_ALIGNED_LOAD return _mm512_load_pd(void);
EIGEN_DEBUG_UNALIGNED_LOAD return _mm512_loadu_ps(void);
EIGEN_DEBUG_UNALIGNED_LOAD return _mm512_loadu_pd(void);
EIGEN_DEBUG_UNALIGNED_LOAD return _mm512_maskz_loadu_ps(void);
return _mm512_permutexvar_ps(void);
return _mm512_insertf64x4(void);
EIGEN_DEBUG_ALIGNED_STORE _mm512_store_ps(void);
EIGEN_DEBUG_ALIGNED_STORE _mm512_store_pd(void);
EIGEN_DEBUG_UNALIGNED_STORE _mm512_storeu_ps(void);
EIGEN_DEBUG_UNALIGNED_STORE _mm512_storeu_pd(void);
EIGEN_DEBUG_UNALIGNED_STORE return _mm512_mask_storeu_ps(void);
return _mm512_i32gather_ps(void);
return _mm512_i32gather_pd(void);
return pfrexp_generic(void);
return pfrexp_generic(void);
return pldexp_generic(void);
return _mm_cvtss_f32(void);
return _mm256_add_ps(void);
return _mm256_add_pd(void);
Pack them into the output PACK_OUTPUT(void);
return Packet16f(void);
return _mm512_mask_blend_pd(void);
return _mm256_set1_epi16(void);
return _mm256_set_epi16(void);
return _mm256_set_epi16(void);
ifdef EIGEN_HAS_FP16_C
return _mm512_cvtph_ps(void);
float f0(void);
float f1(void);
float f2(void);
float f3(void);
float f4(void);
float f5(void);
float f6(void);
float f7(void);
float f8(void);
float f9(void);
float fa(void);
float fb(void);
float fc(void);
float fd(void);
float fe(void);
float ff(void);
return _mm512_set_ps(void);
ifdef EIGEN_HAS_FP16_C
return _mm512_cvtps_ph(void);
half h0(void);
half h1(void);
half h2(void);
half h3(void);
half h4(void);
half h5(void);
half h6(void);
half h7(void);
half h8(void);
half h9(void);
half ha(void);
half hb(void);
half hc(void);
half hd(void);
half he(void);
half hf(void);
return _mm256_set_epi16(void);
return _mm256_andnot_si256(void);
return _mm256_blendv_epi8(void);
return _mm256_xor_si256(void);
return float2half(void);
return float2half(void);
return float2half(void);
return float2half(void);
return _mm256_set_epi16(void);
return _mm256_set1_epi16(void);
return _mm256_set_epi16(void);
return _mm256_set_epi16(void);
return _mm256_blendv_epi8(void);
return _mm256_xor_si256(void);
return _mm256_andnot_si256(void);
return _mm256_shuffle_epi8(void);
return _mm256_set_epi16(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm512_cvttps_epi32(void);
return _mm512_cvtepi32_ps(void);
return _mm512_castps_si512(void);
return _mm512_castsi512_ps(void);
return half2float(void);
return float2half(void);
return Bf16ToF32(void);
return F32ToBf16(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

if EIGEN_FAST_MATH
return complex_divide_fast(void);
else
return complex_divide_stable(void);
return complex_multiply(void);
return complex_divide(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR __bfloat16_raw raw_uint16_to_bfloat16(unsigned short value);
EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC __bfloat16_raw float_to_bfloat16_rtne(float ff);
EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC float bfloat16_to_float(__bfloat16_raw h);
return __bfloat16_raw(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Update the sign and filter huge inputs
return pxor(void);
r twoprod(void);
return pldexp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC
Packet pfrexp_generic(const Packet & a, Packet & exponent);
EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC
Packet pfrexp_generic_get_biased_exponent(const Packet & p);
EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC
Packet pldexp_generic(const Packet & a, const Packet & exponent);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet plog_float(const Packet _x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet plog2_float(const Packet _x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet plog_double(const Packet _x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet plog2_double(const Packet _x);
Packet generic_plog1p(const Packet & x);
Packet generic_expm1(const Packet & x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet pexp_float(const Packet _x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet pexp_double(const Packet _x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet psin_float(const Packet & x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet pcos_float(const Packet & x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet psqrt_complex(const Packet & a);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

endif

EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR __half_raw raw_uint16_to_half(numext::uint16_t x);
EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC __half_raw float_to_half_rtne(float ff);
EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC float half_to_float(__half_raw h);
return __half(void);
else
return __hadd(void);
return __hmul(void);
return __hsub(void);
90000
return __hdiv(void);
return __float2half(num / denom);
return __hneg(void);
return __heq(void);
return __hne(void);
return __hlt(void);
return __hle(void);
return __hgt(void);
return __hge(void);
return vceqh_f16(void);
return vclth_f16(void);
return vcleh_f16(void);
return vcgth_f16(void);
return vcgeh_f16(void);
else
return __half_raw(void);
return __half2float(void);
return _cvtsh_ss(void);
return __hisnan(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return __float2half(void);
return __half2float(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return make_float4(void);
return make_double2(void);
return __int_as_float(a == b ? 0xffffffffu : 0u);
return __longlong_as_double(a == b ? 0xffffffffffffffffull : 0ull);
return __int_as_float(a < b ? 0xffffffffu : 0u);
return __longlong_as_double(a < b ? 0xffffffffffffffffull : 0ull);
return make_float4(void);
return make_double2(void);
return make_float4(void);
return make_double2(void);
return make_float4(void);
return make_double2(void);
return make_float4(void);
return make_double2(void);
return make_float4(void);
return make_double2(void);
return make_float4(void);
return make_double2(void);
return make_float4(void);
return make_double2(void);
return make_float4(void);
return make_double2(void);
else
return make_float4(void);
else
return make_double2(void);
else
return make_float4(void);
else
return make_double2(void);
return make_float4(void);
return make_double2(void);
return fmax(void);
return fmin(void);
return __halves2half2(void);
return __low2half(void);
return __high2half(void);
return __half2half2(void);
return __floats2half2_rn(void);
return combine_half(void);
return combine_half(void);
return combine_half(void);
return get_half2_low(void);
return combine_half(void);
return combine_half(void);
return combine_half(void);
return combine_half(void);
return combine_half(void);
return combine_half(void);
return combine_half(void);
return combine_half(void);
return __hadd2(void);
return __floats2half2_rn(void);
return __hsub2(void);
return __floats2half2_rn(void);
return __hneg2(void);
return __floats2half2_rn(void);
return __hmul2(void);
return __floats2half2_rn(void);
return __hfma2(void);
return __floats2half2_rn(void);
return __h2div(void);
return __floats2half2_rn(void);
return combine_half(void);
return combine_half(void);
return __floats2half2_rn(void);
return __floats2half2_rn(void);
return h2log(void);
return h2exp(void);
return h2sqrt(void);
return h2rsqrt(void);
return __floats2half2_rn(void);
return __floats2half2_rn(void);
return __floats2half2_rn(void);
return __floats2half2_rn(void);
return __hadd2(void);
return __floats2half2_rn(void);
return __hmul2(void);
return __floats2half2_rn(void);
return __h2div(void);
return __floats2half2_rn(void);
return combine_half(void);
return combine_half(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return make_float4(void);
Simply discard the second half of the input
return __floats2half2_rn(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Packet2cf(from[0 * stride], from[1 * stride]);
return Packet1cd(void);
return pfirst(void);
return pfirst(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return __builtin_msa_fill_w(void);
return __builtin_msa_fill_w(void);
return __builtin_msa_fadd_w(void);
return __builtin_msa_addv_w(void);
return __builtin_msa_fsub_w(void);
return __builtin_msa_subv_w(void);
return __builtin_msa_fmul_w(void);
return __builtin_msa_mulv_w(void);
return __builtin_msa_fdiv_w(void);
return __builtin_msa_div_s_w(void);
return __builtin_msa_fmadd_w(void);
return __builtin_msa_fmin_w(void);
return __builtin_msa_min_s_w(void);
return __builtin_msa_fmax_w(void);
return __builtin_msa_max_s_w(void);
EIGEN_DEBUG_ALIGNED_STORE __builtin_msa_st_w(void);
EIGEN_DEBUG_UNALIGNED_STORE __builtin_msa_st_w(void);
return __builtin_msa_add_a_w(void);
return __builtin_msa_fsqrt_w(void);
if EIGEN_FAST_MATH
return __builtin_msa_frsqrt_w(void);
return __builtin_msa_fadd_d(void);
return __builtin_msa_fsub_d(void);
return __builtin_msa_fmul_d(void);
return __builtin_msa_fdiv_d(void);
return __builtin_msa_fmadd_d(void);
return __builtin_msa_fmin_d(void);
return __builtin_msa_fmax_d(void);
return __builtin_msa_fsqrt_d(void);
if EIGEN_FAST_MATH
return __builtin_msa_frsqrt_d(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return vld1q_u32(void);
return vld1_u32(void);
return Packet2cf(void);
return Packet1cd(void);
return pfirst(void);
return pfirst(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return pexp_float(void);
return pexp_float(void);
return plog_float(void);
return plog_float(void);
return psin_float(void);
return psin_float(void);
return pcos_float(void);
return pcos_float(void);
return pexp_double(void);
return plog_double(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return vdup_n_f32(void);
return vdupq_n_f32(void);
return vdup_n_s8(void);
return vdupq_n_s8(void);
return vdup_n_u8(void);
return vdupq_n_u8(void);
return vdup_n_s16(void);
return vdupq_n_s16(void);
return vdup_n_u16(void);
return vdupq_n_u16(void);
return vdup_n_s32(void);
return vdupq_n_s32(void);
return vdup_n_u32(void);
return vdupq_n_u32(void);
return vdupq_n_s64(void);
return vdupq_n_u64(void);
return vadd_f32(void);
return vaddq_f32(void);
return vadd_s8(void);
return vaddq_s8(void);
return vadd_u8(void);
return vaddq_u8(void);
return vadd_s16(void);
return vaddq_s16(void);
return vadd_u16(void);
return vaddq_u16(void);
return vadd_s32(void);
return vaddq_s32(void);
return vadd_u32(void);
return vaddq_u32(void);
return vaddq_s64(void);
return vaddq_u64(void);
return vsub_f32(void);
return vsubq_f32(void);
return vsub_s8(void);
return vsubq_s8(void);
return vsub_u8(void);
return vsubq_u8(void);
return vsub_s16(void);
return vsubq_s16(void);
return vsub_u16(void);
return vsubq_u16(void);
return vsub_s32(void);
return vsubq_s32(void);
return vsub_u32(void);
return vsubq_u32(void);
return vsubq_s64(void);
return vsubq_u64(void);
return vneg_f32(void);
return vnegq_f32(void);
return vneg_s8(void);
return vnegq_s8(void);
return vneg_s16(void);
return vnegq_s16(void);
return vneg_s32(void);
return vnegq_s32(void);
if EIGEN_ARCH_ARM64
return vnegq_s64(void);
return vmul_f32(void);
return vmulq_f32(void);
return vmul_s8(void);
return vmulq_s8(void);
return vmul_u8(void);
return vmulq_u8(void);
return vmul_s16(void);
return vmulq_s16(void);
return vmul_u16(void);
return vmulq_u16(void);
return vmul_s32(void);
return vmulq_s32(void);
return vmul_u32(void);
return vmulq_u32(void);
if EIGEN_ARCH_ARM64
return vdiv_f32(void);
if EIGEN_ARCH_ARM64
return vdivq_f32(void);
return vfmaq_f32(void);
return vfma_f32(void);
return vmlaq_f32(void);
return vmla_f32(void);
return vmla_s8(void);
return vmlaq_s8(void);
return vmla_u8(void);
return vmlaq_u8(void);
return vmla_s16(void);
return vmlaq_s16(void);
return vmla_u16(void);
return vmlaq_u16(void);
return vmla_s32(void);
return vmlaq_s32(void);
return vmla_u32(void);
return vmlaq_u32(void);
return vabd_f32(void);
return vabdq_f32(void);
return vabd_s8(void);
return vabdq_s8(void);
return vabd_u8(void);
return vabdq_u8(void);
return vabd_s16(void);
return vabdq_s16(void);
return vabd_u16(void);
return vabdq_u16(void);
return vabd_s32(void);
return vabdq_s32(void);
return vabd_u32(void);
return vabdq_u32(void);
return vmin_f32(void);
return vminq_f32(void);
return vminnmq_f32(void);
return vminnm_f32(void);
return vmin_s8(void);
return vminq_s8(void);
return vmin_u8(void);
return vminq_u8(void);
return vmin_s16(void);
return vminq_s16(void);
return vmin_u16(void);
return vminq_u16(void);
return vmin_s32(void);
return vminq_s32(void);
return vmin_u32(void);
return vminq_u32(void);
return vmax_f32(void);
return vmaxq_f32(void);
return vmaxnmq_f32(void);
return vmaxnm_f32(void);
return vmax_s8(void);
return vmaxq_s8(void);
return vmax_u8(void);
return vmaxq_u8(void);
return vmax_s16(void);
return vmaxq_s16(void);
return vmax_u16(void);
return vmaxq_u16(void);
return vmax_s32(void);
return vmaxq_s32(void);
return vmax_u32(void);
return vmaxq_u32(void);
return vcle_u8(void);
return vcleq_u8(void);
return vcle_u16(void);
return vcleq_u16(void);
return vcle_u32(void);
return vcleq_u32(void);
if EIGEN_ARCH_ARM64
return vcleq_u64(void);
return vclt_u8(void);
return vcltq_u8(void);
return vclt_u16(void);
return vcltq_u16(void);
return vclt_u32(void);
return vcltq_u32(void);
if EIGEN_ARCH_ARM64
return vcltq_u64(void);
return vceq_u8(void);
return vceqq_u8(void);
return vceq_u16(void);
return vceqq_u16(void);
return vceq_u32(void);
return vceqq_u32(void);
if EIGEN_ARCH_ARM64
return vceqq_u64(void);
return vand_s8(void);
return vandq_s8(void);
return vand_u8(void);
return vandq_u8(void);
return vand_s16(void);
return vandq_s16(void);
return vand_u16(void);
return vandq_u16(void);
return vand_s32(void);
return vandq_s32(void);
return vand_u32(void);
return vandq_u32(void);
return vandq_s64(void);
return vandq_u64(void);
return vorr_s8(void);
return vorrq_s8(void);
return vorr_u8(void);
return vorrq_u8(void);
return vorr_s16(void);
return vorrq_s16(void);
return vorr_u16(void);
return vorrq_u16(void);
return vorr_s32(void);
return vorrq_s32(void);
return vorr_u32(void);
return vorrq_u32(void);
return vorrq_s64(void);
return vorrq_u64(void);
return veor_s8(void);
return veorq_s8(void);
return veor_u8(void);
return veorq_u8(void);
return veor_s16(void);
return veorq_s16(void);
return veor_u16(void);
return veorq_u16(void);
return veor_s32(void);
return veorq_s32(void);
return veor_u32(void);
return veorq_u32(void);
return veorq_s64(void);
return veorq_u64(void);
return vbic_s8(void);
return vbicq_s8(void);
return vbic_u8(void);
return vbicq_u8(void);
return vbic_s16(void);
return vbicq_s16(void);
return vbic_u16(void);
return vbicq_u16(void);
return vbic_s32(void);
return vbicq_s32(void);
return vbic_u32(void);
return vbicq_u32(void);
return vbicq_s64(void);
return vbicq_u64(void);
return vshr_n_s8(void);
return vshrq_n_s8(void);
return vshr_n_u8(void);
return vshrq_n_u8(void);
return vshr_n_s16(void);
return vshrq_n_s16(void);
return vshr_n_u16(void);
return vshrq_n_u16(void);
return vshr_n_s32(void);
return vshrq_n_s32(void);
return vshr_n_u32(void);
return vshrq_n_u32(void);
return vshrq_n_s64(void);
return vshrq_n_u64(void);
return vshr_n_u8(void);
return vshrq_n_u8(void);
return vshr_n_u16(void);
return vshrq_n_u16(void);
return vshr_n_u32(void);
return vshrq_n_u32(void);
return vshrq_n_u64(void);
return vshl_n_s8(void);
return vshlq_n_s8(void);
return vshl_n_u8(void);
return vshlq_n_u8(void);
return vshl_n_s16(void);
return vshlq_n_s16(void);
return vshl_n_u16(void);
return vshlq_n_u16(void);
return vshl_n_s32(void);
return vshlq_n_s32(void);
return vshl_n_u32(void);
return vshlq_n_u32(void);
return vshlq_n_s64(void);
return vshlq_n_u64(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1_f32(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_f32(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1_s8(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_s8(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1_u8(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_u8(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1_s16(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_s16(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1_u16(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_u16(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1_s32(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_s32(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1_u32(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_u32(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_s64(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_u64(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1_f32(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_f32(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1_s8(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_s8(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1_u8(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_u8(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1_s16(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_s16(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1_u16(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_u16(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1_s32(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_s32(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1_u32(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_u32(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_s64(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_u64(void);
return vld1_dup_f32(void);
return vcombine_s8(void);
return vcombine_u8(void);
return vcombine_s16(void);
return vcombine_u16(void);
return vld1_dup_s32(void);
return vld1_dup_u32(void);
return vld1q_dup_s64(void);
return vld1q_dup_u64(void);
return vld1q_dup_f32(void);
return vcombine_s8(void);
return vcombine_u8(void);
return vld1q_dup_s32(void);
return vld1q_dup_u32(void);
EIGEN_DEBUG_ALIGNED_STORE vst1_f32(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_f32(void);
EIGEN_DEBUG_ALIGNED_STORE vst1_s8(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_s8(void);
EIGEN_DEBUG_ALIGNED_STORE vst1_u8(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_u8(void);
EIGEN_DEBUG_ALIGNED_STORE vst1_s16(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_s16(void);
EIGEN_DEBUG_ALIGNED_STORE vst1_u16(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_u16(void);
EIGEN_DEBUG_ALIGNED_STORE vst1_s32(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_s32(void);
EIGEN_DEBUG_ALIGNED_STORE vst1_u32(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_u32(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_s64(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_u64(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1_f32(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_f32(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1_s8(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_s8(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1_u8(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_u8(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1_s16(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_s16(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1_u16(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_u16(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1_s32(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_s32(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1_u32(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_u32(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_s64(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_u64(void);
return vget_lane_f32(void);
return vgetq_lane_f32(void);
return vget_lane_s8(void);
return vgetq_lane_s8(void);
return vget_lane_u8(void);
return vgetq_lane_u8(void);
return vget_lane_s16(void);
return vgetq_lane_s16(void);
return vget_lane_u16(void);
return vgetq_lane_u16(void);
return vget_lane_s32(void);
return vgetq_lane_s32(void);
return vget_lane_u32(void);
return vgetq_lane_u32(void);
return vgetq_lane_s64(void);
return vgetq_lane_u64(void);
return vrev64_f32(void);
return vrev64_s8(void);
return vrev64_u8(void);
return vrev64_s16(void);
return vrev64_u16(void);
return vrev64_s32(void);
return vrev64_u32(void);
return vabs_f32(void);
return vabsq_f32(void);
return vabs_s8(void);
return vabsq_s8(void);
return vabs_s16(void);
return vabsq_s16(void);
return vabs_s32(void);
return vabsq_s32(void);
if EIGEN_ARCH_ARM64
return vabsq_s64(void);
return pfrexp_generic(void);
return pfrexp_generic(void);
return pldexp_generic(void);
return pldexp_generic(void);
return vget_lane_s8(void);
return vget_lane_s8(void);
return vget_lane_s8(void);
return vget_lane_u8(void);
return vget_lane_u8(void);
return vget_lane_u8(void);
return vget_lane_s16(void);
return vget_lane_u16(void);
return vget_lane_s8(void);
return vget_lane_s8(void);
return vget_lane_s8(void);
return vget_lane_u8(void);
return vget_lane_u8(void);
return vget_lane_u8(void);
return vget_lane_s16(void);
return vget_lane_u16(void);
return vget_lane_s8(void);
return vget_lane_s8(void);
return vget_lane_s8(void);
return vget_lane_u8(void);
return vget_lane_u8(void);
return vget_lane_u8(void);
return vget_lane_s16(void);
return vget_lane_u16(void);
void zip_in_place(Packet & p1, Packet & p2);
return vbsl_u8(void);
return vbslq_u8(void);
return vbsl_u16(void);
return vbslq_u16(void);
return vbsl_u32(void);
return vbslq_u32(void);
return vbslq_u64(void);
return vrndn_f32(void);
return vrndnq_f32(void);
return vrndm_f32(void);
return vrndmq_f32(void);
return vrndp_f32(void);
return vrndpq_f32(void);
return psub(void);
return psub(void);
return padd(void);
return padd(void);
return vsqrtq_f32(void);
return vsqrt_f32(void);
return vmovn_u32(void);
return shuffle(void);
return shuffle(void);
return shuffle(void);
return vdupq_n_f64(void);
return vaddq_f64(void);
return vsubq_f64(void);
return vnegq_f64(void);
return vmulq_f64(void);
return vdivq_f64(void);
return vfmaq_f64(void);
return vmlaq_f64(void);
return vminq_f64(void);
return vminnmq_f64(void);
return vmaxnmq_f64(void);
return vmaxq_f64(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_f64(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_f64(void);
return vld1q_dup_f64(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_f64(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_f64(void);
return vgetq_lane_f64(void);
return vabsq_f64(void);
return vrndnq_f64(void);
return vrndmq_f64(void);
return vrndpq_f64(void);
return pldexp_generic(void);
return pfrexp_generic(void);
return vsqrtq_f64(void);
return vdupq_n_f16(void);
return vdup_n_f16(void);
return vaddq_f16(void);
return vadd_f16(void);
return vsubq_f16(void);
return vsub_f16(void);
return vnegq_f16(void);
return vneg_f16(void);
return vmulq_f16(void);
return vmul_f16(void);
return vdivq_f16(void);
return vdiv_f16(void);
return vfmaq_f16(void);
return vfma_f16(void);
return vminq_f16(void);
return vmin_f16(void);
return vminnm_f16(void);
return vminnmq_f16(void);
return vmaxq_f16(void);
return vmax_f16(void);
return vmaxnm_f16(void);
return vmaxnmq_f16(void);
return vrndnq_f16(void);
return vrndn_f16(void);
return vrndmq_f16(void);
return vrndm_f16(void);
return vrndpq_f16(void);
return vrndp_f16(void);
return vsqrtq_f16(void);
return vsqrt_f16(void);
return vcombine_f16(void);
return vsetq_lane_f16(void);
return vset_lane_f16(void);
return vsetq_lane_f16(void);
return vset_lane_f16(void);
return vcombine_f16(void);
return vrev64_f16(void);
return vabsq_f16(void);
return vabs_f16(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return vcvtq_s32_f32(void);
return vcvt_s32_f32(void);
return vcvtq_u32_f32(void);
return vcvt_u32_f32(void);
return vreinterpretq_u8_s8(void);
return vreinterpret_u8_s8(void);
return vreinterpretq_s8_u8(void);
return vreinterpret_s8_u8(void);
return vreinterpretq_u16_s16(void);
return vreinterpret_u16_s16(void);
return vreinterpretq_s16_u16(void);
return vreinterpret_s16_u16(void);
return vcvtq_f32_s32(void);
return vcvt_f32_s32(void);
return vreinterpretq_u32_s32(void);
return vreinterpret_u32_s32(void);
return vcvtq_f32_u32(void);
return vcvt_f32_u32(void);
return vreinterpretq_s32_u32(void);
return vreinterpret_s32_u32(void);
return vreinterpretq_u64_s64(void);
return vreinterpretq_s64_u64(void);
return vcombine_u16(void);
return vreinterpret_f32_s32(void);
return vreinterpret_f32_u32(void);
return vreinterpretq_f32_s32(void);
return vreinterpretq_f32_u32(void);
return vreinterpret_s8_u8(void);
return vreinterpretq_s8_u8(void);
return vreinterpret_u8_s8(void);
return vreinterpretq_u8_s8(void);
return vreinterpret_s16_u16(void);
return vreinterpretq_s16_u16(void);
return vreinterpret_u16_s16(void);
return vreinterpretq_u16_s16(void);
return vreinterpret_s32_f32(void);
return vreinterpret_s32_u32(void);
return vreinterpretq_s32_f32(void);
return vreinterpretq_s32_u32(void);
return vreinterpret_u32_f32(void);
return vreinterpret_u32_s32(void);
return vreinterpretq_u32_f32(void);
return vreinterpretq_u32_s32(void);
return vreinterpretq_s64_u64(void);
return vreinterpretq_u64_s64(void);
return vcvtq_s64_f64(void);
return vcvtq_u64_f64(void);
return vcvtq_f64_s64(void);
return vcvtq_f64_u64(void);
return vreinterpretq_f64_s64(void);
return vreinterpretq_f64_u64(void);
return vreinterpretq_s64_f64(void);
return vreinterpretq_u64_f64(void);
return vreinterpretq_f64_s32(void);
return vreinterpretq_s32_f64(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return pfirst(void);
return pfirst(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return plog_float(void);
return plog_double(void);
return plog2_float(void);
return plog2_double(void);
return generic_plog1p(void);
return generic_expm1(void);
return pexp_float(void);
return pexp_double(void);
return psin_float(void);
return pcos_float(void);
return _mm_sqrt_ps(void);
return _mm_sqrt_pd(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm_set_ps(void);
return _mm_set_pd(void);
return _mm_set_epi32(void);
return _mm_set_ps1(void);
return _mm_set1_pd(void);
return _mm_set1_epi32(void);
return _mm_set_epi32(void);
return _mm_setzero_ps(void);
return _mm_setzero_pd(void);
return _mm_setzero_si128(void);
return _mm_add_ps(void);
return _mm_add_pd(void);
return _mm_add_epi32(void);
return _mm_or_si128(void);
return _mm_sub_ps(void);
return _mm_sub_pd(void);
return _mm_sub_epi32(void);
return _mm_xor_si128(void);
ifdef EIGEN_VECTORIZE_SSE3
return _mm_addsub_ps(void);
ifdef EIGEN_VECTORIZE_SSE3
return _mm_addsub_pd(void);
return _mm_xor_ps(void);
return _mm_xor_pd(void);
return _mm_mul_ps(void);
return _mm_mul_pd(void);
ifdef EIGEN_VECTORIZE_SSE4_1
return _mm_mullo_epi32(void);
return _mm_and_si128(void);
return _mm_div_ps(void);
return _mm_div_pd(void);
return _mm_fmadd_ps(void);
return _mm_fmadd_pd(void);
return _mm_blendv_ps(void);
return _mm_blendv_pd(void);
return _mm_blendv_epi8(void);
return _mm_or_si128(void);
return _mm_cmpeq_epi32(void);
return _mm_cmpeq_epi8(void);
return _mm_and_ps(void);
return _mm_and_pd(void);
return _mm_and_si128(void);
return _mm_and_si128(void);
return _mm_or_ps(void);
return _mm_or_pd(void);
return _mm_or_si128(void);
return _mm_or_si128(void);
return _mm_xor_ps(void);
return _mm_xor_pd(void);
return _mm_xor_si128(void);
return _mm_xor_si128(void);
return _mm_andnot_ps(void);
return _mm_andnot_pd(void);
return _mm_andnot_si128(void);
return _mm_cmple_ps(void);
return _mm_cmplt_ps(void);
return _mm_cmpnge_ps(void);
return _mm_cmpeq_ps(void);
return _mm_cmple_pd(void);
return _mm_cmplt_pd(void);
return _mm_cmpnge_pd(void);
return _mm_cmpeq_pd(void);
return _mm_cmplt_epi32(void);
return _mm_cmpeq_epi32(void);
return _mm_cmpeq_epi8(void);
return _mm_min_ps(void);
return _mm_min_pd(void);
ifdef EIGEN_VECTORIZE_SSE4_1
return _mm_min_epi32(void);
return _mm_max_ps(void);
return _mm_max_pd(void);
ifdef EIGEN_VECTORIZE_SSE4_1
return _mm_max_epi32(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return _mm_srai_epi32(void);
return _mm_srli_epi32(void);
return _mm_slli_epi32(void);
return _mm_and_ps(void);
return _mm_and_pd(void);
ifdef EIGEN_VECTORIZE_SSSE3
return _mm_abs_epi32(void);
return _mm_round_ps(void);
return _mm_round_pd(void);
return _mm_ceil_ps(void);
return _mm_ceil_pd(void);
return _mm_floor_ps(void);
return _mm_floor_pd(void);
return psub(void);
return psub(void);
return padd(void);
return padd(void);
EIGEN_DEBUG_ALIGNED_LOAD return _mm_load_ps(void);
EIGEN_DEBUG_ALIGNED_LOAD return _mm_load_pd(void);
else
return _mm_loadu_ps(void);
EIGEN_DEBUG_UNALIGNED_LOAD
return _mm_loadu_ps(void);
EIGEN_DEBUG_UNALIGNED_LOAD
return _mm_loadu_pd(void);
return vec4i_swizzle1(void);
return _mm_unpacklo_epi8(void);
return _mm_unpacklo_epi16(void);
EIGEN_DEBUG_ALIGNED_STORE _mm_store_ps(void);
EIGEN_DEBUG_ALIGNED_STORE _mm_store_pd(void);
EIGEN_DEBUG_UNALIGNED_STORE _mm_storeu_pd(void);
EIGEN_DEBUG_UNALIGNED_STORE _mm_storeu_ps(void);
return _mm_set_ps(void);
return _mm_set_pd(void);
return _mm_set_epi32(void);
return _mm_set_epi8(void);
return _mm_cvtss_f32(void);
return _mm_cvtsd_f64(void);
return _mm_cvtsi128_si32(void);
return _mm_shuffle_ps(void);
return _mm_shuffle_pd(void);
return _mm_shuffle_epi32(void);
return _mm_shuffle_epi8(void);
return pfrexp_generic(void);
return pfrexp_generic(void);
return pldexp_generic(void);
ifdef EIGEN_VECTORIZE_SSE4_1
return _mm_blendv_epi8(void);
ifdef EIGEN_VECTORIZE_SSE4_1
return _mm_blendv_ps(void);
ifdef EIGEN_VECTORIZE_SSE4_1
return _mm_blendv_pd(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm_cvttps_epi32(void);
return _mm_cvtepi32_ps(void);
Simply discard the second half of the input
return _mm_cvtps_pd(void);
return _mm_castps_si128(void);
return _mm_castsi128_ps(void);
return _mm_castsi128_pd(void);
return _mm_castpd_si128(void);
return _mm_set_ps(void);
half h0(void);
half h1(void);
half h2(void);
half h3(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return pexp_float(void);
return plog_float(void);
return psin_float(void);
return pcos_float(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return svdup_n_s32(void);
return svrev_s32(void);
return svdup_n_f32(void);
return svrev_f32(void);
return pfrexp_generic(void);
return pldexp_generic(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return svreinterpret_f32_s32(void);
return svreinterpret_s32_f32(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

The code will never reach here __builtin_unreachable(void);
return PacketReturnType(void);
return PacketReturnType(void);
The code will never reach here __builtin_unreachable(void);
return PacketReturnType(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return packet_type(void);
cl_int4 condition(ifPacket.select[0] ? 0 : -1, ifPacket.select[1] ? 0 : -1, ifPacket.select[2] ? 0 : -1, ifPacket.select[3] ? 0 : -1);
cl_long2 condition(ifPacket.select[0] ? 0 : -1, ifPacket.select[1] ? 0 : -1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return add_pointer_impl(void);
return add_pointer_impl(void);
with free nodes before and after it fuse_forward(void);
return self_t(offset_ + offset);
return self_t(offset_ - offset);
self_t temp_iterator(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_STRONG_INLINE void ptranspose(2 > &kernel);
return Packet1cd(a.v + b.v);
return Packet1cd(a.v - b.v);
return Packet1cd(v1 + v2);
return pfirst(void);
return pfirst(void);
return Packet2cf(void);
return Packet2cf(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4i(void);
static _EIGEN_DECLARE_CONST_Packet4i(void);
static _EIGEN_DECLARE_CONST_Packet4f_FROM_INT(void);
static _EIGEN_DECLARE_CONST_Packet4f_FROM_INT(void);
static _EIGEN_DECLARE_CONST_Packet4f_FROM_INT(void);
f
static _EIGEN_DECLARE_CONST_Packet4f_FROM_INT(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(-1.1514610310E-1f);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(-1.2420140846E-1f);
static _EIGEN_DECLARE_CONST_Packet4f(+1.4249322787E-1f);
static _EIGEN_DECLARE_CONST_Packet4f(-1.6668057665E-1f);
static _EIGEN_DECLARE_CONST_Packet4f(+2.0000714765E-1f);
static _EIGEN_DECLARE_CONST_Packet4f(-2.4999993993E-1f);
static _EIGEN_DECLARE_CONST_Packet4f(+3.3333331174E-1f);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
endif

static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
return vec_sqrt(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

agnostic
static _EIGEN_DECLARE_CONST_FAST_Packet4i(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4i(void);
static _EIGEN_DECLARE_CONST_FAST_Packet2d(void);
static _EIGEN_DECLARE_CONST_FAST_Packet2l(void);
static _EIGEN_DECLARE_CONST_FAST_Packet2l(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4f(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4i(void);
EIGEN_DEVICE_FUNC inline void ptranspose(4 > &kernel);
return vec_splats(void);
return vec_splats(void);
return vec_madd(void);
return vec_min(void);
return vec_min(void);
return vec_max(void);
return vec_max(void);
return vec_and(void);
return vec_and(void);
return vec_or(void);
return vec_or(void);
return vec_xor(void);
return vec_xor(void);
return vec_round(void);
return vec_ceil(void);
return vec_floor(void);
return vec_perm(void);
return vec_perm(void);
return vec_abs(void);
return vec_abs(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return vec_sel(void);
return vec_sel(void);
No intrinsic yet
EIGEN_DEBUG_ALIGNED_STORE vec_st2f(void);
Transpose all 2x2 blocks ptranspose(void);
return vec_splats(void);
return vec_madd(void);
return vec_min(void);
return vec_max(void);
return vec_and(void);
return vec_or(void);
return vec_xor(void);
return vec_round(void);
return vec_ceil(void);
return vec_floor(void);
return vec_abs(void);
return vec_perm(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return vec_sel(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return generic_pow(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return impl(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return log10(void);
return ptanh(void);
return Scalar(void);
return packetOp(void);
return packetOp(void);
return pselect(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

set the cpu cache size and cache all block sizes from a global cache size in byte eigen_internal_assert(l1 != 0 && l2 != 0);
m* k * sizeof(void);
ifdef EIGEN_HAS_SINGLE_INSTRUCTION_MADD EIGEN_UNUSED_VARIABLE(void);
ifdef EIGEN_HAS_SINGLE_INSTRUCTION_MADD EIGEN_UNUSED_VARIABLE(void);
ifdef EIGEN_HAS_SINGLE_INSTRUCTION_MADD EIGEN_UNUSED_VARIABLE(void);
endif EIGEN_ASM_COMMENT("end step of gebp micro kernel 1X4");
3 * int(void);
2 * int(void);
gets a 1 x 1 res block as registers
ResScalar C0(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LhsMapper lhs(void);
RhsMapper rhs(void);
ResMapper res(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LhsMapper lhs(void);
RhsMapper rhs(void);
ResMapper res(void);
ResMapper res(void);
BlockingType blocking(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGTYPE beta(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGTYPE beta(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Packet PACKET_DECL_COND_PREFIX(void);
EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE static void run(Index rows, Index cols, const LhsMapper & lhs, const RhsMapper & rhs, ResScalar * res, Index resIncr, RhsScalar alpha);
LhsMapper lhs(void);
ResScalar c0(void);
EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE static void run(Index rows, Index cols, const LhsMapper & lhs, const RhsMapper & rhs, ResScalar * res, Index resIncr, ResScalar alpha);
LhsMapper lhs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

const EIGTYPE beta(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return func(void);
else func(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static EIGEN_DONT_INLINE void run(Index rows, Index cols, const Scalar * _lhs, Index lhsStride, const Scalar * _rhs, Index rhsStride, Scalar * res, Index resIncr, Index resStride, const Scalar & alpha, Scalar > &blocking);
LhsMapper lhs(void);
LhsTransposeMapper lhs_transpose(void);
RhsMapper rhs(void);
ResMapper res(void);
static EIGEN_DONT_INLINE void run(Index rows, Index cols, const Scalar * _lhs, Index lhsStride, const Scalar * _rhs, Index rhsStride, Scalar * res, Index resIncr, Index resStride, const Scalar & alpha, Scalar > &blocking);
LhsMapper lhs(void);
ResMapper res(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGTYPE beta(void);
EIGTYPE beta(void);
EIGTYPE beta(void);
EIGTYPE beta(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static EIGEN_DONT_INLINE EIGEN_DEVICE_FUNC
void run(Index size, const Scalar * lhs, Index lhsStride, const Scalar * rhs, Scalar * res, Scalar alpha);
Scalar t2(void);
Scalar t3(void);
Scalar t2(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGTYPE beta(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

BlockingType blocking(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static EIGEN_DONT_INLINE void run(Index _rows, Index _cols, Index _depth, const Scalar * _lhs, Index lhsStride, const Scalar * _rhs, Index rhsStride, Scalar * res, Index resIncr, Index resStride, const Scalar & alpha, Scalar > &blocking);
LhsMapper lhs(void);
RhsMapper rhs(void);
ResMapper res(void);
static EIGEN_DONT_INLINE void run(Index _rows, Index _cols, Index _depth, const Scalar * _lhs, Index lhsStride, const Scalar * _rhs, Index rhsStride, Scalar * res, Index resIncr, Index resStride, const Scalar & alpha, Scalar > &blocking);
LhsMapper lhs(void);
RhsMapper rhs(void);
ResMapper res(void);
BlockingType blocking(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static EIGEN_DONT_INLINE  void run(Index _rows, Index _cols, const LhsScalar * _lhs, Index lhsStride, const RhsScalar * _rhs, Index rhsIncr, ResScalar * _res, Index resIncr, const RhsScalar & alpha);
type cjLhs(void);
type cjRhs(void);
ResMap res(void);
static EIGEN_DONT_INLINE void run(Index _rows, Index _cols, const LhsScalar * _lhs, Index lhsStride, const RhsScalar * _rhs, Index rhsIncr, ResScalar * _res, Index resIncr, const ResScalar & alpha);
type cjLhs(void);
const RhsMap rhs(void);
type cjRhs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGTYPE beta(void);
EIGTYPE beta(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static EIGEN_DONT_INLINE void run(Index size, Index otherSize, const Scalar * _tri, Index triStride, Scalar * _other, Index otherIncr, Index otherStride, Scalar > &blocking);
TriMapper tri(void);
OtherMapper other(void);
Scalar b(void);
static EIGEN_DONT_INLINE void run(Index size, Index otherSize, const Scalar * _tri, Index triStride, Scalar * _other, Index otherIncr, Index otherStride, Scalar > &blocking);
LhsMapper lhs(void);
RhsMapper rhs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGTYPE alpha(void);
EIGTYPE alpha(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

type cjLhs(void);
type cjLhs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return To(void);
return Scalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

typedef ComplexScalar type(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

VectorXd v(void);
return eval_expr_given_size(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef EIGEN_INTERNAL_DEBUGGING EIGEN_UNUSED_VARIABLE(void);
static const auto fix(void);
static const auto fix(int val);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void foo(const T x[N]);
return t && all(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

operator new(void);
return handmade_aligned_malloc(void);
return is_malloc_allowed_impl(void);
return is_malloc_allowed_impl(void);
else handmade_aligned_free(void);
return aligned_malloc(void);
return aligned_realloc(void);
return construct_elements_of_array(void);
return construct_elements_of_array(void);
type NAME(void);
operator new(void);
operator delete(void);
identify the CPU vendor EIGEN_CPUID(void);
s API queryCacheSizes_intel(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static yes test(void);
static no test(void);
EIGEN_DEVICE_FUNC noncopyable(const noncopyable&);
static has_std_result_type testFunctor(T const*, typename T::result_type const* = 0);
static has_none testFunctor(void);
static has_std_result_type testFunctor(T const*, typename T::result_type const* = 0);
static has_none testFunctor(void);
static has_std_result_type testFunctor(T const*, typename T::result_type const* = 0);
static has_none testFunctor(void);
static has_std_result_type testFunctor(T const*, typename T::result_type const* = 0);
static has_none testFunctor(void);
static meta_yes testFunctor(C const*, typename C::ReturnType const* = 0);
static meta_no testFunctor(void);
const T* return_ptr(void);
static meta_no testFunctor(void);
static meta_no testFunctor(void);
static meta_no testFunctor(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return IndexDest(void);
return T(void);
return T(void);
return T(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ComplexEigenSolver& compute(const EigenBase<InputType>&matrix, bool computeEigenvectors = true);
void doComputeEigenvectors(RealScalar matrixnorm);
void sortEigenvalues(bool computeEigenvectors);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ComplexSchur& compute(const EigenBase<InputType>&matrix, bool computeU = true);
ComplexSchur& computeFromHessenberg(const HessMatrixType & matrixH, const OrthMatrixType & matrixQ, bool computeU = true);
bool subdiagonalEntryIsNeglegible(Index i);
ComplexScalar computeShift(Index iu, Index iter);
void reduceToTriangularForm(bool computeU);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EigenSolver& compute(const EigenBase<InputType>&matrix, bool computeEigenvectors = true);
void doComputeEigenvectors(void);
EigenvectorsType matV(void);
this is already computed in RealSchur
Scalar norm(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return EigenvalueType(void);
GeneralizedEigenSolver& compute(const MatrixType & A, const MatrixType & B, bool computeEigenvectors = true);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

GeneralizedSelfAdjointEigenSolver& compute(const MatrixType & matA, const MatrixType & matB, int options = ComputeEigenvectors | Ax_lBx);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return MatrixHReturnType(void);
static void _compute(MatrixType & matA, CoeffVectorType & hCoeffs, VectorType & temp);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PlainObject m_eval(void);
PlainObject m_eval(void);
PlainObject thisAsMatrix(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

RealQZ& compute(const MatrixType & A, const MatrixType & B, bool computeQZ = true);
void hessenbergTriangular(void);
void computeNorms(void);
Index findSmallSubdiagEntry(Index iu);
Index findSmallDiagEntry(Index f, Index l);
void splitOffTwoRows(Index i);
void pushDownZero(Index z, Index f, Index l);
void step(Index f, Index l, Index iter);
Vector3s hr(void);
hessenberg triangular decomposition hessenbergTriangular(void);
m_normOfT computeNorms(void);
zero found pushDownZero(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

RealSchur& compute(const EigenBase<InputType>&matrix, bool computeU = true);
RealSchur& computeFromHessenberg(const HessMatrixType & matrixH, const OrthMatrixType & matrixQ, bool computeU);
Scalar computeNormOfT(void);
Index findSmallSubdiagEntry(Index iu, const Scalar & considerAsZero);
void splitOffTwoRows(Index iu, bool computeU, const Scalar & exshift);
void computeShift(Index iu, Index iter, Scalar & exshift, Vector3s & shiftInfo);
void initFrancisQRStep(Index il, Index iu, const Vector3s & shiftInfo, Index & im, Vector3s & firstHouseholderVector);
void performFrancisQRStep(Index il, Index im, Index iu, bool computeU, const Vector3s & firstHouseholderVector, Scalar * workspace);
iteration count for whole matrix
Scalar exshift(void);
Scalar norm(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC
ComputationInfo computeFromTridiagonal_impl(DiagType & diag, SubDiagType & subdiag, const Index maxIterations, bool computeEigenvectors, MatrixType & eivec);
EIGEN_DEVICE_FUNC
SelfAdjointEigenSolver& compute(const EigenBase<InputType>&matrix, int options = ComputeEigenvectors);
EIGEN_DEVICE_FUNC
SelfAdjointEigenSolver& computeDirect(const MatrixType & matrix, int options = ComputeEigenvectors);
SelfAdjointEigenSolver& computeFromTridiagonal(const RealVectorType & diag, const SubDiagonalType & subdiag, int options = ComputeEigenvectors);
EIGEN_DEVICE_FUNC
static void tridiagonal_qr_step(RealScalar * diag, RealScalar * subdiag, Index start, Index end, Scalar * matrixQ, Index n);
compute the eigenvalues computeRoots(void);
Compute the eigenvalues computeRoots(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC
void tridiagonalization_inplace(MatrixType & matA, CoeffVectorType & hCoeffs);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return isEmpty(void);
return sizes(void);
AlignedBox result(void);
AlignedBox result(void);
Scalar dist2(void);
Scalar dist2(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return a * QuaternionType(void);
return AngleAxis(void);
EIGEN_DEVICE_FUNC AngleAxis& fromRotationMatrix(const MatrixBase<Derived>&m);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

mat* normal(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC explicit ParametrizedLine(const Hyperplane<_Scalar, OtherOptions>&hyperplane);
mat* direction(void);
mat* origin(void);
return intersectionParameter(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC Derived& setFromTwoVectors(const MatrixBase<Derived1>&a, const MatrixBase<Derived2>&b);
return derived(void);
endif

EIGEN_DEVICE_FUNC static Quaternion UnitRandom(void);
EIGEN_DEVICE_FUNC static Quaternion FromTwoVectors(const MatrixBase<Derived1>&a, const MatrixBase<Derived2>&b);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
s* Scalar(void);
return derived(void);
type mat(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Rotation2D(void);
return Rotation2D(m_angle + other.m_angle);
EIGEN_DEVICE_FUNC Rotation2D& fromRotationMatrix(const MatrixBase<Derived>&m);
return Rotation2D(m_angle + dist * t);
return Rotation2D(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ReturnType res(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifdef EIGEN_QT_SUPPORT
inline Transform(const QMatrix & other);
inline Transform(const QTransform & other);
shortcut for m_matrix(void);
return m_matrix(void);
shortcut for m_matrix(void);
return m_matrix(void);
return ConstLinearPart(void);
return LinearPart(void);
return ConstTranslationPart(void);
return TranslationPart(void);
TransformTimeDiagonalReturnType res(void);
EIGEN_DEVICE_FUNC
inline Transform& scale(const MatrixBase<OtherDerived> &other);
EIGEN_DEVICE_FUNC
inline Transform& prescale(const MatrixBase<OtherDerived> &other);
EIGEN_DEVICE_FUNC inline Transform& scale(const Scalar & s);
EIGEN_DEVICE_FUNC inline Transform& prescale(const Scalar & s);
EIGEN_DEVICE_FUNC
inline Transform& translate(const MatrixBase<OtherDerived> &other);
EIGEN_DEVICE_FUNC
inline Transform& pretranslate(const MatrixBase<OtherDerived> &other);
EIGEN_DEVICE_FUNC
inline Transform& rotate(const RotationType & rotation);
EIGEN_DEVICE_FUNC
inline Transform& prerotate(const RotationType & rotation);
EIGEN_DEVICE_FUNC Transform& shear(const Scalar & sx, const Scalar & sy);
EIGEN_DEVICE_FUNC Transform& preshear(const Scalar & sx, const Scalar & sy);
EIGEN_DEVICE_FUNC
Transform& fromPositionOrientationScale(const MatrixBase<PositionDerived> &position, const OrientationType & orientation, const MatrixBase<ScaleDerived> &scale);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Translation(m_coeffs + other.m_coeffs);
return *this * IsometryTransformType(void);
return Translation(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

z* triFactor(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return rows(void);
return adjoint(void);
else applyThisOnTheLeft(void);
type sub_vecs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator it(void);
return factorize(void);
InnerIterator it(void);
return factorize(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

VectorType p(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void factorize(const MatrixType & mat);
inline void updateList(Ref<const VectorIx> colPtr, Ref<VectorIx> rowIdx, Ref<VectorSx> vals, const Index & col, const Index & jk, VectorIx & firstElt, VectorList & listCol);
Pointer to the beginning of each row
VectorIx firstElt(void);
points to the next entry in vals that will be used in the factorization
VectorList listCol(void);
is a linked list of columns to update column j
VectorSx col_vals(void);
Store a  nonzero values in each column
VectorIx col_irow(void);
Row indices of nonzero elements in each column
VectorIx col_pattern(void);
Browse all previous columns that will update column j for (k = listCol[j].begin();
	First element to use in the column eigen_internal_assert(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

	// Auto-generated bindings for fftw3_integration

	void analyzePattern(const MatrixType & amat);
	void factorize(const MatrixType & amat);
	void setDroptol(const RealScalar & droptol);
void setFillfactor(int fillfactor);
Declare Working vectors and variables
Vector u(void);
VectorI ju(void);
maximum size  is n
VectorI jr(void);
InnerIterator j_it(void);
InnerIterator ki_it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static yes test(const Ref<const T>&);
static no test(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
ColXpr xk(void);
ConstColXpr bk(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

VectorType p(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC
bool makeJacobi(const MatrixBase<Derived>&, Index p, Index q);
EIGEN_DEVICE_FUNC
bool makeJacobi(const RealScalar & x, const Scalar & y, const RealScalar & z);
EIGEN_DEVICE_FUNC
void makeGivens(const Scalar & p, const Scalar & q, Scalar * r = 0);
EIGEN_DEVICE_FUNC
void makeGivens(const Scalar & p, const Scalar & q, Scalar * r);
EIGEN_DEVICE_FUNC
void makeGivens(const Scalar & p, const Scalar & q, Scalar * r);
q1* sqrt(p2 + q2);
EIGEN_DEVICE_FUNC
void apply_rotation_in_the_plane(DenseBase<VectorX>&xpr_x, DenseBase<VectorY>&xpr_y, const JacobiRotation<OtherScalar>&j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return klu_factor(void);
return Scalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

explicit FullPivLU(const EigenBase<InputType>&matrix);
explicit FullPivLU(EigenBase<InputType>&matrix);
void computeInPlace(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

explicit PartialPivLU(Index size);
explicit PartialPivLU(const EigenBase<InputType>&matrix);
explicit PartialPivLU(EigenBase<InputType>&matrix);
void compute(void);
return unblocked_lu(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ActualMatrixType matrix(void);
ActualMatrixType matrix(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

IndexVector visited(void);
InnerIterator it(void);
InnerIterator it(void);
InnerIterator it(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

endif

lapack_complex_float lapack_make_complex_float(float re, float im);
endif

lapack_complex_double lapack_make_complex_double(double re, double im);
lapack_logical LAPACK_lsame(char* ca, char* cb, lapack_int lca, lapack_int lcb);
lapack_int LAPACKE_sbdsdc(int matrix_order, char uplo, char compq, lapack_int n, float* d, float* e, float* u, lapack_int ldu, float* vt, lapack_int ldvt, float* q, lapack_int * iq);
lapack_int LAPACKE_dbdsdc(int matrix_order, char uplo, char compq, lapack_int n, double* d, double* e, double* u, lapack_int ldu, double* vt, lapack_int ldvt, double* q, lapack_int * iq);
lapack_int LAPACKE_sbdsqr(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, float* d, float* e, float* vt, lapack_int ldvt, float* u, lapack_int ldu, float* c, lapack_int ldc);
lapack_int LAPACKE_dbdsqr(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, double* d, double* e, double* vt, lapack_int ldvt, double* u, lapack_int ldu, double* c, lapack_int ldc);
lapack_int LAPACKE_cbdsqr(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, float* d, float* e, lapack_complex_float * vt, lapack_int ldvt, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zbdsqr(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, double* d, double* e, lapack_complex_double * vt, lapack_int ldvt, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_sdisna(char job, lapack_int m, lapack_int n, const float* d, float* sep);
lapack_int LAPACKE_ddisna(char job, lapack_int m, lapack_int n, const double* d, double* sep);
lapack_int LAPACKE_sgbbrd(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, float* ab, lapack_int ldab, float* d, float* e, float* q, lapack_int ldq, float* pt, lapack_int ldpt, float* c, lapack_int ldc);
lapack_int LAPACKE_dgbbrd(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, double* ab, lapack_int ldab, double* d, double* e, double* q, lapack_int ldq, double* pt, lapack_int ldpt, double* c, lapack_int ldc);
lapack_int LAPACKE_cgbbrd(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, lapack_complex_float * ab, lapack_int ldab, float* d, float* e, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * pt, lapack_int ldpt, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zgbbrd(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, lapack_complex_double * ab, lapack_int ldab, double* d, double* e, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * pt, lapack_int ldpt, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_sgbcon(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const float* ab, lapack_int ldab, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_dgbcon(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const double* ab, lapack_int ldab, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_cgbcon(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_float * ab, lapack_int ldab, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_zgbcon(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_double * ab, lapack_int ldab, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_sgbequ(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgbequ(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgbequ(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_float * ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgbequ(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_double * ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgbequb(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgbequb(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgbequb(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_float * ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgbequb(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_double * ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgbrfs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const float* ab, lapack_int ldab, const float* afb, lapack_int ldafb, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dgbrfs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const double* ab, lapack_int ldab, const double* afb, lapack_int ldafb, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cgbrfs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * afb, lapack_int ldafb, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zgbrfs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * afb, lapack_int ldafb, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_sgbrfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const float* ab, lapack_int ldab, const float* afb, lapack_int ldafb, const lapack_int * ipiv, const float* r, const float* c, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dgbrfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const double* ab, lapack_int ldab, const double* afb, lapack_int ldafb, const lapack_int * ipiv, const double* r, const double* c, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_cgbrfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * afb, lapack_int ldafb, const lapack_int * ipiv, const float* r, const float* c, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zgbrfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * afb, lapack_int ldafb, const lapack_int * ipiv, const double* r, const double* c, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_sgbsv(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, float* ab, lapack_int ldab, lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgbsv(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, double* ab, lapack_int ldab, lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgbsv(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgbsv(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sgbsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, float* ab, lapack_int ldab, float* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* rpivot);
lapack_int LAPACKE_dgbsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, double* ab, lapack_int ldab, double* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* rpivot);
lapack_int LAPACKE_cgbsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* rpivot);
lapack_int LAPACKE_zgbsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* rpivot);
lapack_int LAPACKE_sgbsvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, float* ab, lapack_int ldab, float* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dgbsvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, double* ab, lapack_int ldab, double* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_cgbsvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zgbsvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_sgbtrf(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, float* ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_dgbtrf(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, double* ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_cgbtrf(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, lapack_complex_float * ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_zgbtrf(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, lapack_complex_double * ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_sgbtrs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const float* ab, lapack_int ldab, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgbtrs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const double* ab, lapack_int ldab, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgbtrs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgbtrs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sgebak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* scale, lapack_int m, float* v, lapack_int ldv);
lapack_int LAPACKE_dgebak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* scale, lapack_int m, double* v, lapack_int ldv);
lapack_int LAPACKE_cgebak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* scale, lapack_int m, lapack_complex_float * v, lapack_int ldv);
lapack_int LAPACKE_zgebak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* scale, lapack_int m, lapack_complex_double * v, lapack_int ldv);
lapack_int LAPACKE_sgebal(int matrix_order, char job, lapack_int n, float* a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, float* scale);
lapack_int LAPACKE_dgebal(int matrix_order, char job, lapack_int n, double* a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, double* scale);
lapack_int LAPACKE_cgebal(int matrix_order, char job, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, float* scale);
lapack_int LAPACKE_zgebal(int matrix_order, char job, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, double* scale);
lapack_int LAPACKE_sgebrd(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* d, float* e, float* tauq, float* taup);
lapack_int LAPACKE_dgebrd(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* d, double* e, double* tauq, double* taup);
lapack_int LAPACKE_cgebrd(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, float* d, float* e, lapack_complex_float * tauq, lapack_complex_float * taup);
lapack_int LAPACKE_zgebrd(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, double* d, double* e, lapack_complex_double * tauq, lapack_complex_double * taup);
lapack_int LAPACKE_sgecon(int matrix_order, char norm, lapack_int n, const float* a, lapack_int lda, float anorm, float* rcond);
lapack_int LAPACKE_dgecon(int matrix_order, char norm, lapack_int n, const double* a, lapack_int lda, double anorm, double* rcond);
lapack_int LAPACKE_cgecon(int matrix_order, char norm, lapack_int n, const lapack_complex_float * a, lapack_int lda, float anorm, float* rcond);
lapack_int LAPACKE_zgecon(int matrix_order, char norm, lapack_int n, const lapack_complex_double * a, lapack_int lda, double anorm, double* rcond);
lapack_int LAPACKE_sgeequ(int matrix_order, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgeequ(int matrix_order, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgeequ(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgeequ(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgeequb(int matrix_order, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgeequb(int matrix_order, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgeequb(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgeequb(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgees(int matrix_order, char jobvs, char sort, LAPACK_S_SELECT2 select, lapack_int n, float* a, lapack_int lda, lapack_int * sdim, float* wr, float* wi, float* vs, lapack_int ldvs);
lapack_int LAPACKE_dgees(int matrix_order, char jobvs, char sort, LAPACK_D_SELECT2 select, lapack_int n, double* a, lapack_int lda, lapack_int * sdim, double* wr, double* wi, double* vs, lapack_int ldvs);
lapack_int LAPACKE_cgees(int matrix_order, char jobvs, char sort, LAPACK_C_SELECT1 select, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * sdim, lapack_complex_float * w, lapack_complex_float * vs, lapack_int ldvs);
lapack_int LAPACKE_zgees(int matrix_order, char jobvs, char sort, LAPACK_Z_SELECT1 select, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * sdim, lapack_complex_double * w, lapack_complex_double * vs, lapack_int ldvs);
lapack_int LAPACKE_sgeesx(int matrix_order, char jobvs, char sort, LAPACK_S_SELECT2 select, char sense, lapack_int n, float* a, lapack_int lda, lapack_int * sdim, float* wr, float* wi, float* vs, lapack_int ldvs, float* rconde, float* rcondv);
lapack_int LAPACKE_dgeesx(int matrix_order, char jobvs, char sort, LAPACK_D_SELECT2 select, char sense, lapack_int n, double* a, lapack_int lda, lapack_int * sdim, double* wr, double* wi, double* vs, lapack_int ldvs, double* rconde, double* rcondv);
lapack_int LAPACKE_cgeesx(int matrix_order, char jobvs, char sort, LAPACK_C_SELECT1 select, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * sdim, lapack_complex_float * w, lapack_complex_float * vs, lapack_int ldvs, float* rconde, float* rcondv);
lapack_int LAPACKE_zgeesx(int matrix_order, char jobvs, char sort, LAPACK_Z_SELECT1 select, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * sdim, lapack_complex_double * w, lapack_complex_double * vs, lapack_int ldvs, double* rconde, double* rcondv);
lapack_int LAPACKE_sgeev(int matrix_order, char jobvl, char jobvr, lapack_int n, float* a, lapack_int lda, float* wr, float* wi, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr);
lapack_int LAPACKE_dgeev(int matrix_order, char jobvl, char jobvr, lapack_int n, double* a, lapack_int lda, double* wr, double* wi, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr);
lapack_int LAPACKE_cgeev(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * w, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr);
lapack_int LAPACKE_zgeev(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * w, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr);
lapack_int LAPACKE_sgeevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, float* a, lapack_int lda, float* wr, float* wi, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* scale, float* abnrm, float* rconde, float* rcondv);
lapack_int LAPACKE_dgeevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, double* a, lapack_int lda, double* wr, double* wi, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* scale, double* abnrm, double* rconde, double* rcondv);
lapack_int LAPACKE_cgeevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * w, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* scale, float* abnrm, float* rconde, float* rcondv);
lapack_int LAPACKE_zgeevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * w, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* scale, double* abnrm, double* rconde, double* rcondv);
lapack_int LAPACKE_sgehrd(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgehrd(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgehrd(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgehrd(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgejsv(int matrix_order, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, lapack_int m, lapack_int n, float* a, lapack_int lda, float* sva, float* u, lapack_int ldu, float* v, lapack_int ldv, float* stat, lapack_int * istat);
lapack_int LAPACKE_dgejsv(int matrix_order, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, lapack_int m, lapack_int n, double* a, lapack_int lda, double* sva, double* u, lapack_int ldu, double* v, lapack_int ldv, double* stat, lapack_int * istat);
lapack_int LAPACKE_sgelq2(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgelq2(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgelq2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgelq2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgelqf(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgelqf(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgelqf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgelqf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgels(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dgels(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_cgels(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgels(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sgelsd(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb, float* s, float rcond, lapack_int * rank);
lapack_int LAPACKE_dgelsd(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, double* s, double rcond, lapack_int * rank);
lapack_int LAPACKE_cgelsd(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* s, float rcond, lapack_int * rank);
lapack_int LAPACKE_zgelsd(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* s, double rcond, lapack_int * rank);
lapack_int LAPACKE_sgelss(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb, float* s, float rcond, lapack_int * rank);
lapack_int LAPACKE_dgelss(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, double* s, double rcond, lapack_int * rank);
lapack_int LAPACKE_cgelss(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* s, float rcond, lapack_int * rank);
lapack_int LAPACKE_zgelss(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* s, double rcond, lapack_int * rank);
lapack_int LAPACKE_sgelsy(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * jpvt, float rcond, lapack_int * rank);
lapack_int LAPACKE_dgelsy(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * jpvt, double rcond, lapack_int * rank);
lapack_int LAPACKE_cgelsy(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * jpvt, float rcond, lapack_int * rank);
lapack_int LAPACKE_zgelsy(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * jpvt, double rcond, lapack_int * rank);
lapack_int LAPACKE_sgeqlf(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgeqlf(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgeqlf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgeqlf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgeqp3(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * jpvt, float* tau);
lapack_int LAPACKE_dgeqp3(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * jpvt, double* tau);
lapack_int LAPACKE_cgeqp3(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * jpvt, lapack_complex_float * tau);
lapack_int LAPACKE_zgeqp3(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * jpvt, lapack_complex_double * tau);
lapack_int LAPACKE_sgeqpf(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * jpvt, float* tau);
lapack_int LAPACKE_dgeqpf(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * jpvt, double* tau);
lapack_int LAPACKE_cgeqpf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * jpvt, lapack_complex_float * tau);
lapack_int LAPACKE_zgeqpf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * jpvt, lapack_complex_double * tau);
lapack_int LAPACKE_sgeqr2(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgeqr2(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgeqr2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgeqr2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgeqrf(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgeqrf(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgeqrf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgeqrf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgeqrfp(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgeqrfp(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgeqrfp(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgeqrfp(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgerfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dgerfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cgerfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zgerfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_sgerfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* r, const float* c, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dgerfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* r, const double* c, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_cgerfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const float* r, const float* c, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zgerfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const double* r, const double* c, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_sgerqf(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgerqf(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgerqf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgerqf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgesdd(int matrix_order, char jobz, lapack_int m, lapack_int n, float* a, lapack_int lda, float* s, float* u, lapack_int ldu, float* vt, lapack_int ldvt);
lapack_int LAPACKE_dgesdd(int matrix_order, char jobz, lapack_int m, lapack_int n, double* a, lapack_int lda, double* s, double* u, lapack_int ldu, double* vt, lapack_int ldvt);
lapack_int LAPACKE_cgesdd(int matrix_order, char jobz, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, float* s, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * vt, lapack_int ldvt);
lapack_int LAPACKE_zgesdd(int matrix_order, char jobz, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, double* s, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * vt, lapack_int ldvt);
lapack_int LAPACKE_sgesv(int matrix_order, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgesv(int matrix_order, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgesv(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgesv(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_dsgesv(int matrix_order, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, lapack_int * ipiv, double* b, lapack_int ldb, double* x, lapack_int ldx, lapack_int * iter);
lapack_int LAPACKE_zcgesv(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, lapack_int * iter);
lapack_int LAPACKE_sgesvd(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, float* a, lapack_int lda, float* s, float* u, lapack_int ldu, float* vt, lapack_int ldvt, float* superb);
lapack_int LAPACKE_dgesvd(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, double* a, lapack_int lda, double* s, double* u, lapack_int ldu, double* vt, lapack_int ldvt, double* superb);
lapack_int LAPACKE_cgesvd(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, float* s, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * vt, lapack_int ldvt, float* superb);
lapack_int LAPACKE_zgesvd(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, double* s, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * vt, lapack_int ldvt, double* superb);
lapack_int LAPACKE_sgesvj(int matrix_order, char joba, char jobu, char jobv, lapack_int m, lapack_int n, float* a, lapack_int lda, float* sva, lapack_int mv, float* v, lapack_int ldv, float* stat);
lapack_int LAPACKE_dgesvj(int matrix_order, char joba, char jobu, char jobv, lapack_int m, lapack_int n, double* a, lapack_int lda, double* sva, lapack_int mv, double* v, lapack_int ldv, double* stat);
lapack_int LAPACKE_sgesvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* rpivot);
lapack_int LAPACKE_dgesvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* rpivot);
lapack_int LAPACKE_cgesvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* rpivot);
lapack_int LAPACKE_zgesvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* rpivot);
lapack_int LAPACKE_sgesvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dgesvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_cgesvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zgesvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_sgetf2(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_dgetf2(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_cgetf2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_zgetf2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_sgetrf(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_dgetrf(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_cgetrf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_zgetrf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_sgetri(int matrix_order, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_dgetri(int matrix_order, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_cgetri(int matrix_order, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_zgetri(int matrix_order, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_sgetrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgetrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgetrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgetrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sggbak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* lscale, const float* rscale, lapack_int m, float* v, lapack_int ldv);
lapack_int LAPACKE_dggbak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* lscale, const double* rscale, lapack_int m, double* v, lapack_int ldv);
lapack_int LAPACKE_cggbak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* lscale, const float* rscale, lapack_int m, lapack_complex_float * v, lapack_int ldv);
lapack_int LAPACKE_zggbak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* lscale, const double* rscale, lapack_int m, lapack_complex_double * v, lapack_int ldv);
lapack_int LAPACKE_sggbal(int matrix_order, char job, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale);
lapack_int LAPACKE_dggbal(int matrix_order, char job, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale);
lapack_int LAPACKE_cggbal(int matrix_order, char job, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale);
lapack_int LAPACKE_zggbal(int matrix_order, char job, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale);
lapack_int LAPACKE_sgges(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * sdim, float* alphar, float* alphai, float* beta, float* vsl, lapack_int ldvsl, float* vsr, lapack_int ldvsr);
lapack_int LAPACKE_dgges(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * sdim, double* alphar, double* alphai, double* beta, double* vsl, lapack_int ldvsl, double* vsr, lapack_int ldvsr);
lapack_int LAPACKE_cgges(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * sdim, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vsl, lapack_int ldvsl, lapack_complex_float * vsr, lapack_int ldvsr);
lapack_int LAPACKE_zgges(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * sdim, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vsl, lapack_int ldvsl, lapack_complex_double * vsr, lapack_int ldvsr);
lapack_int LAPACKE_sggesx(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, char sense, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * sdim, float* alphar, float* alphai, float* beta, float* vsl, lapack_int ldvsl, float* vsr, lapack_int ldvsr, float* rconde, float* rcondv);
lapack_int LAPACKE_dggesx(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, char sense, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * sdim, double* alphar, double* alphai, double* beta, double* vsl, lapack_int ldvsl, double* vsr, lapack_int ldvsr, double* rconde, double* rcondv);
lapack_int LAPACKE_cggesx(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * sdim, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vsl, lapack_int ldvsl, lapack_complex_float * vsr, lapack_int ldvsr, float* rconde, float* rcondv);
lapack_int LAPACKE_zggesx(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * sdim, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vsl, lapack_int ldvsl, lapack_complex_double * vsr, lapack_int ldvsr, double* rconde, double* rcondv);
lapack_int LAPACKE_sggev(int matrix_order, char jobvl, char jobvr, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* alphar, float* alphai, float* beta, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr);
lapack_int LAPACKE_dggev(int matrix_order, char jobvl, char jobvr, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* alphar, double* alphai, double* beta, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr);
lapack_int LAPACKE_cggev(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr);
lapack_int LAPACKE_zggev(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr);
lapack_int LAPACKE_sggevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* alphar, float* alphai, float* beta, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv);
lapack_int LAPACKE_dggevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* alphar, double* alphai, double* beta, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv);
lapack_int LAPACKE_cggevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv);
lapack_int LAPACKE_zggevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv);
lapack_int LAPACKE_sggglm(int matrix_order, lapack_int n, lapack_int m, lapack_int p, float* a, lapack_int lda, float* b, lapack_int ldb, float* d, float* x, float* y);
lapack_int LAPACKE_dggglm(int matrix_order, lapack_int n, lapack_int m, lapack_int p, double* a, lapack_int lda, double* b, lapack_int ldb, double* d, double* x, double* y);
lapack_int LAPACKE_cggglm(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * d, lapack_complex_float * x, lapack_complex_float * y);
lapack_int LAPACKE_zggglm(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * d, lapack_complex_double * x, lapack_complex_double * y);
lapack_int LAPACKE_sgghrd(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, float* a, lapack_int lda, float* b, lapack_int ldb, float* q, lapack_int ldq, float* z, lapack_int ldz);
lapack_int LAPACKE_dgghrd(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, double* a, lapack_int lda, double* b, lapack_int ldb, double* q, lapack_int ldq, double* z, lapack_int ldz);
lapack_int LAPACKE_cgghrd(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zgghrd(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_sgglse(int matrix_order, lapack_int m, lapack_int n, lapack_int p, float* a, lapack_int lda, float* b, lapack_int ldb, float* c, float* d, float* x);
lapack_int LAPACKE_dgglse(int matrix_order, lapack_int m, lapack_int n, lapack_int p, double* a, lapack_int lda, double* b, lapack_int ldb, double* c, double* d, double* x);
lapack_int LAPACKE_cgglse(int matrix_order, lapack_int m, lapack_int n, lapack_int p, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * c, lapack_complex_float * d, lapack_complex_float * x);
lapack_int LAPACKE_zgglse(int matrix_order, lapack_int m, lapack_int n, lapack_int p, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * c, lapack_complex_double * d, lapack_complex_double * x);
lapack_int LAPACKE_sggqrf(int matrix_order, lapack_int n, lapack_int m, lapack_int p, float* a, lapack_int lda, float* taua, float* b, lapack_int ldb, float* taub);
lapack_int LAPACKE_dggqrf(int matrix_order, lapack_int n, lapack_int m, lapack_int p, double* a, lapack_int lda, double* taua, double* b, lapack_int ldb, double* taub);
lapack_int LAPACKE_cggqrf(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_float * a, lapack_int lda, lapack_complex_float * taua, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * taub);
lapack_int LAPACKE_zggqrf(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_double * a, lapack_int lda, lapack_complex_double * taua, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * taub);
lapack_int LAPACKE_sggrqf(int matrix_order, lapack_int m, lapack_int p, lapack_int n, float* a, lapack_int lda, float* taua, float* b, lapack_int ldb, float* taub);
lapack_int LAPACKE_dggrqf(int matrix_order, lapack_int m, lapack_int p, lapack_int n, double* a, lapack_int lda, double* taua, double* b, lapack_int ldb, double* taub);
lapack_int LAPACKE_cggrqf(int matrix_order, lapack_int m, lapack_int p, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * taua, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * taub);
lapack_int LAPACKE_zggrqf(int matrix_order, lapack_int m, lapack_int p, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * taua, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * taub);
lapack_int LAPACKE_sggsvd(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, float* a, lapack_int lda, float* b, lapack_int ldb, float* alpha, float* beta, float* u, lapack_int ldu, float* v, lapack_int ldv, float* q, lapack_int ldq, lapack_int * iwork);
lapack_int LAPACKE_dggsvd(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, double* a, lapack_int lda, double* b, lapack_int ldb, double* alpha, double* beta, double* u, lapack_int ldu, double* v, lapack_int ldv, double* q, lapack_int ldq, lapack_int * iwork);
lapack_int LAPACKE_cggsvd(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* alpha, float* beta, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * v, lapack_int ldv, lapack_complex_float * q, lapack_int ldq, lapack_int * iwork);
lapack_int LAPACKE_zggsvd(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* alpha, double* beta, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * v, lapack_int ldv, lapack_complex_double * q, lapack_int ldq, lapack_int * iwork);
lapack_int LAPACKE_sggsvp(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float tola, float tolb, lapack_int * k, lapack_int * l, float* u, lapack_int ldu, float* v, lapack_int ldv, float* q, lapack_int ldq);
lapack_int LAPACKE_dggsvp(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double tola, double tolb, lapack_int * k, lapack_int * l, double* u, lapack_int ldu, double* v, lapack_int ldv, double* q, lapack_int ldq);
lapack_int LAPACKE_cggsvp(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float tola, float tolb, lapack_int * k, lapack_int * l, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * v, lapack_int ldv, lapack_complex_float * q, lapack_int ldq);
lapack_int LAPACKE_zggsvp(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double tola, double tolb, lapack_int * k, lapack_int * l, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * v, lapack_int ldv, lapack_complex_double * q, lapack_int ldq);
lapack_int LAPACKE_sgtcon(char norm, lapack_int n, const float* dl, const float* d, const float* du, const float* du2, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_dgtcon(char norm, lapack_int n, const double* dl, const double* d, const double* du, const double* du2, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_cgtcon(char norm, lapack_int n, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * du2, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_zgtcon(char norm, lapack_int n, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * du2, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_sgtrfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* dl, const float* d, const float* du, const float* dlf, const float* df, const float* duf, const float* du2, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dgtrfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* dl, const double* d, const double* du, const double* dlf, const double* df, const double* duf, const double* du2, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cgtrfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * dlf, const lapack_complex_float * df, const lapack_complex_float * duf, const lapack_complex_float * du2, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zgtrfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * dlf, const lapack_complex_double * df, const lapack_complex_double * duf, const lapack_complex_double * du2, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_sgtsv(int matrix_order, lapack_int n, lapack_int nrhs, float* dl, float* d, float* du, float* b, lapack_int ldb);
lapack_int LAPACKE_dgtsv(int matrix_order, lapack_int n, lapack_int nrhs, double* dl, double* d, double* du, double* b, lapack_int ldb);
lapack_int LAPACKE_cgtsv(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_float * dl, lapack_complex_float * d, lapack_complex_float * du, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgtsv(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_double * dl, lapack_complex_double * d, lapack_complex_double * du, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sgtsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const float* dl, const float* d, const float* du, float* dlf, float* df, float* duf, float* du2, lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_dgtsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const double* dl, const double* d, const double* du, double* dlf, double* df, double* duf, double* du2, lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_cgtsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, lapack_complex_float * dlf, lapack_complex_float * df, lapack_complex_float * duf, lapack_complex_float * du2, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zgtsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, lapack_complex_double * dlf, lapack_complex_double * df, lapack_complex_double * duf, lapack_complex_double * du2, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_sgttrf(lapack_int n, float* dl, float* d, float* du, float* du2, lapack_int * ipiv);
lapack_int LAPACKE_dgttrf(lapack_int n, double* dl, double* d, double* du, double* du2, lapack_int * ipiv);
lapack_int LAPACKE_cgttrf(lapack_int n, lapack_complex_float * dl, lapack_complex_float * d, lapack_complex_float * du, lapack_complex_float * du2, lapack_int * ipiv);
lapack_int LAPACKE_zgttrf(lapack_int n, lapack_complex_double * dl, lapack_complex_double * d, lapack_complex_double * du, lapack_complex_double * du2, lapack_int * ipiv);
lapack_int LAPACKE_sgttrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* dl, const float* d, const float* du, const float* du2, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgttrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* dl, const double* d, const double* du, const double* du2, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgttrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * du2, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgttrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * du2, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chbev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhbev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chbevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhbevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chbevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_zhbevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_chbgst(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * bb, lapack_int ldbb, lapack_complex_float * x, lapack_int ldx);
lapack_int LAPACKE_zhbgst(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * bb, lapack_int ldbb, lapack_complex_double * x, lapack_int ldx);
lapack_int LAPACKE_chbgv(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * bb, lapack_int ldbb, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhbgv(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * bb, lapack_int ldbb, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chbgvd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * bb, lapack_int ldbb, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhbgvd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * bb, lapack_int ldbb, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chbgvx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * bb, lapack_int ldbb, lapack_complex_float * q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_zhbgvx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * bb, lapack_int ldbb, lapack_complex_double * q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_chbtrd(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, float* d, float* e, lapack_complex_float * q, lapack_int ldq);
lapack_int LAPACKE_zhbtrd(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, double* d, double* e, lapack_complex_double * q, lapack_int ldq);
lapack_int LAPACKE_checon(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_zhecon(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_cheequb(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_zheequb(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_cheev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float* w);
lapack_int LAPACKE_zheev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double* w);
lapack_int LAPACKE_cheevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float* w);
lapack_int LAPACKE_zheevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double* w);
lapack_int LAPACKE_cheevr(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_zheevr(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_cheevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_zheevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_chegst(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhegst(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chegv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* w);
lapack_int LAPACKE_zhegv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* w);
lapack_int LAPACKE_chegvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* w);
lapack_int LAPACKE_zhegvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* w);
lapack_int LAPACKE_chegvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_zhegvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_cherfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zherfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cherfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const float* s, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zherfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const double* s, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_chesv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhesv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chesvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zhesvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_chesvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zhesvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_chetrd(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float* d, float* e, lapack_complex_float * tau);
lapack_int LAPACKE_zhetrd(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double* d, double* e, lapack_complex_double * tau);
lapack_int LAPACKE_chetrf(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_zhetrf(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_chetri(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_zhetri(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_chetrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhetrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chfrk(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, float alpha, const lapack_complex_float * a, lapack_int lda, float beta, lapack_complex_float * c);
lapack_int LAPACKE_zhfrk(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, double alpha, const lapack_complex_double * a, lapack_int lda, double beta, lapack_complex_double * c);
lapack_int LAPACKE_shgeqz(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, float* h, lapack_int ldh, float* t, lapack_int ldt, float* alphar, float* alphai, float* beta, float* q, lapack_int ldq, float* z, lapack_int ldz);
lapack_int LAPACKE_dhgeqz(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, double* h, lapack_int ldh, double* t, lapack_int ldt, double* alphar, double* alphai, double* beta, double* q, lapack_int ldq, double* z, lapack_int ldz);
lapack_int LAPACKE_chgeqz(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * h, lapack_int ldh, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhgeqz(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * h, lapack_int ldh, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chpcon(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_zhpcon(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_chpev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhpev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chpevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhpevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chpevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * ap, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_zhpevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * ap, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_chpgst(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_float * ap, const lapack_complex_float * bp);
lapack_int LAPACKE_zhpgst(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_double * ap, const lapack_complex_double * bp);
lapack_int LAPACKE_chpgv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, lapack_complex_float * bp, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhpgv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, lapack_complex_double * bp, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chpgvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, lapack_complex_float * bp, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhpgvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, lapack_complex_double * bp, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chpgvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * ap, lapack_complex_float * bp, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_zhpgvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * ap, lapack_complex_double * bp, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_chprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zhprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_chpsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhpsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chpsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * afp, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zhpsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * afp, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_chptrd(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, float* d, float* e, lapack_complex_float * tau);
lapack_int LAPACKE_zhptrd(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, double* d, double* e, lapack_complex_double * tau);
lapack_int LAPACKE_chptrf(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, lapack_int * ipiv);
lapack_int LAPACKE_zhptrf(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, lapack_int * ipiv);
lapack_int LAPACKE_chptri(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, const lapack_int * ipiv);
lapack_int LAPACKE_zhptri(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, const lapack_int * ipiv);
lapack_int LAPACKE_chptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_shsein(int matrix_order, char job, char eigsrc, char initv, lapack_logical * select, lapack_int n, const float* h, lapack_int ldh, float* wr, const float* wi, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_dhsein(int matrix_order, char job, char eigsrc, char initv, lapack_logical * select, lapack_int n, const double* h, lapack_int ldh, double* wr, const double* wi, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_chsein(int matrix_order, char job, char eigsrc, char initv, const lapack_logical * select, lapack_int n, const lapack_complex_float * h, lapack_int ldh, lapack_complex_float * w, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_zhsein(int matrix_order, char job, char eigsrc, char initv, const lapack_logical * select, lapack_int n, const lapack_complex_double * h, lapack_int ldh, lapack_complex_double * w, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_shseqr(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, float* h, lapack_int ldh, float* wr, float* wi, float* z, lapack_int ldz);
lapack_int LAPACKE_dhseqr(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, double* h, lapack_int ldh, double* wr, double* wi, double* z, lapack_int ldz);
lapack_int LAPACKE_chseqr(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * h, lapack_int ldh, lapack_complex_float * w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhseqr(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * h, lapack_int ldh, lapack_complex_double * w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_clacgv(lapack_int n, lapack_complex_float * x, lapack_int incx);
lapack_int LAPACKE_zlacgv(lapack_int n, lapack_complex_double * x, lapack_int incx);
lapack_int LAPACKE_slacpy(int matrix_order, char uplo, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dlacpy(int matrix_order, char uplo, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_clacpy(int matrix_order, char uplo, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zlacpy(int matrix_order, char uplo, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_zlag2c(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_float * sa, lapack_int ldsa);
lapack_int LAPACKE_slag2d(int matrix_order, lapack_int m, lapack_int n, const float* sa, lapack_int ldsa, double* a, lapack_int lda);
lapack_int LAPACKE_dlag2s(int matrix_order, lapack_int m, lapack_int n, const double* a, lapack_int lda, float* sa, lapack_int ldsa);
lapack_int LAPACKE_clag2z(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_float * sa, lapack_int ldsa, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_slagge(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* d, float* a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_dlagge(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* d, double* a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_clagge(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* d, lapack_complex_float * a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_zlagge(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* d, lapack_complex_double * a, lapack_int lda, lapack_int * iseed);
float LAPACKE_slamch(char cmach);
double LAPACKE_dlamch(char cmach);
float LAPACKE_slange(int matrix_order, char norm, lapack_int m, lapack_int n, const float* a, lapack_int lda);
double LAPACKE_dlange(int matrix_order, char norm, lapack_int m, lapack_int n, const double* a, lapack_int lda);
float LAPACKE_clange(int matrix_order, char norm, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda);
double LAPACKE_zlange(int matrix_order, char norm, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda);
float LAPACKE_clanhe(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda);
double LAPACKE_zlanhe(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda);
float LAPACKE_slansy(int matrix_order, char norm, char uplo, lapack_int n, const float* a, lapack_int lda);
double LAPACKE_dlansy(int matrix_order, char norm, char uplo, lapack_int n, const double* a, lapack_int lda);
float LAPACKE_clansy(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda);
double LAPACKE_zlansy(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda);
float LAPACKE_slantr(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const float* a, lapack_int lda);
double LAPACKE_dlantr(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const double* a, lapack_int lda);
float LAPACKE_clantr(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda);
double LAPACKE_zlantr(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_slarfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* c, lapack_int ldc);
lapack_int LAPACKE_dlarfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* c, lapack_int ldc);
lapack_int LAPACKE_clarfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zlarfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_slarfg(lapack_int n, float* alpha, float* x, lapack_int incx, float* tau);
lapack_int LAPACKE_dlarfg(lapack_int n, double* alpha, double* x, lapack_int incx, double* tau);
lapack_int LAPACKE_clarfg(lapack_int n, lapack_complex_float * alpha, lapack_complex_float * x, lapack_int incx, lapack_complex_float * tau);
lapack_int LAPACKE_zlarfg(lapack_int n, lapack_complex_double * alpha, lapack_complex_double * x, lapack_int incx, lapack_complex_double * tau);
lapack_int LAPACKE_slarft(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const float* v, lapack_int ldv, const float* tau, float* t, lapack_int ldt);
lapack_int LAPACKE_dlarft(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const double* v, lapack_int ldv, const double* tau, double* t, lapack_int ldt);
lapack_int LAPACKE_clarft(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * tau, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_zlarft(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * tau, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_slarfx(int matrix_order, char side, lapack_int m, lapack_int n, const float* v, float tau, float* c, lapack_int ldc, float* work);
lapack_int LAPACKE_dlarfx(int matrix_order, char side, lapack_int m, lapack_int n, const double* v, double tau, double* c, lapack_int ldc, double* work);
lapack_int LAPACKE_clarfx(int matrix_order, char side, lapack_int m, lapack_int n, const lapack_complex_float * v, lapack_complex_float tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work);
lapack_int LAPACKE_zlarfx(int matrix_order, char side, lapack_int m, lapack_int n, const lapack_complex_double * v, lapack_complex_double tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work);
lapack_int LAPACKE_slarnv(lapack_int idist, lapack_int * iseed, lapack_int n, float* x);
lapack_int LAPACKE_dlarnv(lapack_int idist, lapack_int * iseed, lapack_int n, double* x);
lapack_int LAPACKE_clarnv(lapack_int idist, lapack_int * iseed, lapack_int n, lapack_complex_float * x);
lapack_int LAPACKE_zlarnv(lapack_int idist, lapack_int * iseed, lapack_int n, lapack_complex_double * x);
lapack_int LAPACKE_slaset(int matrix_order, char uplo, lapack_int m, lapack_int n, float alpha, float beta, float* a, lapack_int lda);
lapack_int LAPACKE_dlaset(int matrix_order, char uplo, lapack_int m, lapack_int n, double alpha, double beta, double* a, lapack_int lda);
lapack_int LAPACKE_claset(int matrix_order, char uplo, lapack_int m, lapack_int n, lapack_complex_float alpha, lapack_complex_float beta, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zlaset(int matrix_order, char uplo, lapack_int m, lapack_int n, lapack_complex_double alpha, lapack_complex_double beta, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_slasrt(char id, lapack_int n, float* d);
lapack_int LAPACKE_dlasrt(char id, lapack_int n, double* d);
lapack_int LAPACKE_slaswp(int matrix_order, lapack_int n, float* a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_dlaswp(int matrix_order, lapack_int n, double* a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_claswp(int matrix_order, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_zlaswp(int matrix_order, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_slatms(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, float* d, lapack_int mode, float cond, float dmax, lapack_int kl, lapack_int ku, char pack, float* a, lapack_int lda);
lapack_int LAPACKE_dlatms(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, double* d, lapack_int mode, double cond, double dmax, lapack_int kl, lapack_int ku, char pack, double* a, lapack_int lda);
lapack_int LAPACKE_clatms(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, float* d, lapack_int mode, float cond, float dmax, lapack_int kl, lapack_int ku, char pack, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zlatms(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, double* d, lapack_int mode, double cond, double dmax, lapack_int kl, lapack_int ku, char pack, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_slauum(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dlauum(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_clauum(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zlauum(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_sopgtr(int matrix_order, char uplo, lapack_int n, const float* ap, const float* tau, float* q, lapack_int ldq);
lapack_int LAPACKE_dopgtr(int matrix_order, char uplo, lapack_int n, const double* ap, const double* tau, double* q, lapack_int ldq);
lapack_int LAPACKE_sopmtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const float* ap, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dopmtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const double* ap, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sorgbr(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau);
lapack_int LAPACKE_dorgbr(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau);
lapack_int LAPACKE_sorghr(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, float* a, lapack_int lda, const float* tau);
lapack_int LAPACKE_dorghr(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, double* a, lapack_int lda, const double* tau);
lapack_int LAPACKE_sorglq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau);
lapack_int LAPACKE_dorglq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau);
lapack_int LAPACKE_sorgql(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau);
lapack_int LAPACKE_dorgql(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau);
lapack_int LAPACKE_sorgqr(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau);
lapack_int LAPACKE_dorgqr(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau);
lapack_int LAPACKE_sorgrq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau);
lapack_int LAPACKE_dorgrq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau);
lapack_int LAPACKE_sorgtr(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const float* tau);
lapack_int LAPACKE_dorgtr(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const double* tau);
lapack_int LAPACKE_sormbr(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormbr(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sormhr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormhr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sormlq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormlq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sormql(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormql(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sormqr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormqr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sormrq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormrq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sormrz(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormrz(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sormtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_spbcon(int matrix_order, char uplo, lapack_int n, lapack_int kd, const float* ab, lapack_int ldab, float anorm, float* rcond);
lapack_int LAPACKE_dpbcon(int matrix_order, char uplo, lapack_int n, lapack_int kd, const double* ab, lapack_int ldab, double anorm, double* rcond);
lapack_int LAPACKE_cpbcon(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_float * ab, lapack_int ldab, float anorm, float* rcond);
lapack_int LAPACKE_zpbcon(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_double * ab, lapack_int ldab, double anorm, double* rcond);
lapack_int LAPACKE_spbequ(int matrix_order, char uplo, lapack_int n, lapack_int kd, const float* ab, lapack_int ldab, float* s, float* scond, float* amax);
lapack_int LAPACKE_dpbequ(int matrix_order, char uplo, lapack_int n, lapack_int kd, const double* ab, lapack_int ldab, double* s, double* scond, double* amax);
lapack_int LAPACKE_cpbequ(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_float * ab, lapack_int ldab, float* s, float* scond, float* amax);
lapack_int LAPACKE_zpbequ(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_double * ab, lapack_int ldab, double* s, double* scond, double* amax);
lapack_int LAPACKE_spbrfs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, const float* afb, lapack_int ldafb, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dpbrfs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, const double* afb, lapack_int ldafb, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cpbrfs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * afb, lapack_int ldafb, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zpbrfs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * afb, lapack_int ldafb, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_spbstf(int matrix_order, char uplo, lapack_int n, lapack_int kb, float* bb, lapack_int ldbb);
lapack_int LAPACKE_dpbstf(int matrix_order, char uplo, lapack_int n, lapack_int kb, double* bb, lapack_int ldbb);
lapack_int LAPACKE_cpbstf(int matrix_order, char uplo, lapack_int n, lapack_int kb, lapack_complex_float * bb, lapack_int ldbb);
lapack_int LAPACKE_zpbstf(int matrix_order, char uplo, lapack_int n, lapack_int kb, lapack_complex_double * bb, lapack_int ldbb);
lapack_int LAPACKE_spbsv(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, float* ab, lapack_int ldab, float* b, lapack_int ldb);
lapack_int LAPACKE_dpbsv(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, double* ab, lapack_int ldab, double* b, lapack_int ldb);
lapack_int LAPACKE_cpbsv(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpbsv(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spbsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, float* ab, lapack_int ldab, float* afb, lapack_int ldafb, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_dpbsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, double* ab, lapack_int ldab, double* afb, lapack_int ldafb, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_cpbsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * afb, lapack_int ldafb, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zpbsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * afb, lapack_int ldafb, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_spbtrf(int matrix_order, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab);
lapack_int LAPACKE_dpbtrf(int matrix_order, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab);
lapack_int LAPACKE_cpbtrf(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab);
lapack_int LAPACKE_zpbtrf(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab);
lapack_int LAPACKE_spbtrs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, float* b, lapack_int ldb);
lapack_int LAPACKE_dpbtrs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, double* b, lapack_int ldb);
lapack_int LAPACKE_cpbtrs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpbtrs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spftrf(int matrix_order, char transr, char uplo, lapack_int n, float* a);
lapack_int LAPACKE_dpftrf(int matrix_order, char transr, char uplo, lapack_int n, double* a);
lapack_int LAPACKE_cpftrf(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_float * a);
lapack_int LAPACKE_zpftrf(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_double * a);
lapack_int LAPACKE_spftri(int matrix_order, char transr, char uplo, lapack_int n, float* a);
lapack_int LAPACKE_dpftri(int matrix_order, char transr, char uplo, lapack_int n, double* a);
lapack_int LAPACKE_cpftri(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_float * a);
lapack_int LAPACKE_zpftri(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_double * a);
lapack_int LAPACKE_spftrs(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const float* a, float* b, lapack_int ldb);
lapack_int LAPACKE_dpftrs(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const double* a, double* b, lapack_int ldb);
lapack_int LAPACKE_cpftrs(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpftrs(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spocon(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, float anorm, float* rcond);
lapack_int LAPACKE_dpocon(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, double anorm, double* rcond);
lapack_int LAPACKE_cpocon(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float anorm, float* rcond);
lapack_int LAPACKE_zpocon(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double anorm, double* rcond);
lapack_int LAPACKE_spoequ(int matrix_order, lapack_int n, const float* a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_dpoequ(int matrix_order, lapack_int n, const double* a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_cpoequ(int matrix_order, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_zpoequ(int matrix_order, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_spoequb(int matrix_order, lapack_int n, const float* a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_dpoequb(int matrix_order, lapack_int n, const double* a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_cpoequb(int matrix_order, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_zpoequb(int matrix_order, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_sporfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dporfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cporfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zporfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_sporfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const float* s, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dporfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const double* s, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_cporfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const float* s, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zporfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const double* s, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_sposv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dposv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_cposv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zposv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_dsposv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, double* x, lapack_int ldx, lapack_int * iter);
lapack_int LAPACKE_zcposv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, lapack_int * iter);
lapack_int LAPACKE_sposvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_dposvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_cposvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zposvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_sposvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dposvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_cposvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zposvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_spotrf(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dpotrf(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_cpotrf(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zpotrf(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_spotri(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dpotri(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_cpotri(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zpotri(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_spotrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dpotrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_cpotrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpotrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sppcon(int matrix_order, char uplo, lapack_int n, const float* ap, float anorm, float* rcond);
lapack_int LAPACKE_dppcon(int matrix_order, char uplo, lapack_int n, const double* ap, double anorm, double* rcond);
lapack_int LAPACKE_cppcon(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, float anorm, float* rcond);
lapack_int LAPACKE_zppcon(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, double anorm, double* rcond);
lapack_int LAPACKE_sppequ(int matrix_order, char uplo, lapack_int n, const float* ap, float* s, float* scond, float* amax);
lapack_int LAPACKE_dppequ(int matrix_order, char uplo, lapack_int n, const double* ap, double* s, double* scond, double* amax);
lapack_int LAPACKE_cppequ(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, float* s, float* scond, float* amax);
lapack_int LAPACKE_zppequ(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, double* s, double* scond, double* amax);
lapack_int LAPACKE_spprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, const float* afp, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dpprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, const double* afp, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cpprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zpprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_sppsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* ap, float* b, lapack_int ldb);
lapack_int LAPACKE_dppsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* ap, double* b, lapack_int ldb);
lapack_int LAPACKE_cppsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zppsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sppsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* ap, float* afp, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_dppsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* ap, double* afp, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_cppsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_complex_float * afp, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zppsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_complex_double * afp, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_spptrf(int matrix_order, char uplo, lapack_int n, float* ap);
lapack_int LAPACKE_dpptrf(int matrix_order, char uplo, lapack_int n, double* ap);
lapack_int LAPACKE_cpptrf(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap);
lapack_int LAPACKE_zpptrf(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap);
lapack_int LAPACKE_spptri(int matrix_order, char uplo, lapack_int n, float* ap);
lapack_int LAPACKE_dpptri(int matrix_order, char uplo, lapack_int n, double* ap);
lapack_int LAPACKE_cpptri(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap);
lapack_int LAPACKE_zpptri(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap);
lapack_int LAPACKE_spptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, float* b, lapack_int ldb);
lapack_int LAPACKE_dpptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, double* b, lapack_int ldb);
lapack_int LAPACKE_cpptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spstrf(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, lapack_int * piv, lapack_int * rank, float tol);
lapack_int LAPACKE_dpstrf(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, lapack_int * piv, lapack_int * rank, double tol);
lapack_int LAPACKE_cpstrf(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * piv, lapack_int * rank, float tol);
lapack_int LAPACKE_zpstrf(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * piv, lapack_int * rank, double tol);
lapack_int LAPACKE_sptcon(lapack_int n, const float* d, const float* e, float anorm, float* rcond);
lapack_int LAPACKE_dptcon(lapack_int n, const double* d, const double* e, double anorm, double* rcond);
lapack_int LAPACKE_cptcon(lapack_int n, const float* d, const lapack_complex_float * e, float anorm, float* rcond);
lapack_int LAPACKE_zptcon(lapack_int n, const double* d, const lapack_complex_double * e, double anorm, double* rcond);
lapack_int LAPACKE_spteqr(int matrix_order, char compz, lapack_int n, float* d, float* e, float* z, lapack_int ldz);
lapack_int LAPACKE_dpteqr(int matrix_order, char compz, lapack_int n, double* d, double* e, double* z, lapack_int ldz);
lapack_int LAPACKE_cpteqr(int matrix_order, char compz, lapack_int n, float* d, float* e, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zpteqr(int matrix_order, char compz, lapack_int n, double* d, double* e, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_sptrfs(int matrix_order, lapack_int n, lapack_int nrhs, const float* d, const float* e, const float* df, const float* ef, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dptrfs(int matrix_order, lapack_int n, lapack_int nrhs, const double* d, const double* e, const double* df, const double* ef, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cptrfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* d, const lapack_complex_float * e, const float* df, const lapack_complex_float * ef, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zptrfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* d, const lapack_complex_double * e, const double* df, const lapack_complex_double * ef, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_sptsv(int matrix_order, lapack_int n, lapack_int nrhs, float* d, float* e, float* b, lapack_int ldb);
lapack_int LAPACKE_dptsv(int matrix_order, lapack_int n, lapack_int nrhs, double* d, double* e, double* b, lapack_int ldb);
lapack_int LAPACKE_cptsv(int matrix_order, lapack_int n, lapack_int nrhs, float* d, lapack_complex_float * e, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zptsv(int matrix_order, lapack_int n, lapack_int nrhs, double* d, lapack_complex_double * e, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sptsvx(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const float* d, const float* e, float* df, float* ef, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_dptsvx(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const double* d, const double* e, double* df, double* ef, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_cptsvx(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const float* d, const lapack_complex_float * e, float* df, lapack_complex_float * ef, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zptsvx(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const double* d, const lapack_complex_double * e, double* df, lapack_complex_double * ef, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_spttrf(lapack_int n, float* d, float* e);
lapack_int LAPACKE_dpttrf(lapack_int n, double* d, double* e);
lapack_int LAPACKE_cpttrf(lapack_int n, float* d, lapack_complex_float * e);
lapack_int LAPACKE_zpttrf(lapack_int n, double* d, lapack_complex_double * e);
lapack_int LAPACKE_spttrs(int matrix_order, lapack_int n, lapack_int nrhs, const float* d, const float* e, float* b, lapack_int ldb);
lapack_int LAPACKE_dpttrs(int matrix_order, lapack_int n, lapack_int nrhs, const double* d, const double* e, double* b, lapack_int ldb);
lapack_int LAPACKE_cpttrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* d, const lapack_complex_float * e, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpttrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* d, const lapack_complex_double * e, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_ssbev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dsbev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_ssbevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dsbevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_ssbevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_dsbevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_ssbgst(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, const float* bb, lapack_int ldbb, float* x, lapack_int ldx);
lapack_int LAPACKE_dsbgst(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, const double* bb, lapack_int ldbb, double* x, lapack_int ldx);
lapack_int LAPACKE_ssbgv(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, float* bb, lapack_int ldbb, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dsbgv(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, double* bb, lapack_int ldbb, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_ssbgvd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, float* bb, lapack_int ldbb, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dsbgvd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, double* bb, lapack_int ldbb, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_ssbgvx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, float* bb, lapack_int ldbb, float* q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_dsbgvx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, double* bb, lapack_int ldbb, double* q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_ssbtrd(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* d, float* e, float* q, lapack_int ldq);
lapack_int LAPACKE_dsbtrd(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* d, double* e, double* q, lapack_int ldq);
lapack_int LAPACKE_ssfrk(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, float alpha, const float* a, lapack_int lda, float beta, float* c);
lapack_int LAPACKE_dsfrk(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, double alpha, const double* a, lapack_int lda, double beta, double* c);
lapack_int LAPACKE_sspcon(int matrix_order, char uplo, lapack_int n, const float* ap, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_dspcon(int matrix_order, char uplo, lapack_int n, const double* ap, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_cspcon(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_zspcon(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_sspev(int matrix_order, char jobz, char uplo, lapack_int n, float* ap, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dspev(int matrix_order, char jobz, char uplo, lapack_int n, double* ap, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_sspevd(int matrix_order, char jobz, char uplo, lapack_int n, float* ap, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dspevd(int matrix_order, char jobz, char uplo, lapack_int n, double* ap, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_sspevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, float* ap, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_dspevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, double* ap, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_sspgst(int matrix_order, lapack_int itype, char uplo, lapack_int n, float* ap, const float* bp);
lapack_int LAPACKE_dspgst(int matrix_order, lapack_int itype, char uplo, lapack_int n, double* ap, const double* bp);
lapack_int LAPACKE_sspgv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* ap, float* bp, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dspgv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* ap, double* bp, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_sspgvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* ap, float* bp, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dspgvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* ap, double* bp, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_sspgvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, float* ap, float* bp, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_dspgvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, double* ap, double* bp, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_ssprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, const float* afp, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dsprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, const double* afp, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_csprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zsprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_sspsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* ap, lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dspsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* ap, lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cspsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zspsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sspsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const float* ap, float* afp, lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_dspsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const double* ap, double* afp, lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_cspsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * afp, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zspsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * afp, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_ssptrd(int matrix_order, char uplo, lapack_int n, float* ap, float* d, float* e, float* tau);
lapack_int LAPACKE_dsptrd(int matrix_order, char uplo, lapack_int n, double* ap, double* d, double* e, double* tau);
lapack_int LAPACKE_ssptrf(int matrix_order, char uplo, lapack_int n, float* ap, lapack_int * ipiv);
lapack_int LAPACKE_dsptrf(int matrix_order, char uplo, lapack_int n, double* ap, lapack_int * ipiv);
lapack_int LAPACKE_csptrf(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, lapack_int * ipiv);
lapack_int LAPACKE_zsptrf(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, lapack_int * ipiv);
lapack_int LAPACKE_ssptri(int matrix_order, char uplo, lapack_int n, float* ap, const lapack_int * ipiv);
lapack_int LAPACKE_dsptri(int matrix_order, char uplo, lapack_int n, double* ap, const lapack_int * ipiv);
lapack_int LAPACKE_csptri(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, const lapack_int * ipiv);
lapack_int LAPACKE_zsptri(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, const lapack_int * ipiv);
lapack_int LAPACKE_ssptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dsptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_csptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zsptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sstebz(char range, char order, lapack_int n, float vl, float vu, lapack_int il, lapack_int iu, float abstol, const float* d, const float* e, lapack_int * m, lapack_int * nsplit, float* w, lapack_int * iblock, lapack_int * isplit);
lapack_int LAPACKE_dstebz(char range, char order, lapack_int n, double vl, double vu, lapack_int il, lapack_int iu, double abstol, const double* d, const double* e, lapack_int * m, lapack_int * nsplit, double* w, lapack_int * iblock, lapack_int * isplit);
lapack_int LAPACKE_sstedc(int matrix_order, char compz, lapack_int n, float* d, float* e, float* z, lapack_int ldz);
lapack_int LAPACKE_dstedc(int matrix_order, char compz, lapack_int n, double* d, double* e, double* z, lapack_int ldz);
lapack_int LAPACKE_cstedc(int matrix_order, char compz, lapack_int n, float* d, float* e, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zstedc(int matrix_order, char compz, lapack_int n, double* d, double* e, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_sstegr(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_dstegr(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_cstegr(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_zstegr(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_sstein(int matrix_order, lapack_int n, const float* d, const float* e, lapack_int m, const float* w, const lapack_int * iblock, const lapack_int * isplit, float* z, lapack_int ldz, lapack_int * ifailv);
lapack_int LAPACKE_dstein(int matrix_order, lapack_int n, const double* d, const double* e, lapack_int m, const double* w, const lapack_int * iblock, const lapack_int * isplit, double* z, lapack_int ldz, lapack_int * ifailv);
lapack_int LAPACKE_cstein(int matrix_order, lapack_int n, const float* d, const float* e, lapack_int m, const float* w, const lapack_int * iblock, const lapack_int * isplit, lapack_complex_float * z, lapack_int ldz, lapack_int * ifailv);
lapack_int LAPACKE_zstein(int matrix_order, lapack_int n, const double* d, const double* e, lapack_int m, const double* w, const lapack_int * iblock, const lapack_int * isplit, lapack_complex_double * z, lapack_int ldz, lapack_int * ifailv);
lapack_int LAPACKE_sstemr(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac);
lapack_int LAPACKE_dstemr(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac);
lapack_int LAPACKE_cstemr(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac);
lapack_int LAPACKE_zstemr(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac);
lapack_int LAPACKE_ssteqr(int matrix_order, char compz, lapack_int n, float* d, float* e, float* z, lapack_int ldz);
lapack_int LAPACKE_dsteqr(int matrix_order, char compz, lapack_int n, double* d, double* e, double* z, lapack_int ldz);
lapack_int LAPACKE_csteqr(int matrix_order, char compz, lapack_int n, float* d, float* e, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zsteqr(int matrix_order, char compz, lapack_int n, double* d, double* e, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_ssterf(lapack_int n, float* d, float* e);
lapack_int LAPACKE_dsterf(lapack_int n, double* d, double* e);
lapack_int LAPACKE_sstev(int matrix_order, char jobz, lapack_int n, float* d, float* e, float* z, lapack_int ldz);
lapack_int LAPACKE_dstev(int matrix_order, char jobz, lapack_int n, double* d, double* e, double* z, lapack_int ldz);
lapack_int LAPACKE_sstevd(int matrix_order, char jobz, lapack_int n, float* d, float* e, float* z, lapack_int ldz);
lapack_int LAPACKE_dstevd(int matrix_order, char jobz, lapack_int n, double* d, double* e, double* z, lapack_int ldz);
lapack_int LAPACKE_sstevr(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_dstevr(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_sstevx(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_dstevx(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_ssycon(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_dsycon(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_csycon(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_zsycon(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_ssyequb(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_dsyequb(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_csyequb(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_zsyequb(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_ssyev(int matrix_order, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* w);
lapack_int LAPACKE_dsyev(int matrix_order, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* w);
lapack_int LAPACKE_ssyevd(int matrix_order, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* w);
lapack_int LAPACKE_dsyevd(int matrix_order, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* w);
lapack_int LAPACKE_ssyevr(int matrix_order, char jobz, char range, char uplo, lapack_int n, float* a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_dsyevr(int matrix_order, char jobz, char range, char uplo, lapack_int n, double* a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_ssyevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, float* a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_dsyevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, double* a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_ssygst(int matrix_order, lapack_int itype, char uplo, lapack_int n, float* a, lapack_int lda, const float* b, lapack_int ldb);
lapack_int LAPACKE_dsygst(int matrix_order, lapack_int itype, char uplo, lapack_int n, double* a, lapack_int lda, const double* b, lapack_int ldb);
lapack_int LAPACKE_ssygv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* w);
lapack_int LAPACKE_dsygv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* w);
lapack_int LAPACKE_ssygvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* w);
lapack_int LAPACKE_dsygvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* w);
lapack_int LAPACKE_ssygvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_dsygvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_ssyrfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dsyrfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_csyrfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zsyrfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_ssyrfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* s, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dsyrfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* s, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_csyrfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const float* s, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zsyrfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const double* s, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_ssysv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dsysv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_csysv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zsysv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_ssysvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_dsysvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_csysvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zsysvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_ssysvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dsysvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_csysvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zsysvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_ssytrd(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, float* d, float* e, float* tau);
lapack_int LAPACKE_dsytrd(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, double* d, double* e, double* tau);
lapack_int LAPACKE_ssytrf(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_dsytrf(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_csytrf(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_zsytrf(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_ssytri(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_dsytri(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_csytri(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_zsytri(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_ssytrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dsytrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_csytrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zsytrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stbcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const float* ab, lapack_int ldab, float* rcond);
lapack_int LAPACKE_dtbcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const double* ab, lapack_int ldab, double* rcond);
lapack_int LAPACKE_ctbcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const lapack_complex_float * ab, lapack_int ldab, float* rcond);
lapack_int LAPACKE_ztbcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const lapack_complex_double * ab, lapack_int ldab, double* rcond);
lapack_int LAPACKE_stbrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, const float* b, lapack_int ldb, const float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dtbrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, const double* b, lapack_int ldb, const double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_ctbrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_ztbrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_stbtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, float* b, lapack_int ldb);
lapack_int LAPACKE_dtbtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, double* b, lapack_int ldb);
lapack_int LAPACKE_ctbtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztbtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stfsm(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, float alpha, const float* a, float* b, lapack_int ldb);
lapack_int LAPACKE_dtfsm(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, double alpha, const double* a, double* b, lapack_int ldb);
lapack_int LAPACKE_ctfsm(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, lapack_complex_float alpha, const lapack_complex_float * a, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztfsm(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, lapack_complex_double alpha, const lapack_complex_double * a, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stftri(int matrix_order, char transr, char uplo, char diag, lapack_int n, float* a);
lapack_int LAPACKE_dtftri(int matrix_order, char transr, char uplo, char diag, lapack_int n, double* a);
lapack_int LAPACKE_ctftri(int matrix_order, char transr, char uplo, char diag, lapack_int n, lapack_complex_float * a);
lapack_int LAPACKE_ztftri(int matrix_order, char transr, char uplo, char diag, lapack_int n, lapack_complex_double * a);
lapack_int LAPACKE_stfttp(int matrix_order, char transr, char uplo, lapack_int n, const float* arf, float* ap);
lapack_int LAPACKE_dtfttp(int matrix_order, char transr, char uplo, lapack_int n, const double* arf, double* ap);
lapack_int LAPACKE_ctfttp(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * arf, lapack_complex_float * ap);
lapack_int LAPACKE_ztfttp(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * arf, lapack_complex_double * ap);
lapack_int LAPACKE_stfttr(int matrix_order, char transr, char uplo, lapack_int n, const float* arf, float* a, lapack_int lda);
lapack_int LAPACKE_dtfttr(int matrix_order, char transr, char uplo, lapack_int n, const double* arf, double* a, lapack_int lda);
lapack_int LAPACKE_ctfttr(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * arf, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_ztfttr(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * arf, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_stgevc(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const float* s, lapack_int lds, const float* p, lapack_int ldp, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_dtgevc(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const double* s, lapack_int lds, const double* p, lapack_int ldp, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ctgevc(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_float * s, lapack_int lds, const lapack_complex_float * p, lapack_int ldp, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ztgevc(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_double * s, lapack_int lds, const lapack_complex_double * p, lapack_int ldp, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_stgexc(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* q, lapack_int ldq, float* z, lapack_int ldz, lapack_int * ifst, lapack_int * ilst);
lapack_int LAPACKE_dtgexc(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* q, lapack_int ldq, double* z, lapack_int ldz, lapack_int * ifst, lapack_int * ilst);
lapack_int LAPACKE_ctgexc(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_ztgexc(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_stgsen(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* alphar, float* alphai, float* beta, float* q, lapack_int ldq, float* z, lapack_int ldz, lapack_int * m, float* pl, float* pr, float* dif);
lapack_int LAPACKE_dtgsen(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* alphar, double* alphai, double* beta, double* q, lapack_int ldq, double* z, lapack_int ldz, lapack_int * m, double* pl, double* pr, double* dif);
lapack_int LAPACKE_ctgsen(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz, lapack_int * m, float* pl, float* pr, float* dif);
lapack_int LAPACKE_ztgsen(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz, lapack_int * m, double* pl, double* pr, double* dif);
lapack_int LAPACKE_stgsja(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, float* a, lapack_int lda, float* b, lapack_int ldb, float tola, float tolb, float* alpha, float* beta, float* u, lapack_int ldu, float* v, lapack_int ldv, float* q, lapack_int ldq, lapack_int * ncycle);
lapack_int LAPACKE_dtgsja(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, double* a, lapack_int lda, double* b, lapack_int ldb, double tola, double tolb, double* alpha, double* beta, double* u, lapack_int ldu, double* v, lapack_int ldv, double* q, lapack_int ldq, lapack_int * ncycle);
lapack_int LAPACKE_ctgsja(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float tola, float tolb, float* alpha, float* beta, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * v, lapack_int ldv, lapack_complex_float * q, lapack_int ldq, lapack_int * ncycle);
lapack_int LAPACKE_ztgsja(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double tola, double tolb, double* alpha, double* beta, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * v, lapack_int ldv, lapack_complex_double * q, lapack_int ldq, lapack_int * ncycle);
lapack_int LAPACKE_stgsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const float* a, lapack_int lda, const float* b, lapack_int ldb, const float* vl, lapack_int ldvl, const float* vr, lapack_int ldvr, float* s, float* dif, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_dtgsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const double* a, lapack_int lda, const double* b, lapack_int ldb, const double* vl, lapack_int ldvl, const double* vr, lapack_int ldvr, double* s, double* dif, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ctgsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * vl, lapack_int ldvl, const lapack_complex_float * vr, lapack_int ldvr, float* s, float* dif, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ztgsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * vl, lapack_int ldvl, const lapack_complex_double * vr, lapack_int ldvr, double* s, double* dif, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_stgsyl(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const float* a, lapack_int lda, const float* b, lapack_int ldb, float* c, lapack_int ldc, const float* d, lapack_int ldd, const float* e, lapack_int lde, float* f, lapack_int ldf, float* scale, float* dif);
lapack_int LAPACKE_dtgsyl(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const double* a, lapack_int lda, const double* b, lapack_int ldb, double* c, lapack_int ldc, const double* d, lapack_int ldd, const double* e, lapack_int lde, double* f, lapack_int ldf, double* scale, double* dif);
lapack_int LAPACKE_ctgsyl(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * c, lapack_int ldc, const lapack_complex_float * d, lapack_int ldd, const lapack_complex_float * e, lapack_int lde, lapack_complex_float * f, lapack_int ldf, float* scale, float* dif);
lapack_int LAPACKE_ztgsyl(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * c, lapack_int ldc, const lapack_complex_double * d, lapack_int ldd, const lapack_complex_double * e, lapack_int lde, lapack_complex_double * f, lapack_int ldf, double* scale, double* dif);
lapack_int LAPACKE_stpcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const float* ap, float* rcond);
lapack_int LAPACKE_dtpcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const double* ap, double* rcond);
lapack_int LAPACKE_ctpcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_float * ap, float* rcond);
lapack_int LAPACKE_ztpcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_double * ap, double* rcond);
lapack_int LAPACKE_stprfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* ap, const float* b, lapack_int ldb, const float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dtprfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* ap, const double* b, lapack_int ldb, const double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_ctprfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_ztprfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_stptri(int matrix_order, char uplo, char diag, lapack_int n, float* ap);
lapack_int LAPACKE_dtptri(int matrix_order, char uplo, char diag, lapack_int n, double* ap);
lapack_int LAPACKE_ctptri(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_float * ap);
lapack_int LAPACKE_ztptri(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_double * ap);
lapack_int LAPACKE_stptrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* ap, float* b, lapack_int ldb);
lapack_int LAPACKE_dtptrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* ap, double* b, lapack_int ldb);
lapack_int LAPACKE_ctptrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztptrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stpttf(int matrix_order, char transr, char uplo, lapack_int n, const float* ap, float* arf);
lapack_int LAPACKE_dtpttf(int matrix_order, char transr, char uplo, lapack_int n, const double* ap, double* arf);
lapack_int LAPACKE_ctpttf(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * ap, lapack_complex_float * arf);
lapack_int LAPACKE_ztpttf(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * ap, lapack_complex_double * arf);
lapack_int LAPACKE_stpttr(int matrix_order, char uplo, lapack_int n, const float* ap, float* a, lapack_int lda);
lapack_int LAPACKE_dtpttr(int matrix_order, char uplo, lapack_int n, const double* ap, double* a, lapack_int lda);
lapack_int LAPACKE_ctpttr(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_ztpttr(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_strcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const float* a, lapack_int lda, float* rcond);
lapack_int LAPACKE_dtrcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const double* a, lapack_int lda, double* rcond);
lapack_int LAPACKE_ctrcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* rcond);
lapack_int LAPACKE_ztrcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* rcond);
lapack_int LAPACKE_strevc(int matrix_order, char side, char howmny, lapack_logical * select, lapack_int n, const float* t, lapack_int ldt, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_dtrevc(int matrix_order, char side, char howmny, lapack_logical * select, lapack_int n, const double* t, lapack_int ldt, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ctrevc(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ztrevc(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_strexc(int matrix_order, char compq, lapack_int n, float* t, lapack_int ldt, float* q, lapack_int ldq, lapack_int * ifst, lapack_int * ilst);
lapack_int LAPACKE_dtrexc(int matrix_order, char compq, lapack_int n, double* t, lapack_int ldt, double* q, lapack_int ldq, lapack_int * ifst, lapack_int * ilst);
lapack_int LAPACKE_ctrexc(int matrix_order, char compq, lapack_int n, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * q, lapack_int ldq, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_ztrexc(int matrix_order, char compq, lapack_int n, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * q, lapack_int ldq, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_strrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* b, lapack_int ldb, const float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dtrrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* b, lapack_int ldb, const double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_ctrrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_ztrrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_strsen(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, float* t, lapack_int ldt, float* q, lapack_int ldq, float* wr, float* wi, lapack_int * m, float* s, float* sep);
lapack_int LAPACKE_dtrsen(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, double* t, lapack_int ldt, double* q, lapack_int ldq, double* wr, double* wi, lapack_int * m, double* s, double* sep);
lapack_int LAPACKE_ctrsen(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * w, lapack_int * m, float* s, float* sep);
lapack_int LAPACKE_ztrsen(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * w, lapack_int * m, double* s, double* sep);
lapack_int LAPACKE_strsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const float* t, lapack_int ldt, const float* vl, lapack_int ldvl, const float* vr, lapack_int ldvr, float* s, float* sep, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_dtrsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const double* t, lapack_int ldt, const double* vl, lapack_int ldvl, const double* vr, lapack_int ldvr, double* s, double* sep, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ctrsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_float * t, lapack_int ldt, const lapack_complex_float * vl, lapack_int ldvl, const lapack_complex_float * vr, lapack_int ldvr, float* s, float* sep, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ztrsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_double * t, lapack_int ldt, const lapack_complex_double * vl, lapack_int ldvl, const lapack_complex_double * vr, lapack_int ldvr, double* s, double* sep, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_strsyl(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const float* a, lapack_int lda, const float* b, lapack_int ldb, float* c, lapack_int ldc, float* scale);
lapack_int LAPACKE_dtrsyl(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const double* a, lapack_int lda, const double* b, lapack_int ldb, double* c, lapack_int ldc, double* scale);
lapack_int LAPACKE_ctrsyl(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * c, lapack_int ldc, float* scale);
lapack_int LAPACKE_ztrsyl(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * c, lapack_int ldc, double* scale);
lapack_int LAPACKE_strtri(int matrix_order, char uplo, char diag, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dtrtri(int matrix_order, char uplo, char diag, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_ctrtri(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_ztrtri(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_strtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dtrtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_ctrtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztrtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_strttf(int matrix_order, char transr, char uplo, lapack_int n, const float* a, lapack_int lda, float* arf);
lapack_int LAPACKE_dtrttf(int matrix_order, char transr, char uplo, lapack_int n, const double* a, lapack_int lda, double* arf);
lapack_int LAPACKE_ctrttf(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * arf);
lapack_int LAPACKE_ztrttf(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * arf);
lapack_int LAPACKE_strttp(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, float* ap);
lapack_int LAPACKE_dtrttp(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, double* ap);
lapack_int LAPACKE_ctrttp(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * ap);
lapack_int LAPACKE_ztrttp(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * ap);
lapack_int LAPACKE_stzrzf(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dtzrzf(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_ctzrzf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_ztzrzf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_cungbr(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau);
lapack_int LAPACKE_zungbr(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau);
lapack_int LAPACKE_cunghr(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau);
lapack_int LAPACKE_zunghr(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau);
lapack_int LAPACKE_cunglq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau);
lapack_int LAPACKE_zunglq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau);
lapack_int LAPACKE_cungql(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau);
lapack_int LAPACKE_zungql(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau);
lapack_int LAPACKE_cungqr(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau);
lapack_int LAPACKE_zungqr(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau);
lapack_int LAPACKE_cungrq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau);
lapack_int LAPACKE_zungrq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau);
lapack_int LAPACKE_cungtr(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau);
lapack_int LAPACKE_zungtr(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau);
lapack_int LAPACKE_cunmbr(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmbr(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cunmhr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmhr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cunmlq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmlq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cunmql(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmql(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cunmqr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmqr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cunmrq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmrq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cunmrz(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmrz(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cunmtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cupgtr(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, const lapack_complex_float * tau, lapack_complex_float * q, lapack_int ldq);
lapack_int LAPACKE_zupgtr(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, const lapack_complex_double * tau, lapack_complex_double * q, lapack_int ldq);
lapack_int LAPACKE_cupmtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_float * ap, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zupmtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_double * ap, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_sbdsdc_work(int matrix_order, char uplo, char compq, lapack_int n, float* d, float* e, float* u, lapack_int ldu, float* vt, lapack_int ldvt, float* q, lapack_int * iq, float* work, lapack_int * iwork);
lapack_int LAPACKE_dbdsdc_work(int matrix_order, char uplo, char compq, lapack_int n, double* d, double* e, double* u, lapack_int ldu, double* vt, lapack_int ldvt, double* q, lapack_int * iq, double* work, lapack_int * iwork);
lapack_int LAPACKE_sbdsqr_work(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, float* d, float* e, float* vt, lapack_int ldvt, float* u, lapack_int ldu, float* c, lapack_int ldc, float* work);
lapack_int LAPACKE_dbdsqr_work(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, double* d, double* e, double* vt, lapack_int ldvt, double* u, lapack_int ldu, double* c, lapack_int ldc, double* work);
lapack_int LAPACKE_cbdsqr_work(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, float* d, float* e, lapack_complex_float * vt, lapack_int ldvt, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * c, lapack_int ldc, float* work);
lapack_int LAPACKE_zbdsqr_work(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, double* d, double* e, lapack_complex_double * vt, lapack_int ldvt, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * c, lapack_int ldc, double* work);
lapack_int LAPACKE_sdisna_work(char job, lapack_int m, lapack_int n, const float* d, float* sep);
lapack_int LAPACKE_ddisna_work(char job, lapack_int m, lapack_int n, const double* d, double* sep);
lapack_int LAPACKE_sgbbrd_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, float* ab, lapack_int ldab, float* d, float* e, float* q, lapack_int ldq, float* pt, lapack_int ldpt, float* c, lapack_int ldc, float* work);
lapack_int LAPACKE_dgbbrd_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, double* ab, lapack_int ldab, double* d, double* e, double* q, lapack_int ldq, double* pt, lapack_int ldpt, double* c, lapack_int ldc, double* work);
lapack_int LAPACKE_cgbbrd_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, lapack_complex_float * ab, lapack_int ldab, float* d, float* e, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * pt, lapack_int ldpt, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgbbrd_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, lapack_complex_double * ab, lapack_int ldab, double* d, double* e, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * pt, lapack_int ldpt, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgbcon_work(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const float* ab, lapack_int ldab, const lapack_int * ipiv, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgbcon_work(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const double* ab, lapack_int ldab, const lapack_int * ipiv, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgbcon_work(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_float * ab, lapack_int ldab, const lapack_int * ipiv, float anorm, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgbcon_work(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_double * ab, lapack_int ldab, const lapack_int * ipiv, double anorm, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgbequ_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgbequ_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgbequ_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_float * ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgbequ_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_double * ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgbequb_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgbequb_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgbequb_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_float * ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgbequb_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_double * ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgbrfs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const float* ab, lapack_int ldab, const float* afb, lapack_int ldafb, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgbrfs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const double* ab, lapack_int ldab, const double* afb, lapack_int ldafb, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgbrfs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * afb, lapack_int ldafb, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgbrfs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * afb, lapack_int ldafb, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgbrfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const float* ab, lapack_int ldab, const float* afb, lapack_int ldafb, const lapack_int * ipiv, const float* r, const float* c, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgbrfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const double* ab, lapack_int ldab, const double* afb, lapack_int ldafb, const lapack_int * ipiv, const double* r, const double* c, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgbrfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * afb, lapack_int ldafb, const lapack_int * ipiv, const float* r, const float* c, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgbrfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * afb, lapack_int ldafb, const lapack_int * ipiv, const double* r, const double* c, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgbsv_work(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, float* ab, lapack_int ldab, lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgbsv_work(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, double* ab, lapack_int ldab, lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgbsv_work(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgbsv_work(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sgbsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, float* ab, lapack_int ldab, float* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgbsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, double* ab, lapack_int ldab, double* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgbsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgbsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgbsvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, float* ab, lapack_int ldab, float* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgbsvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, double* ab, lapack_int ldab, double* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgbsvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgbsvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgbtrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, float* ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_dgbtrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, double* ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_cgbtrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, lapack_complex_float * ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_zgbtrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, lapack_complex_double * ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_sgbtrs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const float* ab, lapack_int ldab, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgbtrs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const double* ab, lapack_int ldab, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgbtrs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgbtrs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sgebak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* scale, lapack_int m, float* v, lapack_int ldv);
lapack_int LAPACKE_dgebak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* scale, lapack_int m, double* v, lapack_int ldv);
lapack_int LAPACKE_cgebak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* scale, lapack_int m, lapack_complex_float * v, lapack_int ldv);
lapack_int LAPACKE_zgebak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* scale, lapack_int m, lapack_complex_double * v, lapack_int ldv);
lapack_int LAPACKE_sgebal_work(int matrix_order, char job, lapack_int n, float* a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, float* scale);
lapack_int LAPACKE_dgebal_work(int matrix_order, char job, lapack_int n, double* a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, double* scale);
lapack_int LAPACKE_cgebal_work(int matrix_order, char job, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, float* scale);
lapack_int LAPACKE_zgebal_work(int matrix_order, char job, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, double* scale);
lapack_int LAPACKE_sgebrd_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* d, float* e, float* tauq, float* taup, float* work, lapack_int lwork);
lapack_int LAPACKE_dgebrd_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* d, double* e, double* tauq, double* taup, double* work, lapack_int lwork);
lapack_int LAPACKE_cgebrd_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, float* d, float* e, lapack_complex_float * tauq, lapack_complex_float * taup, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgebrd_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, double* d, double* e, lapack_complex_double * tauq, lapack_complex_double * taup, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgecon_work(int matrix_order, char norm, lapack_int n, const float* a, lapack_int lda, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgecon_work(int matrix_order, char norm, lapack_int n, const double* a, lapack_int lda, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgecon_work(int matrix_order, char norm, lapack_int n, const lapack_complex_float * a, lapack_int lda, float anorm, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgecon_work(int matrix_order, char norm, lapack_int n, const lapack_complex_double * a, lapack_int lda, double anorm, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgeequ_work(int matrix_order, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgeequ_work(int matrix_order, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgeequ_work(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgeequ_work(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgeequb_work(int matrix_order, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgeequb_work(int matrix_order, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgeequb_work(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgeequb_work(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgees_work(int matrix_order, char jobvs, char sort, LAPACK_S_SELECT2 select, lapack_int n, float* a, lapack_int lda, lapack_int * sdim, float* wr, float* wi, float* vs, lapack_int ldvs, float* work, lapack_int lwork, lapack_logical * bwork);
lapack_int LAPACKE_dgees_work(int matrix_order, char jobvs, char sort, LAPACK_D_SELECT2 select, lapack_int n, double* a, lapack_int lda, lapack_int * sdim, double* wr, double* wi, double* vs, lapack_int ldvs, double* work, lapack_int lwork, lapack_logical * bwork);
lapack_int LAPACKE_cgees_work(int matrix_order, char jobvs, char sort, LAPACK_C_SELECT1 select, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * sdim, lapack_complex_float * w, lapack_complex_float * vs, lapack_int ldvs, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_logical * bwork);
lapack_int LAPACKE_zgees_work(int matrix_order, char jobvs, char sort, LAPACK_Z_SELECT1 select, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * sdim, lapack_complex_double * w, lapack_complex_double * vs, lapack_int ldvs, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_logical * bwork);
lapack_int LAPACKE_sgeesx_work(int matrix_order, char jobvs, char sort, LAPACK_S_SELECT2 select, char sense, lapack_int n, float* a, lapack_int lda, lapack_int * sdim, float* wr, float* wi, float* vs, lapack_int ldvs, float* rconde, float* rcondv, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork, lapack_logical * bwork);
lapack_int LAPACKE_dgeesx_work(int matrix_order, char jobvs, char sort, LAPACK_D_SELECT2 select, char sense, lapack_int n, double* a, lapack_int lda, lapack_int * sdim, double* wr, double* wi, double* vs, lapack_int ldvs, double* rconde, double* rcondv, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork, lapack_logical * bwork);
lapack_int LAPACKE_cgeesx_work(int matrix_order, char jobvs, char sort, LAPACK_C_SELECT1 select, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * sdim, lapack_complex_float * w, lapack_complex_float * vs, lapack_int ldvs, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_logical * bwork);
lapack_int LAPACKE_zgeesx_work(int matrix_order, char jobvs, char sort, LAPACK_Z_SELECT1 select, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * sdim, lapack_complex_double * w, lapack_complex_double * vs, lapack_int ldvs, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_logical * bwork);
lapack_int LAPACKE_sgeev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, float* a, lapack_int lda, float* wr, float* wi, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, float* work, lapack_int lwork);
lapack_int LAPACKE_dgeev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, double* a, lapack_int lda, double* wr, double* wi, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, double* work, lapack_int lwork);
lapack_int LAPACKE_cgeev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * w, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zgeev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * w, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_sgeevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, float* a, lapack_int lda, float* wr, float* wi, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* scale, float* abnrm, float* rconde, float* rcondv, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dgeevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, double* a, lapack_int lda, double* wr, double* wi, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* scale, double* abnrm, double* rconde, double* rcondv, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_cgeevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * w, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* scale, float* abnrm, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zgeevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * w, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* scale, double* abnrm, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_sgehrd_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, float* a, lapack_int lda, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dgehrd_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, double* a, lapack_int lda, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_cgehrd_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgehrd_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgejsv_work(int matrix_order, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, lapack_int m, lapack_int n, float* a, lapack_int lda, float* sva, float* u, lapack_int ldu, float* v, lapack_int ldv, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dgejsv_work(int matrix_order, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, lapack_int m, lapack_int n, double* a, lapack_int lda, double* sva, double* u, lapack_int ldu, double* v, lapack_int ldv, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_sgelq2_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work);
lapack_int LAPACKE_dgelq2_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work);
lapack_int LAPACKE_cgelq2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work);
lapack_int LAPACKE_zgelq2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work);
lapack_int LAPACKE_sgelqf_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dgelqf_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_cgelqf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgelqf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgels_work(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb, float* work, lapack_int lwork);
lapack_int LAPACKE_dgels_work(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, double* work, lapack_int lwork);
lapack_int LAPACKE_cgels_work(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgels_work(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgelsd_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb, float* s, float rcond, lapack_int * rank, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dgelsd_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, double* s, double rcond, lapack_int * rank, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_cgelsd_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* s, float rcond, lapack_int * rank, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int * iwork);
lapack_int LAPACKE_zgelsd_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* s, double rcond, lapack_int * rank, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int * iwork);
lapack_int LAPACKE_sgelss_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb, float* s, float rcond, lapack_int * rank, float* work, lapack_int lwork);
lapack_int LAPACKE_dgelss_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, double* s, double rcond, lapack_int * rank, double* work, lapack_int lwork);
lapack_int LAPACKE_cgelss_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* s, float rcond, lapack_int * rank, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zgelss_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* s, double rcond, lapack_int * rank, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_sgelsy_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * jpvt, float rcond, lapack_int * rank, float* work, lapack_int lwork);
lapack_int LAPACKE_dgelsy_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * jpvt, double rcond, lapack_int * rank, double* work, lapack_int lwork);
lapack_int LAPACKE_cgelsy_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * jpvt, float rcond, lapack_int * rank, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zgelsy_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * jpvt, double rcond, lapack_int * rank, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_sgeqlf_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dgeqlf_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_cgeqlf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgeqlf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgeqp3_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * jpvt, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dgeqp3_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * jpvt, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_cgeqp3_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * jpvt, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zgeqp3_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * jpvt, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_sgeqpf_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * jpvt, float* tau, float* work);
lapack_int LAPACKE_dgeqpf_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * jpvt, double* tau, double* work);
lapack_int LAPACKE_cgeqpf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * jpvt, lapack_complex_float * tau, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgeqpf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * jpvt, lapack_complex_double * tau, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgeqr2_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work);
lapack_int LAPACKE_dgeqr2_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work);
lapack_int LAPACKE_cgeqr2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work);
lapack_int LAPACKE_zgeqr2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work);
lapack_int LAPACKE_sgeqrf_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dgeqrf_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_cgeqrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgeqrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgeqrfp_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dgeqrfp_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_cgeqrfp_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgeqrfp_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgerfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgerfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgerfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgerfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgerfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* r, const float* c, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgerfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* r, const double* c, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgerfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const float* r, const float* c, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgerfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const double* r, const double* c, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgerqf_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dgerqf_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_cgerqf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgerqf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgesdd_work(int matrix_order, char jobz, lapack_int m, lapack_int n, float* a, lapack_int lda, float* s, float* u, lapack_int ldu, float* vt, lapack_int ldvt, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dgesdd_work(int matrix_order, char jobz, lapack_int m, lapack_int n, double* a, lapack_int lda, double* s, double* u, lapack_int ldu, double* vt, lapack_int ldvt, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_cgesdd_work(int matrix_order, char jobz, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, float* s, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * vt, lapack_int ldvt, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int * iwork);
lapack_int LAPACKE_zgesdd_work(int matrix_order, char jobz, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, double* s, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * vt, lapack_int ldvt, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int * iwork);
lapack_int LAPACKE_sgesv_work(int matrix_order, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgesv_work(int matrix_order, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgesv_work(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgesv_work(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_dsgesv_work(int matrix_order, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, lapack_int * ipiv, double* b, lapack_int ldb, double* x, lapack_int ldx, double* work, float* swork, lapack_int * iter);
lapack_int LAPACKE_zcgesv_work(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, lapack_complex_double * work, lapack_complex_float * swork, double* rwork, lapack_int * iter);
lapack_int LAPACKE_sgesvd_work(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, float* a, lapack_int lda, float* s, float* u, lapack_int ldu, float* vt, lapack_int ldvt, float* work, lapack_int lwork);
lapack_int LAPACKE_dgesvd_work(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, double* a, lapack_int lda, double* s, double* u, lapack_int ldu, double* vt, lapack_int ldvt, double* work, lapack_int lwork);
lapack_int LAPACKE_cgesvd_work(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, float* s, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * vt, lapack_int ldvt, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zgesvd_work(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, double* s, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * vt, lapack_int ldvt, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_sgesvj_work(int matrix_order, char joba, char jobu, char jobv, lapack_int m, lapack_int n, float* a, lapack_int lda, float* sva, lapack_int mv, float* v, lapack_int ldv, float* work, lapack_int lwork);
lapack_int LAPACKE_dgesvj_work(int matrix_order, char joba, char jobu, char jobv, lapack_int m, lapack_int n, double* a, lapack_int lda, double* sva, lapack_int mv, double* v, lapack_int ldv, double* work, lapack_int lwork);
lapack_int LAPACKE_sgesvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgesvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgesvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgesvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgesvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgesvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgesvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgesvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgetf2_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_dgetf2_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_cgetf2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_zgetf2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_sgetrf_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_dgetrf_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_cgetrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_zgetrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_sgetri_work(int matrix_order, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv, float* work, lapack_int lwork);
lapack_int LAPACKE_dgetri_work(int matrix_order, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv, double* work, lapack_int lwork);
lapack_int LAPACKE_cgetri_work(int matrix_order, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgetri_work(int matrix_order, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgetrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgetrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgetrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgetrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sggbak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* lscale, const float* rscale, lapack_int m, float* v, lapack_int ldv);
lapack_int LAPACKE_dggbak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* lscale, const double* rscale, lapack_int m, double* v, lapack_int ldv);
lapack_int LAPACKE_cggbak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* lscale, const float* rscale, lapack_int m, lapack_complex_float * v, lapack_int ldv);
lapack_int LAPACKE_zggbak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* lscale, const double* rscale, lapack_int m, lapack_complex_double * v, lapack_int ldv);
lapack_int LAPACKE_sggbal_work(int matrix_order, char job, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* work);
lapack_int LAPACKE_dggbal_work(int matrix_order, char job, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* work);
lapack_int LAPACKE_cggbal_work(int matrix_order, char job, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* work);
lapack_int LAPACKE_zggbal_work(int matrix_order, char job, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* work);
lapack_int LAPACKE_sgges_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * sdim, float* alphar, float* alphai, float* beta, float* vsl, lapack_int ldvsl, float* vsr, lapack_int ldvsr, float* work, lapack_int lwork, lapack_logical * bwork);
lapack_int LAPACKE_dgges_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * sdim, double* alphar, double* alphai, double* beta, double* vsl, lapack_int ldvsl, double* vsr, lapack_int ldvsr, double* work, lapack_int lwork, lapack_logical * bwork);
lapack_int LAPACKE_cgges_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * sdim, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vsl, lapack_int ldvsl, lapack_complex_float * vsr, lapack_int ldvsr, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_logical * bwork);
lapack_int LAPACKE_zgges_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * sdim, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vsl, lapack_int ldvsl, lapack_complex_double * vsr, lapack_int ldvsr, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_logical * bwork);
lapack_int LAPACKE_sggesx_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, char sense, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * sdim, float* alphar, float* alphai, float* beta, float* vsl, lapack_int ldvsl, float* vsr, lapack_int ldvsr, float* rconde, float* rcondv, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork, lapack_logical * bwork);
lapack_int LAPACKE_dggesx_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, char sense, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * sdim, double* alphar, double* alphai, double* beta, double* vsl, lapack_int ldvsl, double* vsr, lapack_int ldvsr, double* rconde, double* rcondv, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork, lapack_logical * bwork);
lapack_int LAPACKE_cggesx_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * sdim, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vsl, lapack_int ldvsl, lapack_complex_float * vsr, lapack_int ldvsr, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int * iwork, lapack_int liwork, lapack_logical * bwork);
lapack_int LAPACKE_zggesx_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * sdim, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vsl, lapack_int ldvsl, lapack_complex_double * vsr, lapack_int ldvsr, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int * iwork, lapack_int liwork, lapack_logical * bwork);
lapack_int LAPACKE_sggev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* alphar, float* alphai, float* beta, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, float* work, lapack_int lwork);
lapack_int LAPACKE_dggev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* alphar, double* alphai, double* beta, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, double* work, lapack_int lwork);
lapack_int LAPACKE_cggev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zggev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_sggevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* alphar, float* alphai, float* beta, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv, float* work, lapack_int lwork, lapack_int * iwork, lapack_logical * bwork);
lapack_int LAPACKE_dggevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* alphar, double* alphai, double* beta, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv, double* work, lapack_int lwork, lapack_int * iwork, lapack_logical * bwork);
lapack_int LAPACKE_cggevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int * iwork, lapack_logical * bwork);
lapack_int LAPACKE_zggevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int * iwork, lapack_logical * bwork);
lapack_int LAPACKE_sggglm_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, float* a, lapack_int lda, float* b, lapack_int ldb, float* d, float* x, float* y, float* work, lapack_int lwork);
lapack_int LAPACKE_dggglm_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, double* a, lapack_int lda, double* b, lapack_int ldb, double* d, double* x, double* y, double* work, lapack_int lwork);
lapack_int LAPACKE_cggglm_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * d, lapack_complex_float * x, lapack_complex_float * y, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zggglm_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * d, lapack_complex_double * x, lapack_complex_double * y, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgghrd_work(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, float* a, lapack_int lda, float* b, lapack_int ldb, float* q, lapack_int ldq, float* z, lapack_int ldz);
lapack_int LAPACKE_dgghrd_work(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, double* a, lapack_int lda, double* b, lapack_int ldb, double* q, lapack_int ldq, double* z, lapack_int ldz);
lapack_int LAPACKE_cgghrd_work(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zgghrd_work(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_sgglse_work(int matrix_order, lapack_int m, lapack_int n, lapack_int p, float* a, lapack_int lda, float* b, lapack_int ldb, float* c, float* d, float* x, float* work, lapack_int lwork);
lapack_int LAPACKE_dgglse_work(int matrix_order, lapack_int m, lapack_int n, lapack_int p, double* a, lapack_int lda, double* b, lapack_int ldb, double* c, double* d, double* x, double* work, lapack_int lwork);
lapack_int LAPACKE_cgglse_work(int matrix_order, lapack_int m, lapack_int n, lapack_int p, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * c, lapack_complex_float * d, lapack_complex_float * x, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgglse_work(int matrix_order, lapack_int m, lapack_int n, lapack_int p, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * c, lapack_complex_double * d, lapack_complex_double * x, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sggqrf_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, float* a, lapack_int lda, float* taua, float* b, lapack_int ldb, float* taub, float* work, lapack_int lwork);
lapack_int LAPACKE_dggqrf_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, double* a, lapack_int lda, double* taua, double* b, lapack_int ldb, double* taub, double* work, lapack_int lwork);
lapack_int LAPACKE_cggqrf_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_float * a, lapack_int lda, lapack_complex_float * taua, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * taub, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zggqrf_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_double * a, lapack_int lda, lapack_complex_double * taua, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * taub, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sggrqf_work(int matrix_order, lapack_int m, lapack_int p, lapack_int n, float* a, lapack_int lda, float* taua, float* b, lapack_int ldb, float* taub, float* work, lapack_int lwork);
lapack_int LAPACKE_dggrqf_work(int matrix_order, lapack_int m, lapack_int p, lapack_int n, double* a, lapack_int lda, double* taua, double* b, lapack_int ldb, double* taub, double* work, lapack_int lwork);
lapack_int LAPACKE_cggrqf_work(int matrix_order, lapack_int m, lapack_int p, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * taua, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * taub, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zggrqf_work(int matrix_order, lapack_int m, lapack_int p, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * taua, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * taub, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sggsvd_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, float* a, lapack_int lda, float* b, lapack_int ldb, float* alpha, float* beta, float* u, lapack_int ldu, float* v, lapack_int ldv, float* q, lapack_int ldq, float* work, lapack_int * iwork);
lapack_int LAPACKE_dggsvd_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, double* a, lapack_int lda, double* b, lapack_int ldb, double* alpha, double* beta, double* u, lapack_int ldu, double* v, lapack_int ldv, double* q, lapack_int ldq, double* work, lapack_int * iwork);
lapack_int LAPACKE_cggsvd_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* alpha, float* beta, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * v, lapack_int ldv, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * work, float* rwork, lapack_int * iwork);
lapack_int LAPACKE_zggsvd_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* alpha, double* beta, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * v, lapack_int ldv, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * work, double* rwork, lapack_int * iwork);
lapack_int LAPACKE_sggsvp_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float tola, float tolb, lapack_int * k, lapack_int * l, float* u, lapack_int ldu, float* v, lapack_int ldv, float* q, lapack_int ldq, lapack_int * iwork, float* tau, float* work);
lapack_int LAPACKE_dggsvp_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double tola, double tolb, lapack_int * k, lapack_int * l, double* u, lapack_int ldu, double* v, lapack_int ldv, double* q, lapack_int ldq, lapack_int * iwork, double* tau, double* work);
lapack_int LAPACKE_cggsvp_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float tola, float tolb, lapack_int * k, lapack_int * l, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * v, lapack_int ldv, lapack_complex_float * q, lapack_int ldq, lapack_int * iwork, float* rwork, lapack_complex_float * tau, lapack_complex_float * work);
lapack_int LAPACKE_zggsvp_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double tola, double tolb, lapack_int * k, lapack_int * l, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * v, lapack_int ldv, lapack_complex_double * q, lapack_int ldq, lapack_int * iwork, double* rwork, lapack_complex_double * tau, lapack_complex_double * work);
lapack_int LAPACKE_sgtcon_work(char norm, lapack_int n, const float* dl, const float* d, const float* du, const float* du2, const lapack_int * ipiv, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgtcon_work(char norm, lapack_int n, const double* dl, const double* d, const double* du, const double* du2, const lapack_int * ipiv, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgtcon_work(char norm, lapack_int n, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * du2, const lapack_int * ipiv, float anorm, float* rcond, lapack_complex_float * work);
lapack_int LAPACKE_zgtcon_work(char norm, lapack_int n, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * du2, const lapack_int * ipiv, double anorm, double* rcond, lapack_complex_double * work);
lapack_int LAPACKE_sgtrfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* dl, const float* d, const float* du, const float* dlf, const float* df, const float* duf, const float* du2, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgtrfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* dl, const double* d, const double* du, const double* dlf, const double* df, const double* duf, const double* du2, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgtrfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * dlf, const lapack_complex_float * df, const lapack_complex_float * duf, const lapack_complex_float * du2, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgtrfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * dlf, const lapack_complex_double * df, const lapack_complex_double * duf, const lapack_complex_double * du2, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgtsv_work(int matrix_order, lapack_int n, lapack_int nrhs, float* dl, float* d, float* du, float* b, lapack_int ldb);
lapack_int LAPACKE_dgtsv_work(int matrix_order, lapack_int n, lapack_int nrhs, double* dl, double* d, double* du, double* b, lapack_int ldb);
lapack_int LAPACKE_cgtsv_work(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_float * dl, lapack_complex_float * d, lapack_complex_float * du, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgtsv_work(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_double * dl, lapack_complex_double * d, lapack_complex_double * du, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sgtsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const float* dl, const float* d, const float* du, float* dlf, float* df, float* duf, float* du2, lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgtsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const double* dl, const double* d, const double* du, double* dlf, double* df, double* duf, double* du2, lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgtsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, lapack_complex_float * dlf, lapack_complex_float * df, lapack_complex_float * duf, lapack_complex_float * du2, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgtsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, lapack_complex_double * dlf, lapack_complex_double * df, lapack_complex_double * duf, lapack_complex_double * du2, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgttrf_work(lapack_int n, float* dl, float* d, float* du, float* du2, lapack_int * ipiv);
lapack_int LAPACKE_dgttrf_work(lapack_int n, double* dl, double* d, double* du, double* du2, lapack_int * ipiv);
lapack_int LAPACKE_cgttrf_work(lapack_int n, lapack_complex_float * dl, lapack_complex_float * d, lapack_complex_float * du, lapack_complex_float * du2, lapack_int * ipiv);
lapack_int LAPACKE_zgttrf_work(lapack_int n, lapack_complex_double * dl, lapack_complex_double * d, lapack_complex_double * du, lapack_complex_double * du2, lapack_int * ipiv);
lapack_int LAPACKE_sgttrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* dl, const float* d, const float* du, const float* du2, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgttrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* dl, const double* d, const double* du, const double* du2, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgttrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * du2, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgttrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * du2, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chbev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhbev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chbevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zhbevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_chbevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_zhbevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_chbgst_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * bb, lapack_int ldbb, lapack_complex_float * x, lapack_int ldx, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhbgst_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * bb, lapack_int ldbb, lapack_complex_double * x, lapack_int ldx, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chbgv_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * bb, lapack_int ldbb, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhbgv_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * bb, lapack_int ldbb, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chbgvd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * bb, lapack_int ldbb, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zhbgvd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * bb, lapack_int ldbb, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_chbgvx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * bb, lapack_int ldbb, lapack_complex_float * q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_zhbgvx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * bb, lapack_int ldbb, lapack_complex_double * q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_chbtrd_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, float* d, float* e, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * work);
lapack_int LAPACKE_zhbtrd_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, double* d, double* e, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * work);
lapack_int LAPACKE_checon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, float anorm, float* rcond, lapack_complex_float * work);
lapack_int LAPACKE_zhecon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, double anorm, double* rcond, lapack_complex_double * work);
lapack_int LAPACKE_cheequb_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax, lapack_complex_float * work);
lapack_int LAPACKE_zheequb_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax, lapack_complex_double * work);
lapack_int LAPACKE_cheev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float* w, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zheev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double* w, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_cheevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float* w, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zheevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double* w, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_cheevr_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * isuppz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zheevr_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * isuppz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_cheevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_zheevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_chegst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhegst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chegv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* w, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zhegv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* w, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_chegvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* w, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zhegvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* w, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_chegvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_zhegvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_cherfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zherfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_cherfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const float* s, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zherfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const double* s, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chesv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zhesv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_chesvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zhesvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_chesvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhesvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chetrd_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float* d, float* e, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zhetrd_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double* d, double* e, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_chetrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zhetrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_chetri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work);
lapack_int LAPACKE_zhetri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work);
lapack_int LAPACKE_chetrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhetrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chfrk_work(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, float alpha, const lapack_complex_float * a, lapack_int lda, float beta, lapack_complex_float * c);
lapack_int LAPACKE_zhfrk_work(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, double alpha, const lapack_complex_double * a, lapack_int lda, double beta, lapack_complex_double * c);
lapack_int LAPACKE_shgeqz_work(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, float* h, lapack_int ldh, float* t, lapack_int ldt, float* alphar, float* alphai, float* beta, float* q, lapack_int ldq, float* z, lapack_int ldz, float* work, lapack_int lwork);
lapack_int LAPACKE_dhgeqz_work(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, double* h, lapack_int ldh, double* t, lapack_int ldt, double* alphar, double* alphai, double* beta, double* q, lapack_int ldq, double* z, lapack_int ldz, double* work, lapack_int lwork);
lapack_int LAPACKE_chgeqz_work(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * h, lapack_int ldh, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zhgeqz_work(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * h, lapack_int ldh, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_chpcon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, const lapack_int * ipiv, float anorm, float* rcond, lapack_complex_float * work);
lapack_int LAPACKE_zhpcon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, const lapack_int * ipiv, double anorm, double* rcond, lapack_complex_double * work);
lapack_int LAPACKE_chpev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhpev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chpevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zhpevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_chpevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * ap, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_zhpevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * ap, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_chpgst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_float * ap, const lapack_complex_float * bp);
lapack_int LAPACKE_zhpgst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_double * ap, const lapack_complex_double * bp);
lapack_int LAPACKE_chpgv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, lapack_complex_float * bp, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhpgv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, lapack_complex_double * bp, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chpgvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, lapack_complex_float * bp, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zhpgvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, lapack_complex_double * bp, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_chpgvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * ap, lapack_complex_float * bp, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_zhpgvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * ap, lapack_complex_double * bp, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_chprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chpsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhpsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chpsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * afp, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhpsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * afp, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chptrd_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, float* d, float* e, lapack_complex_float * tau);
lapack_int LAPACKE_zhptrd_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, double* d, double* e, lapack_complex_double * tau);
lapack_int LAPACKE_chptrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, lapack_int * ipiv);
lapack_int LAPACKE_zhptrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, lapack_int * ipiv);
lapack_int LAPACKE_chptri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * work);
lapack_int LAPACKE_zhptri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * work);
lapack_int LAPACKE_chptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_shsein_work(int matrix_order, char job, char eigsrc, char initv, lapack_logical * select, lapack_int n, const float* h, lapack_int ldh, float* wr, const float* wi, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, float* work, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_dhsein_work(int matrix_order, char job, char eigsrc, char initv, lapack_logical * select, lapack_int n, const double* h, lapack_int ldh, double* wr, const double* wi, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, double* work, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_chsein_work(int matrix_order, char job, char eigsrc, char initv, const lapack_logical * select, lapack_int n, const lapack_complex_float * h, lapack_int ldh, lapack_complex_float * w, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_complex_float * work, float* rwork, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_zhsein_work(int matrix_order, char job, char eigsrc, char initv, const lapack_logical * select, lapack_int n, const lapack_complex_double * h, lapack_int ldh, lapack_complex_double * w, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_complex_double * work, double* rwork, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_shseqr_work(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, float* h, lapack_int ldh, float* wr, float* wi, float* z, lapack_int ldz, float* work, lapack_int lwork);
lapack_int LAPACKE_dhseqr_work(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, double* h, lapack_int ldh, double* wr, double* wi, double* z, lapack_int ldz, double* work, lapack_int lwork);
lapack_int LAPACKE_chseqr_work(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * h, lapack_int ldh, lapack_complex_float * w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zhseqr_work(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * h, lapack_int ldh, lapack_complex_double * w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_clacgv_work(lapack_int n, lapack_complex_float * x, lapack_int incx);
lapack_int LAPACKE_zlacgv_work(lapack_int n, lapack_complex_double * x, lapack_int incx);
lapack_int LAPACKE_slacpy_work(int matrix_order, char uplo, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dlacpy_work(int matrix_order, char uplo, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_clacpy_work(int matrix_order, char uplo, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zlacpy_work(int matrix_order, char uplo, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_zlag2c_work(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_float * sa, lapack_int ldsa);
lapack_int LAPACKE_slag2d_work(int matrix_order, lapack_int m, lapack_int n, const float* sa, lapack_int ldsa, double* a, lapack_int lda);
lapack_int LAPACKE_dlag2s_work(int matrix_order, lapack_int m, lapack_int n, const double* a, lapack_int lda, float* sa, lapack_int ldsa);
lapack_int LAPACKE_clag2z_work(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_float * sa, lapack_int ldsa, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_slagge_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* d, float* a, lapack_int lda, lapack_int * iseed, float* work);
lapack_int LAPACKE_dlagge_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* d, double* a, lapack_int lda, lapack_int * iseed, double* work);
lapack_int LAPACKE_clagge_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* d, lapack_complex_float * a, lapack_int lda, lapack_int * iseed, lapack_complex_float * work);
lapack_int LAPACKE_zlagge_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* d, lapack_complex_double * a, lapack_int lda, lapack_int * iseed, lapack_complex_double * work);
lapack_int LAPACKE_claghe_work(int matrix_order, lapack_int n, lapack_int k, const float* d, lapack_complex_float * a, lapack_int lda, lapack_int * iseed, lapack_complex_float * work);
lapack_int LAPACKE_zlaghe_work(int matrix_order, lapack_int n, lapack_int k, const double* d, lapack_complex_double * a, lapack_int lda, lapack_int * iseed, lapack_complex_double * work);
lapack_int LAPACKE_slagsy_work(int matrix_order, lapack_int n, lapack_int k, const float* d, float* a, lapack_int lda, lapack_int * iseed, float* work);
lapack_int LAPACKE_dlagsy_work(int matrix_order, lapack_int n, lapack_int k, const double* d, double* a, lapack_int lda, lapack_int * iseed, double* work);
lapack_int LAPACKE_clagsy_work(int matrix_order, lapack_int n, lapack_int k, const float* d, lapack_complex_float * a, lapack_int lda, lapack_int * iseed, lapack_complex_float * work);
lapack_int LAPACKE_zlagsy_work(int matrix_order, lapack_int n, lapack_int k, const double* d, lapack_complex_double * a, lapack_int lda, lapack_int * iseed, lapack_complex_double * work);
lapack_int LAPACKE_slapmr_work(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, float* x, lapack_int ldx, lapack_int * k);
lapack_int LAPACKE_dlapmr_work(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, double* x, lapack_int ldx, lapack_int * k);
lapack_int LAPACKE_clapmr_work(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, lapack_complex_float * x, lapack_int ldx, lapack_int * k);
lapack_int LAPACKE_zlapmr_work(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, lapack_complex_double * x, lapack_int ldx, lapack_int * k);
lapack_int LAPACKE_slartgp_work(float f, float g, float* cs, float* sn, float* r);
lapack_int LAPACKE_dlartgp_work(double f, double g, double* cs, double* sn, double* r);
lapack_int LAPACKE_slartgs_work(float x, float y, float sigma, float* cs, float* sn);
lapack_int LAPACKE_dlartgs_work(double x, double y, double sigma, double* cs, double* sn);
float LAPACKE_slapy2_work(float x, float y);
double LAPACKE_dlapy2_work(double x, double y);
float LAPACKE_slapy3_work(float x, float y, float z);
double LAPACKE_dlapy3_work(double x, double y, double z);
float LAPACKE_slamch_work(char cmach);
double LAPACKE_dlamch_work(char cmach);
float LAPACKE_slange_work(int matrix_order, char norm, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* work);
double LAPACKE_dlange_work(int matrix_order, char norm, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* work);
float LAPACKE_clange_work(int matrix_order, char norm, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* work);
double LAPACKE_zlange_work(int matrix_order, char norm, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* work);
float LAPACKE_clanhe_work(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* work);
double LAPACKE_zlanhe_work(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* work);
float LAPACKE_slansy_work(int matrix_order, char norm, char uplo, lapack_int n, const float* a, lapack_int lda, float* work);
double LAPACKE_dlansy_work(int matrix_order, char norm, char uplo, lapack_int n, const double* a, lapack_int lda, double* work);
float LAPACKE_clansy_work(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* work);
double LAPACKE_zlansy_work(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* work);
float LAPACKE_slantr_work(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* work);
double LAPACKE_dlantr_work(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* work);
float LAPACKE_clantr_work(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* work);
double LAPACKE_zlantr_work(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* work);
lapack_int LAPACKE_slarfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* c, lapack_int ldc, float* work, lapack_int ldwork);
lapack_int LAPACKE_dlarfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* c, lapack_int ldc, double* work, lapack_int ldwork);
lapack_int LAPACKE_clarfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int ldwork);
lapack_int LAPACKE_zlarfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int ldwork);
lapack_int LAPACKE_slarfg_work(lapack_int n, float* alpha, float* x, lapack_int incx, float* tau);
lapack_int LAPACKE_dlarfg_work(lapack_int n, double* alpha, double* x, lapack_int incx, double* tau);
lapack_int LAPACKE_clarfg_work(lapack_int n, lapack_complex_float * alpha, lapack_complex_float * x, lapack_int incx, lapack_complex_float * tau);
lapack_int LAPACKE_zlarfg_work(lapack_int n, lapack_complex_double * alpha, lapack_complex_double * x, lapack_int incx, lapack_complex_double * tau);
lapack_int LAPACKE_slarft_work(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const float* v, lapack_int ldv, const float* tau, float* t, lapack_int ldt);
lapack_int LAPACKE_dlarft_work(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const double* v, lapack_int ldv, const double* tau, double* t, lapack_int ldt);
lapack_int LAPACKE_clarft_work(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * tau, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_zlarft_work(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * tau, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_slarfx_work(int matrix_order, char side, lapack_int m, lapack_int n, const float* v, float tau, float* c, lapack_int ldc, float* work);
lapack_int LAPACKE_dlarfx_work(int matrix_order, char side, lapack_int m, lapack_int n, const double* v, double tau, double* c, lapack_int ldc, double* work);
lapack_int LAPACKE_clarfx_work(int matrix_order, char side, lapack_int m, lapack_int n, const lapack_complex_float * v, lapack_complex_float tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work);
lapack_int LAPACKE_zlarfx_work(int matrix_order, char side, lapack_int m, lapack_int n, const lapack_complex_double * v, lapack_complex_double tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work);
lapack_int LAPACKE_slarnv_work(lapack_int idist, lapack_int * iseed, lapack_int n, float* x);
lapack_int LAPACKE_dlarnv_work(lapack_int idist, lapack_int * iseed, lapack_int n, double* x);
lapack_int LAPACKE_clarnv_work(lapack_int idist, lapack_int * iseed, lapack_int n, lapack_complex_float * x);
lapack_int LAPACKE_zlarnv_work(lapack_int idist, lapack_int * iseed, lapack_int n, lapack_complex_double * x);
lapack_int LAPACKE_slaset_work(int matrix_order, char uplo, lapack_int m, lapack_int n, float alpha, float beta, float* a, lapack_int lda);
lapack_int LAPACKE_dlaset_work(int matrix_order, char uplo, lapack_int m, lapack_int n, double alpha, double beta, double* a, lapack_int lda);
lapack_int LAPACKE_claset_work(int matrix_order, char uplo, lapack_int m, lapack_int n, lapack_complex_float alpha, lapack_complex_float beta, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zlaset_work(int matrix_order, char uplo, lapack_int m, lapack_int n, lapack_complex_double alpha, lapack_complex_double beta, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_slasrt_work(char id, lapack_int n, float* d);
lapack_int LAPACKE_dlasrt_work(char id, lapack_int n, double* d);
lapack_int LAPACKE_slaswp_work(int matrix_order, lapack_int n, float* a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_dlaswp_work(int matrix_order, lapack_int n, double* a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_claswp_work(int matrix_order, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_zlaswp_work(int matrix_order, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_slatms_work(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, float* d, lapack_int mode, float cond, float dmax, lapack_int kl, lapack_int ku, char pack, float* a, lapack_int lda, float* work);
lapack_int LAPACKE_dlatms_work(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, double* d, lapack_int mode, double cond, double dmax, lapack_int kl, lapack_int ku, char pack, double* a, lapack_int lda, double* work);
lapack_int LAPACKE_clatms_work(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, float* d, lapack_int mode, float cond, float dmax, lapack_int kl, lapack_int ku, char pack, lapack_complex_float * a, lapack_int lda, lapack_complex_float * work);
lapack_int LAPACKE_zlatms_work(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, double* d, lapack_int mode, double cond, double dmax, lapack_int kl, lapack_int ku, char pack, lapack_complex_double * a, lapack_int lda, lapack_complex_double * work);
lapack_int LAPACKE_slauum_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dlauum_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_clauum_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zlauum_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_sopgtr_work(int matrix_order, char uplo, lapack_int n, const float* ap, const float* tau, float* q, lapack_int ldq, float* work);
lapack_int LAPACKE_dopgtr_work(int matrix_order, char uplo, lapack_int n, const double* ap, const double* tau, double* q, lapack_int ldq, double* work);
lapack_int LAPACKE_sopmtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const float* ap, const float* tau, float* c, lapack_int ldc, float* work);
lapack_int LAPACKE_dopmtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const double* ap, const double* tau, double* c, lapack_int ldc, double* work);
lapack_int LAPACKE_sorgbr_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dorgbr_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_sorghr_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, float* a, lapack_int lda, const float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dorghr_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, double* a, lapack_int lda, const double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_sorglq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dorglq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_sorgql_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dorgql_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_sorgqr_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dorgqr_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_sorgrq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dorgrq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_sorgtr_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dorgtr_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_sormbr_work(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormbr_work(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_sormhr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormhr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_sormlq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormlq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_sormql_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormql_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_sormqr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormqr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_sormrq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormrq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_sormrz_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormrz_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_sormtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_spbcon_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const float* ab, lapack_int ldab, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dpbcon_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const double* ab, lapack_int ldab, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_cpbcon_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_float * ab, lapack_int ldab, float anorm, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zpbcon_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_double * ab, lapack_int ldab, double anorm, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_spbequ_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const float* ab, lapack_int ldab, float* s, float* scond, float* amax);
lapack_int LAPACKE_dpbequ_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const double* ab, lapack_int ldab, double* s, double* scond, double* amax);
lapack_int LAPACKE_cpbequ_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_float * ab, lapack_int ldab, float* s, float* scond, float* amax);
lapack_int LAPACKE_zpbequ_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_double * ab, lapack_int ldab, double* s, double* scond, double* amax);
lapack_int LAPACKE_spbrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, const float* afb, lapack_int ldafb, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dpbrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, const double* afb, lapack_int ldafb, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cpbrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * afb, lapack_int ldafb, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zpbrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * afb, lapack_int ldafb, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_spbstf_work(int matrix_order, char uplo, lapack_int n, lapack_int kb, float* bb, lapack_int ldbb);
lapack_int LAPACKE_dpbstf_work(int matrix_order, char uplo, lapack_int n, lapack_int kb, double* bb, lapack_int ldbb);
lapack_int LAPACKE_cpbstf_work(int matrix_order, char uplo, lapack_int n, lapack_int kb, lapack_complex_float * bb, lapack_int ldbb);
lapack_int LAPACKE_zpbstf_work(int matrix_order, char uplo, lapack_int n, lapack_int kb, lapack_complex_double * bb, lapack_int ldbb);
lapack_int LAPACKE_spbsv_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, float* ab, lapack_int ldab, float* b, lapack_int ldb);
lapack_int LAPACKE_dpbsv_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, double* ab, lapack_int ldab, double* b, lapack_int ldb);
lapack_int LAPACKE_cpbsv_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpbsv_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spbsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, float* ab, lapack_int ldab, float* afb, lapack_int ldafb, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dpbsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, double* ab, lapack_int ldab, double* afb, lapack_int ldafb, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cpbsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * afb, lapack_int ldafb, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zpbsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * afb, lapack_int ldafb, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_spbtrf_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab);
lapack_int LAPACKE_dpbtrf_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab);
lapack_int LAPACKE_cpbtrf_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab);
lapack_int LAPACKE_zpbtrf_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab);
lapack_int LAPACKE_spbtrs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, float* b, lapack_int ldb);
lapack_int LAPACKE_dpbtrs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, double* b, lapack_int ldb);
lapack_int LAPACKE_cpbtrs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpbtrs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spftrf_work(int matrix_order, char transr, char uplo, lapack_int n, float* a);
lapack_int LAPACKE_dpftrf_work(int matrix_order, char transr, char uplo, lapack_int n, double* a);
lapack_int LAPACKE_cpftrf_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_float * a);
lapack_int LAPACKE_zpftrf_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_double * a);
lapack_int LAPACKE_spftri_work(int matrix_order, char transr, char uplo, lapack_int n, float* a);
lapack_int LAPACKE_dpftri_work(int matrix_order, char transr, char uplo, lapack_int n, double* a);
lapack_int LAPACKE_cpftri_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_float * a);
lapack_int LAPACKE_zpftri_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_double * a);
lapack_int LAPACKE_spftrs_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const float* a, float* b, lapack_int ldb);
lapack_int LAPACKE_dpftrs_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const double* a, double* b, lapack_int ldb);
lapack_int LAPACKE_cpftrs_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpftrs_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spocon_work(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dpocon_work(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_cpocon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float anorm, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zpocon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double anorm, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_spoequ_work(int matrix_order, lapack_int n, const float* a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_dpoequ_work(int matrix_order, lapack_int n, const double* a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_cpoequ_work(int matrix_order, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_zpoequ_work(int matrix_order, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_spoequb_work(int matrix_order, lapack_int n, const float* a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_dpoequb_work(int matrix_order, lapack_int n, const double* a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_cpoequb_work(int matrix_order, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_zpoequb_work(int matrix_order, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_sporfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dporfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cporfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zporfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sporfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const float* s, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dporfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const double* s, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_cporfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const float* s, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zporfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const double* s, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sposv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dposv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_cposv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zposv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_dsposv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, double* x, lapack_int ldx, double* work, float* swork, lapack_int * iter);
lapack_int LAPACKE_zcposv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, lapack_complex_double * work, lapack_complex_float * swork, double* rwork, lapack_int * iter);
lapack_int LAPACKE_sposvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dposvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cposvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zposvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sposvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dposvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_cposvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zposvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_spotrf_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dpotrf_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_cpotrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zpotrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_spotri_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dpotri_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_cpotri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zpotri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_spotrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dpotrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_cpotrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpotrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sppcon_work(int matrix_order, char uplo, lapack_int n, const float* ap, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dppcon_work(int matrix_order, char uplo, lapack_int n, const double* ap, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_cppcon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, float anorm, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zppcon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, double anorm, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sppequ_work(int matrix_order, char uplo, lapack_int n, const float* ap, float* s, float* scond, float* amax);
lapack_int LAPACKE_dppequ_work(int matrix_order, char uplo, lapack_int n, const double* ap, double* s, double* scond, double* amax);
lapack_int LAPACKE_cppequ_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, float* s, float* scond, float* amax);
lapack_int LAPACKE_zppequ_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, double* s, double* scond, double* amax);
lapack_int LAPACKE_spprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, const float* afp, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dpprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, const double* afp, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cpprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zpprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sppsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* ap, float* b, lapack_int ldb);
lapack_int LAPACKE_dppsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* ap, double* b, lapack_int ldb);
lapack_int LAPACKE_cppsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zppsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sppsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* ap, float* afp, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dppsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* ap, double* afp, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cppsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_complex_float * afp, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zppsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_complex_double * afp, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_spptrf_work(int matrix_order, char uplo, lapack_int n, float* ap);
lapack_int LAPACKE_dpptrf_work(int matrix_order, char uplo, lapack_int n, double* ap);
lapack_int LAPACKE_cpptrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap);
lapack_int LAPACKE_zpptrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap);
lapack_int LAPACKE_spptri_work(int matrix_order, char uplo, lapack_int n, float* ap);
lapack_int LAPACKE_dpptri_work(int matrix_order, char uplo, lapack_int n, double* ap);
lapack_int LAPACKE_cpptri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap);
lapack_int LAPACKE_zpptri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap);
lapack_int LAPACKE_spptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, float* b, lapack_int ldb);
lapack_int LAPACKE_dpptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, double* b, lapack_int ldb);
lapack_int LAPACKE_cpptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spstrf_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, lapack_int * piv, lapack_int * rank, float tol, float* work);
lapack_int LAPACKE_dpstrf_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, lapack_int * piv, lapack_int * rank, double tol, double* work);
lapack_int LAPACKE_cpstrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * piv, lapack_int * rank, float tol, float* work);
lapack_int LAPACKE_zpstrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * piv, lapack_int * rank, double tol, double* work);
lapack_int LAPACKE_sptcon_work(lapack_int n, const float* d, const float* e, float anorm, float* rcond, float* work);
lapack_int LAPACKE_dptcon_work(lapack_int n, const double* d, const double* e, double anorm, double* rcond, double* work);
lapack_int LAPACKE_cptcon_work(lapack_int n, const float* d, const lapack_complex_float * e, float anorm, float* rcond, float* work);
lapack_int LAPACKE_zptcon_work(lapack_int n, const double* d, const lapack_complex_double * e, double anorm, double* rcond, double* work);
lapack_int LAPACKE_spteqr_work(int matrix_order, char compz, lapack_int n, float* d, float* e, float* z, lapack_int ldz, float* work);
lapack_int LAPACKE_dpteqr_work(int matrix_order, char compz, lapack_int n, double* d, double* e, double* z, lapack_int ldz, double* work);
lapack_int LAPACKE_cpteqr_work(int matrix_order, char compz, lapack_int n, float* d, float* e, lapack_complex_float * z, lapack_int ldz, float* work);
lapack_int LAPACKE_zpteqr_work(int matrix_order, char compz, lapack_int n, double* d, double* e, lapack_complex_double * z, lapack_int ldz, double* work);
lapack_int LAPACKE_sptrfs_work(int matrix_order, lapack_int n, lapack_int nrhs, const float* d, const float* e, const float* df, const float* ef, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work);
lapack_int LAPACKE_dptrfs_work(int matrix_order, lapack_int n, lapack_int nrhs, const double* d, const double* e, const double* df, const double* ef, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work);
lapack_int LAPACKE_cptrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* d, const lapack_complex_float * e, const float* df, const lapack_complex_float * ef, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zptrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* d, const lapack_complex_double * e, const double* df, const lapack_complex_double * ef, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sptsv_work(int matrix_order, lapack_int n, lapack_int nrhs, float* d, float* e, float* b, lapack_int ldb);
lapack_int LAPACKE_dptsv_work(int matrix_order, lapack_int n, lapack_int nrhs, double* d, double* e, double* b, lapack_int ldb);
lapack_int LAPACKE_cptsv_work(int matrix_order, lapack_int n, lapack_int nrhs, float* d, lapack_complex_float * e, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zptsv_work(int matrix_order, lapack_int n, lapack_int nrhs, double* d, lapack_complex_double * e, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sptsvx_work(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const float* d, const float* e, float* df, float* ef, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work);
lapack_int LAPACKE_dptsvx_work(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const double* d, const double* e, double* df, double* ef, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work);
lapack_int LAPACKE_cptsvx_work(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const float* d, const lapack_complex_float * e, float* df, lapack_complex_float * ef, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zptsvx_work(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const double* d, const lapack_complex_double * e, double* df, lapack_complex_double * ef, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_spttrf_work(lapack_int n, float* d, float* e);
lapack_int LAPACKE_dpttrf_work(lapack_int n, double* d, double* e);
lapack_int LAPACKE_cpttrf_work(lapack_int n, float* d, lapack_complex_float * e);
lapack_int LAPACKE_zpttrf_work(lapack_int n, double* d, lapack_complex_double * e);
lapack_int LAPACKE_spttrs_work(int matrix_order, lapack_int n, lapack_int nrhs, const float* d, const float* e, float* b, lapack_int ldb);
lapack_int LAPACKE_dpttrs_work(int matrix_order, lapack_int n, lapack_int nrhs, const double* d, const double* e, double* b, lapack_int ldb);
lapack_int LAPACKE_cpttrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* d, const lapack_complex_float * e, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpttrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* d, const lapack_complex_double * e, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_ssbev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* w, float* z, lapack_int ldz, float* work);
lapack_int LAPACKE_dsbev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* w, double* z, lapack_int ldz, double* work);
lapack_int LAPACKE_ssbevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* w, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dsbevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* w, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ssbevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, float* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_dsbevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, double* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_ssbgst_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, const float* bb, lapack_int ldbb, float* x, lapack_int ldx, float* work);
lapack_int LAPACKE_dsbgst_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, const double* bb, lapack_int ldbb, double* x, lapack_int ldx, double* work);
lapack_int LAPACKE_ssbgv_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, float* bb, lapack_int ldbb, float* w, float* z, lapack_int ldz, float* work);
lapack_int LAPACKE_dsbgv_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, double* bb, lapack_int ldbb, double* w, double* z, lapack_int ldz, double* work);
lapack_int LAPACKE_ssbgvd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, float* bb, lapack_int ldbb, float* w, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dsbgvd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, double* bb, lapack_int ldbb, double* w, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ssbgvx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, float* bb, lapack_int ldbb, float* q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, float* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_dsbgvx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, double* bb, lapack_int ldbb, double* q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, double* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_ssbtrd_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* d, float* e, float* q, lapack_int ldq, float* work);
lapack_int LAPACKE_dsbtrd_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* d, double* e, double* q, lapack_int ldq, double* work);
lapack_int LAPACKE_ssfrk_work(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, float alpha, const float* a, lapack_int lda, float beta, float* c);
lapack_int LAPACKE_dsfrk_work(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, double alpha, const double* a, lapack_int lda, double beta, double* c);
lapack_int LAPACKE_sspcon_work(int matrix_order, char uplo, lapack_int n, const float* ap, const lapack_int * ipiv, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dspcon_work(int matrix_order, char uplo, lapack_int n, const double* ap, const lapack_int * ipiv, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_cspcon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, const lapack_int * ipiv, float anorm, float* rcond, lapack_complex_float * work);
lapack_int LAPACKE_zspcon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, const lapack_int * ipiv, double anorm, double* rcond, lapack_complex_double * work);
lapack_int LAPACKE_sspev_work(int matrix_order, char jobz, char uplo, lapack_int n, float* ap, float* w, float* z, lapack_int ldz, float* work);
lapack_int LAPACKE_dspev_work(int matrix_order, char jobz, char uplo, lapack_int n, double* ap, double* w, double* z, lapack_int ldz, double* work);
lapack_int LAPACKE_sspevd_work(int matrix_order, char jobz, char uplo, lapack_int n, float* ap, float* w, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dspevd_work(int matrix_order, char jobz, char uplo, lapack_int n, double* ap, double* w, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_sspevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, float* ap, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, float* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_dspevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, double* ap, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, double* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_sspgst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, float* ap, const float* bp);
lapack_int LAPACKE_dspgst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, double* ap, const double* bp);
lapack_int LAPACKE_sspgv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* ap, float* bp, float* w, float* z, lapack_int ldz, float* work);
lapack_int LAPACKE_dspgv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* ap, double* bp, double* w, double* z, lapack_int ldz, double* work);
lapack_int LAPACKE_sspgvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* ap, float* bp, float* w, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dspgvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* ap, double* bp, double* w, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_sspgvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, float* ap, float* bp, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, float* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_dspgvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, double* ap, double* bp, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, double* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_ssprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, const float* afp, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dsprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, const double* afp, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_csprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zsprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sspsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* ap, lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dspsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* ap, lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cspsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zspsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sspsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const float* ap, float* afp, lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dspsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const double* ap, double* afp, lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cspsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * afp, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zspsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * afp, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_ssptrd_work(int matrix_order, char uplo, lapack_int n, float* ap, float* d, float* e, float* tau);
lapack_int LAPACKE_dsptrd_work(int matrix_order, char uplo, lapack_int n, double* ap, double* d, double* e, double* tau);
lapack_int LAPACKE_ssptrf_work(int matrix_order, char uplo, lapack_int n, float* ap, lapack_int * ipiv);
lapack_int LAPACKE_dsptrf_work(int matrix_order, char uplo, lapack_int n, double* ap, lapack_int * ipiv);
lapack_int LAPACKE_csptrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, lapack_int * ipiv);
lapack_int LAPACKE_zsptrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, lapack_int * ipiv);
lapack_int LAPACKE_ssptri_work(int matrix_order, char uplo, lapack_int n, float* ap, const lapack_int * ipiv, float* work);
lapack_int LAPACKE_dsptri_work(int matrix_order, char uplo, lapack_int n, double* ap, const lapack_int * ipiv, double* work);
lapack_int LAPACKE_csptri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * work);
lapack_int LAPACKE_zsptri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * work);
lapack_int LAPACKE_ssptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dsptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_csptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zsptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sstebz_work(char range, char order, lapack_int n, float vl, float vu, lapack_int il, lapack_int iu, float abstol, const float* d, const float* e, lapack_int * m, lapack_int * nsplit, float* w, lapack_int * iblock, lapack_int * isplit, float* work, lapack_int * iwork);
lapack_int LAPACKE_dstebz_work(char range, char order, lapack_int n, double vl, double vu, lapack_int il, lapack_int iu, double abstol, const double* d, const double* e, lapack_int * m, lapack_int * nsplit, double* w, lapack_int * iblock, lapack_int * isplit, double* work, lapack_int * iwork);
lapack_int LAPACKE_sstedc_work(int matrix_order, char compz, lapack_int n, float* d, float* e, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dstedc_work(int matrix_order, char compz, lapack_int n, double* d, double* e, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_cstedc_work(int matrix_order, char compz, lapack_int n, float* d, float* e, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zstedc_work(int matrix_order, char compz, lapack_int n, double* d, double* e, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_sstegr_work(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * isuppz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dstegr_work(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * isuppz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_cstegr_work(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * isuppz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zstegr_work(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * isuppz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_sstein_work(int matrix_order, lapack_int n, const float* d, const float* e, lapack_int m, const float* w, const lapack_int * iblock, const lapack_int * isplit, float* z, lapack_int ldz, float* work, lapack_int * iwork, lapack_int * ifailv);
lapack_int LAPACKE_dstein_work(int matrix_order, lapack_int n, const double* d, const double* e, lapack_int m, const double* w, const lapack_int * iblock, const lapack_int * isplit, double* z, lapack_int ldz, double* work, lapack_int * iwork, lapack_int * ifailv);
lapack_int LAPACKE_cstein_work(int matrix_order, lapack_int n, const float* d, const float* e, lapack_int m, const float* w, const lapack_int * iblock, const lapack_int * isplit, lapack_complex_float * z, lapack_int ldz, float* work, lapack_int * iwork, lapack_int * ifailv);
lapack_int LAPACKE_zstein_work(int matrix_order, lapack_int n, const double* d, const double* e, lapack_int m, const double* w, const lapack_int * iblock, const lapack_int * isplit, lapack_complex_double * z, lapack_int ldz, double* work, lapack_int * iwork, lapack_int * ifailv);
lapack_int LAPACKE_sstemr_work(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dstemr_work(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_cstemr_work(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zstemr_work(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ssteqr_work(int matrix_order, char compz, lapack_int n, float* d, float* e, float* z, lapack_int ldz, float* work);
lapack_int LAPACKE_dsteqr_work(int matrix_order, char compz, lapack_int n, double* d, double* e, double* z, lapack_int ldz, double* work);
lapack_int LAPACKE_csteqr_work(int matrix_order, char compz, lapack_int n, float* d, float* e, lapack_complex_float * z, lapack_int ldz, float* work);
lapack_int LAPACKE_zsteqr_work(int matrix_order, char compz, lapack_int n, double* d, double* e, lapack_complex_double * z, lapack_int ldz, double* work);
lapack_int LAPACKE_ssterf_work(lapack_int n, float* d, float* e);
lapack_int LAPACKE_dsterf_work(lapack_int n, double* d, double* e);
lapack_int LAPACKE_sstev_work(int matrix_order, char jobz, lapack_int n, float* d, float* e, float* z, lapack_int ldz, float* work);
lapack_int LAPACKE_dstev_work(int matrix_order, char jobz, lapack_int n, double* d, double* e, double* z, lapack_int ldz, double* work);
lapack_int LAPACKE_sstevd_work(int matrix_order, char jobz, lapack_int n, float* d, float* e, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dstevd_work(int matrix_order, char jobz, lapack_int n, double* d, double* e, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_sstevr_work(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * isuppz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dstevr_work(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * isuppz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_sstevx_work(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, float* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_dstevx_work(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, double* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_ssycon_work(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, const lapack_int * ipiv, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dsycon_work(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, const lapack_int * ipiv, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_csycon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, float anorm, float* rcond, lapack_complex_float * work);
lapack_int LAPACKE_zsycon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, double anorm, double* rcond, lapack_complex_double * work);
lapack_int LAPACKE_ssyequb_work(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, float* s, float* scond, float* amax, float* work);
lapack_int LAPACKE_dsyequb_work(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, double* s, double* scond, double* amax, double* work);
lapack_int LAPACKE_csyequb_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax, lapack_complex_float * work);
lapack_int LAPACKE_zsyequb_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax, lapack_complex_double * work);
lapack_int LAPACKE_ssyev_work(int matrix_order, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* w, float* work, lapack_int lwork);
lapack_int LAPACKE_dsyev_work(int matrix_order, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* w, double* work, lapack_int lwork);
lapack_int LAPACKE_ssyevd_work(int matrix_order, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* w, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dsyevd_work(int matrix_order, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* w, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ssyevr_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, float* a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * isuppz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dsyevr_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, double* a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * isuppz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ssyevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, float* a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_dsyevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, double* a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_ssygst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, float* a, lapack_int lda, const float* b, lapack_int ldb);
lapack_int LAPACKE_dsygst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, double* a, lapack_int lda, const double* b, lapack_int ldb);
lapack_int LAPACKE_ssygv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* w, float* work, lapack_int lwork);
lapack_int LAPACKE_dsygv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* w, double* work, lapack_int lwork);
lapack_int LAPACKE_ssygvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* w, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dsygvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* w, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ssygvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_dsygvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_ssyrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dsyrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_csyrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zsyrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_ssyrfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* s, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dsyrfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* s, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_csyrfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const float* s, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zsyrfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const double* s, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_ssysv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, lapack_int * ipiv, float* b, lapack_int ldb, float* work, lapack_int lwork);
lapack_int LAPACKE_dsysv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, lapack_int * ipiv, double* b, lapack_int ldb, double* work, lapack_int lwork);
lapack_int LAPACKE_csysv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zsysv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_ssysvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dsysvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_csysvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zsysvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_ssysvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dsysvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_csysvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zsysvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_ssytrd_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, float* d, float* e, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dsytrd_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, double* d, double* e, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_ssytrf_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, lapack_int * ipiv, float* work, lapack_int lwork);
lapack_int LAPACKE_dsytrf_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, lapack_int * ipiv, double* work, lapack_int lwork);
lapack_int LAPACKE_csytrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zsytrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_ssytri_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv, float* work);
lapack_int LAPACKE_dsytri_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv, double* work);
lapack_int LAPACKE_csytri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work);
lapack_int LAPACKE_zsytri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work);
lapack_int LAPACKE_ssytrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dsytrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_csytrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zsytrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stbcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const float* ab, lapack_int ldab, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dtbcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const double* ab, lapack_int ldab, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_ctbcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const lapack_complex_float * ab, lapack_int ldab, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztbcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const lapack_complex_double * ab, lapack_int ldab, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_stbrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, const float* b, lapack_int ldb, const float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dtbrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, const double* b, lapack_int ldb, const double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_ctbrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztbrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_stbtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, float* b, lapack_int ldb);
lapack_int LAPACKE_dtbtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, double* b, lapack_int ldb);
lapack_int LAPACKE_ctbtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztbtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stfsm_work(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, float alpha, const float* a, float* b, lapack_int ldb);
lapack_int LAPACKE_dtfsm_work(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, double alpha, const double* a, double* b, lapack_int ldb);
lapack_int LAPACKE_ctfsm_work(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, lapack_complex_float alpha, const lapack_complex_float * a, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztfsm_work(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, lapack_complex_double alpha, const lapack_complex_double * a, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stftri_work(int matrix_order, char transr, char uplo, char diag, lapack_int n, float* a);
lapack_int LAPACKE_dtftri_work(int matrix_order, char transr, char uplo, char diag, lapack_int n, double* a);
lapack_int LAPACKE_ctftri_work(int matrix_order, char transr, char uplo, char diag, lapack_int n, lapack_complex_float * a);
lapack_int LAPACKE_ztftri_work(int matrix_order, char transr, char uplo, char diag, lapack_int n, lapack_complex_double * a);
lapack_int LAPACKE_stfttp_work(int matrix_order, char transr, char uplo, lapack_int n, const float* arf, float* ap);
lapack_int LAPACKE_dtfttp_work(int matrix_order, char transr, char uplo, lapack_int n, const double* arf, double* ap);
lapack_int LAPACKE_ctfttp_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * arf, lapack_complex_float * ap);
lapack_int LAPACKE_ztfttp_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * arf, lapack_complex_double * ap);
lapack_int LAPACKE_stfttr_work(int matrix_order, char transr, char uplo, lapack_int n, const float* arf, float* a, lapack_int lda);
lapack_int LAPACKE_dtfttr_work(int matrix_order, char transr, char uplo, lapack_int n, const double* arf, double* a, lapack_int lda);
lapack_int LAPACKE_ctfttr_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * arf, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_ztfttr_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * arf, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_stgevc_work(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const float* s, lapack_int lds, const float* p, lapack_int ldp, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, float* work);
lapack_int LAPACKE_dtgevc_work(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const double* s, lapack_int lds, const double* p, lapack_int ldp, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, double* work);
lapack_int LAPACKE_ctgevc_work(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_float * s, lapack_int lds, const lapack_complex_float * p, lapack_int ldp, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztgevc_work(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_double * s, lapack_int lds, const lapack_complex_double * p, lapack_int ldp, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_stgexc_work(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* q, lapack_int ldq, float* z, lapack_int ldz, lapack_int * ifst, lapack_int * ilst, float* work, lapack_int lwork);
lapack_int LAPACKE_dtgexc_work(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* q, lapack_int ldq, double* z, lapack_int ldz, lapack_int * ifst, lapack_int * ilst, double* work, lapack_int lwork);
lapack_int LAPACKE_ctgexc_work(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_ztgexc_work(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_stgsen_work(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* alphar, float* alphai, float* beta, float* q, lapack_int ldq, float* z, lapack_int ldz, lapack_int * m, float* pl, float* pr, float* dif, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dtgsen_work(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* alphar, double* alphai, double* beta, double* q, lapack_int ldq, double* z, lapack_int ldz, lapack_int * m, double* pl, double* pr, double* dif, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ctgsen_work(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz, lapack_int * m, float* pl, float* pr, float* dif, lapack_complex_float * work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ztgsen_work(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz, lapack_int * m, double* pl, double* pr, double* dif, lapack_complex_double * work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_stgsja_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, float* a, lapack_int lda, float* b, lapack_int ldb, float tola, float tolb, float* alpha, float* beta, float* u, lapack_int ldu, float* v, lapack_int ldv, float* q, lapack_int ldq, float* work, lapack_int * ncycle);
lapack_int LAPACKE_dtgsja_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, double* a, lapack_int lda, double* b, lapack_int ldb, double tola, double tolb, double* alpha, double* beta, double* u, lapack_int ldu, double* v, lapack_int ldv, double* q, lapack_int ldq, double* work, lapack_int * ncycle);
lapack_int LAPACKE_ctgsja_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float tola, float tolb, float* alpha, float* beta, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * v, lapack_int ldv, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * work, lapack_int * ncycle);
lapack_int LAPACKE_ztgsja_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double tola, double tolb, double* alpha, double* beta, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * v, lapack_int ldv, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * work, lapack_int * ncycle);
lapack_int LAPACKE_stgsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const float* a, lapack_int lda, const float* b, lapack_int ldb, const float* vl, lapack_int ldvl, const float* vr, lapack_int ldvr, float* s, float* dif, lapack_int mm, lapack_int * m, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dtgsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const double* a, lapack_int lda, const double* b, lapack_int ldb, const double* vl, lapack_int ldvl, const double* vr, lapack_int ldvr, double* s, double* dif, lapack_int mm, lapack_int * m, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_ctgsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * vl, lapack_int ldvl, const lapack_complex_float * vr, lapack_int ldvr, float* s, float* dif, lapack_int mm, lapack_int * m, lapack_complex_float * work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_ztgsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * vl, lapack_int ldvl, const lapack_complex_double * vr, lapack_int ldvr, double* s, double* dif, lapack_int mm, lapack_int * m, lapack_complex_double * work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_stgsyl_work(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const float* a, lapack_int lda, const float* b, lapack_int ldb, float* c, lapack_int ldc, const float* d, lapack_int ldd, const float* e, lapack_int lde, float* f, lapack_int ldf, float* scale, float* dif, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dtgsyl_work(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const double* a, lapack_int lda, const double* b, lapack_int ldb, double* c, lapack_int ldc, const double* d, lapack_int ldd, const double* e, lapack_int lde, double* f, lapack_int ldf, double* scale, double* dif, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_ctgsyl_work(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * c, lapack_int ldc, const lapack_complex_float * d, lapack_int ldd, const lapack_complex_float * e, lapack_int lde, lapack_complex_float * f, lapack_int ldf, float* scale, float* dif, lapack_complex_float * work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_ztgsyl_work(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * c, lapack_int ldc, const lapack_complex_double * d, lapack_int ldd, const lapack_complex_double * e, lapack_int lde, lapack_complex_double * f, lapack_int ldf, double* scale, double* dif, lapack_complex_double * work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_stpcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const float* ap, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dtpcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const double* ap, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_ctpcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_float * ap, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztpcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_double * ap, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_stprfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* ap, const float* b, lapack_int ldb, const float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dtprfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* ap, const double* b, lapack_int ldb, const double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_ctprfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztprfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_stptri_work(int matrix_order, char uplo, char diag, lapack_int n, float* ap);
lapack_int LAPACKE_dtptri_work(int matrix_order, char uplo, char diag, lapack_int n, double* ap);
lapack_int LAPACKE_ctptri_work(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_float * ap);
lapack_int LAPACKE_ztptri_work(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_double * ap);
lapack_int LAPACKE_stptrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* ap, float* b, lapack_int ldb);
lapack_int LAPACKE_dtptrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* ap, double* b, lapack_int ldb);
lapack_int LAPACKE_ctptrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztptrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stpttf_work(int matrix_order, char transr, char uplo, lapack_int n, const float* ap, float* arf);
lapack_int LAPACKE_dtpttf_work(int matrix_order, char transr, char uplo, lapack_int n, const double* ap, double* arf);
lapack_int LAPACKE_ctpttf_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * ap, lapack_complex_float * arf);
lapack_int LAPACKE_ztpttf_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * ap, lapack_complex_double * arf);
lapack_int LAPACKE_stpttr_work(int matrix_order, char uplo, lapack_int n, const float* ap, float* a, lapack_int lda);
lapack_int LAPACKE_dtpttr_work(int matrix_order, char uplo, lapack_int n, const double* ap, double* a, lapack_int lda);
lapack_int LAPACKE_ctpttr_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_ztpttr_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_strcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const float* a, lapack_int lda, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dtrcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const double* a, lapack_int lda, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_ctrcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztrcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_strevc_work(int matrix_order, char side, char howmny, lapack_logical * select, lapack_int n, const float* t, lapack_int ldt, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, float* work);
lapack_int LAPACKE_dtrevc_work(int matrix_order, char side, char howmny, lapack_logical * select, lapack_int n, const double* t, lapack_int ldt, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, double* work);
lapack_int LAPACKE_ctrevc_work(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztrevc_work(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_strexc_work(int matrix_order, char compq, lapack_int n, float* t, lapack_int ldt, float* q, lapack_int ldq, lapack_int * ifst, lapack_int * ilst, float* work);
lapack_int LAPACKE_dtrexc_work(int matrix_order, char compq, lapack_int n, double* t, lapack_int ldt, double* q, lapack_int ldq, lapack_int * ifst, lapack_int * ilst, double* work);
lapack_int LAPACKE_ctrexc_work(int matrix_order, char compq, lapack_int n, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * q, lapack_int ldq, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_ztrexc_work(int matrix_order, char compq, lapack_int n, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * q, lapack_int ldq, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_strrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* b, lapack_int ldb, const float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dtrrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* b, lapack_int ldb, const double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_ctrrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztrrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_strsen_work(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, float* t, lapack_int ldt, float* q, lapack_int ldq, float* wr, float* wi, lapack_int * m, float* s, float* sep, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dtrsen_work(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, double* t, lapack_int ldt, double* q, lapack_int ldq, double* wr, double* wi, lapack_int * m, double* s, double* sep, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ctrsen_work(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * w, lapack_int * m, float* s, float* sep, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_ztrsen_work(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * w, lapack_int * m, double* s, double* sep, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_strsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const float* t, lapack_int ldt, const float* vl, lapack_int ldvl, const float* vr, lapack_int ldvr, float* s, float* sep, lapack_int mm, lapack_int * m, float* work, lapack_int ldwork, lapack_int * iwork);
lapack_int LAPACKE_dtrsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const double* t, lapack_int ldt, const double* vl, lapack_int ldvl, const double* vr, lapack_int ldvr, double* s, double* sep, lapack_int mm, lapack_int * m, double* work, lapack_int ldwork, lapack_int * iwork);
lapack_int LAPACKE_ctrsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_float * t, lapack_int ldt, const lapack_complex_float * vl, lapack_int ldvl, const lapack_complex_float * vr, lapack_int ldvr, float* s, float* sep, lapack_int mm, lapack_int * m, lapack_complex_float * work, lapack_int ldwork, float* rwork);
lapack_int LAPACKE_ztrsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_double * t, lapack_int ldt, const lapack_complex_double * vl, lapack_int ldvl, const lapack_complex_double * vr, lapack_int ldvr, double* s, double* sep, lapack_int mm, lapack_int * m, lapack_complex_double * work, lapack_int ldwork, double* rwork);
lapack_int LAPACKE_strsyl_work(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const float* a, lapack_int lda, const float* b, lapack_int ldb, float* c, lapack_int ldc, float* scale);
lapack_int LAPACKE_dtrsyl_work(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const double* a, lapack_int lda, const double* b, lapack_int ldb, double* c, lapack_int ldc, double* scale);
lapack_int LAPACKE_ctrsyl_work(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * c, lapack_int ldc, float* scale);
lapack_int LAPACKE_ztrsyl_work(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * c, lapack_int ldc, double* scale);
lapack_int LAPACKE_strtri_work(int matrix_order, char uplo, char diag, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dtrtri_work(int matrix_order, char uplo, char diag, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_ctrtri_work(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_ztrtri_work(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_strtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dtrtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_ctrtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztrtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_strttf_work(int matrix_order, char transr, char uplo, lapack_int n, const float* a, lapack_int lda, float* arf);
lapack_int LAPACKE_dtrttf_work(int matrix_order, char transr, char uplo, lapack_int n, const double* a, lapack_int lda, double* arf);
lapack_int LAPACKE_ctrttf_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * arf);
lapack_int LAPACKE_ztrttf_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * arf);
lapack_int LAPACKE_strttp_work(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, float* ap);
lapack_int LAPACKE_dtrttp_work(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, double* ap);
lapack_int LAPACKE_ctrttp_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * ap);
lapack_int LAPACKE_ztrttp_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * ap);
lapack_int LAPACKE_stzrzf_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dtzrzf_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_ctzrzf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_ztzrzf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cungbr_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zungbr_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunghr_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunghr_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunglq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunglq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cungql_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zungql_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cungqr_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zungqr_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cungrq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zungrq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cungtr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zungtr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmbr_work(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmbr_work(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmhr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmhr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmlq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmlq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmql_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmql_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmqr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmqr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmrq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmrq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmrz_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmrz_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cupgtr_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, const lapack_complex_float * tau, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * work);
lapack_int LAPACKE_zupgtr_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, const lapack_complex_double * tau, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * work);
lapack_int LAPACKE_cupmtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_float * ap, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work);
lapack_int LAPACKE_zupmtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_double * ap, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work);
lapack_int LAPACKE_claghe(int matrix_order, lapack_int n, lapack_int k, const float* d, lapack_complex_float * a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_zlaghe(int matrix_order, lapack_int n, lapack_int k, const double* d, lapack_complex_double * a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_slagsy(int matrix_order, lapack_int n, lapack_int k, const float* d, float* a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_dlagsy(int matrix_order, lapack_int n, lapack_int k, const double* d, double* a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_clagsy(int matrix_order, lapack_int n, lapack_int k, const float* d, lapack_complex_float * a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_zlagsy(int matrix_order, lapack_int n, lapack_int k, const double* d, lapack_complex_double * a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_slapmr(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, float* x, lapack_int ldx, lapack_int * k);
lapack_int LAPACKE_dlapmr(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, double* x, lapack_int ldx, lapack_int * k);
lapack_int LAPACKE_clapmr(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, lapack_complex_float * x, lapack_int ldx, lapack_int * k);
lapack_int LAPACKE_zlapmr(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, lapack_complex_double * x, lapack_int ldx, lapack_int * k);
float LAPACKE_slapy2(float x, float y);
double LAPACKE_dlapy2(double x, double y);
float LAPACKE_slapy3(float x, float y, float z);
double LAPACKE_dlapy3(double x, double y, double z);
lapack_int LAPACKE_slartgp(float f, float g, float* cs, float* sn, float* r);
lapack_int LAPACKE_dlartgp(double f, double g, double* cs, double* sn, double* r);
lapack_int LAPACKE_slartgs(float x, float y, float sigma, float* cs, float* sn);
lapack_int LAPACKE_dlartgs(double x, double y, double sigma, double* cs, double* sn);
0
lapack_int LAPACKE_cbbcsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, float* theta, float* phi, lapack_complex_float * u1, lapack_int ldu1, lapack_complex_float * u2, lapack_int ldu2, lapack_complex_float * v1t, lapack_int ldv1t, lapack_complex_float * v2t, lapack_int ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e);
lapack_int LAPACKE_cbbcsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, float* theta, float* phi, lapack_complex_float * u1, lapack_int ldu1, lapack_complex_float * u2, lapack_int ldu2, lapack_complex_float * v1t, lapack_int ldv1t, lapack_complex_float * v2t, lapack_int ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e, float* rwork, lapack_int lrwork);
lapack_int LAPACKE_cheswapr(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_cheswapr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_chetri2(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_chetri2_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_chetri2x(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_int nb);
lapack_int LAPACKE_chetri2x_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int nb);
lapack_int LAPACKE_chetrs2(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_chetrs2_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * work);
lapack_int LAPACKE_csyconv(int matrix_order, char uplo, char way, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_csyconv_work(int matrix_order, char uplo, char way, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work);
lapack_int LAPACKE_csyswapr(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_csyswapr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_csytri2(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_csytri2_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_csytri2x(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_int nb);
lapack_int LAPACKE_csytri2x_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int nb);
lapack_int LAPACKE_csytrs2(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_csytrs2_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * work);
lapack_int LAPACKE_cunbdb(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_float * x11, lapack_int ldx11, lapack_complex_float * x12, lapack_int ldx12, lapack_complex_float * x21, lapack_int ldx21, lapack_complex_float * x22, lapack_int ldx22, float* theta, float* phi, lapack_complex_float * taup1, lapack_complex_float * taup2, lapack_complex_float * tauq1, lapack_complex_float * tauq2);
lapack_int LAPACKE_cunbdb_work(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_float * x11, lapack_int ldx11, lapack_complex_float * x12, lapack_int ldx12, lapack_complex_float * x21, lapack_int ldx21, lapack_complex_float * x22, lapack_int ldx22, float* theta, float* phi, lapack_complex_float * taup1, lapack_complex_float * taup2, lapack_complex_float * tauq1, lapack_complex_float * tauq2, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_cuncsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_float * x11, lapack_int ldx11, lapack_complex_float * x12, lapack_int ldx12, lapack_complex_float * x21, lapack_int ldx21, lapack_complex_float * x22, lapack_int ldx22, float* theta, lapack_complex_float * u1, lapack_int ldu1, lapack_complex_float * u2, lapack_int ldu2, lapack_complex_float * v1t, lapack_int ldv1t, lapack_complex_float * v2t, lapack_int ldv2t);
lapack_int LAPACKE_cuncsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_float * x11, lapack_int ldx11, lapack_complex_float * x12, lapack_int ldx12, lapack_complex_float * x21, lapack_int ldx21, lapack_complex_float * x22, lapack_int ldx22, float* theta, lapack_complex_float * u1, lapack_int ldu1, lapack_complex_float * u2, lapack_int ldu2, lapack_complex_float * v1t, lapack_int ldv1t, lapack_complex_float * v2t, lapack_int ldv2t, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork);
lapack_int LAPACKE_dbbcsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, double* theta, double* phi, double* u1, lapack_int ldu1, double* u2, lapack_int ldu2, double* v1t, lapack_int ldv1t, double* v2t, lapack_int ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e);
lapack_int LAPACKE_dbbcsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, double* theta, double* phi, double* u1, lapack_int ldu1, double* u2, lapack_int ldu2, double* v1t, lapack_int ldv1t, double* v2t, lapack_int ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e, double* work, lapack_int lwork);
lapack_int LAPACKE_dorbdb(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, double* x11, lapack_int ldx11, double* x12, lapack_int ldx12, double* x21, lapack_int ldx21, double* x22, lapack_int ldx22, double* theta, double* phi, double* taup1, double* taup2, double* tauq1, double* tauq2);
lapack_int LAPACKE_dorbdb_work(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, double* x11, lapack_int ldx11, double* x12, lapack_int ldx12, double* x21, lapack_int ldx21, double* x22, lapack_int ldx22, double* theta, double* phi, double* taup1, double* taup2, double* tauq1, double* tauq2, double* work, lapack_int lwork);
lapack_int LAPACKE_dorcsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, double* x11, lapack_int ldx11, double* x12, lapack_int ldx12, double* x21, lapack_int ldx21, double* x22, lapack_int ldx22, double* theta, double* u1, lapack_int ldu1, double* u2, lapack_int ldu2, double* v1t, lapack_int ldv1t, double* v2t, lapack_int ldv2t);
lapack_int LAPACKE_dorcsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, double* x11, lapack_int ldx11, double* x12, lapack_int ldx12, double* x21, lapack_int ldx21, double* x22, lapack_int ldx22, double* theta, double* u1, lapack_int ldu1, double* u2, lapack_int ldu2, double* v1t, lapack_int ldv1t, double* v2t, lapack_int ldv2t, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dsyconv(int matrix_order, char uplo, char way, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_dsyconv_work(int matrix_order, char uplo, char way, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv, double* work);
lapack_int LAPACKE_dsyswapr(int matrix_order, char uplo, lapack_int n, double* a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_dsyswapr_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_dsytri2(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_dsytri2_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_dsytri2x(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv, lapack_int nb);
lapack_int LAPACKE_dsytri2x_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv, double* work, lapack_int nb);
lapack_int LAPACKE_dsytrs2(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_dsytrs2_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const lapack_int * ipiv, double* b, lapack_int ldb, double* work);
lapack_int LAPACKE_sbbcsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, float* theta, float* phi, float* u1, lapack_int ldu1, float* u2, lapack_int ldu2, float* v1t, lapack_int ldv1t, float* v2t, lapack_int ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e);
lapack_int LAPACKE_sbbcsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, float* theta, float* phi, float* u1, lapack_int ldu1, float* u2, lapack_int ldu2, float* v1t, lapack_int ldv1t, float* v2t, lapack_int ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e, float* work, lapack_int lwork);
lapack_int LAPACKE_sorbdb(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, float* x11, lapack_int ldx11, float* x12, lapack_int ldx12, float* x21, lapack_int ldx21, float* x22, lapack_int ldx22, float* theta, float* phi, float* taup1, float* taup2, float* tauq1, float* tauq2);
lapack_int LAPACKE_sorbdb_work(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, float* x11, lapack_int ldx11, float* x12, lapack_int ldx12, float* x21, lapack_int ldx21, float* x22, lapack_int ldx22, float* theta, float* phi, float* taup1, float* taup2, float* tauq1, float* tauq2, float* work, lapack_int lwork);
lapack_int LAPACKE_sorcsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, float* x11, lapack_int ldx11, float* x12, lapack_int ldx12, float* x21, lapack_int ldx21, float* x22, lapack_int ldx22, float* theta, float* u1, lapack_int ldu1, float* u2, lapack_int ldu2, float* v1t, lapack_int ldv1t, float* v2t, lapack_int ldv2t);
lapack_int LAPACKE_sorcsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, float* x11, lapack_int ldx11, float* x12, lapack_int ldx12, float* x21, lapack_int ldx21, float* x22, lapack_int ldx22, float* theta, float* u1, lapack_int ldu1, float* u2, lapack_int ldu2, float* v1t, lapack_int ldv1t, float* v2t, lapack_int ldv2t, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_ssyconv(int matrix_order, char uplo, char way, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_ssyconv_work(int matrix_order, char uplo, char way, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv, float* work);
lapack_int LAPACKE_ssyswapr(int matrix_order, char uplo, lapack_int n, float* a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_ssyswapr_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_ssytri2(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_ssytri2_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_ssytri2x(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv, lapack_int nb);
lapack_int LAPACKE_ssytri2x_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv, float* work, lapack_int nb);
lapack_int LAPACKE_ssytrs2(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_ssytrs2_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const lapack_int * ipiv, float* b, lapack_int ldb, float* work);
lapack_int LAPACKE_zbbcsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, double* theta, double* phi, lapack_complex_double * u1, lapack_int ldu1, lapack_complex_double * u2, lapack_int ldu2, lapack_complex_double * v1t, lapack_int ldv1t, lapack_complex_double * v2t, lapack_int ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e);
lapack_int LAPACKE_zbbcsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, double* theta, double* phi, lapack_complex_double * u1, lapack_int ldu1, lapack_complex_double * u2, lapack_int ldu2, lapack_complex_double * v1t, lapack_int ldv1t, lapack_complex_double * v2t, lapack_int ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e, double* rwork, lapack_int lrwork);
lapack_int LAPACKE_zheswapr(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_zheswapr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_zhetri2(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_zhetri2_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_zhetri2x(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_int nb);
lapack_int LAPACKE_zhetri2x_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int nb);
lapack_int LAPACKE_zhetrs2(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_zhetrs2_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * work);
lapack_int LAPACKE_zsyconv(int matrix_order, char uplo, char way, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_zsyconv_work(int matrix_order, char uplo, char way, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work);
lapack_int LAPACKE_zsyswapr(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_zsyswapr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_zsytri2(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_zsytri2_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_zsytri2x(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_int nb);
lapack_int LAPACKE_zsytri2x_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int nb);
lapack_int LAPACKE_zsytrs2(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_zsytrs2_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * work);
lapack_int LAPACKE_zunbdb(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_double * x11, lapack_int ldx11, lapack_complex_double * x12, lapack_int ldx12, lapack_complex_double * x21, lapack_int ldx21, lapack_complex_double * x22, lapack_int ldx22, double* theta, double* phi, lapack_complex_double * taup1, lapack_complex_double * taup2, lapack_complex_double * tauq1, lapack_complex_double * tauq2);
lapack_int LAPACKE_zunbdb_work(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_double * x11, lapack_int ldx11, lapack_complex_double * x12, lapack_int ldx12, lapack_complex_double * x21, lapack_int ldx21, lapack_complex_double * x22, lapack_int ldx22, double* theta, double* phi, lapack_complex_double * taup1, lapack_complex_double * taup2, lapack_complex_double * tauq1, lapack_complex_double * tauq2, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_zuncsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_double * x11, lapack_int ldx11, lapack_complex_double * x12, lapack_int ldx12, lapack_complex_double * x21, lapack_int ldx21, lapack_complex_double * x22, lapack_int ldx22, double* theta, lapack_complex_double * u1, lapack_int ldu1, lapack_complex_double * u2, lapack_int ldu2, lapack_complex_double * v1t, lapack_int ldv1t, lapack_complex_double * v2t, lapack_int ldv2t);
lapack_int LAPACKE_zuncsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_double * x11, lapack_int ldx11, lapack_complex_double * x12, lapack_int ldx12, lapack_complex_double * x21, lapack_int ldx21, lapack_complex_double * x22, lapack_int ldx22, double* theta, lapack_complex_double * u1, lapack_int ldu1, lapack_complex_double * u2, lapack_int ldu2, lapack_complex_double * v1t, lapack_int ldv1t, lapack_complex_double * v2t, lapack_int ldv2t, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork);
0
lapack_int LAPACKE_sgemqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* c, lapack_int ldc);
lapack_int LAPACKE_dgemqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* c, lapack_int ldc);
lapack_int LAPACKE_cgemqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zgemqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_sgeqrt(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, float* a, lapack_int lda, float* t, lapack_int ldt);
lapack_int LAPACKE_dgeqrt(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, double* a, lapack_int lda, double* t, lapack_int ldt);
lapack_int LAPACKE_cgeqrt(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_zgeqrt(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, lapack_complex_double * a, lapack_int lda, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_sgeqrt2(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* t, lapack_int ldt);
lapack_int LAPACKE_dgeqrt2(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* t, lapack_int ldt);
lapack_int LAPACKE_cgeqrt2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_zgeqrt2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_sgeqrt3(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* t, lapack_int ldt);
lapack_int LAPACKE_dgeqrt3(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* t, lapack_int ldt);
lapack_int LAPACKE_cgeqrt3(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_zgeqrt3(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_stpmqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dtpmqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_ctpmqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztpmqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_dtpqrt(int matrix_order, lapack_int m, lapack_int n, lapack_int l, lapack_int nb, double* a, lapack_int lda, double* b, lapack_int ldb, double* t, lapack_int ldt);
lapack_int LAPACKE_ctpqrt(int matrix_order, lapack_int m, lapack_int n, lapack_int l, lapack_int nb, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_complex_float * b, lapack_int ldb, lapack_int ldt);
lapack_int LAPACKE_ztpqrt(int matrix_order, lapack_int m, lapack_int n, lapack_int l, lapack_int nb, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_stpqrt2(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* t, lapack_int ldt);
lapack_int LAPACKE_dtpqrt2(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* t, lapack_int ldt);
lapack_int LAPACKE_ctpqrt2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_ztpqrt2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_stprfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int myldwork);
lapack_int LAPACKE_dtprfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int myldwork);
lapack_int LAPACKE_ctprfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int myldwork);
lapack_int LAPACKE_ztprfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int myldwork);
lapack_int LAPACKE_sgemqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* c, lapack_int ldc, float* work);
lapack_int LAPACKE_dgemqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* c, lapack_int ldc, double* work);
lapack_int LAPACKE_cgemqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work);
lapack_int LAPACKE_zgemqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work);
lapack_int LAPACKE_sgeqrt_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, float* a, lapack_int lda, float* t, lapack_int ldt, float* work);
lapack_int LAPACKE_dgeqrt_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, double* a, lapack_int lda, double* t, lapack_int ldt, double* work);
lapack_int LAPACKE_cgeqrt_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * work);
lapack_int LAPACKE_zgeqrt_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, lapack_complex_double * a, lapack_int lda, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * work);
lapack_int LAPACKE_sgeqrt2_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* t, lapack_int ldt);
lapack_int LAPACKE_dgeqrt2_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* t, lapack_int ldt);
lapack_int LAPACKE_cgeqrt2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_zgeqrt2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_sgeqrt3_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* t, lapack_int ldt);
lapack_int LAPACKE_dgeqrt3_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* t, lapack_int ldt);
lapack_int LAPACKE_cgeqrt3_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_zgeqrt3_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_stpmqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* a, lapack_int lda, float* b, lapack_int ldb, float* work);
lapack_int LAPACKE_dtpmqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* a, lapack_int lda, double* b, lapack_int ldb, double* work);
lapack_int LAPACKE_ctpmqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * work);
lapack_int LAPACKE_ztpmqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * work);
lapack_int LAPACKE_dtpqrt_work(int matrix_order, lapack_int m, lapack_int n, lapack_int l, lapack_int nb, double* a, lapack_int lda, double* b, lapack_int ldb, double* t, lapack_int ldt, double* work);
lapack_int LAPACKE_ctpqrt_work(int matrix_order, lapack_int m, lapack_int n, lapack_int l, lapack_int nb, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_complex_float * b, lapack_int ldb, lapack_int ldt, lapack_complex_float * work);
lapack_int LAPACKE_ztpqrt_work(int matrix_order, lapack_int m, lapack_int n, lapack_int l, lapack_int nb, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * work);
lapack_int LAPACKE_stpqrt2_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* t, lapack_int ldt);
lapack_int LAPACKE_dtpqrt2_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* t, lapack_int ldt);
lapack_int LAPACKE_ctpqrt2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_ztpqrt2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_stprfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* a, lapack_int lda, float* b, lapack_int ldb, const float* mywork, lapack_int myldwork);
lapack_int LAPACKE_dtprfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* a, lapack_int lda, double* b, lapack_int ldb, const double* mywork, lapack_int myldwork);
lapack_int LAPACKE_ctprfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, const float* mywork, lapack_int myldwork);
lapack_int LAPACKE_ztprfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, const double* mywork, lapack_int myldwork);
X
lapack_int LAPACKE_csyr(int matrix_order, char uplo, lapack_int n, lapack_complex_float alpha, const lapack_complex_float * x, lapack_int incx, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zsyr(int matrix_order, char uplo, lapack_int n, lapack_complex_double alpha, const lapack_complex_double * x, lapack_int incx, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_csyr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float alpha, const lapack_complex_float * x, lapack_int incx, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zsyr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double alpha, const lapack_complex_double * x, lapack_int incx, lapack_complex_double * a, lapack_int lda);
void LAPACK_sgetrf(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_dgetrf(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_cgetrf(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_zgetrf(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_sgbtrf(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, float* ab, lapack_int * ldab, lapack_int * ipiv, lapack_int * info);
void LAPACK_dgbtrf(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, double* ab, lapack_int * ldab, lapack_int * ipiv, lapack_int * info);
void LAPACK_cgbtrf(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_complex_float * ab, lapack_int * ldab, lapack_int * ipiv, lapack_int * info);
void LAPACK_zgbtrf(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_complex_double * ab, lapack_int * ldab, lapack_int * ipiv, lapack_int * info);
void LAPACK_sgttrf(lapack_int * n, float* dl, float* d, float* du, float* du2, lapack_int * ipiv, lapack_int * info);
void LAPACK_dgttrf(lapack_int * n, double* dl, double* d, double* du, double* du2, lapack_int * ipiv, lapack_int * info);
void LAPACK_cgttrf(lapack_int * n, lapack_complex_float * dl, lapack_complex_float * d, lapack_complex_float * du, lapack_complex_float * du2, lapack_int * ipiv, lapack_int * info);
void LAPACK_zgttrf(lapack_int * n, lapack_complex_double * dl, lapack_complex_double * d, lapack_complex_double * du, lapack_complex_double * du2, lapack_int * ipiv, lapack_int * info);
void LAPACK_spotrf(char* uplo, lapack_int * n, float* a, lapack_int * lda, lapack_int * info);
void LAPACK_dpotrf(char* uplo, lapack_int * n, double* a, lapack_int * lda, lapack_int * info);
void LAPACK_cpotrf(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * info);
void LAPACK_zpotrf(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * info);
void LAPACK_dpstrf(char* uplo, lapack_int * n, double* a, lapack_int * lda, lapack_int * piv, lapack_int * rank, double* tol, double* work, lapack_int * info);
void LAPACK_spstrf(char* uplo, lapack_int * n, float* a, lapack_int * lda, lapack_int * piv, lapack_int * rank, float* tol, float* work, lapack_int * info);
void LAPACK_zpstrf(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * piv, lapack_int * rank, double* tol, double* work, lapack_int * info);
void LAPACK_cpstrf(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * piv, lapack_int * rank, float* tol, float* work, lapack_int * info);
void LAPACK_dpftrf(char* transr, char* uplo, lapack_int * n, double* a, lapack_int * info);
void LAPACK_spftrf(char* transr, char* uplo, lapack_int * n, float* a, lapack_int * info);
void LAPACK_zpftrf(char* transr, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * info);
void LAPACK_cpftrf(char* transr, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * info);
void LAPACK_spptrf(char* uplo, lapack_int * n, float* ap, lapack_int * info);
void LAPACK_dpptrf(char* uplo, lapack_int * n, double* ap, lapack_int * info);
void LAPACK_cpptrf(char* uplo, lapack_int * n, lapack_complex_float * ap, lapack_int * info);
void LAPACK_zpptrf(char* uplo, lapack_int * n, lapack_complex_double * ap, lapack_int * info);
void LAPACK_spbtrf(char* uplo, lapack_int * n, lapack_int * kd, float* ab, lapack_int * ldab, lapack_int * info);
void LAPACK_dpbtrf(char* uplo, lapack_int * n, lapack_int * kd, double* ab, lapack_int * ldab, lapack_int * info);
void LAPACK_cpbtrf(char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_float * ab, lapack_int * ldab, lapack_int * info);
void LAPACK_zpbtrf(char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_double * ab, lapack_int * ldab, lapack_int * info);
void LAPACK_spttrf(lapack_int * n, float* d, float* e, lapack_int * info);
void LAPACK_dpttrf(lapack_int * n, double* d, double* e, lapack_int * info);
void LAPACK_cpttrf(lapack_int * n, float* d, lapack_complex_float * e, lapack_int * info);
void LAPACK_zpttrf(lapack_int * n, double* d, lapack_complex_double * e, lapack_int * info);
void LAPACK_ssytrf(char* uplo, lapack_int * n, float* a, lapack_int * lda, lapack_int * ipiv, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dsytrf(char* uplo, lapack_int * n, double* a, lapack_int * lda, lapack_int * ipiv, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_csytrf(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zsytrf(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_chetrf(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zhetrf(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_ssptrf(char* uplo, lapack_int * n, float* ap, lapack_int * ipiv, lapack_int * info);
void LAPACK_dsptrf(char* uplo, lapack_int * n, double* ap, lapack_int * ipiv, lapack_int * info);
void LAPACK_csptrf(char* uplo, lapack_int * n, lapack_complex_float * ap, lapack_int * ipiv, lapack_int * info);
void LAPACK_zsptrf(char* uplo, lapack_int * n, lapack_complex_double * ap, lapack_int * ipiv, lapack_int * info);
void LAPACK_chptrf(char* uplo, lapack_int * n, lapack_complex_float * ap, lapack_int * ipiv, lapack_int * info);
void LAPACK_zhptrf(char* uplo, lapack_int * n, lapack_complex_double * ap, lapack_int * ipiv, lapack_int * info);
void LAPACK_sgetrs(char* trans, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dgetrs(char* trans, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cgetrs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zgetrs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sgbtrs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const float* ab, lapack_int * ldab, const lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dgbtrs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const double* ab, lapack_int * ldab, const lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cgbtrs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const lapack_complex_float * ab, lapack_int * ldab, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zgbtrs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const lapack_complex_double * ab, lapack_int * ldab, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sgttrs(char* trans, lapack_int * n, lapack_int * nrhs, const float* dl, const float* d, const float* du, const float* du2, const lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dgttrs(char* trans, lapack_int * n, lapack_int * nrhs, const double* dl, const double* d, const double* du, const double* du2, const lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cgttrs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * du2, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zgttrs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * du2, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_spotrs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dpotrs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cpotrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zpotrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_dpftrs(char* transr, char* uplo, lapack_int * n, lapack_int * nrhs, const double* a, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_spftrs(char* transr, char* uplo, lapack_int * n, lapack_int * nrhs, const float* a, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_zpftrs(char* transr, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_cpftrs(char* transr, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_spptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* ap, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dpptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* ap, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cpptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zpptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_spbtrs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const float* ab, lapack_int * ldab, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dpbtrs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const double* ab, lapack_int * ldab, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cpbtrs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zpbtrs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_spttrs(lapack_int * n, lapack_int * nrhs, const float* d, const float* e, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dpttrs(lapack_int * n, lapack_int * nrhs, const double* d, const double* e, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cpttrs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* d, const lapack_complex_float * e, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zpttrs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* d, const lapack_complex_double * e, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_ssytrs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dsytrs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_csytrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zsytrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_chetrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zhetrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_ssptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* ap, const lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dsptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* ap, const lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_csptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zsptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_chptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zhptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_strtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dtrtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_ctrtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_ztrtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_stptrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const float* ap, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dtptrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const double* ap, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_ctptrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_ztptrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_stbtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const float* ab, lapack_int * ldab, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dtbtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const double* ab, lapack_int * ldab, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_ctbtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_ztbtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sgecon(char* norm, lapack_int * n, const float* a, lapack_int * lda, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgecon(char* norm, lapack_int * n, const double* a, lapack_int * lda, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgecon(char* norm, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* anorm, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgecon(char* norm, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* anorm, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sgbcon(char* norm, lapack_int * n, lapack_int * kl, lapack_int * ku, const float* ab, lapack_int * ldab, const lapack_int * ipiv, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgbcon(char* norm, lapack_int * n, lapack_int * kl, lapack_int * ku, const double* ab, lapack_int * ldab, const lapack_int * ipiv, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgbcon(char* norm, lapack_int * n, lapack_int * kl, lapack_int * ku, const lapack_complex_float * ab, lapack_int * ldab, const lapack_int * ipiv, float* anorm, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgbcon(char* norm, lapack_int * n, lapack_int * kl, lapack_int * ku, const lapack_complex_double * ab, lapack_int * ldab, const lapack_int * ipiv, double* anorm, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sgtcon(char* norm, lapack_int * n, const float* dl, const float* d, const float* du, const float* du2, const lapack_int * ipiv, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgtcon(char* norm, lapack_int * n, const double* dl, const double* d, const double* du, const double* du2, const lapack_int * ipiv, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgtcon(char* norm, lapack_int * n, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * du2, const lapack_int * ipiv, float* anorm, float* rcond, lapack_complex_float * work, lapack_int * info);
void LAPACK_zgtcon(char* norm, lapack_int * n, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * du2, const lapack_int * ipiv, double* anorm, double* rcond, lapack_complex_double * work, lapack_int * info);
void LAPACK_spocon(char* uplo, lapack_int * n, const float* a, lapack_int * lda, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dpocon(char* uplo, lapack_int * n, const double* a, lapack_int * lda, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cpocon(char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* anorm, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zpocon(char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* anorm, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sppcon(char* uplo, lapack_int * n, const float* ap, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dppcon(char* uplo, lapack_int * n, const double* ap, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cppcon(char* uplo, lapack_int * n, const lapack_complex_float * ap, float* anorm, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zppcon(char* uplo, lapack_int * n, const lapack_complex_double * ap, double* anorm, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_spbcon(char* uplo, lapack_int * n, lapack_int * kd, const float* ab, lapack_int * ldab, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dpbcon(char* uplo, lapack_int * n, lapack_int * kd, const double* ab, lapack_int * ldab, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cpbcon(char* uplo, lapack_int * n, lapack_int * kd, const lapack_complex_float * ab, lapack_int * ldab, float* anorm, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zpbcon(char* uplo, lapack_int * n, lapack_int * kd, const lapack_complex_double * ab, lapack_int * ldab, double* anorm, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sptcon(lapack_int * n, const float* d, const float* e, float* anorm, float* rcond, float* work, lapack_int * info);
void LAPACK_dptcon(lapack_int * n, const double* d, const double* e, double* anorm, double* rcond, double* work, lapack_int * info);
void LAPACK_cptcon(lapack_int * n, const float* d, const lapack_complex_float * e, float* anorm, float* rcond, float* work, lapack_int * info);
void LAPACK_zptcon(lapack_int * n, const double* d, const lapack_complex_double * e, double* anorm, double* rcond, double* work, lapack_int * info);
void LAPACK_ssycon(char* uplo, lapack_int * n, const float* a, lapack_int * lda, const lapack_int * ipiv, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dsycon(char* uplo, lapack_int * n, const double* a, lapack_int * lda, const lapack_int * ipiv, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_csycon(char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, float* anorm, float* rcond, lapack_complex_float * work, lapack_int * info);
void LAPACK_zsycon(char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, double* anorm, double* rcond, lapack_complex_double * work, lapack_int * info);
void LAPACK_checon(char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, float* anorm, float* rcond, lapack_complex_float * work, lapack_int * info);
void LAPACK_zhecon(char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, double* anorm, double* rcond, lapack_complex_double * work, lapack_int * info);
void LAPACK_sspcon(char* uplo, lapack_int * n, const float* ap, const lapack_int * ipiv, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dspcon(char* uplo, lapack_int * n, const double* ap, const lapack_int * ipiv, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cspcon(char* uplo, lapack_int * n, const lapack_complex_float * ap, const lapack_int * ipiv, float* anorm, float* rcond, lapack_complex_float * work, lapack_int * info);
void LAPACK_zspcon(char* uplo, lapack_int * n, const lapack_complex_double * ap, const lapack_int * ipiv, double* anorm, double* rcond, lapack_complex_double * work, lapack_int * info);
void LAPACK_chpcon(char* uplo, lapack_int * n, const lapack_complex_float * ap, const lapack_int * ipiv, float* anorm, float* rcond, lapack_complex_float * work, lapack_int * info);
void LAPACK_zhpcon(char* uplo, lapack_int * n, const lapack_complex_double * ap, const lapack_int * ipiv, double* anorm, double* rcond, lapack_complex_double * work, lapack_int * info);
void LAPACK_strcon(char* norm, char* uplo, char* diag, lapack_int * n, const float* a, lapack_int * lda, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dtrcon(char* norm, char* uplo, char* diag, lapack_int * n, const double* a, lapack_int * lda, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ctrcon(char* norm, char* uplo, char* diag, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztrcon(char* norm, char* uplo, char* diag, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_stpcon(char* norm, char* uplo, char* diag, lapack_int * n, const float* ap, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dtpcon(char* norm, char* uplo, char* diag, lapack_int * n, const double* ap, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ctpcon(char* norm, char* uplo, char* diag, lapack_int * n, const lapack_complex_float * ap, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztpcon(char* norm, char* uplo, char* diag, lapack_int * n, const lapack_complex_double * ap, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_stbcon(char* norm, char* uplo, char* diag, lapack_int * n, lapack_int * kd, const float* ab, lapack_int * ldab, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dtbcon(char* norm, char* uplo, char* diag, lapack_int * n, lapack_int * kd, const double* ab, lapack_int * ldab, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ctbcon(char* norm, char* uplo, char* diag, lapack_int * n, lapack_int * kd, const lapack_complex_float * ab, lapack_int * ldab, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztbcon(char* norm, char* uplo, char* diag, lapack_int * n, lapack_int * kd, const lapack_complex_double * ab, lapack_int * ldab, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sgerfs(char* trans, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const float* af, lapack_int * ldaf, const lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgerfs(char* trans, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const double* af, lapack_int * ldaf, const lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgerfs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgerfs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_dgerfsx(char* trans, char* equed, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const double* af, lapack_int * ldaf, const lapack_int * ipiv, const double* r, const double* c, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_sgerfsx(char* trans, char* equed, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const float* af, lapack_int * ldaf, const lapack_int * ipiv, const float* r, const float* c, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zgerfsx(char* trans, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const lapack_int * ipiv, const double* r, const double* c, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_cgerfsx(char* trans, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const lapack_int * ipiv, const float* r, const float* c, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_sgbrfs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const float* ab, lapack_int * ldab, const float* afb, lapack_int * ldafb, const lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgbrfs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const double* ab, lapack_int * ldab, const double* afb, lapack_int * ldafb, const lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgbrfs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const lapack_complex_float * ab, lapack_int * ldab, const lapack_complex_float * afb, lapack_int * ldafb, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgbrfs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const lapack_complex_double * ab, lapack_int * ldab, const lapack_complex_double * afb, lapack_int * ldafb, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_dgbrfsx(char* trans, char* equed, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const double* ab, lapack_int * ldab, const double* afb, lapack_int * ldafb, const lapack_int * ipiv, const double* r, const double* c, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_sgbrfsx(char* trans, char* equed, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const float* ab, lapack_int * ldab, const float* afb, lapack_int * ldafb, const lapack_int * ipiv, const float* r, const float* c, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zgbrfsx(char* trans, char* equed, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const lapack_complex_double * ab, lapack_int * ldab, const lapack_complex_double * afb, lapack_int * ldafb, const lapack_int * ipiv, const double* r, const double* c, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_cgbrfsx(char* trans, char* equed, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const lapack_complex_float * ab, lapack_int * ldab, const lapack_complex_float * afb, lapack_int * ldafb, const lapack_int * ipiv, const float* r, const float* c, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_sgtrfs(char* trans, lapack_int * n, lapack_int * nrhs, const float* dl, const float* d, const float* du, const float* dlf, const float* df, const float* duf, const float* du2, const lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgtrfs(char* trans, lapack_int * n, lapack_int * nrhs, const double* dl, const double* d, const double* du, const double* dlf, const double* df, const double* duf, const double* du2, const lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgtrfs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * dlf, const lapack_complex_float * df, const lapack_complex_float * duf, const lapack_complex_float * du2, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgtrfs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * dlf, const lapack_complex_double * df, const lapack_complex_double * duf, const lapack_complex_double * du2, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sporfs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const float* af, lapack_int * ldaf, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dporfs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const double* af, lapack_int * ldaf, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cporfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zporfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_dporfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const double* af, lapack_int * ldaf, const double* s, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_sporfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const float* af, lapack_int * ldaf, const float* s, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zporfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const double* s, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_cporfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const float* s, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_spprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* ap, const float* afp, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dpprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* ap, const double* afp, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cpprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zpprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_spbrfs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const float* ab, lapack_int * ldab, const float* afb, lapack_int * ldafb, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dpbrfs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const double* ab, lapack_int * ldab, const double* afb, lapack_int * ldafb, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cpbrfs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_float * ab, lapack_int * ldab, const lapack_complex_float * afb, lapack_int * ldafb, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zpbrfs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_double * ab, lapack_int * ldab, const lapack_complex_double * afb, lapack_int * ldafb, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sptrfs(lapack_int * n, lapack_int * nrhs, const float* d, const float* e, const float* df, const float* ef, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * info);
void LAPACK_dptrfs(lapack_int * n, lapack_int * nrhs, const double* d, const double* e, const double* df, const double* ef, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * info);
void LAPACK_cptrfs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* d, const lapack_complex_float * e, const float* df, const lapack_complex_float * ef, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zptrfs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* d, const lapack_complex_double * e, const double* df, const lapack_complex_double * ef, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_ssyrfs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const float* af, lapack_int * ldaf, const lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dsyrfs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const double* af, lapack_int * ldaf, const lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_csyrfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zsyrfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_dsyrfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const double* af, lapack_int * ldaf, const lapack_int * ipiv, const double* s, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ssyrfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const float* af, lapack_int * ldaf, const lapack_int * ipiv, const float* s, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zsyrfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const lapack_int * ipiv, const double* s, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_csyrfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const lapack_int * ipiv, const float* s, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_cherfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zherfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_zherfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const lapack_int * ipiv, const double* s, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_cherfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const lapack_int * ipiv, const float* s, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ssprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* ap, const float* afp, const lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dsprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* ap, const double* afp, const lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_csprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zsprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_chprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zhprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_strrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const float* b, lapack_int * ldb, const float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dtrrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const double* b, lapack_int * ldb, const double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ctrrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * b, lapack_int * ldb, const lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztrrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * b, lapack_int * ldb, const lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_stprfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const float* ap, const float* b, lapack_int * ldb, const float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dtprfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const double* ap, const double* b, lapack_int * ldb, const double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ctprfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, const lapack_complex_float * b, lapack_int * ldb, const lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztprfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, const lapack_complex_double * b, lapack_int * ldb, const lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_stbrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const float* ab, lapack_int * ldab, const float* b, lapack_int * ldb, const float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dtbrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const double* ab, lapack_int * ldab, const double* b, lapack_int * ldb, const double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ctbrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_float * ab, lapack_int * ldab, const lapack_complex_float * b, lapack_int * ldb, const lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztbrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_double * ab, lapack_int * ldab, const lapack_complex_double * b, lapack_int * ldb, const lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sgetri(lapack_int * n, float* a, lapack_int * lda, const lapack_int * ipiv, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgetri(lapack_int * n, double* a, lapack_int * lda, const lapack_int * ipiv, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgetri(lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgetri(lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_spotri(char* uplo, lapack_int * n, float* a, lapack_int * lda, lapack_int * info);
void LAPACK_dpotri(char* uplo, lapack_int * n, double* a, lapack_int * lda, lapack_int * info);
void LAPACK_cpotri(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * info);
void LAPACK_zpotri(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * info);
void LAPACK_dpftri(char* transr, char* uplo, lapack_int * n, double* a, lapack_int * info);
void LAPACK_spftri(char* transr, char* uplo, lapack_int * n, float* a, lapack_int * info);
void LAPACK_zpftri(char* transr, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * info);
void LAPACK_cpftri(char* transr, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * info);
void LAPACK_spptri(char* uplo, lapack_int * n, float* ap, lapack_int * info);
void LAPACK_dpptri(char* uplo, lapack_int * n, double* ap, lapack_int * info);
void LAPACK_cpptri(char* uplo, lapack_int * n, lapack_complex_float * ap, lapack_int * info);
void LAPACK_zpptri(char* uplo, lapack_int * n, lapack_complex_double * ap, lapack_int * info);
void LAPACK_ssytri(char* uplo, lapack_int * n, float* a, lapack_int * lda, const lapack_int * ipiv, float* work, lapack_int * info);
void LAPACK_dsytri(char* uplo, lapack_int * n, double* a, lapack_int * lda, const lapack_int * ipiv, double* work, lapack_int * info);
void LAPACK_csytri(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * info);
void LAPACK_zsytri(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * info);
void LAPACK_chetri(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * info);
void LAPACK_zhetri(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * info);
void LAPACK_ssptri(char* uplo, lapack_int * n, float* ap, const lapack_int * ipiv, float* work, lapack_int * info);
void LAPACK_dsptri(char* uplo, lapack_int * n, double* ap, const lapack_int * ipiv, double* work, lapack_int * info);
void LAPACK_csptri(char* uplo, lapack_int * n, lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * info);
void LAPACK_zsptri(char* uplo, lapack_int * n, lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * info);
void LAPACK_chptri(char* uplo, lapack_int * n, lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * info);
void LAPACK_zhptri(char* uplo, lapack_int * n, lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * info);
void LAPACK_strtri(char* uplo, char* diag, lapack_int * n, float* a, lapack_int * lda, lapack_int * info);
void LAPACK_dtrtri(char* uplo, char* diag, lapack_int * n, double* a, lapack_int * lda, lapack_int * info);
void LAPACK_ctrtri(char* uplo, char* diag, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * info);
void LAPACK_ztrtri(char* uplo, char* diag, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * info);
void LAPACK_dtftri(char* transr, char* uplo, char* diag, lapack_int * n, double* a, lapack_int * info);
void LAPACK_stftri(char* transr, char* uplo, char* diag, lapack_int * n, float* a, lapack_int * info);
void LAPACK_ztftri(char* transr, char* uplo, char* diag, lapack_int * n, lapack_complex_double * a, lapack_int * info);
void LAPACK_ctftri(char* transr, char* uplo, char* diag, lapack_int * n, lapack_complex_float * a, lapack_int * info);
void LAPACK_stptri(char* uplo, char* diag, lapack_int * n, float* ap, lapack_int * info);
void LAPACK_dtptri(char* uplo, char* diag, lapack_int * n, double* ap, lapack_int * info);
void LAPACK_ctptri(char* uplo, char* diag, lapack_int * n, lapack_complex_float * ap, lapack_int * info);
void LAPACK_ztptri(char* uplo, char* diag, lapack_int * n, lapack_complex_double * ap, lapack_int * info);
void LAPACK_sgeequ(lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_dgeequ(lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_cgeequ(lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_zgeequ(lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_dgeequb(lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_sgeequb(lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_zgeequb(lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_cgeequb(lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_sgbequ(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const float* ab, lapack_int * ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_dgbequ(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const double* ab, lapack_int * ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_cgbequ(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const lapack_complex_float * ab, lapack_int * ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_zgbequ(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const lapack_complex_double * ab, lapack_int * ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_dgbequb(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const double* ab, lapack_int * ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_sgbequb(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const float* ab, lapack_int * ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_zgbequb(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const lapack_complex_double * ab, lapack_int * ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_cgbequb(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const lapack_complex_float * ab, lapack_int * ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_spoequ(lapack_int * n, const float* a, lapack_int * lda, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_dpoequ(lapack_int * n, const double* a, lapack_int * lda, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_cpoequ(lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_zpoequ(lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_dpoequb(lapack_int * n, const double* a, lapack_int * lda, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_spoequb(lapack_int * n, const float* a, lapack_int * lda, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_zpoequb(lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_cpoequb(lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_sppequ(char* uplo, lapack_int * n, const float* ap, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_dppequ(char* uplo, lapack_int * n, const double* ap, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_cppequ(char* uplo, lapack_int * n, const lapack_complex_float * ap, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_zppequ(char* uplo, lapack_int * n, const lapack_complex_double * ap, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_spbequ(char* uplo, lapack_int * n, lapack_int * kd, const float* ab, lapack_int * ldab, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_dpbequ(char* uplo, lapack_int * n, lapack_int * kd, const double* ab, lapack_int * ldab, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_cpbequ(char* uplo, lapack_int * n, lapack_int * kd, const lapack_complex_float * ab, lapack_int * ldab, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_zpbequ(char* uplo, lapack_int * n, lapack_int * kd, const lapack_complex_double * ab, lapack_int * ldab, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_dsyequb(char* uplo, lapack_int * n, const double* a, lapack_int * lda, double* s, double* scond, double* amax, double* work, lapack_int * info);
void LAPACK_ssyequb(char* uplo, lapack_int * n, const float* a, lapack_int * lda, float* s, float* scond, float* amax, float* work, lapack_int * info);
void LAPACK_zsyequb(char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* s, double* scond, double* amax, lapack_complex_double * work, lapack_int * info);
void LAPACK_csyequb(char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* s, float* scond, float* amax, lapack_complex_float * work, lapack_int * info);
void LAPACK_zheequb(char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* s, double* scond, double* amax, lapack_complex_double * work, lapack_int * info);
void LAPACK_cheequb(char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* s, float* scond, float* amax, lapack_complex_float * work, lapack_int * info);
void LAPACK_sgesv(lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dgesv(lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cgesv(lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zgesv(lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_dsgesv(lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, lapack_int * ipiv, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* work, float* swork, lapack_int * iter, lapack_int * info);
void LAPACK_zcgesv(lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, lapack_complex_double * work, lapack_complex_float * swork, double* rwork, lapack_int * iter, lapack_int * info);
void LAPACK_sgesvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* af, lapack_int * ldaf, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgesvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* af, lapack_int * ldaf, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgesvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgesvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_dgesvxx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* af, lapack_int * ldaf, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_sgesvxx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* af, lapack_int * ldaf, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zgesvxx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_cgesvxx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_sgbsv(lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, float* ab, lapack_int * ldab, lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dgbsv(lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, double* ab, lapack_int * ldab, lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cgbsv(lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, lapack_complex_float * ab, lapack_int * ldab, lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zgbsv(lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, lapack_complex_double * ab, lapack_int * ldab, lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sgbsvx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, float* ab, lapack_int * ldab, float* afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgbsvx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, double* ab, lapack_int * ldab, double* afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgbsvx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgbsvx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_dgbsvxx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, double* ab, lapack_int * ldab, double* afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_sgbsvxx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, float* ab, lapack_int * ldab, float* afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zgbsvxx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_cgbsvxx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_sgtsv(lapack_int * n, lapack_int * nrhs, float* dl, float* d, float* du, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dgtsv(lapack_int * n, lapack_int * nrhs, double* dl, double* d, double* du, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cgtsv(lapack_int * n, lapack_int * nrhs, lapack_complex_float * dl, lapack_complex_float * d, lapack_complex_float * du, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zgtsv(lapack_int * n, lapack_int * nrhs, lapack_complex_double * dl, lapack_complex_double * d, lapack_complex_double * du, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sgtsvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, const float* dl, const float* d, const float* du, float* dlf, float* df, float* duf, float* du2, lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgtsvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, const double* dl, const double* d, const double* du, double* dlf, double* df, double* duf, double* du2, lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgtsvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, lapack_complex_float * dlf, lapack_complex_float * df, lapack_complex_float * duf, lapack_complex_float * du2, lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgtsvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, lapack_complex_double * dlf, lapack_complex_double * df, lapack_complex_double * duf, lapack_complex_double * du2, lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sposv(char* uplo, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dposv(char* uplo, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cposv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zposv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_dsposv(char* uplo, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* work, float* swork, lapack_int * iter, lapack_int * info);
void LAPACK_zcposv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, lapack_complex_double * work, lapack_complex_float * swork, double* rwork, lapack_int * iter, lapack_int * info);
void LAPACK_sposvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* af, lapack_int * ldaf, char* equed, float* s, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dposvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* af, lapack_int * ldaf, char* equed, double* s, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cposvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, char* equed, float* s, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zposvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, char* equed, double* s, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_dposvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* af, lapack_int * ldaf, char* equed, double* s, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_sposvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* af, lapack_int * ldaf, char* equed, float* s, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zposvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, char* equed, double* s, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_cposvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, char* equed, float* s, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_sppsv(char* uplo, lapack_int * n, lapack_int * nrhs, float* ap, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dppsv(char* uplo, lapack_int * n, lapack_int * nrhs, double* ap, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cppsv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * ap, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zppsv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * ap, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sppsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, float* ap, float* afp, char* equed, float* s, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dppsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, double* ap, double* afp, char* equed, double* s, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cppsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * ap, lapack_complex_float * afp, char* equed, float* s, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zppsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * ap, lapack_complex_double * afp, char* equed, double* s, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_spbsv(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, float* ab, lapack_int * ldab, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dpbsv(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, double* ab, lapack_int * ldab, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cpbsv(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zpbsv(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_spbsvx(char* fact, char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, float* ab, lapack_int * ldab, float* afb, lapack_int * ldafb, char* equed, float* s, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dpbsvx(char* fact, char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, double* ab, lapack_int * ldab, double* afb, lapack_int * ldafb, char* equed, double* s, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cpbsvx(char* fact, char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * afb, lapack_int * ldafb, char* equed, float* s, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zpbsvx(char* fact, char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * afb, lapack_int * ldafb, char* equed, double* s, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sptsv(lapack_int * n, lapack_int * nrhs, float* d, float* e, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dptsv(lapack_int * n, lapack_int * nrhs, double* d, double* e, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cptsv(lapack_int * n, lapack_int * nrhs, float* d, lapack_complex_float * e, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zptsv(lapack_int * n, lapack_int * nrhs, double* d, lapack_complex_double * e, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sptsvx(char* fact, lapack_int * n, lapack_int * nrhs, const float* d, const float* e, float* df, float* ef, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * info);
void LAPACK_dptsvx(char* fact, lapack_int * n, lapack_int * nrhs, const double* d, const double* e, double* df, double* ef, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * info);
void LAPACK_cptsvx(char* fact, lapack_int * n, lapack_int * nrhs, const float* d, const lapack_complex_float * e, float* df, lapack_complex_float * ef, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zptsvx(char* fact, lapack_int * n, lapack_int * nrhs, const double* d, const lapack_complex_double * e, double* df, lapack_complex_double * ef, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_ssysv(char* uplo, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, lapack_int * ipiv, float* b, lapack_int * ldb, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dsysv(char* uplo, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, lapack_int * ipiv, double* b, lapack_int * ldb, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_csysv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zsysv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_ssysvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, float* af, lapack_int * ldaf, lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dsysvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, double* af, lapack_int * ldaf, lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_csysvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zsysvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_dsysvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* af, lapack_int * ldaf, lapack_int * ipiv, char* equed, double* s, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ssysvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* af, lapack_int * ldaf, lapack_int * ipiv, char* equed, float* s, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zsysvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, double* s, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_csysvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, float* s, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_chesv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zhesv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_chesvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zhesvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_zhesvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, double* s, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_chesvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, float* s, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_sspsv(char* uplo, lapack_int * n, lapack_int * nrhs, float* ap, lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dspsv(char* uplo, lapack_int * n, lapack_int * nrhs, double* ap, lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cspsv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * ap, lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zspsv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * ap, lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sspsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const float* ap, float* afp, lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dspsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const double* ap, double* afp, lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cspsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, lapack_complex_float * afp, lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zspsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, lapack_complex_double * afp, lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_chpsv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * ap, lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zhpsv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * ap, lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_chpsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, lapack_complex_float * afp, lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zhpsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, lapack_complex_double * afp, lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sgeqrf(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgeqrf(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgeqrf(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgeqrf(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgeqpf(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, lapack_int * jpvt, float* tau, float* work, lapack_int * info);
void LAPACK_dgeqpf(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, lapack_int * jpvt, double* tau, double* work, lapack_int * info);
void LAPACK_cgeqpf(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * jpvt, lapack_complex_float * tau, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgeqpf(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * jpvt, lapack_complex_double * tau, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sgeqp3(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, lapack_int * jpvt, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgeqp3(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, lapack_int * jpvt, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgeqp3(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * jpvt, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zgeqp3(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * jpvt, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_sorgqr(lapack_int * m, lapack_int * n, lapack_int * k, float* a, lapack_int * lda, const float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorgqr(lapack_int * m, lapack_int * n, lapack_int * k, double* a, lapack_int * lda, const double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormqr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormqr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cungqr(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zungqr(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmqr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmqr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgelqf(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgelqf(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgelqf(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgelqf(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sorglq(lapack_int * m, lapack_int * n, lapack_int * k, float* a, lapack_int * lda, const float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorglq(lapack_int * m, lapack_int * n, lapack_int * k, double* a, lapack_int * lda, const double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormlq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormlq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunglq(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunglq(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmlq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmlq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgeqlf(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgeqlf(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgeqlf(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgeqlf(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sorgql(lapack_int * m, lapack_int * n, lapack_int * k, float* a, lapack_int * lda, const float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorgql(lapack_int * m, lapack_int * n, lapack_int * k, double* a, lapack_int * lda, const double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cungql(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zungql(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormql(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormql(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmql(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmql(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgerqf(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgerqf(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgerqf(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgerqf(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sorgrq(lapack_int * m, lapack_int * n, lapack_int * k, float* a, lapack_int * lda, const float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorgrq(lapack_int * m, lapack_int * n, lapack_int * k, double* a, lapack_int * lda, const double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cungrq(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zungrq(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormrq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormrq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmrq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmrq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_stzrzf(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dtzrzf(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_ctzrzf(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_ztzrzf(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormrz(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormrz(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmrz(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmrz(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sggqrf(lapack_int * n, lapack_int * m, lapack_int * p, float* a, lapack_int * lda, float* taua, float* b, lapack_int * ldb, float* taub, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dggqrf(lapack_int * n, lapack_int * m, lapack_int * p, double* a, lapack_int * lda, double* taua, double* b, lapack_int * ldb, double* taub, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cggqrf(lapack_int * n, lapack_int * m, lapack_int * p, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * taua, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * taub, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zggqrf(lapack_int * n, lapack_int * m, lapack_int * p, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * taua, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * taub, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sggrqf(lapack_int * m, lapack_int * p, lapack_int * n, float* a, lapack_int * lda, float* taua, float* b, lapack_int * ldb, float* taub, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dggrqf(lapack_int * m, lapack_int * p, lapack_int * n, double* a, lapack_int * lda, double* taua, double* b, lapack_int * ldb, double* taub, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cggrqf(lapack_int * m, lapack_int * p, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * taua, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * taub, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zggrqf(lapack_int * m, lapack_int * p, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * taua, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * taub, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgebrd(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* d, float* e, float* tauq, float* taup, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgebrd(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* d, double* e, double* tauq, double* taup, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgebrd(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* d, float* e, lapack_complex_float * tauq, lapack_complex_float * taup, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgebrd(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* d, double* e, lapack_complex_double * tauq, lapack_complex_double * taup, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgbbrd(char* vect, lapack_int * m, lapack_int * n, lapack_int * ncc, lapack_int * kl, lapack_int * ku, float* ab, lapack_int * ldab, float* d, float* e, float* q, lapack_int * ldq, float* pt, lapack_int * ldpt, float* c, lapack_int * ldc, float* work, lapack_int * info);
void LAPACK_dgbbrd(char* vect, lapack_int * m, lapack_int * n, lapack_int * ncc, lapack_int * kl, lapack_int * ku, double* ab, lapack_int * ldab, double* d, double* e, double* q, lapack_int * ldq, double* pt, lapack_int * ldpt, double* c, lapack_int * ldc, double* work, lapack_int * info);
void LAPACK_cgbbrd(char* vect, lapack_int * m, lapack_int * n, lapack_int * ncc, lapack_int * kl, lapack_int * ku, lapack_complex_float * ab, lapack_int * ldab, float* d, float* e, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * pt, lapack_int * ldpt, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgbbrd(char* vect, lapack_int * m, lapack_int * n, lapack_int * ncc, lapack_int * kl, lapack_int * ku, lapack_complex_double * ab, lapack_int * ldab, double* d, double* e, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * pt, lapack_int * ldpt, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sorgbr(char* vect, lapack_int * m, lapack_int * n, lapack_int * k, float* a, lapack_int * lda, const float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorgbr(char* vect, lapack_int * m, lapack_int * n, lapack_int * k, double* a, lapack_int * lda, const double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormbr(char* vect, char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormbr(char* vect, char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cungbr(char* vect, lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zungbr(char* vect, lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmbr(char* vect, char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmbr(char* vect, char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sbdsqr(char* uplo, lapack_int * n, lapack_int * ncvt, lapack_int * nru, lapack_int * ncc, float* d, float* e, float* vt, lapack_int * ldvt, float* u, lapack_int * ldu, float* c, lapack_int * ldc, float* work, lapack_int * info);
void LAPACK_dbdsqr(char* uplo, lapack_int * n, lapack_int * ncvt, lapack_int * nru, lapack_int * ncc, double* d, double* e, double* vt, lapack_int * ldvt, double* u, lapack_int * ldu, double* c, lapack_int * ldc, double* work, lapack_int * info);
void LAPACK_cbdsqr(char* uplo, lapack_int * n, lapack_int * ncvt, lapack_int * nru, lapack_int * ncc, float* d, float* e, lapack_complex_float * vt, lapack_int * ldvt, lapack_complex_float * u, lapack_int * ldu, lapack_complex_float * c, lapack_int * ldc, float* work, lapack_int * info);
void LAPACK_zbdsqr(char* uplo, lapack_int * n, lapack_int * ncvt, lapack_int * nru, lapack_int * ncc, double* d, double* e, lapack_complex_double * vt, lapack_int * ldvt, lapack_complex_double * u, lapack_int * ldu, lapack_complex_double * c, lapack_int * ldc, double* work, lapack_int * info);
void LAPACK_sbdsdc(char* uplo, char* compq, lapack_int * n, float* d, float* e, float* u, lapack_int * ldu, float* vt, lapack_int * ldvt, float* q, lapack_int * iq, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dbdsdc(char* uplo, char* compq, lapack_int * n, double* d, double* e, double* u, lapack_int * ldu, double* vt, lapack_int * ldvt, double* q, lapack_int * iq, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ssytrd(char* uplo, lapack_int * n, float* a, lapack_int * lda, float* d, float* e, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dsytrd(char* uplo, lapack_int * n, double* a, lapack_int * lda, double* d, double* e, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sorgtr(char* uplo, lapack_int * n, float* a, lapack_int * lda, const float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorgtr(char* uplo, lapack_int * n, double* a, lapack_int * lda, const double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_chetrd(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* d, float* e, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zhetrd(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* d, double* e, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_cungtr(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zungtr(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_ssptrd(char* uplo, lapack_int * n, float* ap, float* d, float* e, float* tau, lapack_int * info);
void LAPACK_dsptrd(char* uplo, lapack_int * n, double* ap, double* d, double* e, double* tau, lapack_int * info);
void LAPACK_sopgtr(char* uplo, lapack_int * n, const float* ap, const float* tau, float* q, lapack_int * ldq, float* work, lapack_int * info);
void LAPACK_dopgtr(char* uplo, lapack_int * n, const double* ap, const double* tau, double* q, lapack_int * ldq, double* work, lapack_int * info);
void LAPACK_sopmtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const float* ap, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * info);
void LAPACK_dopmtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const double* ap, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * info);
void LAPACK_chptrd(char* uplo, lapack_int * n, lapack_complex_float * ap, float* d, float* e, lapack_complex_float * tau, lapack_int * info);
void LAPACK_zhptrd(char* uplo, lapack_int * n, lapack_complex_double * ap, double* d, double* e, lapack_complex_double * tau, lapack_int * info);
void LAPACK_cupgtr(char* uplo, lapack_int * n, const lapack_complex_float * ap, const lapack_complex_float * tau, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * work, lapack_int * info);
void LAPACK_zupgtr(char* uplo, lapack_int * n, const lapack_complex_double * ap, const lapack_complex_double * tau, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * work, lapack_int * info);
void LAPACK_cupmtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const lapack_complex_float * ap, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * info);
void LAPACK_zupmtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const lapack_complex_double * ap, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * info);
void LAPACK_ssbtrd(char* vect, char* uplo, lapack_int * n, lapack_int * kd, float* ab, lapack_int * ldab, float* d, float* e, float* q, lapack_int * ldq, float* work, lapack_int * info);
void LAPACK_dsbtrd(char* vect, char* uplo, lapack_int * n, lapack_int * kd, double* ab, lapack_int * ldab, double* d, double* e, double* q, lapack_int * ldq, double* work, lapack_int * info);
void LAPACK_chbtrd(char* vect, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_float * ab, lapack_int * ldab, float* d, float* e, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * work, lapack_int * info);
void LAPACK_zhbtrd(char* vect, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_double * ab, lapack_int * ldab, double* d, double* e, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * work, lapack_int * info);
void LAPACK_ssterf(lapack_int * n, float* d, float* e, lapack_int * info);
void LAPACK_dsterf(lapack_int * n, double* d, double* e, lapack_int * info);
void LAPACK_ssteqr(char* compz, lapack_int * n, float* d, float* e, float* z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_dsteqr(char* compz, lapack_int * n, double* d, double* e, double* z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_csteqr(char* compz, lapack_int * n, float* d, float* e, lapack_complex_float * z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_zsteqr(char* compz, lapack_int * n, double* d, double* e, lapack_complex_double * z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_sstemr(char* jobz, char* range, lapack_int * n, float* d, float* e, float* vl, float* vu, lapack_int * il, lapack_int * iu, lapack_int * m, float* w, float* z, lapack_int * ldz, lapack_int * nzc, lapack_int * isuppz, lapack_logical * tryrac, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dstemr(char* jobz, char* range, lapack_int * n, double* d, double* e, double* vl, double* vu, lapack_int * il, lapack_int * iu, lapack_int * m, double* w, double* z, lapack_int * ldz, lapack_int * nzc, lapack_int * isuppz, lapack_logical * tryrac, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_cstemr(char* jobz, char* range, lapack_int * n, float* d, float* e, float* vl, float* vu, lapack_int * il, lapack_int * iu, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_int * nzc, lapack_int * isuppz, lapack_logical * tryrac, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zstemr(char* jobz, char* range, lapack_int * n, double* d, double* e, double* vl, double* vu, lapack_int * il, lapack_int * iu, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_int * nzc, lapack_int * isuppz, lapack_logical * tryrac, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_sstedc(char* compz, lapack_int * n, float* d, float* e, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dstedc(char* compz, lapack_int * n, double* d, double* e, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_cstedc(char* compz, lapack_int * n, float* d, float* e, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zstedc(char* compz, lapack_int * n, double* d, double* e, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_sstegr(char* jobz, char* range, lapack_int * n, float* d, float* e, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, lapack_int * isuppz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dstegr(char* jobz, char* range, lapack_int * n, double* d, double* e, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, lapack_int * isuppz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_cstegr(char* jobz, char* range, lapack_int * n, float* d, float* e, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_int * isuppz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zstegr(char* jobz, char* range, lapack_int * n, double* d, double* e, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_int * isuppz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_spteqr(char* compz, lapack_int * n, float* d, float* e, float* z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_dpteqr(char* compz, lapack_int * n, double* d, double* e, double* z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_cpteqr(char* compz, lapack_int * n, float* d, float* e, lapack_complex_float * z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_zpteqr(char* compz, lapack_int * n, double* d, double* e, lapack_complex_double * z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_sstebz(char* range, char* order, lapack_int * n, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, const float* d, const float* e, lapack_int * m, lapack_int * nsplit, float* w, lapack_int * iblock, lapack_int * isplit, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dstebz(char* range, char* order, lapack_int * n, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, const double* d, const double* e, lapack_int * m, lapack_int * nsplit, double* w, lapack_int * iblock, lapack_int * isplit, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_sstein(lapack_int * n, const float* d, const float* e, lapack_int * m, const float* w, const lapack_int * iblock, const lapack_int * isplit, float* z, lapack_int * ldz, float* work, lapack_int * iwork, lapack_int * ifailv, lapack_int * info);
void LAPACK_dstein(lapack_int * n, const double* d, const double* e, lapack_int * m, const double* w, const lapack_int * iblock, const lapack_int * isplit, double* z, lapack_int * ldz, double* work, lapack_int * iwork, lapack_int * ifailv, lapack_int * info);
void LAPACK_cstein(lapack_int * n, const float* d, const float* e, lapack_int * m, const float* w, const lapack_int * iblock, const lapack_int * isplit, lapack_complex_float * z, lapack_int * ldz, float* work, lapack_int * iwork, lapack_int * ifailv, lapack_int * info);
void LAPACK_zstein(lapack_int * n, const double* d, const double* e, lapack_int * m, const double* w, const lapack_int * iblock, const lapack_int * isplit, lapack_complex_double * z, lapack_int * ldz, double* work, lapack_int * iwork, lapack_int * ifailv, lapack_int * info);
void LAPACK_sdisna(char* job, lapack_int * m, lapack_int * n, const float* d, float* sep, lapack_int * info);
void LAPACK_ddisna(char* job, lapack_int * m, lapack_int * n, const double* d, double* sep, lapack_int * info);
void LAPACK_ssygst(lapack_int * itype, char* uplo, lapack_int * n, float* a, lapack_int * lda, const float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dsygst(lapack_int * itype, char* uplo, lapack_int * n, double* a, lapack_int * lda, const double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_chegst(lapack_int * itype, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zhegst(lapack_int * itype, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sspgst(lapack_int * itype, char* uplo, lapack_int * n, float* ap, const float* bp, lapack_int * info);
void LAPACK_dspgst(lapack_int * itype, char* uplo, lapack_int * n, double* ap, const double* bp, lapack_int * info);
void LAPACK_chpgst(lapack_int * itype, char* uplo, lapack_int * n, lapack_complex_float * ap, const lapack_complex_float * bp, lapack_int * info);
void LAPACK_zhpgst(lapack_int * itype, char* uplo, lapack_int * n, lapack_complex_double * ap, const lapack_complex_double * bp, lapack_int * info);
void LAPACK_ssbgst(char* vect, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, float* ab, lapack_int * ldab, const float* bb, lapack_int * ldbb, float* x, lapack_int * ldx, float* work, lapack_int * info);
void LAPACK_dsbgst(char* vect, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, double* ab, lapack_int * ldab, const double* bb, lapack_int * ldbb, double* x, lapack_int * ldx, double* work, lapack_int * info);
void LAPACK_chbgst(char* vect, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_float * ab, lapack_int * ldab, const lapack_complex_float * bb, lapack_int * ldbb, lapack_complex_float * x, lapack_int * ldx, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zhbgst(char* vect, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_double * ab, lapack_int * ldab, const lapack_complex_double * bb, lapack_int * ldbb, lapack_complex_double * x, lapack_int * ldx, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_spbstf(char* uplo, lapack_int * n, lapack_int * kb, float* bb, lapack_int * ldbb, lapack_int * info);
void LAPACK_dpbstf(char* uplo, lapack_int * n, lapack_int * kb, double* bb, lapack_int * ldbb, lapack_int * info);
void LAPACK_cpbstf(char* uplo, lapack_int * n, lapack_int * kb, lapack_complex_float * bb, lapack_int * ldbb, lapack_int * info);
void LAPACK_zpbstf(char* uplo, lapack_int * n, lapack_int * kb, lapack_complex_double * bb, lapack_int * ldbb, lapack_int * info);
void LAPACK_sgehrd(lapack_int * n, lapack_int * ilo, lapack_int * ihi, float* a, lapack_int * lda, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgehrd(lapack_int * n, lapack_int * ilo, lapack_int * ihi, double* a, lapack_int * lda, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgehrd(lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgehrd(lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sorghr(lapack_int * n, lapack_int * ilo, lapack_int * ihi, float* a, lapack_int * lda, const float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorghr(lapack_int * n, lapack_int * ilo, lapack_int * ihi, double* a, lapack_int * lda, const double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormhr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormhr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunghr(lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunghr(lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmhr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmhr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgebal(char* job, lapack_int * n, float* a, lapack_int * lda, lapack_int * ilo, lapack_int * ihi, float* scale, lapack_int * info);
void LAPACK_dgebal(char* job, lapack_int * n, double* a, lapack_int * lda, lapack_int * ilo, lapack_int * ihi, double* scale, lapack_int * info);
void LAPACK_cgebal(char* job, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * ilo, lapack_int * ihi, float* scale, lapack_int * info);
void LAPACK_zgebal(char* job, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * ilo, lapack_int * ihi, double* scale, lapack_int * info);
void LAPACK_sgebak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const float* scale, lapack_int * m, float* v, lapack_int * ldv, lapack_int * info);
void LAPACK_dgebak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const double* scale, lapack_int * m, double* v, lapack_int * ldv, lapack_int * info);
void LAPACK_cgebak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const float* scale, lapack_int * m, lapack_complex_float * v, lapack_int * ldv, lapack_int * info);
void LAPACK_zgebak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const double* scale, lapack_int * m, lapack_complex_double * v, lapack_int * ldv, lapack_int * info);
void LAPACK_shseqr(char* job, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, float* h, lapack_int * ldh, float* wr, float* wi, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dhseqr(char* job, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, double* h, lapack_int * ldh, double* wr, double* wi, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_chseqr(char* job, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_float * h, lapack_int * ldh, lapack_complex_float * w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zhseqr(char* job, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_double * h, lapack_int * ldh, lapack_complex_double * w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_shsein(char* job, char* eigsrc, char* initv, lapack_logical * select, lapack_int * n, const float* h, lapack_int * ldh, float* wr, const float* wi, float* vl, lapack_int * ldvl, float* vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, float* work, lapack_int * ifaill, lapack_int * ifailr, lapack_int * info);
void LAPACK_dhsein(char* job, char* eigsrc, char* initv, lapack_logical * select, lapack_int * n, const double* h, lapack_int * ldh, double* wr, const double* wi, double* vl, lapack_int * ldvl, double* vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, double* work, lapack_int * ifaill, lapack_int * ifailr, lapack_int * info);
void LAPACK_chsein(char* job, char* eigsrc, char* initv, const lapack_logical * select, lapack_int * n, const lapack_complex_float * h, lapack_int * ldh, lapack_complex_float * w, lapack_complex_float * vl, lapack_int * ldvl, lapack_complex_float * vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, lapack_complex_float * work, float* rwork, lapack_int * ifaill, lapack_int * ifailr, lapack_int * info);
void LAPACK_zhsein(char* job, char* eigsrc, char* initv, const lapack_logical * select, lapack_int * n, const lapack_complex_double * h, lapack_int * ldh, lapack_complex_double * w, lapack_complex_double * vl, lapack_int * ldvl, lapack_complex_double * vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, lapack_complex_double * work, double* rwork, lapack_int * ifaill, lapack_int * ifailr, lapack_int * info);
void LAPACK_strevc(char* side, char* howmny, lapack_logical * select, lapack_int * n, const float* t, lapack_int * ldt, float* vl, lapack_int * ldvl, float* vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, float* work, lapack_int * info);
void LAPACK_dtrevc(char* side, char* howmny, lapack_logical * select, lapack_int * n, const double* t, lapack_int * ldt, double* vl, lapack_int * ldvl, double* vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, double* work, lapack_int * info);
void LAPACK_ctrevc(char* side, char* howmny, const lapack_logical * select, lapack_int * n, lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * vl, lapack_int * ldvl, lapack_complex_float * vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztrevc(char* side, char* howmny, const lapack_logical * select, lapack_int * n, lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * vl, lapack_int * ldvl, lapack_complex_double * vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_strsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const float* t, lapack_int * ldt, const float* vl, lapack_int * ldvl, const float* vr, lapack_int * ldvr, float* s, float* sep, lapack_int * mm, lapack_int * m, float* work, lapack_int * ldwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dtrsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const double* t, lapack_int * ldt, const double* vl, lapack_int * ldvl, const double* vr, lapack_int * ldvr, double* s, double* sep, lapack_int * mm, lapack_int * m, double* work, lapack_int * ldwork, lapack_int * iwork, lapack_int * info);
void LAPACK_ctrsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const lapack_complex_float * t, lapack_int * ldt, const lapack_complex_float * vl, lapack_int * ldvl, const lapack_complex_float * vr, lapack_int * ldvr, float* s, float* sep, lapack_int * mm, lapack_int * m, lapack_complex_float * work, lapack_int * ldwork, float* rwork, lapack_int * info);
void LAPACK_ztrsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const lapack_complex_double * t, lapack_int * ldt, const lapack_complex_double * vl, lapack_int * ldvl, const lapack_complex_double * vr, lapack_int * ldvr, double* s, double* sep, lapack_int * mm, lapack_int * m, lapack_complex_double * work, lapack_int * ldwork, double* rwork, lapack_int * info);
void LAPACK_strexc(char* compq, lapack_int * n, float* t, lapack_int * ldt, float* q, lapack_int * ldq, lapack_int * ifst, lapack_int * ilst, float* work, lapack_int * info);
void LAPACK_dtrexc(char* compq, lapack_int * n, double* t, lapack_int * ldt, double* q, lapack_int * ldq, lapack_int * ifst, lapack_int * ilst, double* work, lapack_int * info);
void LAPACK_ctrexc(char* compq, lapack_int * n, lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * q, lapack_int * ldq, lapack_int * ifst, lapack_int * ilst, lapack_int * info);
void LAPACK_ztrexc(char* compq, lapack_int * n, lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * q, lapack_int * ldq, lapack_int * ifst, lapack_int * ilst, lapack_int * info);
void LAPACK_strsen(char* job, char* compq, const lapack_logical * select, lapack_int * n, float* t, lapack_int * ldt, float* q, lapack_int * ldq, float* wr, float* wi, lapack_int * m, float* s, float* sep, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dtrsen(char* job, char* compq, const lapack_logical * select, lapack_int * n, double* t, lapack_int * ldt, double* q, lapack_int * ldq, double* wr, double* wi, lapack_int * m, double* s, double* sep, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_ctrsen(char* job, char* compq, const lapack_logical * select, lapack_int * n, lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * w, lapack_int * m, float* s, float* sep, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_ztrsen(char* job, char* compq, const lapack_logical * select, lapack_int * n, lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * w, lapack_int * m, double* s, double* sep, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_strsyl(char* trana, char* tranb, lapack_int * isgn, lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, const float* b, lapack_int * ldb, float* c, lapack_int * ldc, float* scale, lapack_int * info);
void LAPACK_dtrsyl(char* trana, char* tranb, lapack_int * isgn, lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, const double* b, lapack_int * ldb, double* c, lapack_int * ldc, double* scale, lapack_int * info);
void LAPACK_ctrsyl(char* trana, char* tranb, lapack_int * isgn, lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * c, lapack_int * ldc, float* scale, lapack_int * info);
void LAPACK_ztrsyl(char* trana, char* tranb, lapack_int * isgn, lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * c, lapack_int * ldc, double* scale, lapack_int * info);
void LAPACK_sgghrd(char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* q, lapack_int * ldq, float* z, lapack_int * ldz, lapack_int * info);
void LAPACK_dgghrd(char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* q, lapack_int * ldq, double* z, lapack_int * ldz, lapack_int * info);
void LAPACK_cgghrd(char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * z, lapack_int * ldz, lapack_int * info);
void LAPACK_zgghrd(char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * z, lapack_int * ldz, lapack_int * info);
void LAPACK_sggbal(char* job, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* work, lapack_int * info);
void LAPACK_dggbal(char* job, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* work, lapack_int * info);
void LAPACK_cggbal(char* job, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* work, lapack_int * info);
void LAPACK_zggbal(char* job, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* work, lapack_int * info);
void LAPACK_sggbak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const float* lscale, const float* rscale, lapack_int * m, float* v, lapack_int * ldv, lapack_int * info);
void LAPACK_dggbak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const double* lscale, const double* rscale, lapack_int * m, double* v, lapack_int * ldv, lapack_int * info);
void LAPACK_cggbak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const float* lscale, const float* rscale, lapack_int * m, lapack_complex_float * v, lapack_int * ldv, lapack_int * info);
void LAPACK_zggbak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const double* lscale, const double* rscale, lapack_int * m, lapack_complex_double * v, lapack_int * ldv, lapack_int * info);
void LAPACK_shgeqz(char* job, char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, float* h, lapack_int * ldh, float* t, lapack_int * ldt, float* alphar, float* alphai, float* beta, float* q, lapack_int * ldq, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dhgeqz(char* job, char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, double* h, lapack_int * ldh, double* t, lapack_int * ldt, double* alphar, double* alphai, double* beta, double* q, lapack_int * ldq, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_chgeqz(char* job, char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_float * h, lapack_int * ldh, lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zhgeqz(char* job, char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_double * h, lapack_int * ldh, lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_stgevc(char* side, char* howmny, const lapack_logical * select, lapack_int * n, const float* s, lapack_int * lds, const float* p, lapack_int * ldp, float* vl, lapack_int * ldvl, float* vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, float* work, lapack_int * info);
void LAPACK_dtgevc(char* side, char* howmny, const lapack_logical * select, lapack_int * n, const double* s, lapack_int * lds, const double* p, lapack_int * ldp, double* vl, lapack_int * ldvl, double* vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, double* work, lapack_int * info);
void LAPACK_ctgevc(char* side, char* howmny, const lapack_logical * select, lapack_int * n, const lapack_complex_float * s, lapack_int * lds, const lapack_complex_float * p, lapack_int * ldp, lapack_complex_float * vl, lapack_int * ldvl, lapack_complex_float * vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztgevc(char* side, char* howmny, const lapack_logical * select, lapack_int * n, const lapack_complex_double * s, lapack_int * lds, const lapack_complex_double * p, lapack_int * ldp, lapack_complex_double * vl, lapack_int * ldvl, lapack_complex_double * vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_stgexc(lapack_logical * wantq, lapack_logical * wantz, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* q, lapack_int * ldq, float* z, lapack_int * ldz, lapack_int * ifst, lapack_int * ilst, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dtgexc(lapack_logical * wantq, lapack_logical * wantz, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* q, lapack_int * ldq, double* z, lapack_int * ldz, lapack_int * ifst, lapack_int * ilst, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_ctgexc(lapack_logical * wantq, lapack_logical * wantz, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * z, lapack_int * ldz, lapack_int * ifst, lapack_int * ilst, lapack_int * info);
void LAPACK_ztgexc(lapack_logical * wantq, lapack_logical * wantz, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * z, lapack_int * ldz, lapack_int * ifst, lapack_int * ilst, lapack_int * info);
void LAPACK_stgsen(lapack_int * ijob, lapack_logical * wantq, lapack_logical * wantz, const lapack_logical * select, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* alphar, float* alphai, float* beta, float* q, lapack_int * ldq, float* z, lapack_int * ldz, lapack_int * m, float* pl, float* pr, float* dif, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dtgsen(lapack_int * ijob, lapack_logical * wantq, lapack_logical * wantz, const lapack_logical * select, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* alphar, double* alphai, double* beta, double* q, lapack_int * ldq, double* z, lapack_int * ldz, lapack_int * m, double* pl, double* pr, double* dif, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_ctgsen(lapack_int * ijob, lapack_logical * wantq, lapack_logical * wantz, const lapack_logical * select, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * z, lapack_int * ldz, lapack_int * m, float* pl, float* pr, float* dif, lapack_complex_float * work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_ztgsen(lapack_int * ijob, lapack_logical * wantq, lapack_logical * wantz, const lapack_logical * select, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * z, lapack_int * ldz, lapack_int * m, double* pl, double* pr, double* dif, lapack_complex_double * work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_stgsyl(char* trans, lapack_int * ijob, lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, const float* b, lapack_int * ldb, float* c, lapack_int * ldc, const float* d, lapack_int * ldd, const float* e, lapack_int * lde, float* f, lapack_int * ldf, float* scale, float* dif, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dtgsyl(char* trans, lapack_int * ijob, lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, const double* b, lapack_int * ldb, double* c, lapack_int * ldc, const double* d, lapack_int * ldd, const double* e, lapack_int * lde, double* f, lapack_int * ldf, double* scale, double* dif, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_ctgsyl(char* trans, lapack_int * ijob, lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * c, lapack_int * ldc, const lapack_complex_float * d, lapack_int * ldd, const lapack_complex_float * e, lapack_int * lde, lapack_complex_float * f, lapack_int * ldf, float* scale, float* dif, lapack_complex_float * work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_ztgsyl(char* trans, lapack_int * ijob, lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * c, lapack_int * ldc, const lapack_complex_double * d, lapack_int * ldd, const lapack_complex_double * e, lapack_int * lde, lapack_complex_double * f, lapack_int * ldf, double* scale, double* dif, lapack_complex_double * work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_stgsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const float* a, lapack_int * lda, const float* b, lapack_int * ldb, const float* vl, lapack_int * ldvl, const float* vr, lapack_int * ldvr, float* s, float* dif, lapack_int * mm, lapack_int * m, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dtgsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const double* a, lapack_int * lda, const double* b, lapack_int * ldb, const double* vl, lapack_int * ldvl, const double* vr, lapack_int * ldvr, double* s, double* dif, lapack_int * mm, lapack_int * m, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_ctgsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * b, lapack_int * ldb, const lapack_complex_float * vl, lapack_int * ldvl, const lapack_complex_float * vr, lapack_int * ldvr, float* s, float* dif, lapack_int * mm, lapack_int * m, lapack_complex_float * work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_ztgsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * b, lapack_int * ldb, const lapack_complex_double * vl, lapack_int * ldvl, const lapack_complex_double * vr, lapack_int * ldvr, double* s, double* dif, lapack_int * mm, lapack_int * m, lapack_complex_double * work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_sggsvp(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* tola, float* tolb, lapack_int * k, lapack_int * l, float* u, lapack_int * ldu, float* v, lapack_int * ldv, float* q, lapack_int * ldq, lapack_int * iwork, float* tau, float* work, lapack_int * info);
void LAPACK_dggsvp(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* tola, double* tolb, lapack_int * k, lapack_int * l, double* u, lapack_int * ldu, double* v, lapack_int * ldv, double* q, lapack_int * ldq, lapack_int * iwork, double* tau, double* work, lapack_int * info);
void LAPACK_cggsvp(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* tola, float* tolb, lapack_int * k, lapack_int * l, lapack_complex_float * u, lapack_int * ldu, lapack_complex_float * v, lapack_int * ldv, lapack_complex_float * q, lapack_int * ldq, lapack_int * iwork, float* rwork, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * info);
void LAPACK_zggsvp(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* tola, double* tolb, lapack_int * k, lapack_int * l, lapack_complex_double * u, lapack_int * ldu, lapack_complex_double * v, lapack_int * ldv, lapack_complex_double * q, lapack_int * ldq, lapack_int * iwork, double* rwork, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * info);
void LAPACK_stgsja(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, lapack_int * k, lapack_int * l, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* tola, float* tolb, float* alpha, float* beta, float* u, lapack_int * ldu, float* v, lapack_int * ldv, float* q, lapack_int * ldq, float* work, lapack_int * ncycle, lapack_int * info);
void LAPACK_dtgsja(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, lapack_int * k, lapack_int * l, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* tola, double* tolb, double* alpha, double* beta, double* u, lapack_int * ldu, double* v, lapack_int * ldv, double* q, lapack_int * ldq, double* work, lapack_int * ncycle, lapack_int * info);
void LAPACK_ctgsja(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, lapack_int * k, lapack_int * l, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* tola, float* tolb, float* alpha, float* beta, lapack_complex_float * u, lapack_int * ldu, lapack_complex_float * v, lapack_int * ldv, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * work, lapack_int * ncycle, lapack_int * info);
void LAPACK_ztgsja(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, lapack_int * k, lapack_int * l, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* tola, double* tolb, double* alpha, double* beta, lapack_complex_double * u, lapack_int * ldu, lapack_complex_double * v, lapack_int * ldv, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * work, lapack_int * ncycle, lapack_int * info);
void LAPACK_sgels(char* trans, lapack_int * m, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgels(char* trans, lapack_int * m, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgels(char* trans, lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgels(char* trans, lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgelsy(lapack_int * m, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* b, lapack_int * ldb, lapack_int * jpvt, float* rcond, lapack_int * rank, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgelsy(lapack_int * m, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* b, lapack_int * ldb, lapack_int * jpvt, double* rcond, lapack_int * rank, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgelsy(lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_int * jpvt, float* rcond, lapack_int * rank, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zgelsy(lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_int * jpvt, double* rcond, lapack_int * rank, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_sgelss(lapack_int * m, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* s, float* rcond, lapack_int * rank, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgelss(lapack_int * m, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* s, double* rcond, lapack_int * rank, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgelss(lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* s, float* rcond, lapack_int * rank, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zgelss(lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* s, double* rcond, lapack_int * rank, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_sgelsd(lapack_int * m, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* s, float* rcond, lapack_int * rank, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dgelsd(lapack_int * m, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* s, double* rcond, lapack_int * rank, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_cgelsd(lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* s, float* rcond, lapack_int * rank, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * iwork, lapack_int * info);
void LAPACK_zgelsd(lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* s, double* rcond, lapack_int * rank, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * iwork, lapack_int * info);
void LAPACK_sgglse(lapack_int * m, lapack_int * n, lapack_int * p, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* c, float* d, float* x, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgglse(lapack_int * m, lapack_int * n, lapack_int * p, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* c, double* d, double* x, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgglse(lapack_int * m, lapack_int * n, lapack_int * p, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * c, lapack_complex_float * d, lapack_complex_float * x, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgglse(lapack_int * m, lapack_int * n, lapack_int * p, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * c, lapack_complex_double * d, lapack_complex_double * x, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sggglm(lapack_int * n, lapack_int * m, lapack_int * p, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* d, float* x, float* y, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dggglm(lapack_int * n, lapack_int * m, lapack_int * p, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* d, double* x, double* y, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cggglm(lapack_int * n, lapack_int * m, lapack_int * p, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * d, lapack_complex_float * x, lapack_complex_float * y, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zggglm(lapack_int * n, lapack_int * m, lapack_int * p, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * d, lapack_complex_double * x, lapack_complex_double * y, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_ssyev(char* jobz, char* uplo, lapack_int * n, float* a, lapack_int * lda, float* w, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dsyev(char* jobz, char* uplo, lapack_int * n, double* a, lapack_int * lda, double* w, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cheev(char* jobz, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* w, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zheev(char* jobz, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* w, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_ssyevd(char* jobz, char* uplo, lapack_int * n, float* a, lapack_int * lda, float* w, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dsyevd(char* jobz, char* uplo, lapack_int * n, double* a, lapack_int * lda, double* w, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_cheevd(char* jobz, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* w, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zheevd(char* jobz, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* w, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_ssyevx(char* jobz, char* range, char* uplo, lapack_int * n, float* a, lapack_int * lda, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_dsyevx(char* jobz, char* range, char* uplo, lapack_int * n, double* a, lapack_int * lda, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_cheevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_zheevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_ssyevr(char* jobz, char* range, char* uplo, lapack_int * n, float* a, lapack_int * lda, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, lapack_int * isuppz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dsyevr(char* jobz, char* range, char* uplo, lapack_int * n, double* a, lapack_int * lda, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, lapack_int * isuppz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_cheevr(char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_int * isuppz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zheevr(char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_int * isuppz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_sspev(char* jobz, char* uplo, lapack_int * n, float* ap, float* w, float* z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_dspev(char* jobz, char* uplo, lapack_int * n, double* ap, double* w, double* z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_chpev(char* jobz, char* uplo, lapack_int * n, lapack_complex_float * ap, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zhpev(char* jobz, char* uplo, lapack_int * n, lapack_complex_double * ap, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sspevd(char* jobz, char* uplo, lapack_int * n, float* ap, float* w, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dspevd(char* jobz, char* uplo, lapack_int * n, double* ap, double* w, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_chpevd(char* jobz, char* uplo, lapack_int * n, lapack_complex_float * ap, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zhpevd(char* jobz, char* uplo, lapack_int * n, lapack_complex_double * ap, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_sspevx(char* jobz, char* range, char* uplo, lapack_int * n, float* ap, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, float* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_dspevx(char* jobz, char* range, char* uplo, lapack_int * n, double* ap, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, double* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_chpevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_float * ap, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_zhpevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_double * ap, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_ssbev(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, float* ab, lapack_int * ldab, float* w, float* z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_dsbev(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, double* ab, lapack_int * ldab, double* w, double* z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_chbev(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_float * ab, lapack_int * ldab, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zhbev(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_double * ab, lapack_int * ldab, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_ssbevd(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, float* ab, lapack_int * ldab, float* w, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dsbevd(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, double* ab, lapack_int * ldab, double* w, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_chbevd(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_float * ab, lapack_int * ldab, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zhbevd(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_double * ab, lapack_int * ldab, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_ssbevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * kd, float* ab, lapack_int * ldab, float* q, lapack_int * ldq, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, float* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_dsbevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * kd, double* ab, lapack_int * ldab, double* q, lapack_int * ldq, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, double* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_chbevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * q, lapack_int * ldq, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_zhbevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * q, lapack_int * ldq, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_sstev(char* jobz, lapack_int * n, float* d, float* e, float* z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_dstev(char* jobz, lapack_int * n, double* d, double* e, double* z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_sstevd(char* jobz, lapack_int * n, float* d, float* e, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dstevd(char* jobz, lapack_int * n, double* d, double* e, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_sstevx(char* jobz, char* range, lapack_int * n, float* d, float* e, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, float* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_dstevx(char* jobz, char* range, lapack_int * n, double* d, double* e, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, double* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_sstevr(char* jobz, char* range, lapack_int * n, float* d, float* e, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, lapack_int * isuppz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dstevr(char* jobz, char* range, lapack_int * n, double* d, double* e, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, lapack_int * isuppz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_sgees(char* jobvs, char* sort, LAPACK_S_SELECT2 select, lapack_int * n, float* a, lapack_int * lda, lapack_int * sdim, float* wr, float* wi, float* vs, lapack_int * ldvs, float* work, lapack_int * lwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_dgees(char* jobvs, char* sort, LAPACK_D_SELECT2 select, lapack_int * n, double* a, lapack_int * lda, lapack_int * sdim, double* wr, double* wi, double* vs, lapack_int * ldvs, double* work, lapack_int * lwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_cgees(char* jobvs, char* sort, LAPACK_C_SELECT1 select, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * sdim, lapack_complex_float * w, lapack_complex_float * vs, lapack_int * ldvs, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_zgees(char* jobvs, char* sort, LAPACK_Z_SELECT1 select, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * sdim, lapack_complex_double * w, lapack_complex_double * vs, lapack_int * ldvs, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_sgeesx(char* jobvs, char* sort, LAPACK_S_SELECT2 select, char* sense, lapack_int * n, float* a, lapack_int * lda, lapack_int * sdim, float* wr, float* wi, float* vs, lapack_int * ldvs, float* rconde, float* rcondv, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_dgeesx(char* jobvs, char* sort, LAPACK_D_SELECT2 select, char* sense, lapack_int * n, double* a, lapack_int * lda, lapack_int * sdim, double* wr, double* wi, double* vs, lapack_int * ldvs, double* rconde, double* rcondv, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_cgeesx(char* jobvs, char* sort, LAPACK_C_SELECT1 select, char* sense, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * sdim, lapack_complex_float * w, lapack_complex_float * vs, lapack_int * ldvs, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_zgeesx(char* jobvs, char* sort, LAPACK_Z_SELECT1 select, char* sense, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * sdim, lapack_complex_double * w, lapack_complex_double * vs, lapack_int * ldvs, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_sgeev(char* jobvl, char* jobvr, lapack_int * n, float* a, lapack_int * lda, float* wr, float* wi, float* vl, lapack_int * ldvl, float* vr, lapack_int * ldvr, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgeev(char* jobvl, char* jobvr, lapack_int * n, double* a, lapack_int * lda, double* wr, double* wi, double* vl, lapack_int * ldvl, double* vr, lapack_int * ldvr, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgeev(char* jobvl, char* jobvr, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * w, lapack_complex_float * vl, lapack_int * ldvl, lapack_complex_float * vr, lapack_int * ldvr, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zgeev(char* jobvl, char* jobvr, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * w, lapack_complex_double * vl, lapack_int * ldvl, lapack_complex_double * vr, lapack_int * ldvr, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_sgeevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, float* a, lapack_int * lda, float* wr, float* wi, float* vl, lapack_int * ldvl, float* vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, float* scale, float* abnrm, float* rconde, float* rcondv, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dgeevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, double* a, lapack_int * lda, double* wr, double* wi, double* vl, lapack_int * ldvl, double* vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, double* scale, double* abnrm, double* rconde, double* rcondv, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_cgeevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * w, lapack_complex_float * vl, lapack_int * ldvl, lapack_complex_float * vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, float* scale, float* abnrm, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zgeevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * w, lapack_complex_double * vl, lapack_int * ldvl, lapack_complex_double * vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, double* scale, double* abnrm, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_sgesvd(char* jobu, char* jobvt, lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* s, float* u, lapack_int * ldu, float* vt, lapack_int * ldvt, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgesvd(char* jobu, char* jobvt, lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* s, double* u, lapack_int * ldu, double* vt, lapack_int * ldvt, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgesvd(char* jobu, char* jobvt, lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* s, lapack_complex_float * u, lapack_int * ldu, lapack_complex_float * vt, lapack_int * ldvt, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zgesvd(char* jobu, char* jobvt, lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* s, lapack_complex_double * u, lapack_int * ldu, lapack_complex_double * vt, lapack_int * ldvt, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_sgesdd(char* jobz, lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* s, float* u, lapack_int * ldu, float* vt, lapack_int * ldvt, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dgesdd(char* jobz, lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* s, double* u, lapack_int * ldu, double* vt, lapack_int * ldvt, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_cgesdd(char* jobz, lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* s, lapack_complex_float * u, lapack_int * ldu, lapack_complex_float * vt, lapack_int * ldvt, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * iwork, lapack_int * info);
void LAPACK_zgesdd(char* jobz, lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* s, lapack_complex_double * u, lapack_int * ldu, lapack_complex_double * vt, lapack_int * ldvt, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dgejsv(char* joba, char* jobu, char* jobv, char* jobr, char* jobt, char* jobp, lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* sva, double* u, lapack_int * ldu, double* v, lapack_int * ldv, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_sgejsv(char* joba, char* jobu, char* jobv, char* jobr, char* jobt, char* jobp, lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* sva, float* u, lapack_int * ldu, float* v, lapack_int * ldv, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dgesvj(char* joba, char* jobu, char* jobv, lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* sva, lapack_int * mv, double* v, lapack_int * ldv, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgesvj(char* joba, char* jobu, char* jobv, lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* sva, lapack_int * mv, float* v, lapack_int * ldv, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sggsvd(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * n, lapack_int * p, lapack_int * k, lapack_int * l, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* alpha, float* beta, float* u, lapack_int * ldu, float* v, lapack_int * ldv, float* q, lapack_int * ldq, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dggsvd(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * n, lapack_int * p, lapack_int * k, lapack_int * l, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* alpha, double* beta, double* u, lapack_int * ldu, double* v, lapack_int * ldv, double* q, lapack_int * ldq, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cggsvd(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * n, lapack_int * p, lapack_int * k, lapack_int * l, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* alpha, float* beta, lapack_complex_float * u, lapack_int * ldu, lapack_complex_float * v, lapack_int * ldv, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * info);
void LAPACK_zggsvd(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * n, lapack_int * p, lapack_int * k, lapack_int * l, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* alpha, double* beta, lapack_complex_double * u, lapack_int * ldu, lapack_complex_double * v, lapack_int * ldv, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * info);
void LAPACK_ssygv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* w, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dsygv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* w, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_chegv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* w, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zhegv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* w, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_ssygvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* w, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dsygvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* w, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_chegvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* w, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zhegvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* w, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_ssygvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_dsygvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_chegvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_zhegvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_sspgv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, float* ap, float* bp, float* w, float* z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_dspgv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, double* ap, double* bp, double* w, double* z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_chpgv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_float * ap, lapack_complex_float * bp, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zhpgv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_double * ap, lapack_complex_double * bp, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sspgvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, float* ap, float* bp, float* w, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dspgvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, double* ap, double* bp, double* w, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_chpgvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_float * ap, lapack_complex_float * bp, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zhpgvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_double * ap, lapack_complex_double * bp, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_sspgvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, float* ap, float* bp, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, float* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_dspgvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, double* ap, double* bp, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, double* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_chpgvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_float * ap, lapack_complex_float * bp, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_zhpgvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_double * ap, lapack_complex_double * bp, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_ssbgv(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, float* ab, lapack_int * ldab, float* bb, lapack_int * ldbb, float* w, float* z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_dsbgv(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, double* ab, lapack_int * ldab, double* bb, lapack_int * ldbb, double* w, double* z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_chbgv(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * bb, lapack_int * ldbb, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zhbgv(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * bb, lapack_int * ldbb, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_ssbgvd(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, float* ab, lapack_int * ldab, float* bb, lapack_int * ldbb, float* w, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dsbgvd(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, double* ab, lapack_int * ldab, double* bb, lapack_int * ldbb, double* w, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_chbgvd(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * bb, lapack_int * ldbb, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zhbgvd(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * bb, lapack_int * ldbb, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_ssbgvx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, float* ab, lapack_int * ldab, float* bb, lapack_int * ldbb, float* q, lapack_int * ldq, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, float* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_dsbgvx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, double* ab, lapack_int * ldab, double* bb, lapack_int * ldbb, double* q, lapack_int * ldq, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, double* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_chbgvx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * bb, lapack_int * ldbb, lapack_complex_float * q, lapack_int * ldq, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_zhbgvx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * bb, lapack_int * ldbb, lapack_complex_double * q, lapack_int * ldq, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_sgges(char* jobvsl, char* jobvsr, char* sort, LAPACK_S_SELECT3 selctg, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, lapack_int * sdim, float* alphar, float* alphai, float* beta, float* vsl, lapack_int * ldvsl, float* vsr, lapack_int * ldvsr, float* work, lapack_int * lwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_dgges(char* jobvsl, char* jobvsr, char* sort, LAPACK_D_SELECT3 selctg, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, lapack_int * sdim, double* alphar, double* alphai, double* beta, double* vsl, lapack_int * ldvsl, double* vsr, lapack_int * ldvsr, double* work, lapack_int * lwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_cgges(char* jobvsl, char* jobvsr, char* sort, LAPACK_C_SELECT2 selctg, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_int * sdim, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vsl, lapack_int * ldvsl, lapack_complex_float * vsr, lapack_int * ldvsr, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_zgges(char* jobvsl, char* jobvsr, char* sort, LAPACK_Z_SELECT2 selctg, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_int * sdim, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vsl, lapack_int * ldvsl, lapack_complex_double * vsr, lapack_int * ldvsr, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_sggesx(char* jobvsl, char* jobvsr, char* sort, LAPACK_S_SELECT3 selctg, char* sense, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, lapack_int * sdim, float* alphar, float* alphai, float* beta, float* vsl, lapack_int * ldvsl, float* vsr, lapack_int * ldvsr, float* rconde, float* rcondv, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_dggesx(char* jobvsl, char* jobvsr, char* sort, LAPACK_D_SELECT3 selctg, char* sense, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, lapack_int * sdim, double* alphar, double* alphai, double* beta, double* vsl, lapack_int * ldvsl, double* vsr, lapack_int * ldvsr, double* rconde, double* rcondv, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_cggesx(char* jobvsl, char* jobvsr, char* sort, LAPACK_C_SELECT2 selctg, char* sense, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_int * sdim, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vsl, lapack_int * ldvsl, lapack_complex_float * vsr, lapack_int * ldvsr, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * iwork, lapack_int * liwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_zggesx(char* jobvsl, char* jobvsr, char* sort, LAPACK_Z_SELECT2 selctg, char* sense, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_int * sdim, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vsl, lapack_int * ldvsl, lapack_complex_double * vsr, lapack_int * ldvsr, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * iwork, lapack_int * liwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_sggev(char* jobvl, char* jobvr, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* alphar, float* alphai, float* beta, float* vl, lapack_int * ldvl, float* vr, lapack_int * ldvr, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dggev(char* jobvl, char* jobvr, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* alphar, double* alphai, double* beta, double* vl, lapack_int * ldvl, double* vr, lapack_int * ldvr, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cggev(char* jobvl, char* jobvr, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vl, lapack_int * ldvl, lapack_complex_float * vr, lapack_int * ldvr, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zggev(char* jobvl, char* jobvr, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vl, lapack_int * ldvl, lapack_complex_double * vr, lapack_int * ldvr, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_sggevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* alphar, float* alphai, float* beta, float* vl, lapack_int * ldvl, float* vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv, float* work, lapack_int * lwork, lapack_int * iwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_dggevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* alphar, double* alphai, double* beta, double* vl, lapack_int * ldvl, double* vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv, double* work, lapack_int * lwork, lapack_int * iwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_cggevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vl, lapack_int * ldvl, lapack_complex_float * vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * iwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_zggevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vl, lapack_int * ldvl, lapack_complex_double * vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * iwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_dsfrk(char* transr, char* uplo, char* trans, lapack_int * n, lapack_int * k, double* alpha, const double* a, lapack_int * lda, double* beta, double* c);
void LAPACK_ssfrk(char* transr, char* uplo, char* trans, lapack_int * n, lapack_int * k, float* alpha, const float* a, lapack_int * lda, float* beta, float* c);
void LAPACK_zhfrk(char* transr, char* uplo, char* trans, lapack_int * n, lapack_int * k, double* alpha, const lapack_complex_double * a, lapack_int * lda, double* beta, lapack_complex_double * c);
void LAPACK_chfrk(char* transr, char* uplo, char* trans, lapack_int * n, lapack_int * k, float* alpha, const lapack_complex_float * a, lapack_int * lda, float* beta, lapack_complex_float * c);
void LAPACK_dtfsm(char* transr, char* side, char* uplo, char* trans, char* diag, lapack_int * m, lapack_int * n, double* alpha, const double* a, double* b, lapack_int * ldb);
void LAPACK_stfsm(char* transr, char* side, char* uplo, char* trans, char* diag, lapack_int * m, lapack_int * n, float* alpha, const float* a, float* b, lapack_int * ldb);
void LAPACK_ztfsm(char* transr, char* side, char* uplo, char* trans, char* diag, lapack_int * m, lapack_int * n, lapack_complex_double * alpha, const lapack_complex_double * a, lapack_complex_double * b, lapack_int * ldb);
void LAPACK_ctfsm(char* transr, char* side, char* uplo, char* trans, char* diag, lapack_int * m, lapack_int * n, lapack_complex_float * alpha, const lapack_complex_float * a, lapack_complex_float * b, lapack_int * ldb);
void LAPACK_dtfttp(char* transr, char* uplo, lapack_int * n, const double* arf, double* ap, lapack_int * info);
void LAPACK_stfttp(char* transr, char* uplo, lapack_int * n, const float* arf, float* ap, lapack_int * info);
void LAPACK_ztfttp(char* transr, char* uplo, lapack_int * n, const lapack_complex_double * arf, lapack_complex_double * ap, lapack_int * info);
void LAPACK_ctfttp(char* transr, char* uplo, lapack_int * n, const lapack_complex_float * arf, lapack_complex_float * ap, lapack_int * info);
void LAPACK_dtfttr(char* transr, char* uplo, lapack_int * n, const double* arf, double* a, lapack_int * lda, lapack_int * info);
void LAPACK_stfttr(char* transr, char* uplo, lapack_int * n, const float* arf, float* a, lapack_int * lda, lapack_int * info);
void LAPACK_ztfttr(char* transr, char* uplo, lapack_int * n, const lapack_complex_double * arf, lapack_complex_double * a, lapack_int * lda, lapack_int * info);
void LAPACK_ctfttr(char* transr, char* uplo, lapack_int * n, const lapack_complex_float * arf, lapack_complex_float * a, lapack_int * lda, lapack_int * info);
void LAPACK_dtpttf(char* transr, char* uplo, lapack_int * n, const double* ap, double* arf, lapack_int * info);
void LAPACK_stpttf(char* transr, char* uplo, lapack_int * n, const float* ap, float* arf, lapack_int * info);
void LAPACK_ztpttf(char* transr, char* uplo, lapack_int * n, const lapack_complex_double * ap, lapack_complex_double * arf, lapack_int * info);
void LAPACK_ctpttf(char* transr, char* uplo, lapack_int * n, const lapack_complex_float * ap, lapack_complex_float * arf, lapack_int * info);
void LAPACK_dtpttr(char* uplo, lapack_int * n, const double* ap, double* a, lapack_int * lda, lapack_int * info);
void LAPACK_stpttr(char* uplo, lapack_int * n, const float* ap, float* a, lapack_int * lda, lapack_int * info);
void LAPACK_ztpttr(char* uplo, lapack_int * n, const lapack_complex_double * ap, lapack_complex_double * a, lapack_int * lda, lapack_int * info);
void LAPACK_ctpttr(char* uplo, lapack_int * n, const lapack_complex_float * ap, lapack_complex_float * a, lapack_int * lda, lapack_int * info);
void LAPACK_dtrttf(char* transr, char* uplo, lapack_int * n, const double* a, lapack_int * lda, double* arf, lapack_int * info);
void LAPACK_strttf(char* transr, char* uplo, lapack_int * n, const float* a, lapack_int * lda, float* arf, lapack_int * info);
void LAPACK_ztrttf(char* transr, char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, lapack_complex_double * arf, lapack_int * info);
void LAPACK_ctrttf(char* transr, char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, lapack_complex_float * arf, lapack_int * info);
void LAPACK_dtrttp(char* uplo, lapack_int * n, const double* a, lapack_int * lda, double* ap, lapack_int * info);
void LAPACK_strttp(char* uplo, lapack_int * n, const float* a, lapack_int * lda, float* ap, lapack_int * info);
void LAPACK_ztrttp(char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, lapack_complex_double * ap, lapack_int * info);
void LAPACK_ctrttp(char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, lapack_complex_float * ap, lapack_int * info);
void LAPACK_sgeqrfp(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgeqrfp(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgeqrfp(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgeqrfp(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_clacgv(lapack_int * n, lapack_complex_float * x, lapack_int * incx);
void LAPACK_zlacgv(lapack_int * n, lapack_complex_double * x, lapack_int * incx);
void LAPACK_slarnv(lapack_int * idist, lapack_int * iseed, lapack_int * n, float* x);
void LAPACK_dlarnv(lapack_int * idist, lapack_int * iseed, lapack_int * n, double* x);
void LAPACK_clarnv(lapack_int * idist, lapack_int * iseed, lapack_int * n, lapack_complex_float * x);
void LAPACK_zlarnv(lapack_int * idist, lapack_int * iseed, lapack_int * n, lapack_complex_double * x);
void LAPACK_sgeqr2(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * info);
void LAPACK_dgeqr2(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * info);
void LAPACK_cgeqr2(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * info);
void LAPACK_zgeqr2(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * info);
void LAPACK_slacpy(char* uplo, lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, float* b, lapack_int * ldb);
void LAPACK_dlacpy(char* uplo, lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, double* b, lapack_int * ldb);
void LAPACK_clacpy(char* uplo, lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb);
void LAPACK_zlacpy(char* uplo, lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb);
void LAPACK_sgetf2(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_dgetf2(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_cgetf2(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_zgetf2(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_slaswp(lapack_int * n, float* a, lapack_int * lda, lapack_int * k1, lapack_int * k2, const lapack_int * ipiv, lapack_int * incx);
void LAPACK_dlaswp(lapack_int * n, double* a, lapack_int * lda, lapack_int * k1, lapack_int * k2, const lapack_int * ipiv, lapack_int * incx);
void LAPACK_claswp(lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * k1, lapack_int * k2, const lapack_int * ipiv, lapack_int * incx);
void LAPACK_zlaswp(lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * k1, lapack_int * k2, const lapack_int * ipiv, lapack_int * incx);
float LAPACK_slange(char* norm, lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, float* work);
double LAPACK_dlange(char* norm, lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, double* work);
float LAPACK_clange(char* norm, lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* work);
double LAPACK_zlange(char* norm, lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* work);
float LAPACK_clanhe(char* norm, char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* work);
double LAPACK_zlanhe(char* norm, char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* work);
float LAPACK_slansy(char* norm, char* uplo, lapack_int * n, const float* a, lapack_int * lda, float* work);
double LAPACK_dlansy(char* norm, char* uplo, lapack_int * n, const double* a, lapack_int * lda, double* work);
float LAPACK_clansy(char* norm, char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* work);
double LAPACK_zlansy(char* norm, char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* work);
float LAPACK_slantr(char* norm, char* uplo, char* diag, lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, float* work);
double LAPACK_dlantr(char* norm, char* uplo, char* diag, lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, double* work);
float LAPACK_clantr(char* norm, char* uplo, char* diag, lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* work);
double LAPACK_zlantr(char* norm, char* uplo, char* diag, lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* work);
float LAPACK_slamch(char* cmach);
double LAPACK_dlamch(char* cmach);
void LAPACK_sgelq2(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * info);
void LAPACK_dgelq2(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * info);
void LAPACK_cgelq2(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * info);
void LAPACK_zgelq2(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * info);
void LAPACK_slarfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, const float* v, lapack_int * ldv, const float* t, lapack_int * ldt, float* c, lapack_int * ldc, float* work, lapack_int * ldwork);
void LAPACK_dlarfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, const double* v, lapack_int * ldv, const double* t, lapack_int * ldt, double* c, lapack_int * ldc, double* work, lapack_int * ldwork);
void LAPACK_clarfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_float * v, lapack_int * ldv, const lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * ldwork);
void LAPACK_zlarfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_double * v, lapack_int * ldv, const lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * ldwork);
void LAPACK_slarfg(lapack_int * n, float* alpha, float* x, lapack_int * incx, float* tau);
void LAPACK_dlarfg(lapack_int * n, double* alpha, double* x, lapack_int * incx, double* tau);
void LAPACK_clarfg(lapack_int * n, lapack_complex_float * alpha, lapack_complex_float * x, lapack_int * incx, lapack_complex_float * tau);
void LAPACK_zlarfg(lapack_int * n, lapack_complex_double * alpha, lapack_complex_double * x, lapack_int * incx, lapack_complex_double * tau);
void LAPACK_slarft(char* direct, char* storev, lapack_int * n, lapack_int * k, const float* v, lapack_int * ldv, const float* tau, float* t, lapack_int * ldt);
void LAPACK_dlarft(char* direct, char* storev, lapack_int * n, lapack_int * k, const double* v, lapack_int * ldv, const double* tau, double* t, lapack_int * ldt);
void LAPACK_clarft(char* direct, char* storev, lapack_int * n, lapack_int * k, const lapack_complex_float * v, lapack_int * ldv, const lapack_complex_float * tau, lapack_complex_float * t, lapack_int * ldt);
void LAPACK_zlarft(char* direct, char* storev, lapack_int * n, lapack_int * k, const lapack_complex_double * v, lapack_int * ldv, const lapack_complex_double * tau, lapack_complex_double * t, lapack_int * ldt);
void LAPACK_slarfx(char* side, lapack_int * m, lapack_int * n, const float* v, float* tau, float* c, lapack_int * ldc, float* work);
void LAPACK_dlarfx(char* side, lapack_int * m, lapack_int * n, const double* v, double* tau, double* c, lapack_int * ldc, double* work);
void LAPACK_clarfx(char* side, lapack_int * m, lapack_int * n, const lapack_complex_float * v, lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work);
void LAPACK_zlarfx(char* side, lapack_int * m, lapack_int * n, const lapack_complex_double * v, lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work);
void LAPACK_slatms(lapack_int * m, lapack_int * n, char* dist, lapack_int * iseed, char* sym, float* d, lapack_int * mode, float* cond, float* dmax, lapack_int * kl, lapack_int * ku, char* pack, float* a, lapack_int * lda, float* work, lapack_int * info);
void LAPACK_dlatms(lapack_int * m, lapack_int * n, char* dist, lapack_int * iseed, char* sym, double* d, lapack_int * mode, double* cond, double* dmax, lapack_int * kl, lapack_int * ku, char* pack, double* a, lapack_int * lda, double* work, lapack_int * info);
void LAPACK_clatms(lapack_int * m, lapack_int * n, char* dist, lapack_int * iseed, char* sym, float* d, lapack_int * mode, float* cond, float* dmax, lapack_int * kl, lapack_int * ku, char* pack, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * work, lapack_int * info);
void LAPACK_zlatms(lapack_int * m, lapack_int * n, char* dist, lapack_int * iseed, char* sym, double* d, lapack_int * mode, double* cond, double* dmax, lapack_int * kl, lapack_int * ku, char* pack, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * work, lapack_int * info);
void LAPACK_slag2d(lapack_int * m, lapack_int * n, const float* sa, lapack_int * ldsa, double* a, lapack_int * lda, lapack_int * info);
void LAPACK_dlag2s(lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, float* sa, lapack_int * ldsa, lapack_int * info);
void LAPACK_clag2z(lapack_int * m, lapack_int * n, const lapack_complex_float * sa, lapack_int * ldsa, lapack_complex_double * a, lapack_int * lda, lapack_int * info);
void LAPACK_zlag2c(lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, lapack_complex_float * sa, lapack_int * ldsa, lapack_int * info);
void LAPACK_slauum(char* uplo, lapack_int * n, float* a, lapack_int * lda, lapack_int * info);
void LAPACK_dlauum(char* uplo, lapack_int * n, double* a, lapack_int * lda, lapack_int * info);
void LAPACK_clauum(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * info);
void LAPACK_zlauum(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * info);
void LAPACK_slagge(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const float* d, float* a, lapack_int * lda, lapack_int * iseed, float* work, lapack_int * info);
void LAPACK_dlagge(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const double* d, double* a, lapack_int * lda, lapack_int * iseed, double* work, lapack_int * info);
void LAPACK_clagge(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const float* d, lapack_complex_float * a, lapack_int * lda, lapack_int * iseed, lapack_complex_float * work, lapack_int * info);
void LAPACK_zlagge(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const double* d, lapack_complex_double * a, lapack_int * lda, lapack_int * iseed, lapack_complex_double * work, lapack_int * info);
void LAPACK_slaset(char* uplo, lapack_int * m, lapack_int * n, float* alpha, float* beta, float* a, lapack_int * lda);
void LAPACK_dlaset(char* uplo, lapack_int * m, lapack_int * n, double* alpha, double* beta, double* a, lapack_int * lda);
void LAPACK_claset(char* uplo, lapack_int * m, lapack_int * n, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * a, lapack_int * lda);
void LAPACK_zlaset(char* uplo, lapack_int * m, lapack_int * n, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * a, lapack_int * lda);
void LAPACK_slasrt(char* id, lapack_int * n, float* d, lapack_int * info);
void LAPACK_dlasrt(char* id, lapack_int * n, double* d, lapack_int * info);
void LAPACK_claghe(lapack_int * n, lapack_int * k, const float* d, lapack_complex_float * a, lapack_int * lda, lapack_int * iseed, lapack_complex_float * work, lapack_int * info);
void LAPACK_zlaghe(lapack_int * n, lapack_int * k, const double* d, lapack_complex_double * a, lapack_int * lda, lapack_int * iseed, lapack_complex_double * work, lapack_int * info);
void LAPACK_slagsy(lapack_int * n, lapack_int * k, const float* d, float* a, lapack_int * lda, lapack_int * iseed, float* work, lapack_int * info);
void LAPACK_dlagsy(lapack_int * n, lapack_int * k, const double* d, double* a, lapack_int * lda, lapack_int * iseed, double* work, lapack_int * info);
void LAPACK_clagsy(lapack_int * n, lapack_int * k, const float* d, lapack_complex_float * a, lapack_int * lda, lapack_int * iseed, lapack_complex_float * work, lapack_int * info);
void LAPACK_zlagsy(lapack_int * n, lapack_int * k, const double* d, lapack_complex_double * a, lapack_int * lda, lapack_int * iseed, lapack_complex_double * work, lapack_int * info);
void LAPACK_slapmr(lapack_logical * forwrd, lapack_int * m, lapack_int * n, float* x, lapack_int * ldx, lapack_int * k);
void LAPACK_dlapmr(lapack_logical * forwrd, lapack_int * m, lapack_int * n, double* x, lapack_int * ldx, lapack_int * k);
void LAPACK_clapmr(lapack_logical * forwrd, lapack_int * m, lapack_int * n, lapack_complex_float * x, lapack_int * ldx, lapack_int * k);
void LAPACK_zlapmr(lapack_logical * forwrd, lapack_int * m, lapack_int * n, lapack_complex_double * x, lapack_int * ldx, lapack_int * k);
float LAPACK_slapy2(float* x, float* y);
double LAPACK_dlapy2(double* x, double* y);
float LAPACK_slapy3(float* x, float* y, float* z);
double LAPACK_dlapy3(double* x, double* y, double* z);
void LAPACK_slartgp(float* f, float* g, float* cs, float* sn, float* r);
void LAPACK_dlartgp(double* f, double* g, double* cs, double* sn, double* r);
void LAPACK_slartgs(float* x, float* y, float* sigma, float* cs, float* sn);
void LAPACK_dlartgs(double* x, double* y, double* sigma, double* cs, double* sn);
0
void LAPACK_cbbcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, lapack_int * m, lapack_int * p, lapack_int * q, float* theta, float* phi, lapack_complex_float * u1, lapack_int * ldu1, lapack_complex_float * u2, lapack_int * ldu2, lapack_complex_float * v1t, lapack_int * ldv1t, lapack_complex_float * v2t, lapack_int * ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e, float* rwork, lapack_int * lrwork, lapack_int * info);
void LAPACK_cheswapr(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * i1, lapack_int * i2);
void LAPACK_chetri2(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_chetri2x(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * nb, lapack_int * info);
void LAPACK_chetrs2(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * work, lapack_int * info);
void LAPACK_csyconv(char* uplo, char* way, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * info);
void LAPACK_csyswapr(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * i1, lapack_int * i2);
void LAPACK_csytri2(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_csytri2x(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * nb, lapack_int * info);
void LAPACK_csytrs2(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * work, lapack_int * info);
void LAPACK_cunbdb(char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, lapack_complex_float * x11, lapack_int * ldx11, lapack_complex_float * x12, lapack_int * ldx12, lapack_complex_float * x21, lapack_int * ldx21, lapack_complex_float * x22, lapack_int * ldx22, float* theta, float* phi, lapack_complex_float * taup1, lapack_complex_float * taup2, lapack_complex_float * tauq1, lapack_complex_float * tauq2, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_cuncsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, lapack_complex_float * x11, lapack_int * ldx11, lapack_complex_float * x12, lapack_int * ldx12, lapack_complex_float * x21, lapack_int * ldx21, lapack_complex_float * x22, lapack_int * ldx22, float* theta, lapack_complex_float * u1, lapack_int * ldu1, lapack_complex_float * u2, lapack_int * ldu2, lapack_complex_float * v1t, lapack_int * ldv1t, lapack_complex_float * v2t, lapack_int * ldv2t, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dbbcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, lapack_int * m, lapack_int * p, lapack_int * q, double* theta, double* phi, double* u1, lapack_int * ldu1, double* u2, lapack_int * ldu2, double* v1t, lapack_int * ldv1t, double* v2t, lapack_int * ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorbdb(char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, double* x11, lapack_int * ldx11, double* x12, lapack_int * ldx12, double* x21, lapack_int * ldx21, double* x22, lapack_int * ldx22, double* theta, double* phi, double* taup1, double* taup2, double* tauq1, double* tauq2, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, double* x11, lapack_int * ldx11, double* x12, lapack_int * ldx12, double* x21, lapack_int * ldx21, double* x22, lapack_int * ldx22, double* theta, double* u1, lapack_int * ldu1, double* u2, lapack_int * ldu2, double* v1t, lapack_int * ldv1t, double* v2t, lapack_int * ldv2t, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dsyconv(char* uplo, char* way, lapack_int * n, double* a, lapack_int * lda, const lapack_int * ipiv, double* work, lapack_int * info);
void LAPACK_dsyswapr(char* uplo, lapack_int * n, double* a, lapack_int * i1, lapack_int * i2);
void LAPACK_dsytri2(char* uplo, lapack_int * n, double* a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_dsytri2x(char* uplo, lapack_int * n, double* a, lapack_int * lda, const lapack_int * ipiv, double* work, lapack_int * nb, lapack_int * info);
void LAPACK_dsytrs2(char* uplo, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const lapack_int * ipiv, double* b, lapack_int * ldb, double* work, lapack_int * info);
void LAPACK_sbbcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, lapack_int * m, lapack_int * p, lapack_int * q, float* theta, float* phi, float* u1, lapack_int * ldu1, float* u2, lapack_int * ldu2, float* v1t, lapack_int * ldv1t, float* v2t, lapack_int * ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sorbdb(char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, float* x11, lapack_int * ldx11, float* x12, lapack_int * ldx12, float* x21, lapack_int * ldx21, float* x22, lapack_int * ldx22, float* theta, float* phi, float* taup1, float* taup2, float* tauq1, float* tauq2, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sorcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, float* x11, lapack_int * ldx11, float* x12, lapack_int * ldx12, float* x21, lapack_int * ldx21, float* x22, lapack_int * ldx22, float* theta, float* u1, lapack_int * ldu1, float* u2, lapack_int * ldu2, float* v1t, lapack_int * ldv1t, float* v2t, lapack_int * ldv2t, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_ssyconv(char* uplo, char* way, lapack_int * n, float* a, lapack_int * lda, const lapack_int * ipiv, float* work, lapack_int * info);
void LAPACK_ssyswapr(char* uplo, lapack_int * n, float* a, lapack_int * i1, lapack_int * i2);
void LAPACK_ssytri2(char* uplo, lapack_int * n, float* a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_ssytri2x(char* uplo, lapack_int * n, float* a, lapack_int * lda, const lapack_int * ipiv, float* work, lapack_int * nb, lapack_int * info);
void LAPACK_ssytrs2(char* uplo, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const lapack_int * ipiv, float* b, lapack_int * ldb, float* work, lapack_int * info);
void LAPACK_zbbcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, lapack_int * m, lapack_int * p, lapack_int * q, double* theta, double* phi, lapack_complex_double * u1, lapack_int * ldu1, lapack_complex_double * u2, lapack_int * ldu2, lapack_complex_double * v1t, lapack_int * ldv1t, lapack_complex_double * v2t, lapack_int * ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e, double* rwork, lapack_int * lrwork, lapack_int * info);
void LAPACK_zheswapr(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * i1, lapack_int * i2);
void LAPACK_zhetri2(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zhetri2x(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * nb, lapack_int * info);
void LAPACK_zhetrs2(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * work, lapack_int * info);
void LAPACK_zsyconv(char* uplo, char* way, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * info);
void LAPACK_zsyswapr(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * i1, lapack_int * i2);
void LAPACK_zsytri2(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zsytri2x(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * nb, lapack_int * info);
void LAPACK_zsytrs2(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * work, lapack_int * info);
void LAPACK_zunbdb(char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, lapack_complex_double * x11, lapack_int * ldx11, lapack_complex_double * x12, lapack_int * ldx12, lapack_complex_double * x21, lapack_int * ldx21, lapack_complex_double * x22, lapack_int * ldx22, double* theta, double* phi, lapack_complex_double * taup1, lapack_complex_double * taup2, lapack_complex_double * tauq1, lapack_complex_double * tauq2, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zuncsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, lapack_complex_double * x11, lapack_int * ldx11, lapack_complex_double * x12, lapack_int * ldx12, lapack_complex_double * x21, lapack_int * ldx21, lapack_complex_double * x22, lapack_int * ldx22, double* theta, lapack_complex_double * u1, lapack_int * ldu1, lapack_complex_double * u2, lapack_int * ldu2, lapack_complex_double * v1t, lapack_int * ldv1t, lapack_complex_double * v2t, lapack_int * ldv2t, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * info);
0
void LAPACK_sgemqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * nb, const float* v, lapack_int * ldv, const float* t, lapack_int * ldt, float* c, lapack_int * ldc, float* work, lapack_int * info);
void LAPACK_dgemqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * nb, const double* v, lapack_int * ldv, const double* t, lapack_int * ldt, double* c, lapack_int * ldc, double* work, lapack_int * info);
void LAPACK_cgemqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * nb, const lapack_complex_float * v, lapack_int * ldv, const lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * info);
void LAPACK_zgemqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * nb, const lapack_complex_double * v, lapack_int * ldv, const lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * info);
void LAPACK_sgeqrt(lapack_int * m, lapack_int * n, lapack_int * nb, float* a, lapack_int * lda, float* t, lapack_int * ldt, float* work, lapack_int * info);
void LAPACK_dgeqrt(lapack_int * m, lapack_int * n, lapack_int * nb, double* a, lapack_int * lda, double* t, lapack_int * ldt, double* work, lapack_int * info);
void LAPACK_cgeqrt(lapack_int * m, lapack_int * n, lapack_int * nb, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * work, lapack_int * info);
void LAPACK_zgeqrt(lapack_int * m, lapack_int * n, lapack_int * nb, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * work, lapack_int * info);
void LAPACK_sgeqrt2(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* t, lapack_int * ldt, lapack_int * info);
void LAPACK_dgeqrt2(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* t, lapack_int * ldt, lapack_int * info);
void LAPACK_cgeqrt2(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * t, lapack_int * ldt, lapack_int * info);
void LAPACK_zgeqrt2(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * t, lapack_int * ldt, lapack_int * info);
void LAPACK_sgeqrt3(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* t, lapack_int * ldt, lapack_int * info);
void LAPACK_dgeqrt3(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* t, lapack_int * ldt, lapack_int * info);
void LAPACK_cgeqrt3(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * t, lapack_int * ldt, lapack_int * info);
void LAPACK_zgeqrt3(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * t, lapack_int * ldt, lapack_int * info);
void LAPACK_stpmqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, lapack_int * nb, const float* v, lapack_int * ldv, const float* t, lapack_int * ldt, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* work, lapack_int * info);
void LAPACK_dtpmqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, lapack_int * nb, const double* v, lapack_int * ldv, const double* t, lapack_int * ldt, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* work, lapack_int * info);
void LAPACK_ctpmqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, lapack_int * nb, const lapack_complex_float * v, lapack_int * ldv, const lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * work, lapack_int * info);
void LAPACK_ztpmqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, lapack_int * nb, const lapack_complex_double * v, lapack_int * ldv, const lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * work, lapack_int * info);
void LAPACK_dtpqrt(lapack_int * m, lapack_int * n, lapack_int * l, lapack_int * nb, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* t, lapack_int * ldt, double* work, lapack_int * info);
void LAPACK_ctpqrt(lapack_int * m, lapack_int * n, lapack_int * l, lapack_int * nb, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * t, lapack_complex_float * b, lapack_int * ldb, lapack_int * ldt, lapack_complex_float * work, lapack_int * info);
void LAPACK_ztpqrt(lapack_int * m, lapack_int * n, lapack_int * l, lapack_int * nb, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * work, lapack_int * info);
void LAPACK_stpqrt2(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* t, lapack_int * ldt, lapack_int * info);
void LAPACK_dtpqrt2(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* t, lapack_int * ldt, lapack_int * info);
void LAPACK_ctpqrt2(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * t, lapack_int * ldt, lapack_int * info);
void LAPACK_ztpqrt2(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * t, lapack_int * ldt, lapack_int * info);
void LAPACK_stprfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const float* v, lapack_int * ldv, const float* t, lapack_int * ldt, float* a, lapack_int * lda, float* b, lapack_int * ldb, const float* mywork, lapack_int * myldwork);
void LAPACK_dtprfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const double* v, lapack_int * ldv, const double* t, lapack_int * ldt, double* a, lapack_int * lda, double* b, lapack_int * ldb, const double* mywork, lapack_int * myldwork);
void LAPACK_ctprfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const lapack_complex_float * v, lapack_int * ldv, const lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, const float* mywork, lapack_int * myldwork);
void LAPACK_ztprfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const lapack_complex_double * v, lapack_int * ldv, const lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, const double* mywork, lapack_int * myldwork);
X
void LAPACK_csyr(char* uplo, lapack_int * n, lapack_complex_float * alpha, const lapack_complex_float * x, lapack_int * incx, lapack_complex_float * a, lapack_int * lda);
void LAPACK_zsyr(char* uplo, lapack_int * n, lapack_complex_double * alpha, const lapack_complex_double * x, lapack_int * incx, lapack_complex_double * a, lapack_int * lda);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

define COLAMD_DEBUG0(void);
define COLAMD_DEBUG1(void);
define COLAMD_DEBUG2(void);
define COLAMD_DEBUG3(void);
define COLAMD_DEBUG4(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Derived& analyzePattern(const MatrixType & matrix);
Derived& factorize(const MatrixType & matrix);
Derived& compute(const MatrixType & matrix);
return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return m_iparm(void);
return m_dparm(void);
check the matrix
void init(void);
Compute the ordering and the symbolic factorization
void analyzePattern(ColSpMatrix & mat);
Compute the numerical factorization
void factorize(ColSpMatrix & mat);
void compute(ColSpMatrix & mat);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

This method is an alias for zeta(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return householderQ(void);
ColPivHouseholderQR& compute(const EigenBase<InputType>&matrix);
void computeInPlace(void);
PlainObject c(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void computeInPlace(void);
PlainObject c(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

FullPivHouseholderQR& compute(const EigenBase<InputType>&matrix);
void computeInPlace(void);
RealScalar biggest(void);
PlainObject c(void);
WorkVectorType workspace(void);
return MatrixQReturnType(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void computeInPlace(void);
PlainObject c(void);
PlainObject c(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
CholMatrixType tmp(void);
CholMatrixType tmp(void);
void factorize_preordered(const CholMatrixType & a);
CholMatrixType tmp(void);
void analyzePattern_preordered(const CholMatrixType & a, bool doLDLT);
void ordering(const MatrixType & a, ConstCholMatrixPtr & pmat, CholMatrixType & ap);
return MatrixL(void);
return MatrixL(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator it(void);
count of nonzeros in column k of L for (typename CholMatrixType::InnerIterator it(ap);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

	// Auto-generated bindings for fftw3_integration

	void init(double estimatedDensity);
	void init(int mode);
	void setZero(void);
	void restart(void);
Scalar & coeffRef(Index i);
Scalar & coeff(Index i);
m_allocatedElements * sizeof(void);
else init(void);
TODO factorize the following code to reduce code generation eigen_assert(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return searchLowerIndex(void);
endif eigen_internal_assert(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator rhsIt(void);
InnerIterator lhsIt(void);
RowMajorMatrix resRow(void);
ColMajorMatrix resCol(void);
InnerIterator rhsIt(void);
InnerIterator lhsIt(void);
ColMajorLhs lhsCol(void);
ColMajorRhs rhsCol(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);
return derived(void);
SrcEvaluatorType srcEvaluator(void);
InnerIterator it(void);
InnerIterator it(void);
InnerIterator i(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EvaluatorType matEval(void);
InnerIterator it(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

IndexVector root(void);
IndexVector pp(void);
InnerIterator it(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

explicit SparseCompressedBase(const SparseCompressedBase<OtherDerived>&);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Scalar& valueRef(void);
EvalIterator i(void);
return derived(void);
EvalIterator i(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LhsEval lhsEval(void);
endif for (Index c = 0; c < rhs.cols();
	Scalar tmp(void);
	LhsInnerIterator it(void);
	LhsEval lhsEval(void);
	LhsInnerIterator it(void);
	LhsEval lhsEval(void);
	LhsInnerIterator it(void);
	LhsInnerIterator it(void);
	LhsNested lhsNested(void);
	RhsNested rhsNested(void);
	LhsNested lhsNested(void);
	RhsNested rhsNested(void);
InnerIterator it(void);
return Scalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator i(void);
Scalar res(void);
InnerIterator i(void);
InnerIterator j(void);
Scalar res(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Scalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return insert(void);
else
return insert(void);
Scalar& insert(Index row, Index col);
inline void reserve(const SizesType & reserveSizes);
return insertBackByOuterInner(void);
void setFromTriplets(const InputIterators & begin, const InputIterators & end);
void setFromTriplets(const InputIterators & begin, const InputIterators & end, DupFunctor dup_func);
return insert(IsRowMajor ? j : i, IsRowMajor ? i : j);
TODO optimize the uncompressed mode to avoid moving and allocating the data twice makeCompressed(void);
return resize(void);
return ConstDiagonalReturnType(void);
return DiagonalReturnType(void);
endif initAssignment(void);
EIGEN_DONT_INLINE Scalar& insertCompressed(Index row, Index col);
EIGEN_DONT_INLINE Scalar& insertUncompressed(Index row, Index col);
InputIterator it(void);
InputIterator it(void);
SparseMatrixType m(void);
value buffers for (Index j = 0; j < outerSize();
	OtherCopyEval otherCopyEval(void);
	InnerIterator it(void);
	InnerIterator it(void);
	return insertUncompressed(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

	// Auto-generated bindings for fftw3_integration

	return derived(void);
inline Derived& assign(const OtherDerived & other);
inline void assignGeneric(const OtherDerived & other);
InnerIterator it(void);
InnerIterator it(void);
Type selfadjointView(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

MatrixType mat(void);
InnerIterator it(void);
InnerIterator it(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LhsNested lhsNested(void);
RhsNested rhsNested(void);
LhsNested lhsNested(void);
RhsNested rhsNested(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Scalar res(void);
InnerIterator iter(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

inline Ref(const SparseMatrix<MatScalar, MatIndex>&expr);
inline Ref(const MappedSparseMatrix<MatScalar, MatIndex>&expr);
inline Ref(const SparseVector<MatScalar, MatIndex>&expr);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void permute_symm_to_symm(const MatrixType & mat, SparseMatrix<typename MatrixType::Scalar, typename MatrixType::StorageIndex>&_dest, const typename MatrixType::StorageIndex * perm = 0);
void permute_symm_to_fullsymm(const MatrixType & mat, SparseMatrix<typename MatrixType::Scalar, typename MatrixType::StorageIndex>&_dest, const typename MatrixType::StorageIndex * perm = 0);
SparseLhsTypeNested lhs_nested(void);
LhsEval lhsEval(void);
LhsIterator i(void);
Scalar res_j(void);
RhsNested rhsNested(void);
LhsNested lhsNested(void);
MatEval matEval(void);
MatIterator it(void);
MatIterator it(void);
MatEval matEval(void);
VectorI count(void);
MatIterator it(void);
MatIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return sparse_sparse_product_with_pruning_impl2(void);
InnerIterator rhsIt(void);
Iterator it(void);
ColMajorMatrixLhs colLhs(void);
ColMajorMatrixRhs colRhs(void);
RowMajorMatrixLhs rowLhs(void);
RowMajorMatrixRhs rowRhs(void);
ColMajorMatrixRhs colRhs(void);
ColMajorMatrixLhs colLhs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

operator bool(void);
return Scalar(void);
Scalar& valueRef(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

operator Op(void);
operator Op(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return coeff(IsColVector ? row : col);
return coeffRef(IsColVector ? row : col);
return insertBack(void);
return insertBackUnordered(void);
return insert(void);
endif check_template_parameters(void);
return fill(IsColVector ? r : c);
return fillrand(IsColVector ? r : c);
return insert(void);
SrcEvaluatorType srcEval(void);
InnerIterator it(void);
SrcEvaluatorType srcEval(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

code
* MatrixXd D(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LhsEval lhsEval(void);
Scalar lastVal(void);
LhsIterator it(void);
LhsEval lhsEval(void);
Scalar l_ii(void);
LhsIterator it(void);
LhsEval lhsEval(void);
LhsIterator it(void);
LhsEval lhsEval(void);
make sure the binary search is safe for partially sorted elements
LhsIterator it(void);
LhsIterator it(void);
InnerIterator rhsIt(void);
InnerIterator it(void);
Iterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

helps to detect aliasing when applying the permutations for (Index j = 0; j < B.cols();
	void simplicialfactorize(const MatrixType & matrix);
	Analyze analyzePattern(void);
	Factorize factorize(void);
	helps to detect aliasing when applying the permutations for (Index j = 0; j < B.cols();
		InnerIterator it(void);
		InnerIterator it(void);
		InnerIterator it(void);
		InnerIterator it(void);
		e reorder the matrix according to the postorder of the etree
		PermutationType post_perm(void);
		Set up pointers for integer working arrays
		IndexVector segrep(void);
		IndexVector parent(void);
		IndexVector xplore(void);
		IndexVector repfnz(void);
IndexVector panel_lsub(void);
IndexVector xprune(void);
IndexVector marker(void);
Identify initial relaxed snodes
IndexVector relax_end(void);
InnerIterator it(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Index expand(VectorType & vec, Index & length, Index nbElts, Index keep_prev, Index & num_expansions);
Index memInit(Index m, Index n, Index annz, Index lwork, Index fillratio, Index panel_size, GlobalLU_t & glu);
Index memXpand(VectorType & vec, Index & maxlen, Index nbElts, MemType memtype, Index & num_expansions);
Index snode_dfs(const Index jcol, const Index kcol, const MatrixType & mat, IndexVector & xprune, IndexVector & marker, GlobalLU_t & glu);
Index pivotL(const Index jcol, const RealScalar & diagpivotthresh, IndexVector & perm_r, IndexVector & iperm_c, Index & pivrow, GlobalLU_t & glu);
void dfs_kernel(const StorageIndex jj, IndexVector & perm_r, Index & nseg, IndexVector & panel_lsub, IndexVector & segrep, Ref<IndexVector> repfnz_col, IndexVector & xprune, Ref<IndexVector> marker, IndexVector & parent, IndexVector & xplore, GlobalLU_t & glu, Index & nextl_col, Index krow, Traits & traits);
void panel_dfs(const Index m, const Index w, const Index jcol, MatrixType & A, IndexVector & perm_r, Index & nseg, ScalarVector & dense, IndexVector & panel_lsub, IndexVector & segrep, IndexVector & repfnz, IndexVector & xprune, IndexVector & marker, IndexVector & parent, IndexVector & xplore, GlobalLU_t & glu);
void panel_bmod(const Index m, const Index w, const Index jcol, const Index nseg, ScalarVector & dense, ScalarVector & tempv, IndexVector & segrep, IndexVector & repfnz, GlobalLU_t & glu);
Index column_dfs(const Index m, const Index jcol, IndexVector & perm_r, Index maxsuper, Index & nseg, BlockIndexVector lsub_col, IndexVector & segrep, BlockIndexVector repfnz, IndexVector & xprune, IndexVector & marker, IndexVector & parent, IndexVector & xplore, GlobalLU_t & glu);
Index column_bmod(const Index jcol, const Index nseg, BlockScalarVector dense, ScalarVector & tempv, BlockIndexVector segrep, BlockIndexVector repfnz, Index fpanelc, GlobalLU_t & glu);
Index copy_to_ucol(const Index jcol, const Index nseg, IndexVector & segrep, BlockIndexVector repfnz, IndexVector & perm_r, BlockScalarVector dense, GlobalLU_t & glu);
void pruneL(const Index jcol, const IndexVector & perm_r, const Index pivrow, const Index nseg, const IndexVector & segrep, BlockIndexVector repfnz, IndexVector & xprune, GlobalLU_t & glu);
void countnz(const Index n, Index & nnzL, Index & nnzU, GlobalLU_t & glu);
void fixupL(const Index n, const IndexVector & perm_r, GlobalLU_t & glu);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

should go into ucol(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Post order etree
IndexVector inv_post(void);
Renumber etree in postorder
IndexVector iwork(void);
IndexVector et_save(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static EIGEN_DONT_INLINE void run(const Index segsize, BlockScalarVector & dense, ScalarVector & tempv, ScalarVector & lusup, Index & luptr, const Index lda, const Index nrow, IndexVector & lsub, const Index lptr, const Index no_zeros);
static EIGEN_DONT_INLINE void run(const Index /*segsize*/, BlockScalarVector & dense, ScalarVector& /*tempv*/, ScalarVector & lusup, Index & luptr, const Index lda, const Index nrow, IndexVector & lsub, const Index lptr, const Index no_zeros);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

m * sizeof(void);
m * sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator it(void);
go to the next nonzero dfs_kernel(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

diagonal index
RealScalar pivmax(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

rep irep in U(j] Index jsupno = glu.supno(jcol);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return index(void);
InnerIterator it(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void analyzePattern(const MatrixType & mat);
void factorize(const MatrixType & mat);
type matCpy(void);
Number of nonzero for the current column of R and Q
ScalarVector tval(void);
InnerIterator itp(void);
Scalar tdot(void);
InnerIterator itq(void);
InnerIterator itq(void);
columns to the end
QRMatrixType tempR(void);
other column by column for (Index j = 0; j < res.cols();
	Q * other column by column for (Index j = 0; j < res.cols();

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

		// Auto-generated bindings for fftw3_integration

		MatrixType mat(void);
		return PermutationType(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

		// Auto-generated bindings for fftw3_integration

		void factorize(const MatrixType & matrix);
void factorize(const MatrixType & matrix);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifdef EIGEN_BDCSVD_DEBUG_VERBOSE
IOFormat bdcsvdfmt(" [");
BDCSVD& compute(const MatrixType & matrix, unsigned int computationOptions);
return compute(void);
void allocate(Index rows, Index cols, unsigned int computationOptions);
void divide(Index firstCol, Index lastCol, Index firstRowW, Index firstColW, Index shift);
void computeSVDofM(Index firstCol, Index n, MatrixXr & U, VectorType & singVals, MatrixXr & V);
void computeSingVals(const ArrayRef & col0, const ArrayRef & diag, const IndicesRef & perm, VectorType & singVals, ArrayRef shifts, ArrayRef mus);
void perturbCol0(const ArrayRef & col0, const ArrayRef & diag, const IndicesRef & perm, const VectorType & singVals, const ArrayRef & shifts, const ArrayRef & mus, ArrayRef zhat);
void computeSingVecs(const ArrayRef & zhat, const ArrayRef & diag, const IndicesRef & perm, const VectorType & singVals, const ArrayRef & shifts, const ArrayRef & mus, MatrixXr & U, MatrixXr & V);
void deflation43(Index firstCol, Index shift, Index i, Index size);
void deflation44(Index firstColu, Index firstColm, Index firstRowW, Index firstColW, Index i, Index j, Index size);
void deflation(Index firstCol, Index lastCol, Index k, Index firstRowW, Index firstColW, Index shift);
void copyUV(const HouseholderU & householderU, const HouseholderV & householderV, const NaiveU & naiveU, const NaiveV & naivev);
void structured_update(Dynamic > A, const MatrixXr & B, Index n1);
static RealScalar secularEq(RealScalar x, const ArrayRef & col0, const ArrayRef & diag, const IndicesRef & perm, const ArrayRef & diagShifted, RealScalar shift);
try to deflate singular values in combined matrix deflation(void);
and mus computeSingVals(void);
Compute zhat perturbCol0(void);
endif computeSingVecs(void);
ifdef EIGEN_BDCSVD_SANITY_CHECKS assert(k == 0 || singVals[k] >= singVals[k - 1]);
ifdef EIGEN_BDCSVD_SANITY_CHECKS assert(void);
endif deflation43(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

JacobiSVD& compute(const MatrixType & matrix, unsigned int computationOptions);
return compute(void);
void allocate(Index rows, Index cols, unsigned int computationOptions);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return true if already allocated
bool allocate(Index rows, Index cols, unsigned int computationOptions);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

UpperBidiagonalization& compute(const MatrixType & matrix);
UpperBidiagonalization& computeUnblocked(const MatrixType & matrix);
ColVectorType temp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return umfpack_di_symbolic(void);
return umfpack_dl_symbolic(void);
return umfpack_di_numeric(void);
return umfpack_dl_numeric(void);
return umfpack_di_solve(void);
return umfpack_dl_solve(void);
return umfpack_di_get_lunz(void);
return umfpack_zi_get_lunz(void);
return umfpack_dl_get_lunz(void);
return umfpack_zl_get_lunz(void);
return umfpack_di_get_numeric(void);
return umfpack_zi_get_numeric(void);
return umfpack_dl_get_numeric(void);
return umfpack_zl_get_numeric(void);
return umfpack_di_get_determinant(void);
return umfpack_zi_get_determinant(void);
return umfpack_dl_get_determinant(void);
return umfpack_zl_get_determinant(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LDLT& compute(const EigenBase<InputType>&matrix);
LDLT& rankUpdate(const MatrixBase<Derived>&w, const RealScalar & alpha = 1);
return MatrixL(void);
return MatrixU(void);
MatrixType res(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LLT& compute(const EigenBase<InputType>&matrix);
LLT& rankUpdate(const VectorType & vec, const RealScalar & sigma = 1);
return unblocked(void);
return MatrixL(void);
return MatrixU(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

auto seq(FirstType f, LastType l, IncrType incr);
code
* seqN(void);
auto seq(FirstType f, LastType l);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC explicit Array(const Scalar * data);
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE explicit Array(Index dim);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
explicit ArrayBase(void);
explicit ArrayBase(const ArrayBase<OtherDerived>&);
return derived(void);
return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

SrcEvaluatorType srcEvaluator(void);
DstEvaluatorType dstEvaluator(void);
type tmp(void);
ActualDstType actualDst(void);
SrcEvaluatorType srcEvaluator(void);
DstEvaluatorType dstEvaluator(void);
void check_for_aliasing(const Dst & dst, const Src & src);
endif call_dense_assignment_loop(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Vector sign_vector(void);
return RealScalar(void);
return RealScalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC evaluator_base(const evaluator_base&);
ifndef EIGEN_INTERNAL_DEBUGGING EIGEN_UNUSED_VARIABLE(void);
endif eigen_internal_assert(void);
return op(void);
return op(void);
return op(void);
return op(void);
return op(void);
return op(void);
return m_wrapper(void);
return m_wrapper(void);
col* colStride(void);
col* colStride(void);
return coeff(RowsAtCompileTime == 1 ? 0 : index, RowsAtCompileTime == 1 ? index : 0);
return coeffRef(RowsAtCompileTime == 1 ? 0 : index, RowsAtCompileTime == 1 ? index : 0);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator result(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return isApproxToConstant(void);
return setConstant(void);
return setConstant(void);
return setIdentity(void);
return derived(void);
return setUnit(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return size(void);
EIGEN_DEPRECATED EIGEN_DEVICE_FUNC
Derived& lazyAssign(const DenseBase<OtherDerived>&other);
return derived(void);
EIGEN_DEVICE_FUNC
TransposeReturnType transpose(void);
EIGEN_DEVICE_FUNC
void transposeInPlace(void);
EIGEN_DEVICE_FUNC static const ConstantReturnType Constant(Index rows, Index cols, const Scalar & value);
EIGEN_DEVICE_FUNC static const ConstantReturnType Constant(Index size, const Scalar & value);
EIGEN_DEVICE_FUNC static const ConstantReturnType Constant(const Scalar & value);
EIGEN_DEPRECATED EIGEN_DEVICE_FUNC static const RandomAccessLinSpacedReturnType LinSpaced(Index size, const Scalar & low, const Scalar & high);
EIGEN_DEPRECATED EIGEN_DEVICE_FUNC static const RandomAccessLinSpacedReturnType LinSpaced(const Scalar & low, const Scalar & high);
EIGEN_DEVICE_FUNC static const RandomAccessLinSpacedReturnType LinSpaced(Index size, const Scalar & low, const Scalar & high);
EIGEN_DEVICE_FUNC static const RandomAccessLinSpacedReturnType LinSpaced(const Scalar & low, const Scalar & high);
EIGEN_DEVICE_FUNC static const ConstantReturnType Zero(Index rows, Index cols);
EIGEN_DEVICE_FUNC static const ConstantReturnType Zero(Index size);
EIGEN_DEVICE_FUNC static const ConstantReturnType Zero(void);
EIGEN_DEVICE_FUNC static const ConstantReturnType Ones(Index rows, Index cols);
EIGEN_DEVICE_FUNC static const ConstantReturnType Ones(Index size);
EIGEN_DEVICE_FUNC static const ConstantReturnType Ones(void);
EIGEN_DEVICE_FUNC void fill(const Scalar & value);
EIGEN_DEVICE_FUNC Derived& setConstant(const Scalar & value);
EIGEN_DEVICE_FUNC Derived& setLinSpaced(Index size, const Scalar & low, const Scalar & high);
EIGEN_DEVICE_FUNC Derived& setLinSpaced(const Scalar & low, const Scalar & high);
EIGEN_DEVICE_FUNC Derived& setZero(void);
EIGEN_DEVICE_FUNC Derived& setOnes(void);
EIGEN_DEVICE_FUNC Derived& setRandom(void);
type forceAlignedAccessIf(void);
EIGEN_DEVICE_FUNC RowwiseReturnType rowwise(void);
EIGEN_DEVICE_FUNC ColwiseReturnType colwise(void);
static const RandomReturnType Random(Index rows, Index cols);
static const RandomReturnType Random(Index size);
static const RandomReturnType Random(void);
EIGEN_DEVICE_FUNC ReverseReturnType reverse(void);
EIGEN_DEVICE_FUNC void reverseInPlace(void);
endif

inline iterator begin(void);
inline iterator end(void);
EIGEN_DEVICE_FUNC explicit DenseBase(void);
EIGEN_DEVICE_FUNC DenseBase(void);
EIGEN_DEVICE_FUNC explicit DenseBase(const DenseBase<OtherDerived>&);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return coeff(void);
return coeff(void);
return coeff(void);
void coeffRef(void);
void coeffRefByOuterInner(void);
void writePacket(void);
void writePacketByOuterInner(void);
void copyCoeff(void);
void copyCoeffByOuterInner(void);
void copyPacket(void);
void copyPacketByOuterInner(void);
void stride(void);
void innerStride(void);
void outerStride(void);
void rowStride(void);
void colStride(void);
return coeffRef(void);
return coeffRef(void);
return coeffRef(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

DenseStorage tmp(void);
DenseStorage tmp(void);
DenseStorage tmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return RealScalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

type nested(void);
type otherNested(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

type actual_rhs(void);
type actual_rhs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC inline Target preinterpret(const Packet & a);
return T(void);
return T(void);
return op(void);
return Func(void);
return arg(void);
type ploadu(const typename unpacket_traits<Packet>::type * from, typename unpacket_traits<Packet>::mask_t umask);
EIGEN_DEVICE_FUNC inline Packet pset1frombits(BitsType a);
type pstoreu(Scalar * to, const Packet & from, typename unpacket_traits<Packet>::mask_t umask);
return sin(void);
return cos(void);
return tan(void);
return asin(void);
return acos(void);
return atan(void);
return sinh(void);
return cosh(void);
return tanh(void);
return exp(void);
return log(void);
return log10(void);
return round(void);
return floor(void);
return rint(void);
return ceil(void);
return bool(void);
else pstoreu(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ostream& print_matrix(std::ostream & s, const Derived & _m, const IOFormat & fmt);
compute the largest width for (Index j = 0; j < m.cols();

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

	// Auto-generated bindings for fftw3_integration

	return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

	// Auto-generated bindings for fftw3_integration

	return real(void);
return RealScalar(void);
return imag(void);
return Scalar(void);
return Scalar(void);
return conj(void);
return sqrt(void);
return abs(void);
if EIGEN_HAS_CXX11_MATH EIGEN_USING_STD(void);
if EIGEN_HAS_CXX11_MATH EIGEN_USING_STD(void);
endif
return rint(void);
else EIGEN_USING_STD(void);
return arg(void);
return RealScalar(void);
endif
return expm1(void);
return complex_log(void);
endif
return log1p(void);
return pow(void);
ScalarX res(void);
return isinf_msvc_helper(void);
return isinf_msvc_helper(void);
return isinf_msvc_helper(void);
return __builtin_isnan(void);
return __builtin_isnan(void);
return __builtin_isnan(void);
return __builtin_isinf(void);
return __builtin_isinf(void);
return __builtin_isinf(void);
EIGEN_DEVICE_FUNC bool isfinite_impl(const std::complex<T>&x);
EIGEN_DEVICE_FUNC bool isnan_impl(const std::complex<T>&x);
EIGEN_DEVICE_FUNC bool isinf_impl(const std::complex<T>&x);
return fminf(void);
return fmin(void);
else
return fminl(void);
return fmaxf(void);
return fmax(void);
else
return fmaxl(void);
return fabsf(x - y);
return fabs(x - y);
return fabsl(x - y);
return floor(void);
return ceil(void);
unsigned int v(void);
return sqrt(void);
return abs(void);
return exp(void);
return cos(void);
return sin(void);
return tan(void);
return acos(void);
return asin(void);
return tanh(void);
return fmod(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return RealScalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

VectorXd v(void);
MatrixXi m(void);
EIGEN_DEVICE_FUNC
explicit Matrix(const Scalar * data);
EIGEN_STRONG_INLINE explicit Matrix(Index dim);
EIGEN_DEVICE_FUNC Matrix(Index rows, Index cols);
EIGEN_DEVICE_FUNC
explicit Matrix(const RotationBase<OtherDerived, ColsAtCompileTime>&r);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void applyOnTheLeft(const EigenBase<OtherDerived>&other);
void applyOnTheRight(const EigenBase<OtherDerived>&other);
EIGEN_DEVICE_FUNC void normalize(void);
EIGEN_DEVICE_FUNC void stableNormalize(void);
EIGEN_DEVICE_FUNC void adjointInPlace(void);
EIGEN_DEVICE_FUNC
DiagonalReturnType diagonal(void);
Type diagonal(void);
EIGEN_DEVICE_FUNC
DiagonalDynamicIndexReturnType diagonal(Index index);
Type triangularView(void);
Type selfadjointView(void);
EIGEN_DEVICE_FUNC static const IdentityReturnType Identity(void);
EIGEN_DEVICE_FUNC static const IdentityReturnType Identity(Index rows, Index cols);
EIGEN_DEVICE_FUNC static const BasisReturnType Unit(Index size, Index i);
EIGEN_DEVICE_FUNC static const BasisReturnType Unit(Index i);
EIGEN_DEVICE_FUNC static const BasisReturnType UnitX(void);
EIGEN_DEVICE_FUNC static const BasisReturnType UnitY(void);
EIGEN_DEVICE_FUNC static const BasisReturnType UnitZ(void);
EIGEN_DEVICE_FUNC static const BasisReturnType UnitW(void);
EIGEN_DEVICE_FUNC
Derived& setIdentity(void);
EIGEN_DEVICE_FUNC
Derived& setIdentity(Index rows, Index cols);
EIGEN_DEVICE_FUNC Derived& setUnit(Index i);
EIGEN_DEVICE_FUNC Derived& setUnit(Index newSize, Index i);
EIGEN_DEVICE_FUNC noalias(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
EIGEN_DEVICE_FUNC
void makeHouseholderInPlace(Scalar & tau, RealScalar & beta);
EIGEN_DEVICE_FUNC
void applyHouseholderOnTheLeft(const EssentialPart & essential, const Scalar & tau, Scalar * workspace);
EIGEN_DEVICE_FUNC
void applyHouseholderOnTheRight(const EssentialPart & essential, const Scalar & tau, Scalar * workspace);
EIGEN_DEVICE_FUNC
void applyOnTheLeft(Index p, Index q, const JacobiRotation<OtherScalar>&j);
EIGEN_DEVICE_FUNC
void applyOnTheRight(Index p, Index q, const JacobiRotation<OtherScalar>&j);
EIGEN_DEVICE_FUNC explicit MatrixBase(void);
EIGEN_DEVICE_FUNC MatrixBase(void);
EIGEN_DEVICE_FUNC explicit MatrixBase(const MatrixBase<OtherDerived>&);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

trivially copyable types EIGEN_STATIC_ASSERT(void);
point types
return Real(void);
string epsilon(void);
string dummy_precision(void);
string lowest(void);
string highest(void);
string infinity(void);
string quiet_NaN(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

type zero(void);
return coeff(Direction == Vertical ? j : i);
PanelEvaluator panel_eval(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _set(void);
return ConstMapType(void);
return MapType(void);
return ConstMapType(void);
return MapType(void);
return ConstMapType(void);
return MapType(void);
return ConstAlignedMapType(void);
return AlignedMapType(void);
return ConstAlignedMapType(void);
return AlignedMapType(void);
return ConstAlignedMapType(void);
return AlignedMapType(void);
EIGEN_DEVICE_FUNC Derived& setConstant(Index size, const Scalar & val);
EIGEN_DEVICE_FUNC Derived& setConstant(Index rows, Index cols, const Scalar & val);
EIGEN_DEVICE_FUNC Derived& setConstant(Index cols, const Scalar & val);
EIGEN_DEVICE_FUNC Derived& setConstant(Index rows, const Scalar & val);
EIGEN_DEVICE_FUNC Derived& setZero(Index size);
EIGEN_DEVICE_FUNC Derived& setZero(Index rows, Index cols);
EIGEN_DEVICE_FUNC Derived& setZero(Index cols);
EIGEN_DEVICE_FUNC Derived& setZero(Index rows);
EIGEN_DEVICE_FUNC Derived& setOnes(Index size);
EIGEN_DEVICE_FUNC Derived& setOnes(Index rows, Index cols);
EIGEN_DEVICE_FUNC Derived& setOnes(Index cols);
EIGEN_DEVICE_FUNC Derived& setOnes(Index rows);
Derived& setRandom(Index size);
Derived& setRandom(Index rows, Index cols);
Derived& setRandom(Index cols);
Derived& setRandom(Index rows);
else resizeLike(void);
Derived tmp(void);
Derived tmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LhsNested actual_lhs(void);
RhsNested actual_rhs(void);
MatrixType mat(void);
MatrixType mat(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return setRandom(void);
return setRandom(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Scalar(void);
return Scalar(void);
return Scalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void foo1(Ref<VectorXf> x);
void foo2(const Ref<const VectorXf>&x);
The row is copied into a contiguous temporary
* foo2(void);
void foo3(InnerStride<> > x);
void foo(const Ref<MatrixXf>&A);
void foo(const Ref<MatrixXf, Stride<> >&A);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return preverse(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

type tmp1(void);
type tmp2(void);
TransposeReturnType tmp(void);
return TransposeReturnType(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

DecompositionType dec(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

OtherCopy otherCopy(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

const VectorTypeCopy copy(void);
RealScalar scale(void);
RealScalar invScale(void);
RealScalar ssq(void);
sum of squares stable_norm_impl_inner_step(void);
return scale * sqrt(void);
RealScalar scale(void);
RealScalar invScale(void);
RealScalar ssq(void);
sum of squares for (Index j = 0; j < mat.outerSize();
	return scale * sqrt(void);
	InnerIterator iter(void);
else
return sqrt(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
pointer_based_stl_iterator prev(void);
pointer_based_stl_iterator prev(void);
pointer_based_stl_iterator ret(void);
pointer_based_stl_iterator ret(void);
pointer_based_stl_iterator ret(void);
pointer_based_stl_iterator ret(void);
return cbegin(void);
return cend(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return coeff(void);
return coeffRef(void);
TransposeReturnType tmp(void);
return TransposeReturnType(void);
return derived(void);
return derived(void);
EIGEN_DEPRECATED EIGEN_DEVICE_FUNC
void lazyAssign(const TriangularBase<OtherDerived>&other);
EIGEN_DEPRECATED EIGEN_DEVICE_FUNC
void lazyAssign(const MatrixBase<OtherDerived>&other);
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE TriangularViewType& _assignProduct(const ProductType & prod, const Scalar & alpha, bool beta);
return derived(void);
return derived(void);
SrcEvaluatorType srcEvaluator(void);
DstEvaluatorType dstEvaluator(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return BinaryOp(void);
return const_iterator(void);
return const_iterator(void);
EIGEN_DEVICE_FUNC inline void reverseInPlace(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

called for the first coefficient
* void init(const Scalar & value, Index i, Index j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Packet2cf(void);
endif
return Packet2cf(void);
return Packet2cf(a.v + b.v);
return Packet2cf(a.v - b.v);
return Packet2cf(void);
return Packet1cd(void);
return Packet1cd(a.v + b.v);
return Packet1cd(a.v - b.v);
return pfirst(void);
return pfirst(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return plog_float(void);
return pexp_float(void);
return psin_float(void);
return pcos_float(void);
return vec_rsqrt(void);
return vec_rsqrt(void);
return vec_sqrt(void);
return vec_sqrt(void);
return pexp_double(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
return Packet(void);
return Packet(void);
return Packet(void);
return Packet2d(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
endif gemm_function(void);
endif gemm_function(void);
endif gemm_function(void);
endif gemm_function(void);
endif gemm_function(void);
endif gemm_function(void);
endif gemm_function(void);
endif gemm_function(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_STRONG_INLINE void gemm_extra_col(const DataMapper & res, const Scalar * lhs_base, const Scalar * rhs_base, Index depth, Index strideA, Index offsetA, Index row, Index col, Index remaining_rows, Index remaining_cols, const Packet & pAlpha);
EIGEN_STRONG_INLINE void gemm_extra_row(const DataMapper & res, const Scalar * lhs_base, const Scalar * rhs_base, Index depth, Index strideA, Index offsetA, Index row, Index col, Index rows, Index cols, Index remaining_rows, const Packet & pAlpha, const Packet & pMask);
EIGEN_STRONG_INLINE void gemm_unrolled_col(const DataMapper & res, const Scalar * lhs_base, const Scalar * rhs_base, Index depth, Index strideA, Index offsetA, Index & row, Index rows, Index col, Index remaining_cols, const Packet & pAlpha);
EIGEN_ALWAYS_INLINE Packet bmask(const int remaining_rows);
EIGEN_STRONG_INLINE void gemm_complex_extra_col(const DataMapper & res, const Scalar * lhs_base, const Scalar * rhs_base, Index depth, Index strideA, Index offsetA, Index strideB, Index row, Index col, Index remaining_rows, Index remaining_cols, const Packet & pAlphaReal, const Packet & pAlphaImag);
EIGEN_STRONG_INLINE void gemm_complex_extra_row(const DataMapper & res, const Scalar * lhs_base, const Scalar * rhs_base, Index depth, Index strideA, Index offsetA, Index strideB, Index row, Index col, Index rows, Index cols, Index remaining_rows, const Packet & pAlphaReal, const Packet & pAlphaImag, const Packet & pMask);
EIGEN_STRONG_INLINE void gemm_complex_unrolled_col(const DataMapper & res, const Scalar * lhs_base, const Scalar * rhs_base, Index depth, Index strideA, Index offsetA, Index strideB, Index & row, Index rows, Index col, Index remaining_cols, const Packet & pAlphaReal, const Packet & pAlphaImag);
EIGEN_ALWAYS_INLINE Packet ploadLhs(const Scalar * lhs);
EIGEN_ALWAYS_INLINE void bload(4 > &acc, const DataMapper & res, Index row, Index col);
EIGEN_ALWAYS_INLINE void bload(8 > &acc, const DataMapper & res, Index row, Index col);
EIGEN_ALWAYS_INLINE void bscale(4 > &acc, 4 > &accZ, const Packet & pAlpha);
EIGEN_ALWAYS_INLINE void bscalec(N > &aReal, N > &aImag, const Packet & bReal, const Packet & bImag, N > &cReal, N > &cImag);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

agnostic
static _EIGEN_DECLARE_CONST_FAST_Packet4f(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4i(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4i(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4i(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4i(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
static _EIGEN_DECLARE_CONST_FAST_Packet8us(void);
static _EIGEN_DECLARE_CONST_FAST_Packet16uc(void);
else
return vec_ld(void);
ifdef __VSX__ vec_xst(void);
else vec_st(void);
return vec_madd(void);
return vec_mul(void);
return vec_mul(void);
return vec_mul(void);
return vec_mul(void);
return vec_madd(void);
else
return vec_div(void);
return vec_madd(void);
return vec_madd(void);
return vec_madd(void);
else
return vec_min(void);
return vec_min(void);
return vec_min(void);
return vec_min(void);
return vec_min(void);
return vec_min(void);
else
return vec_max(void);
return vec_max(void);
return vec_max(void);
return vec_max(void);
return vec_max(void);
return vec_max(void);
return vec_nor(void);
return vec_and(void);
return vec_and(void);
return vec_and(void);
return vec_and(void);
return vec_or(void);
return vec_or(void);
return vec_or(void);
return vec_or(void);
return vec_xor(void);
return vec_xor(void);
return vec_andc(void);
return vec_andc(void);
return vec_ceil(void);
return vec_floor(void);
return vec_perm(void);
return vec_perm(void);
return vec_perm(void);
return vec_perm(void);
return vec_perm(void);
return vec_perm(void);
return vec_perm(void);
else vec_xst(void);
return vec_perm(void);
return vec_perm(void);
return vec_abs(void);
return vec_abs(void);
return vec_abs(void);
return vec_abs(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
return vec_sr(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
return vec_sl(void);
const _EIGEN_DECLARE_CONST_FAST_Packet8us(void);
return vec_sl(void);
const _EIGEN_DECLARE_CONST_FAST_Packet8us(void);
return vec_sr(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
Begin
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
return F32ToBf16(void);
return F32ToBf16(void);
return F32ToBf16Bool(void);
return pldexp_generic(void);
return pfrexp_generic(void);
return F32ToBf16(void);
return F32ToBf16(void);
return pfirst(void);
endif
return pfirst(void);
return bfloat16(void);
return pfirst(void);
return pfirst(void);
return bfloat16(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return bfloat16(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return bfloat16(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return vec_sel(void);
return vec_sel(void);
return vec_sel(void);
return vec_sel(void);
return vec_cts(void);
return vec_ctu(void);
return vec_ctf(void);
return vec_ctf(void);
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
bfloat16
const _EIGEN_DECLARE_CONST_FAST_Packet4ui(void);
return F32ToBf16(void);
return vec_splat(void);
EIGEN_DEBUG_ALIGNED_STORE vec_xst(void);
return vec_madd(void);
return vec_div(void);
return vec_madd(void);
return vec_nor(void);
return vec_and(void);
return vec_or(void);
return vec_xor(void);
return vec_ceil(void);
return vec_floor(void);
EIGEN_DEBUG_UNALIGNED_STORE vec_xst(void);
return vec_abs(void);
return vec_cts(void);
return vec_sl(void);
return vec_sr(void);
ifdef  _BIG_ENDIAN
return vec_perm(void);
else
return vec_perm(void);
ifdef  _BIG_ENDIAN
return vec_perm(void);
else
return vec_perm(void);
return pfrexp_generic(void);
return vec_sel(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Packet4cf(void);
return Packet4cf(void);
return Packet2cd(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return psin_float(void);
return pcos_float(void);
return plog_float(void);
return plog_double(void);
return plog2_float(void);
return plog2_double(void);
return generic_plog1p(void);
return generic_expm1(void);
return pexp_float(void);
return pexp_double(void);
return _mm256_sqrt_ps(void);
return _mm256_sqrt_pd(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm256_set1_ps(void);
return _mm256_set1_pd(void);
return _mm256_set1_epi32(void);
return _mm256_setzero_ps(void);
return _mm256_setzero_pd(void);
return _mm256_setzero_si256(void);
return _mm256_set_epi32(void);
return _mm256_broadcast_ss(void);
return _mm256_broadcast_sd(void);
return _mm256_add_ps(void);
return _mm256_add_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_add_epi32(void);
return _mm256_sub_ps(void);
return _mm256_sub_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_sub_epi32(void);
return _mm256_mul_ps(void);
return _mm256_mul_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_mullo_epi32(void);
return _mm256_div_ps(void);
return _mm256_div_pd(void);
else
return _mm256_fmadd_ps(void);
else
return _mm256_fmadd_pd(void);
return _mm256_cmp_ps(void);
return _mm256_cmp_ps(void);
return _mm256_cmp_ps(void);
return _mm256_cmp_ps(void);
return _mm256_cmp_pd(void);
return _mm256_cmp_pd(void);
return _mm256_cmp_pd(void);
return _mm256_cmp_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_cmpeq_epi32(void);
return _mm256_min_ps(void);
return _mm256_min_pd(void);
return _mm256_max_ps(void);
return _mm256_max_pd(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return _mm256_round_ps(void);
return _mm256_round_pd(void);
return _mm256_ceil_ps(void);
return _mm256_ceil_pd(void);
return _mm256_floor_ps(void);
return _mm256_floor_pd(void);
vpcmpeqd has lower latency than the more general vcmpps
return _mm256_cmpeq_epi32(void);
else
return _mm256_cmp_ps(void);
else
return _mm256_cmp_pd(void);
return _mm256_and_ps(void);
return _mm256_and_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_and_si256(void);
return _mm256_or_ps(void);
return _mm256_or_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_or_si256(void);
return _mm256_xor_ps(void);
return _mm256_xor_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_xor_si256(void);
return _mm256_andnot_ps(void);
return _mm256_andnot_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_andnot_si256(void);
return _mm256_blendv_ps(void);
return _mm256_blendv_pd(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_srai_epi32(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_srli_epi32(void);
ifdef EIGEN_VECTORIZE_AVX2
return _mm256_slli_epi32(void);
EIGEN_DEBUG_ALIGNED_LOAD return _mm256_load_ps(void);
EIGEN_DEBUG_ALIGNED_LOAD return _mm256_load_pd(void);
EIGEN_DEBUG_UNALIGNED_LOAD return _mm256_loadu_ps(void);
EIGEN_DEBUG_UNALIGNED_LOAD return _mm256_loadu_pd(void);
EIGEN_DEBUG_UNALIGNED_LOAD return _mm256_maskload_ps(void);
return _mm256_unpacklo_ps(void);
return _mm256_permute_pd(void);
EIGEN_DEBUG_ALIGNED_STORE _mm256_store_ps(void);
EIGEN_DEBUG_ALIGNED_STORE _mm256_store_pd(void);
EIGEN_DEBUG_UNALIGNED_STORE _mm256_storeu_ps(void);
EIGEN_DEBUG_UNALIGNED_STORE _mm256_storeu_pd(void);
EIGEN_DEBUG_UNALIGNED_STORE return _mm256_maskstore_ps(void);
return _mm256_set_ps(void);
return _mm256_set_pd(void);
return _mm256_permute2f128_ps(void);
return _mm256_permute2f128_pd(void);
return _mm256_permute_pd(void);
return _mm256_and_ps(void);
return _mm256_and_pd(void);
return pfrexp_generic(void);
return pfrexp_generic(void);
return pldexp_generic(void);
return _mm256_blendv_ps(void);
return _mm256_blendv_pd(void);
return _mm_set_epi16(void);
return _mm_set_epi16(void);
return _mm_cmpeq_epi32(void);
return _mm_andnot_si128(void);
ifdef EIGEN_HAS_FP16_C
return _mm256_cvtph_ps(void);
float f0(void);
float f1(void);
float f2(void);
float f3(void);
float f4(void);
float f5(void);
float f6(void);
float f7(void);
return _mm256_set_ps(void);
ifdef EIGEN_HAS_FP16_C
return _mm256_cvtps_ph(void);
return _mm_set_epi16(void);
return _mm_or_si128(void);
return _mm_xor_si128(void);
return _mm_and_si128(void);
return _mm_andnot_si128(void);
return _mm_blendv_epi8(void);
return _mm_xor_si128(void);
return float2half(void);
return float2half(void);
return float2half(void);
return float2half(void);
return _mm_set_epi16(void);
return _mm_shuffle_epi8(void);
return _mm_packus_epi32(void);
return _mm_set_epi16(void);
return _mm_set_epi16(void);
return _mm_cmpeq_epi32(void);
return _mm_andnot_si128(void);
return _mm_or_si128(void);
return _mm_xor_si128(void);
return _mm_and_si128(void);
return _mm_andnot_si128(void);
return _mm_blendv_epi8(void);
return _mm_xor_si128(void);
return _mm_set_epi16(void);
return _mm_shuffle_epi8(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm256_cvttps_epi32(void);
return _mm256_cvtepi32_ps(void);
return _mm256_castps_si256(void);
return _mm256_castsi256_ps(void);
return half2float(void);
return Bf16ToF32(void);
return float2half(void);
return F32ToBf16(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Packet4cf(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return plog_float(void);
return plog_double(void);
return plog2_float(void);
return plog2_double(void);
return pexp_double(void);
return _mm512_sqrt_ps(void);
return _mm512_sqrt_pd(void);
return _mm512_rsqrt28_ps(void);
return _mm512_mask_blend_ps(void);
return _mm512_mask_blend_pd(void);
return generic_plog1p(void);
return generic_expm1(void);
return psin_float(void);
return pcos_float(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm512_set1_ps(void);
return _mm512_set1_pd(void);
return _mm512_set1_epi32(void);
return _mm512_setzero_ps(void);
return _mm512_setzero_pd(void);
return _mm512_setzero_si512(void);
return _mm512_set_epi32(void);
return _mm512_set1_pd(void);
return _mm512_add_ps(void);
return _mm512_add_pd(void);
return _mm512_add_epi32(void);
return _mm512_sub_ps(void);
return _mm512_sub_pd(void);
return _mm512_sub_epi32(void);
return _mm512_mul_ps(void);
return _mm512_mul_pd(void);
return _mm512_mullo_epi32(void);
return _mm512_div_ps(void);
return _mm512_div_pd(void);
return _mm512_fmadd_ps(void);
return _mm512_fmadd_pd(void);
return _mm512_mask_blend_ps(void);
return _mm512_mask_blend_pd(void);
return _mm512_min_ps(void);
return _mm512_min_pd(void);
return _mm512_max_ps(void);
return _mm512_max_pd(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return _mm512_extractf32x8_ps(void);
return _mm512_extractf64x2_pd(void);
return _mm512_roundscale_ps(void);
return _mm512_roundscale_pd(void);
return _mm512_roundscale_ps(void);
return _mm512_roundscale_pd(void);
return _mm512_roundscale_ps(void);
return _mm512_roundscale_pd(void);
return _mm512_set1_epi32(void);
return _mm512_and_si512(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_and_ps(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_and_pd(void);
return _mm512_or_si512(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_or_ps(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_or_pd(void);
return _mm512_xor_si512(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_xor_ps(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_xor_pd(void);
return _mm512_andnot_si512(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_andnot_ps(void);
ifdef EIGEN_VECTORIZE_AVX512DQ
return _mm512_andnot_pd(void);
return _mm512_srai_epi32(void);
return _mm512_srli_epi32(void);
return _mm512_slli_epi32(void);
EIGEN_DEBUG_ALIGNED_LOAD return _mm512_load_ps(void);
EIGEN_DEBUG_ALIGNED_LOAD return _mm512_load_pd(void);
EIGEN_DEBUG_UNALIGNED_LOAD return _mm512_loadu_ps(void);
EIGEN_DEBUG_UNALIGNED_LOAD return _mm512_loadu_pd(void);
EIGEN_DEBUG_UNALIGNED_LOAD return _mm512_maskz_loadu_ps(void);
return _mm512_permutexvar_ps(void);
return _mm512_insertf64x4(void);
EIGEN_DEBUG_ALIGNED_STORE _mm512_store_ps(void);
EIGEN_DEBUG_ALIGNED_STORE _mm512_store_pd(void);
EIGEN_DEBUG_UNALIGNED_STORE _mm512_storeu_ps(void);
EIGEN_DEBUG_UNALIGNED_STORE _mm512_storeu_pd(void);
EIGEN_DEBUG_UNALIGNED_STORE return _mm512_mask_storeu_ps(void);
return _mm512_i32gather_ps(void);
return _mm512_i32gather_pd(void);
return pfrexp_generic(void);
return pfrexp_generic(void);
return pldexp_generic(void);
return _mm_cvtss_f32(void);
return _mm256_add_ps(void);
return _mm256_add_pd(void);
Pack them into the output PACK_OUTPUT(void);
return Packet16f(void);
return _mm512_mask_blend_pd(void);
return _mm256_set1_epi16(void);
return _mm256_set_epi16(void);
return _mm256_set_epi16(void);
ifdef EIGEN_HAS_FP16_C
return _mm512_cvtph_ps(void);
float f0(void);
float f1(void);
float f2(void);
float f3(void);
float f4(void);
float f5(void);
float f6(void);
float f7(void);
float f8(void);
float f9(void);
float fa(void);
float fb(void);
float fc(void);
float fd(void);
float fe(void);
float ff(void);
return _mm512_set_ps(void);
ifdef EIGEN_HAS_FP16_C
return _mm512_cvtps_ph(void);
half h0(void);
half h1(void);
half h2(void);
half h3(void);
half h4(void);
half h5(void);
half h6(void);
half h7(void);
half h8(void);
half h9(void);
half ha(void);
half hb(void);
half hc(void);
half hd(void);
half he(void);
half hf(void);
return _mm256_set_epi16(void);
return _mm256_andnot_si256(void);
return _mm256_blendv_epi8(void);
return _mm256_xor_si256(void);
return float2half(void);
return float2half(void);
return float2half(void);
return float2half(void);
return _mm256_set_epi16(void);
return _mm256_set1_epi16(void);
return _mm256_set_epi16(void);
return _mm256_set_epi16(void);
return _mm256_blendv_epi8(void);
return _mm256_xor_si256(void);
return _mm256_andnot_si256(void);
return _mm256_shuffle_epi8(void);
return _mm256_set_epi16(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm512_cvttps_epi32(void);
return _mm512_cvtepi32_ps(void);
return _mm512_castps_si512(void);
return _mm512_castsi512_ps(void);
return half2float(void);
return float2half(void);
return Bf16ToF32(void);
return F32ToBf16(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

if EIGEN_FAST_MATH
return complex_divide_fast(void);
else
return complex_divide_stable(void);
return complex_multiply(void);
return complex_divide(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR __bfloat16_raw raw_uint16_to_bfloat16(unsigned short value);
EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC __bfloat16_raw float_to_bfloat16_rtne(float ff);
EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC float bfloat16_to_float(__bfloat16_raw h);
return __bfloat16_raw(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Update the sign and filter huge inputs
return pxor(void);
r twoprod(void);
return pldexp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC
Packet pfrexp_generic(const Packet & a, Packet & exponent);
EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC
Packet pfrexp_generic_get_biased_exponent(const Packet & p);
EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC
Packet pldexp_generic(const Packet & a, const Packet & exponent);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet plog_float(const Packet _x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet plog2_float(const Packet _x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet plog_double(const Packet _x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet plog2_double(const Packet _x);
Packet generic_plog1p(const Packet & x);
Packet generic_expm1(const Packet & x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet pexp_float(const Packet _x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet pexp_double(const Packet _x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet psin_float(const Packet & x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet pcos_float(const Packet & x);
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS
EIGEN_UNUSED
Packet psqrt_complex(const Packet & a);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

endif

EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR __half_raw raw_uint16_to_half(numext::uint16_t x);
EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC __half_raw float_to_half_rtne(float ff);
EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC float half_to_float(__half_raw h);
return __half(void);
else
return __hadd(void);
return __hmul(void);
return __hsub(void);
90000
return __hdiv(void);
return __float2half(num / denom);
return __hneg(void);
return __heq(void);
return __hne(void);
return __hlt(void);
return __hle(void);
return __hgt(void);
return __hge(void);
return vceqh_f16(void);
return vclth_f16(void);
return vcleh_f16(void);
return vcgth_f16(void);
return vcgeh_f16(void);
else
return __half_raw(void);
return __half2float(void);
return _cvtsh_ss(void);
return __hisnan(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return __float2half(void);
return __half2float(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return make_float4(void);
return make_double2(void);
return __int_as_float(a == b ? 0xffffffffu : 0u);
return __longlong_as_double(a == b ? 0xffffffffffffffffull : 0ull);
return __int_as_float(a < b ? 0xffffffffu : 0u);
return __longlong_as_double(a < b ? 0xffffffffffffffffull : 0ull);
return make_float4(void);
return make_double2(void);
return make_float4(void);
return make_double2(void);
return make_float4(void);
return make_double2(void);
return make_float4(void);
return make_double2(void);
return make_float4(void);
return make_double2(void);
return make_float4(void);
return make_double2(void);
return make_float4(void);
return make_double2(void);
return make_float4(void);
return make_double2(void);
else
return make_float4(void);
else
return make_double2(void);
else
return make_float4(void);
else
return make_double2(void);
return make_float4(void);
return make_double2(void);
return fmax(void);
return fmin(void);
return __halves2half2(void);
return __low2half(void);
return __high2half(void);
return __half2half2(void);
return __floats2half2_rn(void);
return combine_half(void);
return combine_half(void);
return combine_half(void);
return get_half2_low(void);
return combine_half(void);
return combine_half(void);
return combine_half(void);
return combine_half(void);
return combine_half(void);
return combine_half(void);
return combine_half(void);
return combine_half(void);
return __hadd2(void);
return __floats2half2_rn(void);
return __hsub2(void);
return __floats2half2_rn(void);
return __hneg2(void);
return __floats2half2_rn(void);
return __hmul2(void);
return __floats2half2_rn(void);
return __hfma2(void);
return __floats2half2_rn(void);
return __h2div(void);
return __floats2half2_rn(void);
return combine_half(void);
return combine_half(void);
return __floats2half2_rn(void);
return __floats2half2_rn(void);
return h2log(void);
return h2exp(void);
return h2sqrt(void);
return h2rsqrt(void);
return __floats2half2_rn(void);
return __floats2half2_rn(void);
return __floats2half2_rn(void);
return __floats2half2_rn(void);
return __hadd2(void);
return __floats2half2_rn(void);
return __hmul2(void);
return __floats2half2_rn(void);
return __h2div(void);
return __floats2half2_rn(void);
return combine_half(void);
return combine_half(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return make_float4(void);
Simply discard the second half of the input
return __floats2half2_rn(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Packet2cf(from[0 * stride], from[1 * stride]);
return Packet1cd(void);
return pfirst(void);
return pfirst(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return __builtin_msa_fill_w(void);
return __builtin_msa_fill_w(void);
return __builtin_msa_fadd_w(void);
return __builtin_msa_addv_w(void);
return __builtin_msa_fsub_w(void);
return __builtin_msa_subv_w(void);
return __builtin_msa_fmul_w(void);
return __builtin_msa_mulv_w(void);
return __builtin_msa_fdiv_w(void);
return __builtin_msa_div_s_w(void);
return __builtin_msa_fmadd_w(void);
return __builtin_msa_fmin_w(void);
return __builtin_msa_min_s_w(void);
return __builtin_msa_fmax_w(void);
return __builtin_msa_max_s_w(void);
EIGEN_DEBUG_ALIGNED_STORE __builtin_msa_st_w(void);
EIGEN_DEBUG_UNALIGNED_STORE __builtin_msa_st_w(void);
return __builtin_msa_add_a_w(void);
return __builtin_msa_fsqrt_w(void);
if EIGEN_FAST_MATH
return __builtin_msa_frsqrt_w(void);
return __builtin_msa_fadd_d(void);
return __builtin_msa_fsub_d(void);
return __builtin_msa_fmul_d(void);
return __builtin_msa_fdiv_d(void);
return __builtin_msa_fmadd_d(void);
return __builtin_msa_fmin_d(void);
return __builtin_msa_fmax_d(void);
return __builtin_msa_fsqrt_d(void);
if EIGEN_FAST_MATH
return __builtin_msa_frsqrt_d(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return vld1q_u32(void);
return vld1_u32(void);
return Packet2cf(void);
return Packet1cd(void);
return pfirst(void);
return pfirst(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return pexp_float(void);
return pexp_float(void);
return plog_float(void);
return plog_float(void);
return psin_float(void);
return psin_float(void);
return pcos_float(void);
return pcos_float(void);
return pexp_double(void);
return plog_double(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return vdup_n_f32(void);
return vdupq_n_f32(void);
return vdup_n_s8(void);
return vdupq_n_s8(void);
return vdup_n_u8(void);
return vdupq_n_u8(void);
return vdup_n_s16(void);
return vdupq_n_s16(void);
return vdup_n_u16(void);
return vdupq_n_u16(void);
return vdup_n_s32(void);
return vdupq_n_s32(void);
return vdup_n_u32(void);
return vdupq_n_u32(void);
return vdupq_n_s64(void);
return vdupq_n_u64(void);
return vadd_f32(void);
return vaddq_f32(void);
return vadd_s8(void);
return vaddq_s8(void);
return vadd_u8(void);
return vaddq_u8(void);
return vadd_s16(void);
return vaddq_s16(void);
return vadd_u16(void);
return vaddq_u16(void);
return vadd_s32(void);
return vaddq_s32(void);
return vadd_u32(void);
return vaddq_u32(void);
return vaddq_s64(void);
return vaddq_u64(void);
return vsub_f32(void);
return vsubq_f32(void);
return vsub_s8(void);
return vsubq_s8(void);
return vsub_u8(void);
return vsubq_u8(void);
return vsub_s16(void);
return vsubq_s16(void);
return vsub_u16(void);
return vsubq_u16(void);
return vsub_s32(void);
return vsubq_s32(void);
return vsub_u32(void);
return vsubq_u32(void);
return vsubq_s64(void);
return vsubq_u64(void);
return vneg_f32(void);
return vnegq_f32(void);
return vneg_s8(void);
return vnegq_s8(void);
return vneg_s16(void);
return vnegq_s16(void);
return vneg_s32(void);
return vnegq_s32(void);
if EIGEN_ARCH_ARM64
return vnegq_s64(void);
return vmul_f32(void);
return vmulq_f32(void);
return vmul_s8(void);
return vmulq_s8(void);
return vmul_u8(void);
return vmulq_u8(void);
return vmul_s16(void);
return vmulq_s16(void);
return vmul_u16(void);
return vmulq_u16(void);
return vmul_s32(void);
return vmulq_s32(void);
return vmul_u32(void);
return vmulq_u32(void);
if EIGEN_ARCH_ARM64
return vdiv_f32(void);
if EIGEN_ARCH_ARM64
return vdivq_f32(void);
return vfmaq_f32(void);
return vfma_f32(void);
return vmlaq_f32(void);
return vmla_f32(void);
return vmla_s8(void);
return vmlaq_s8(void);
return vmla_u8(void);
return vmlaq_u8(void);
return vmla_s16(void);
return vmlaq_s16(void);
return vmla_u16(void);
return vmlaq_u16(void);
return vmla_s32(void);
return vmlaq_s32(void);
return vmla_u32(void);
return vmlaq_u32(void);
return vabd_f32(void);
return vabdq_f32(void);
return vabd_s8(void);
return vabdq_s8(void);
return vabd_u8(void);
return vabdq_u8(void);
return vabd_s16(void);
return vabdq_s16(void);
return vabd_u16(void);
return vabdq_u16(void);
return vabd_s32(void);
return vabdq_s32(void);
return vabd_u32(void);
return vabdq_u32(void);
return vmin_f32(void);
return vminq_f32(void);
return vminnmq_f32(void);
return vminnm_f32(void);
return vmin_s8(void);
return vminq_s8(void);
return vmin_u8(void);
return vminq_u8(void);
return vmin_s16(void);
return vminq_s16(void);
return vmin_u16(void);
return vminq_u16(void);
return vmin_s32(void);
return vminq_s32(void);
return vmin_u32(void);
return vminq_u32(void);
return vmax_f32(void);
return vmaxq_f32(void);
return vmaxnmq_f32(void);
return vmaxnm_f32(void);
return vmax_s8(void);
return vmaxq_s8(void);
return vmax_u8(void);
return vmaxq_u8(void);
return vmax_s16(void);
return vmaxq_s16(void);
return vmax_u16(void);
return vmaxq_u16(void);
return vmax_s32(void);
return vmaxq_s32(void);
return vmax_u32(void);
return vmaxq_u32(void);
return vcle_u8(void);
return vcleq_u8(void);
return vcle_u16(void);
return vcleq_u16(void);
return vcle_u32(void);
return vcleq_u32(void);
if EIGEN_ARCH_ARM64
return vcleq_u64(void);
return vclt_u8(void);
return vcltq_u8(void);
return vclt_u16(void);
return vcltq_u16(void);
return vclt_u32(void);
return vcltq_u32(void);
if EIGEN_ARCH_ARM64
return vcltq_u64(void);
return vceq_u8(void);
return vceqq_u8(void);
return vceq_u16(void);
return vceqq_u16(void);
return vceq_u32(void);
return vceqq_u32(void);
if EIGEN_ARCH_ARM64
return vceqq_u64(void);
return vand_s8(void);
return vandq_s8(void);
return vand_u8(void);
return vandq_u8(void);
return vand_s16(void);
return vandq_s16(void);
return vand_u16(void);
return vandq_u16(void);
return vand_s32(void);
return vandq_s32(void);
return vand_u32(void);
return vandq_u32(void);
return vandq_s64(void);
return vandq_u64(void);
return vorr_s8(void);
return vorrq_s8(void);
return vorr_u8(void);
return vorrq_u8(void);
return vorr_s16(void);
return vorrq_s16(void);
return vorr_u16(void);
return vorrq_u16(void);
return vorr_s32(void);
return vorrq_s32(void);
return vorr_u32(void);
return vorrq_u32(void);
return vorrq_s64(void);
return vorrq_u64(void);
return veor_s8(void);
return veorq_s8(void);
return veor_u8(void);
return veorq_u8(void);
return veor_s16(void);
return veorq_s16(void);
return veor_u16(void);
return veorq_u16(void);
return veor_s32(void);
return veorq_s32(void);
return veor_u32(void);
return veorq_u32(void);
return veorq_s64(void);
return veorq_u64(void);
return vbic_s8(void);
return vbicq_s8(void);
return vbic_u8(void);
return vbicq_u8(void);
return vbic_s16(void);
return vbicq_s16(void);
return vbic_u16(void);
return vbicq_u16(void);
return vbic_s32(void);
return vbicq_s32(void);
return vbic_u32(void);
return vbicq_u32(void);
return vbicq_s64(void);
return vbicq_u64(void);
return vshr_n_s8(void);
return vshrq_n_s8(void);
return vshr_n_u8(void);
return vshrq_n_u8(void);
return vshr_n_s16(void);
return vshrq_n_s16(void);
return vshr_n_u16(void);
return vshrq_n_u16(void);
return vshr_n_s32(void);
return vshrq_n_s32(void);
return vshr_n_u32(void);
return vshrq_n_u32(void);
return vshrq_n_s64(void);
return vshrq_n_u64(void);
return vshr_n_u8(void);
return vshrq_n_u8(void);
return vshr_n_u16(void);
return vshrq_n_u16(void);
return vshr_n_u32(void);
return vshrq_n_u32(void);
return vshrq_n_u64(void);
return vshl_n_s8(void);
return vshlq_n_s8(void);
return vshl_n_u8(void);
return vshlq_n_u8(void);
return vshl_n_s16(void);
return vshlq_n_s16(void);
return vshl_n_u16(void);
return vshlq_n_u16(void);
return vshl_n_s32(void);
return vshlq_n_s32(void);
return vshl_n_u32(void);
return vshlq_n_u32(void);
return vshlq_n_s64(void);
return vshlq_n_u64(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1_f32(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_f32(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1_s8(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_s8(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1_u8(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_u8(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1_s16(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_s16(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1_u16(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_u16(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1_s32(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_s32(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1_u32(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_u32(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_s64(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_u64(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1_f32(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_f32(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1_s8(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_s8(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1_u8(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_u8(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1_s16(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_s16(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1_u16(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_u16(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1_s32(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_s32(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1_u32(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_u32(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_s64(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_u64(void);
return vld1_dup_f32(void);
return vcombine_s8(void);
return vcombine_u8(void);
return vcombine_s16(void);
return vcombine_u16(void);
return vld1_dup_s32(void);
return vld1_dup_u32(void);
return vld1q_dup_s64(void);
return vld1q_dup_u64(void);
return vld1q_dup_f32(void);
return vcombine_s8(void);
return vcombine_u8(void);
return vld1q_dup_s32(void);
return vld1q_dup_u32(void);
EIGEN_DEBUG_ALIGNED_STORE vst1_f32(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_f32(void);
EIGEN_DEBUG_ALIGNED_STORE vst1_s8(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_s8(void);
EIGEN_DEBUG_ALIGNED_STORE vst1_u8(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_u8(void);
EIGEN_DEBUG_ALIGNED_STORE vst1_s16(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_s16(void);
EIGEN_DEBUG_ALIGNED_STORE vst1_u16(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_u16(void);
EIGEN_DEBUG_ALIGNED_STORE vst1_s32(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_s32(void);
EIGEN_DEBUG_ALIGNED_STORE vst1_u32(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_u32(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_s64(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_u64(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1_f32(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_f32(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1_s8(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_s8(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1_u8(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_u8(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1_s16(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_s16(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1_u16(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_u16(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1_s32(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_s32(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1_u32(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_u32(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_s64(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_u64(void);
return vget_lane_f32(void);
return vgetq_lane_f32(void);
return vget_lane_s8(void);
return vgetq_lane_s8(void);
return vget_lane_u8(void);
return vgetq_lane_u8(void);
return vget_lane_s16(void);
return vgetq_lane_s16(void);
return vget_lane_u16(void);
return vgetq_lane_u16(void);
return vget_lane_s32(void);
return vgetq_lane_s32(void);
return vget_lane_u32(void);
return vgetq_lane_u32(void);
return vgetq_lane_s64(void);
return vgetq_lane_u64(void);
return vrev64_f32(void);
return vrev64_s8(void);
return vrev64_u8(void);
return vrev64_s16(void);
return vrev64_u16(void);
return vrev64_s32(void);
return vrev64_u32(void);
return vabs_f32(void);
return vabsq_f32(void);
return vabs_s8(void);
return vabsq_s8(void);
return vabs_s16(void);
return vabsq_s16(void);
return vabs_s32(void);
return vabsq_s32(void);
if EIGEN_ARCH_ARM64
return vabsq_s64(void);
return pfrexp_generic(void);
return pfrexp_generic(void);
return pldexp_generic(void);
return pldexp_generic(void);
return vget_lane_s8(void);
return vget_lane_s8(void);
return vget_lane_s8(void);
return vget_lane_u8(void);
return vget_lane_u8(void);
return vget_lane_u8(void);
return vget_lane_s16(void);
return vget_lane_u16(void);
return vget_lane_s8(void);
return vget_lane_s8(void);
return vget_lane_s8(void);
return vget_lane_u8(void);
return vget_lane_u8(void);
return vget_lane_u8(void);
return vget_lane_s16(void);
return vget_lane_u16(void);
return vget_lane_s8(void);
return vget_lane_s8(void);
return vget_lane_s8(void);
return vget_lane_u8(void);
return vget_lane_u8(void);
return vget_lane_u8(void);
return vget_lane_s16(void);
return vget_lane_u16(void);
void zip_in_place(Packet & p1, Packet & p2);
return vbsl_u8(void);
return vbslq_u8(void);
return vbsl_u16(void);
return vbslq_u16(void);
return vbsl_u32(void);
return vbslq_u32(void);
return vbslq_u64(void);
return vrndn_f32(void);
return vrndnq_f32(void);
return vrndm_f32(void);
return vrndmq_f32(void);
return vrndp_f32(void);
return vrndpq_f32(void);
return psub(void);
return psub(void);
return padd(void);
return padd(void);
return vsqrtq_f32(void);
return vsqrt_f32(void);
return vmovn_u32(void);
return shuffle(void);
return shuffle(void);
return shuffle(void);
return vdupq_n_f64(void);
return vaddq_f64(void);
return vsubq_f64(void);
return vnegq_f64(void);
return vmulq_f64(void);
return vdivq_f64(void);
return vfmaq_f64(void);
return vmlaq_f64(void);
return vminq_f64(void);
return vminnmq_f64(void);
return vmaxnmq_f64(void);
return vmaxq_f64(void);
EIGEN_DEBUG_ALIGNED_LOAD return vld1q_f64(void);
EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_f64(void);
return vld1q_dup_f64(void);
EIGEN_DEBUG_ALIGNED_STORE vst1q_f64(void);
EIGEN_DEBUG_UNALIGNED_STORE vst1q_f64(void);
return vgetq_lane_f64(void);
return vabsq_f64(void);
return vrndnq_f64(void);
return vrndmq_f64(void);
return vrndpq_f64(void);
return pldexp_generic(void);
return pfrexp_generic(void);
return vsqrtq_f64(void);
return vdupq_n_f16(void);
return vdup_n_f16(void);
return vaddq_f16(void);
return vadd_f16(void);
return vsubq_f16(void);
return vsub_f16(void);
return vnegq_f16(void);
return vneg_f16(void);
return vmulq_f16(void);
return vmul_f16(void);
return vdivq_f16(void);
return vdiv_f16(void);
return vfmaq_f16(void);
return vfma_f16(void);
return vminq_f16(void);
return vmin_f16(void);
return vminnm_f16(void);
return vminnmq_f16(void);
return vmaxq_f16(void);
return vmax_f16(void);
return vmaxnm_f16(void);
return vmaxnmq_f16(void);
return vrndnq_f16(void);
return vrndn_f16(void);
return vrndmq_f16(void);
return vrndm_f16(void);
return vrndpq_f16(void);
return vrndp_f16(void);
return vsqrtq_f16(void);
return vsqrt_f16(void);
return vcombine_f16(void);
return vsetq_lane_f16(void);
return vset_lane_f16(void);
return vsetq_lane_f16(void);
return vset_lane_f16(void);
return vcombine_f16(void);
return vrev64_f16(void);
return vabsq_f16(void);
return vabs_f16(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return vcvtq_s32_f32(void);
return vcvt_s32_f32(void);
return vcvtq_u32_f32(void);
return vcvt_u32_f32(void);
return vreinterpretq_u8_s8(void);
return vreinterpret_u8_s8(void);
return vreinterpretq_s8_u8(void);
return vreinterpret_s8_u8(void);
return vreinterpretq_u16_s16(void);
return vreinterpret_u16_s16(void);
return vreinterpretq_s16_u16(void);
return vreinterpret_s16_u16(void);
return vcvtq_f32_s32(void);
return vcvt_f32_s32(void);
return vreinterpretq_u32_s32(void);
return vreinterpret_u32_s32(void);
return vcvtq_f32_u32(void);
return vcvt_f32_u32(void);
return vreinterpretq_s32_u32(void);
return vreinterpret_s32_u32(void);
return vreinterpretq_u64_s64(void);
return vreinterpretq_s64_u64(void);
return vcombine_u16(void);
return vreinterpret_f32_s32(void);
return vreinterpret_f32_u32(void);
return vreinterpretq_f32_s32(void);
return vreinterpretq_f32_u32(void);
return vreinterpret_s8_u8(void);
return vreinterpretq_s8_u8(void);
return vreinterpret_u8_s8(void);
return vreinterpretq_u8_s8(void);
return vreinterpret_s16_u16(void);
return vreinterpretq_s16_u16(void);
return vreinterpret_u16_s16(void);
return vreinterpretq_u16_s16(void);
return vreinterpret_s32_f32(void);
return vreinterpret_s32_u32(void);
return vreinterpretq_s32_f32(void);
return vreinterpretq_s32_u32(void);
return vreinterpret_u32_f32(void);
return vreinterpret_u32_s32(void);
return vreinterpretq_u32_f32(void);
return vreinterpretq_u32_s32(void);
return vreinterpretq_s64_u64(void);
return vreinterpretq_u64_s64(void);
return vcvtq_s64_f64(void);
return vcvtq_u64_f64(void);
return vcvtq_f64_s64(void);
return vcvtq_f64_u64(void);
return vreinterpretq_f64_s64(void);
return vreinterpretq_f64_u64(void);
return vreinterpretq_s64_f64(void);
return vreinterpretq_u64_f64(void);
return vreinterpretq_f64_s32(void);
return vreinterpretq_s32_f64(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return pfirst(void);
return pfirst(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return plog_float(void);
return plog_double(void);
return plog2_float(void);
return plog2_double(void);
return generic_plog1p(void);
return generic_expm1(void);
return pexp_float(void);
return pexp_double(void);
return psin_float(void);
return pcos_float(void);
return _mm_sqrt_ps(void);
return _mm_sqrt_pd(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm_set_ps(void);
return _mm_set_pd(void);
return _mm_set_epi32(void);
return _mm_set_ps1(void);
return _mm_set1_pd(void);
return _mm_set1_epi32(void);
return _mm_set_epi32(void);
return _mm_setzero_ps(void);
return _mm_setzero_pd(void);
return _mm_setzero_si128(void);
return _mm_add_ps(void);
return _mm_add_pd(void);
return _mm_add_epi32(void);
return _mm_or_si128(void);
return _mm_sub_ps(void);
return _mm_sub_pd(void);
return _mm_sub_epi32(void);
return _mm_xor_si128(void);
ifdef EIGEN_VECTORIZE_SSE3
return _mm_addsub_ps(void);
ifdef EIGEN_VECTORIZE_SSE3
return _mm_addsub_pd(void);
return _mm_xor_ps(void);
return _mm_xor_pd(void);
return _mm_mul_ps(void);
return _mm_mul_pd(void);
ifdef EIGEN_VECTORIZE_SSE4_1
return _mm_mullo_epi32(void);
return _mm_and_si128(void);
return _mm_div_ps(void);
return _mm_div_pd(void);
return _mm_fmadd_ps(void);
return _mm_fmadd_pd(void);
return _mm_blendv_ps(void);
return _mm_blendv_pd(void);
return _mm_blendv_epi8(void);
return _mm_or_si128(void);
return _mm_cmpeq_epi32(void);
return _mm_cmpeq_epi8(void);
return _mm_and_ps(void);
return _mm_and_pd(void);
return _mm_and_si128(void);
return _mm_and_si128(void);
return _mm_or_ps(void);
return _mm_or_pd(void);
return _mm_or_si128(void);
return _mm_or_si128(void);
return _mm_xor_ps(void);
return _mm_xor_pd(void);
return _mm_xor_si128(void);
return _mm_xor_si128(void);
return _mm_andnot_ps(void);
return _mm_andnot_pd(void);
return _mm_andnot_si128(void);
return _mm_cmple_ps(void);
return _mm_cmplt_ps(void);
return _mm_cmpnge_ps(void);
return _mm_cmpeq_ps(void);
return _mm_cmple_pd(void);
return _mm_cmplt_pd(void);
return _mm_cmpnge_pd(void);
return _mm_cmpeq_pd(void);
return _mm_cmplt_epi32(void);
return _mm_cmpeq_epi32(void);
return _mm_cmpeq_epi8(void);
return _mm_min_ps(void);
return _mm_min_pd(void);
ifdef EIGEN_VECTORIZE_SSE4_1
return _mm_min_epi32(void);
return _mm_max_ps(void);
return _mm_max_pd(void);
ifdef EIGEN_VECTORIZE_SSE4_1
return _mm_max_epi32(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_numbers(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return pminmax_propagate_nan(void);
return _mm_srai_epi32(void);
return _mm_srli_epi32(void);
return _mm_slli_epi32(void);
return _mm_and_ps(void);
return _mm_and_pd(void);
ifdef EIGEN_VECTORIZE_SSSE3
return _mm_abs_epi32(void);
return _mm_round_ps(void);
return _mm_round_pd(void);
return _mm_ceil_ps(void);
return _mm_ceil_pd(void);
return _mm_floor_ps(void);
return _mm_floor_pd(void);
return psub(void);
return psub(void);
return padd(void);
return padd(void);
EIGEN_DEBUG_ALIGNED_LOAD return _mm_load_ps(void);
EIGEN_DEBUG_ALIGNED_LOAD return _mm_load_pd(void);
else
return _mm_loadu_ps(void);
EIGEN_DEBUG_UNALIGNED_LOAD
return _mm_loadu_ps(void);
EIGEN_DEBUG_UNALIGNED_LOAD
return _mm_loadu_pd(void);
return vec4i_swizzle1(void);
return _mm_unpacklo_epi8(void);
return _mm_unpacklo_epi16(void);
EIGEN_DEBUG_ALIGNED_STORE _mm_store_ps(void);
EIGEN_DEBUG_ALIGNED_STORE _mm_store_pd(void);
EIGEN_DEBUG_UNALIGNED_STORE _mm_storeu_pd(void);
EIGEN_DEBUG_UNALIGNED_STORE _mm_storeu_ps(void);
return _mm_set_ps(void);
return _mm_set_pd(void);
return _mm_set_epi32(void);
return _mm_set_epi8(void);
return _mm_cvtss_f32(void);
return _mm_cvtsd_f64(void);
return _mm_cvtsi128_si32(void);
return _mm_shuffle_ps(void);
return _mm_shuffle_pd(void);
return _mm_shuffle_epi32(void);
return _mm_shuffle_epi8(void);
return pfrexp_generic(void);
return pfrexp_generic(void);
return pldexp_generic(void);
ifdef EIGEN_VECTORIZE_SSE4_1
return _mm_blendv_epi8(void);
ifdef EIGEN_VECTORIZE_SSE4_1
return _mm_blendv_ps(void);
ifdef EIGEN_VECTORIZE_SSE4_1
return _mm_blendv_pd(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm_cvttps_epi32(void);
return _mm_cvtepi32_ps(void);
Simply discard the second half of the input
return _mm_cvtps_pd(void);
return _mm_castps_si128(void);
return _mm_castsi128_ps(void);
return _mm_castsi128_pd(void);
return _mm_castpd_si128(void);
return _mm_set_ps(void);
half h0(void);
half h1(void);
half h2(void);
half h3(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return pexp_float(void);
return plog_float(void);
return psin_float(void);
return pcos_float(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return svdup_n_s32(void);
return svrev_s32(void);
return svdup_n_f32(void);
return svrev_f32(void);
return pfrexp_generic(void);
return pldexp_generic(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return svreinterpret_f32_s32(void);
return svreinterpret_s32_f32(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

The code will never reach here __builtin_unreachable(void);
return PacketReturnType(void);
return PacketReturnType(void);
The code will never reach here __builtin_unreachable(void);
return PacketReturnType(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return packet_type(void);
cl_int4 condition(ifPacket.select[0] ? 0 : -1, ifPacket.select[1] ? 0 : -1, ifPacket.select[2] ? 0 : -1, ifPacket.select[3] ? 0 : -1);
cl_long2 condition(ifPacket.select[0] ? 0 : -1, ifPacket.select[1] ? 0 : -1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return add_pointer_impl(void);
return add_pointer_impl(void);
with free nodes before and after it fuse_forward(void);
return self_t(offset_ + offset);
return self_t(offset_ - offset);
self_t temp_iterator(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_STRONG_INLINE void ptranspose(2 > &kernel);
return Packet1cd(a.v + b.v);
return Packet1cd(a.v - b.v);
return Packet1cd(v1 + v2);
return pfirst(void);
return pfirst(void);
return Packet2cf(void);
return Packet2cf(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4i(void);
static _EIGEN_DECLARE_CONST_Packet4i(void);
static _EIGEN_DECLARE_CONST_Packet4f_FROM_INT(void);
static _EIGEN_DECLARE_CONST_Packet4f_FROM_INT(void);
static _EIGEN_DECLARE_CONST_Packet4f_FROM_INT(void);
f
static _EIGEN_DECLARE_CONST_Packet4f_FROM_INT(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(-1.1514610310E-1f);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(-1.2420140846E-1f);
static _EIGEN_DECLARE_CONST_Packet4f(+1.4249322787E-1f);
static _EIGEN_DECLARE_CONST_Packet4f(-1.6668057665E-1f);
static _EIGEN_DECLARE_CONST_Packet4f(+2.0000714765E-1f);
static _EIGEN_DECLARE_CONST_Packet4f(-2.4999993993E-1f);
static _EIGEN_DECLARE_CONST_Packet4f(+3.3333331174E-1f);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
static _EIGEN_DECLARE_CONST_Packet4f(void);
endif

static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
static _EIGEN_DECLARE_CONST_Packet2d(void);
return vec_sqrt(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

agnostic
static _EIGEN_DECLARE_CONST_FAST_Packet4i(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4i(void);
static _EIGEN_DECLARE_CONST_FAST_Packet2d(void);
static _EIGEN_DECLARE_CONST_FAST_Packet2l(void);
static _EIGEN_DECLARE_CONST_FAST_Packet2l(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4f(void);
static _EIGEN_DECLARE_CONST_FAST_Packet4i(void);
EIGEN_DEVICE_FUNC inline void ptranspose(4 > &kernel);
return vec_splats(void);
return vec_splats(void);
return vec_madd(void);
return vec_min(void);
return vec_min(void);
return vec_max(void);
return vec_max(void);
return vec_and(void);
return vec_and(void);
return vec_or(void);
return vec_or(void);
return vec_xor(void);
return vec_xor(void);
return vec_round(void);
return vec_ceil(void);
return vec_floor(void);
return vec_perm(void);
return vec_perm(void);
return vec_abs(void);
return vec_abs(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return vec_sel(void);
return vec_sel(void);
No intrinsic yet
EIGEN_DEBUG_ALIGNED_STORE vec_st2f(void);
Transpose all 2x2 blocks ptranspose(void);
return vec_splats(void);
return vec_madd(void);
return vec_min(void);
return vec_max(void);
return vec_and(void);
return vec_or(void);
return vec_xor(void);
return vec_round(void);
return vec_ceil(void);
return vec_floor(void);
return vec_abs(void);
return vec_perm(void);
return pfirst(void);
return pfirst(void);
return pfirst(void);
return vec_sel(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return generic_pow(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return impl(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return log10(void);
return ptanh(void);
return Scalar(void);
return packetOp(void);
return packetOp(void);
return pselect(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

set the cpu cache size and cache all block sizes from a global cache size in byte eigen_internal_assert(l1 != 0 && l2 != 0);
m* k * sizeof(void);
ifdef EIGEN_HAS_SINGLE_INSTRUCTION_MADD EIGEN_UNUSED_VARIABLE(void);
ifdef EIGEN_HAS_SINGLE_INSTRUCTION_MADD EIGEN_UNUSED_VARIABLE(void);
ifdef EIGEN_HAS_SINGLE_INSTRUCTION_MADD EIGEN_UNUSED_VARIABLE(void);
endif EIGEN_ASM_COMMENT("end step of gebp micro kernel 1X4");
3 * int(void);
2 * int(void);
gets a 1 x 1 res block as registers
ResScalar C0(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LhsMapper lhs(void);
RhsMapper rhs(void);
ResMapper res(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LhsMapper lhs(void);
RhsMapper rhs(void);
ResMapper res(void);
ResMapper res(void);
BlockingType blocking(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGTYPE beta(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGTYPE beta(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Packet PACKET_DECL_COND_PREFIX(void);
EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE static void run(Index rows, Index cols, const LhsMapper & lhs, const RhsMapper & rhs, ResScalar * res, Index resIncr, RhsScalar alpha);
LhsMapper lhs(void);
ResScalar c0(void);
EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE static void run(Index rows, Index cols, const LhsMapper & lhs, const RhsMapper & rhs, ResScalar * res, Index resIncr, ResScalar alpha);
LhsMapper lhs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

const EIGTYPE beta(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return func(void);
else func(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static EIGEN_DONT_INLINE void run(Index rows, Index cols, const Scalar * _lhs, Index lhsStride, const Scalar * _rhs, Index rhsStride, Scalar * res, Index resIncr, Index resStride, const Scalar & alpha, Scalar > &blocking);
LhsMapper lhs(void);
LhsTransposeMapper lhs_transpose(void);
RhsMapper rhs(void);
ResMapper res(void);
static EIGEN_DONT_INLINE void run(Index rows, Index cols, const Scalar * _lhs, Index lhsStride, const Scalar * _rhs, Index rhsStride, Scalar * res, Index resIncr, Index resStride, const Scalar & alpha, Scalar > &blocking);
LhsMapper lhs(void);
ResMapper res(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGTYPE beta(void);
EIGTYPE beta(void);
EIGTYPE beta(void);
EIGTYPE beta(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static EIGEN_DONT_INLINE EIGEN_DEVICE_FUNC
void run(Index size, const Scalar * lhs, Index lhsStride, const Scalar * rhs, Scalar * res, Scalar alpha);
Scalar t2(void);
Scalar t3(void);
Scalar t2(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGTYPE beta(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

BlockingType blocking(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static EIGEN_DONT_INLINE void run(Index _rows, Index _cols, Index _depth, const Scalar * _lhs, Index lhsStride, const Scalar * _rhs, Index rhsStride, Scalar * res, Index resIncr, Index resStride, const Scalar & alpha, Scalar > &blocking);
LhsMapper lhs(void);
RhsMapper rhs(void);
ResMapper res(void);
static EIGEN_DONT_INLINE void run(Index _rows, Index _cols, Index _depth, const Scalar * _lhs, Index lhsStride, const Scalar * _rhs, Index rhsStride, Scalar * res, Index resIncr, Index resStride, const Scalar & alpha, Scalar > &blocking);
LhsMapper lhs(void);
RhsMapper rhs(void);
ResMapper res(void);
BlockingType blocking(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static EIGEN_DONT_INLINE  void run(Index _rows, Index _cols, const LhsScalar * _lhs, Index lhsStride, const RhsScalar * _rhs, Index rhsIncr, ResScalar * _res, Index resIncr, const RhsScalar & alpha);
type cjLhs(void);
type cjRhs(void);
ResMap res(void);
static EIGEN_DONT_INLINE void run(Index _rows, Index _cols, const LhsScalar * _lhs, Index lhsStride, const RhsScalar * _rhs, Index rhsIncr, ResScalar * _res, Index resIncr, const ResScalar & alpha);
type cjLhs(void);
const RhsMap rhs(void);
type cjRhs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGTYPE beta(void);
EIGTYPE beta(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static EIGEN_DONT_INLINE void run(Index size, Index otherSize, const Scalar * _tri, Index triStride, Scalar * _other, Index otherIncr, Index otherStride, Scalar > &blocking);
TriMapper tri(void);
OtherMapper other(void);
Scalar b(void);
static EIGEN_DONT_INLINE void run(Index size, Index otherSize, const Scalar * _tri, Index triStride, Scalar * _other, Index otherIncr, Index otherStride, Scalar > &blocking);
LhsMapper lhs(void);
RhsMapper rhs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGTYPE alpha(void);
EIGTYPE alpha(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

type cjLhs(void);
type cjLhs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return To(void);
return Scalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

typedef ComplexScalar type(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

VectorXd v(void);
return eval_expr_given_size(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef EIGEN_INTERNAL_DEBUGGING EIGEN_UNUSED_VARIABLE(void);
static const auto fix(void);
static const auto fix(int val);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void foo(const T x[N]);
return t && all(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

operator new(void);
return handmade_aligned_malloc(void);
return is_malloc_allowed_impl(void);
return is_malloc_allowed_impl(void);
else handmade_aligned_free(void);
return aligned_malloc(void);
return aligned_realloc(void);
return construct_elements_of_array(void);
return construct_elements_of_array(void);
type NAME(void);
operator new(void);
operator delete(void);
identify the CPU vendor EIGEN_CPUID(void);
s API queryCacheSizes_intel(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static yes test(void);
static no test(void);
EIGEN_DEVICE_FUNC noncopyable(const noncopyable&);
static has_std_result_type testFunctor(T const*, typename T::result_type const* = 0);
static has_none testFunctor(void);
static has_std_result_type testFunctor(T const*, typename T::result_type const* = 0);
static has_none testFunctor(void);
static has_std_result_type testFunctor(T const*, typename T::result_type const* = 0);
static has_none testFunctor(void);
static has_std_result_type testFunctor(T const*, typename T::result_type const* = 0);
static has_none testFunctor(void);
static meta_yes testFunctor(C const*, typename C::ReturnType const* = 0);
static meta_no testFunctor(void);
const T* return_ptr(void);
static meta_no testFunctor(void);
static meta_no testFunctor(void);
static meta_no testFunctor(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return IndexDest(void);
return T(void);
return T(void);
return T(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ComplexEigenSolver& compute(const EigenBase<InputType>&matrix, bool computeEigenvectors = true);
void doComputeEigenvectors(RealScalar matrixnorm);
void sortEigenvalues(bool computeEigenvectors);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ComplexSchur& compute(const EigenBase<InputType>&matrix, bool computeU = true);
ComplexSchur& computeFromHessenberg(const HessMatrixType & matrixH, const OrthMatrixType & matrixQ, bool computeU = true);
bool subdiagonalEntryIsNeglegible(Index i);
ComplexScalar computeShift(Index iu, Index iter);
void reduceToTriangularForm(bool computeU);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EigenSolver& compute(const EigenBase<InputType>&matrix, bool computeEigenvectors = true);
void doComputeEigenvectors(void);
EigenvectorsType matV(void);
this is already computed in RealSchur
Scalar norm(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return EigenvalueType(void);
GeneralizedEigenSolver& compute(const MatrixType & A, const MatrixType & B, bool computeEigenvectors = true);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

GeneralizedSelfAdjointEigenSolver& compute(const MatrixType & matA, const MatrixType & matB, int options = ComputeEigenvectors | Ax_lBx);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return MatrixHReturnType(void);
static void _compute(MatrixType & matA, CoeffVectorType & hCoeffs, VectorType & temp);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PlainObject m_eval(void);
PlainObject m_eval(void);
PlainObject thisAsMatrix(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

RealQZ& compute(const MatrixType & A, const MatrixType & B, bool computeQZ = true);
void hessenbergTriangular(void);
void computeNorms(void);
Index findSmallSubdiagEntry(Index iu);
Index findSmallDiagEntry(Index f, Index l);
void splitOffTwoRows(Index i);
void pushDownZero(Index z, Index f, Index l);
void step(Index f, Index l, Index iter);
Vector3s hr(void);
hessenberg triangular decomposition hessenbergTriangular(void);
m_normOfT computeNorms(void);
zero found pushDownZero(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

RealSchur& compute(const EigenBase<InputType>&matrix, bool computeU = true);
RealSchur& computeFromHessenberg(const HessMatrixType & matrixH, const OrthMatrixType & matrixQ, bool computeU);
Scalar computeNormOfT(void);
Index findSmallSubdiagEntry(Index iu, const Scalar & considerAsZero);
void splitOffTwoRows(Index iu, bool computeU, const Scalar & exshift);
void computeShift(Index iu, Index iter, Scalar & exshift, Vector3s & shiftInfo);
void initFrancisQRStep(Index il, Index iu, const Vector3s & shiftInfo, Index & im, Vector3s & firstHouseholderVector);
void performFrancisQRStep(Index il, Index im, Index iu, bool computeU, const Vector3s & firstHouseholderVector, Scalar * workspace);
iteration count for whole matrix
Scalar exshift(void);
Scalar norm(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC
ComputationInfo computeFromTridiagonal_impl(DiagType & diag, SubDiagType & subdiag, const Index maxIterations, bool computeEigenvectors, MatrixType & eivec);
EIGEN_DEVICE_FUNC
SelfAdjointEigenSolver& compute(const EigenBase<InputType>&matrix, int options = ComputeEigenvectors);
EIGEN_DEVICE_FUNC
SelfAdjointEigenSolver& computeDirect(const MatrixType & matrix, int options = ComputeEigenvectors);
SelfAdjointEigenSolver& computeFromTridiagonal(const RealVectorType & diag, const SubDiagonalType & subdiag, int options = ComputeEigenvectors);
EIGEN_DEVICE_FUNC
static void tridiagonal_qr_step(RealScalar * diag, RealScalar * subdiag, Index start, Index end, Scalar * matrixQ, Index n);
compute the eigenvalues computeRoots(void);
Compute the eigenvalues computeRoots(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC
void tridiagonalization_inplace(MatrixType & matA, CoeffVectorType & hCoeffs);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return isEmpty(void);
return sizes(void);
AlignedBox result(void);
AlignedBox result(void);
Scalar dist2(void);
Scalar dist2(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return a * QuaternionType(void);
return AngleAxis(void);
EIGEN_DEVICE_FUNC AngleAxis& fromRotationMatrix(const MatrixBase<Derived>&m);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

mat* normal(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC explicit ParametrizedLine(const Hyperplane<_Scalar, OtherOptions>&hyperplane);
mat* direction(void);
mat* origin(void);
return intersectionParameter(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC Derived& setFromTwoVectors(const MatrixBase<Derived1>&a, const MatrixBase<Derived2>&b);
return derived(void);
endif

EIGEN_DEVICE_FUNC static Quaternion UnitRandom(void);
EIGEN_DEVICE_FUNC static Quaternion FromTwoVectors(const MatrixBase<Derived1>&a, const MatrixBase<Derived2>&b);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
s* Scalar(void);
return derived(void);
type mat(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Rotation2D(void);
return Rotation2D(m_angle + other.m_angle);
EIGEN_DEVICE_FUNC Rotation2D& fromRotationMatrix(const MatrixBase<Derived>&m);
return Rotation2D(m_angle + dist * t);
return Rotation2D(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ReturnType res(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifdef EIGEN_QT_SUPPORT
inline Transform(const QMatrix & other);
inline Transform(const QTransform & other);
shortcut for m_matrix(void);
return m_matrix(void);
shortcut for m_matrix(void);
return m_matrix(void);
return ConstLinearPart(void);
return LinearPart(void);
return ConstTranslationPart(void);
return TranslationPart(void);
TransformTimeDiagonalReturnType res(void);
EIGEN_DEVICE_FUNC
inline Transform& scale(const MatrixBase<OtherDerived> &other);
EIGEN_DEVICE_FUNC
inline Transform& prescale(const MatrixBase<OtherDerived> &other);
EIGEN_DEVICE_FUNC inline Transform& scale(const Scalar & s);
EIGEN_DEVICE_FUNC inline Transform& prescale(const Scalar & s);
EIGEN_DEVICE_FUNC
inline Transform& translate(const MatrixBase<OtherDerived> &other);
EIGEN_DEVICE_FUNC
inline Transform& pretranslate(const MatrixBase<OtherDerived> &other);
EIGEN_DEVICE_FUNC
inline Transform& rotate(const RotationType & rotation);
EIGEN_DEVICE_FUNC
inline Transform& prerotate(const RotationType & rotation);
EIGEN_DEVICE_FUNC Transform& shear(const Scalar & sx, const Scalar & sy);
EIGEN_DEVICE_FUNC Transform& preshear(const Scalar & sx, const Scalar & sy);
EIGEN_DEVICE_FUNC
Transform& fromPositionOrientationScale(const MatrixBase<PositionDerived> &position, const OrientationType & orientation, const MatrixBase<ScaleDerived> &scale);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Translation(m_coeffs + other.m_coeffs);
return *this * IsometryTransformType(void);
return Translation(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

z* triFactor(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return rows(void);
return adjoint(void);
else applyThisOnTheLeft(void);
type sub_vecs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator it(void);
return factorize(void);
InnerIterator it(void);
return factorize(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

VectorType p(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void factorize(const MatrixType & mat);
inline void updateList(Ref<const VectorIx> colPtr, Ref<VectorIx> rowIdx, Ref<VectorSx> vals, const Index & col, const Index & jk, VectorIx & firstElt, VectorList & listCol);
Pointer to the beginning of each row
VectorIx firstElt(void);
points to the next entry in vals that will be used in the factorization
VectorList listCol(void);
is a linked list of columns to update column j
VectorSx col_vals(void);
Store a  nonzero values in each column
VectorIx col_irow(void);
Row indices of nonzero elements in each column
VectorIx col_pattern(void);
Browse all previous columns that will update column j for (k = listCol[j].begin();
	First element to use in the column eigen_internal_assert(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

	// Auto-generated bindings for fftw3_integration

	void analyzePattern(const MatrixType & amat);
	void factorize(const MatrixType & amat);
	void setDroptol(const RealScalar & droptol);
void setFillfactor(int fillfactor);
Declare Working vectors and variables
Vector u(void);
VectorI ju(void);
maximum size  is n
VectorI jr(void);
InnerIterator j_it(void);
InnerIterator ki_it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static yes test(const Ref<const T>&);
static no test(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
return derived(void);
ColXpr xk(void);
ConstColXpr bk(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

VectorType p(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EIGEN_DEVICE_FUNC
bool makeJacobi(const MatrixBase<Derived>&, Index p, Index q);
EIGEN_DEVICE_FUNC
bool makeJacobi(const RealScalar & x, const Scalar & y, const RealScalar & z);
EIGEN_DEVICE_FUNC
void makeGivens(const Scalar & p, const Scalar & q, Scalar * r = 0);
EIGEN_DEVICE_FUNC
void makeGivens(const Scalar & p, const Scalar & q, Scalar * r);
EIGEN_DEVICE_FUNC
void makeGivens(const Scalar & p, const Scalar & q, Scalar * r);
q1* sqrt(p2 + q2);
EIGEN_DEVICE_FUNC
void apply_rotation_in_the_plane(DenseBase<VectorX>&xpr_x, DenseBase<VectorY>&xpr_y, const JacobiRotation<OtherScalar>&j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return klu_factor(void);
return Scalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

explicit FullPivLU(const EigenBase<InputType>&matrix);
explicit FullPivLU(EigenBase<InputType>&matrix);
void computeInPlace(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

explicit PartialPivLU(Index size);
explicit PartialPivLU(const EigenBase<InputType>&matrix);
explicit PartialPivLU(EigenBase<InputType>&matrix);
void compute(void);
return unblocked_lu(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ActualMatrixType matrix(void);
ActualMatrixType matrix(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

IndexVector visited(void);
InnerIterator it(void);
InnerIterator it(void);
InnerIterator it(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

endif

lapack_complex_float lapack_make_complex_float(float re, float im);
endif

lapack_complex_double lapack_make_complex_double(double re, double im);
lapack_logical LAPACK_lsame(char* ca, char* cb, lapack_int lca, lapack_int lcb);
lapack_int LAPACKE_sbdsdc(int matrix_order, char uplo, char compq, lapack_int n, float* d, float* e, float* u, lapack_int ldu, float* vt, lapack_int ldvt, float* q, lapack_int * iq);
lapack_int LAPACKE_dbdsdc(int matrix_order, char uplo, char compq, lapack_int n, double* d, double* e, double* u, lapack_int ldu, double* vt, lapack_int ldvt, double* q, lapack_int * iq);
lapack_int LAPACKE_sbdsqr(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, float* d, float* e, float* vt, lapack_int ldvt, float* u, lapack_int ldu, float* c, lapack_int ldc);
lapack_int LAPACKE_dbdsqr(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, double* d, double* e, double* vt, lapack_int ldvt, double* u, lapack_int ldu, double* c, lapack_int ldc);
lapack_int LAPACKE_cbdsqr(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, float* d, float* e, lapack_complex_float * vt, lapack_int ldvt, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zbdsqr(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, double* d, double* e, lapack_complex_double * vt, lapack_int ldvt, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_sdisna(char job, lapack_int m, lapack_int n, const float* d, float* sep);
lapack_int LAPACKE_ddisna(char job, lapack_int m, lapack_int n, const double* d, double* sep);
lapack_int LAPACKE_sgbbrd(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, float* ab, lapack_int ldab, float* d, float* e, float* q, lapack_int ldq, float* pt, lapack_int ldpt, float* c, lapack_int ldc);
lapack_int LAPACKE_dgbbrd(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, double* ab, lapack_int ldab, double* d, double* e, double* q, lapack_int ldq, double* pt, lapack_int ldpt, double* c, lapack_int ldc);
lapack_int LAPACKE_cgbbrd(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, lapack_complex_float * ab, lapack_int ldab, float* d, float* e, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * pt, lapack_int ldpt, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zgbbrd(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, lapack_complex_double * ab, lapack_int ldab, double* d, double* e, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * pt, lapack_int ldpt, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_sgbcon(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const float* ab, lapack_int ldab, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_dgbcon(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const double* ab, lapack_int ldab, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_cgbcon(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_float * ab, lapack_int ldab, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_zgbcon(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_double * ab, lapack_int ldab, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_sgbequ(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgbequ(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgbequ(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_float * ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgbequ(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_double * ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgbequb(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgbequb(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgbequb(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_float * ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgbequb(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_double * ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgbrfs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const float* ab, lapack_int ldab, const float* afb, lapack_int ldafb, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dgbrfs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const double* ab, lapack_int ldab, const double* afb, lapack_int ldafb, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cgbrfs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * afb, lapack_int ldafb, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zgbrfs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * afb, lapack_int ldafb, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_sgbrfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const float* ab, lapack_int ldab, const float* afb, lapack_int ldafb, const lapack_int * ipiv, const float* r, const float* c, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dgbrfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const double* ab, lapack_int ldab, const double* afb, lapack_int ldafb, const lapack_int * ipiv, const double* r, const double* c, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_cgbrfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * afb, lapack_int ldafb, const lapack_int * ipiv, const float* r, const float* c, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zgbrfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * afb, lapack_int ldafb, const lapack_int * ipiv, const double* r, const double* c, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_sgbsv(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, float* ab, lapack_int ldab, lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgbsv(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, double* ab, lapack_int ldab, lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgbsv(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgbsv(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sgbsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, float* ab, lapack_int ldab, float* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* rpivot);
lapack_int LAPACKE_dgbsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, double* ab, lapack_int ldab, double* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* rpivot);
lapack_int LAPACKE_cgbsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* rpivot);
lapack_int LAPACKE_zgbsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* rpivot);
lapack_int LAPACKE_sgbsvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, float* ab, lapack_int ldab, float* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dgbsvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, double* ab, lapack_int ldab, double* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_cgbsvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zgbsvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_sgbtrf(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, float* ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_dgbtrf(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, double* ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_cgbtrf(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, lapack_complex_float * ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_zgbtrf(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, lapack_complex_double * ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_sgbtrs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const float* ab, lapack_int ldab, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgbtrs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const double* ab, lapack_int ldab, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgbtrs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgbtrs(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sgebak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* scale, lapack_int m, float* v, lapack_int ldv);
lapack_int LAPACKE_dgebak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* scale, lapack_int m, double* v, lapack_int ldv);
lapack_int LAPACKE_cgebak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* scale, lapack_int m, lapack_complex_float * v, lapack_int ldv);
lapack_int LAPACKE_zgebak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* scale, lapack_int m, lapack_complex_double * v, lapack_int ldv);
lapack_int LAPACKE_sgebal(int matrix_order, char job, lapack_int n, float* a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, float* scale);
lapack_int LAPACKE_dgebal(int matrix_order, char job, lapack_int n, double* a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, double* scale);
lapack_int LAPACKE_cgebal(int matrix_order, char job, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, float* scale);
lapack_int LAPACKE_zgebal(int matrix_order, char job, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, double* scale);
lapack_int LAPACKE_sgebrd(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* d, float* e, float* tauq, float* taup);
lapack_int LAPACKE_dgebrd(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* d, double* e, double* tauq, double* taup);
lapack_int LAPACKE_cgebrd(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, float* d, float* e, lapack_complex_float * tauq, lapack_complex_float * taup);
lapack_int LAPACKE_zgebrd(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, double* d, double* e, lapack_complex_double * tauq, lapack_complex_double * taup);
lapack_int LAPACKE_sgecon(int matrix_order, char norm, lapack_int n, const float* a, lapack_int lda, float anorm, float* rcond);
lapack_int LAPACKE_dgecon(int matrix_order, char norm, lapack_int n, const double* a, lapack_int lda, double anorm, double* rcond);
lapack_int LAPACKE_cgecon(int matrix_order, char norm, lapack_int n, const lapack_complex_float * a, lapack_int lda, float anorm, float* rcond);
lapack_int LAPACKE_zgecon(int matrix_order, char norm, lapack_int n, const lapack_complex_double * a, lapack_int lda, double anorm, double* rcond);
lapack_int LAPACKE_sgeequ(int matrix_order, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgeequ(int matrix_order, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgeequ(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgeequ(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgeequb(int matrix_order, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgeequb(int matrix_order, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgeequb(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgeequb(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgees(int matrix_order, char jobvs, char sort, LAPACK_S_SELECT2 select, lapack_int n, float* a, lapack_int lda, lapack_int * sdim, float* wr, float* wi, float* vs, lapack_int ldvs);
lapack_int LAPACKE_dgees(int matrix_order, char jobvs, char sort, LAPACK_D_SELECT2 select, lapack_int n, double* a, lapack_int lda, lapack_int * sdim, double* wr, double* wi, double* vs, lapack_int ldvs);
lapack_int LAPACKE_cgees(int matrix_order, char jobvs, char sort, LAPACK_C_SELECT1 select, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * sdim, lapack_complex_float * w, lapack_complex_float * vs, lapack_int ldvs);
lapack_int LAPACKE_zgees(int matrix_order, char jobvs, char sort, LAPACK_Z_SELECT1 select, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * sdim, lapack_complex_double * w, lapack_complex_double * vs, lapack_int ldvs);
lapack_int LAPACKE_sgeesx(int matrix_order, char jobvs, char sort, LAPACK_S_SELECT2 select, char sense, lapack_int n, float* a, lapack_int lda, lapack_int * sdim, float* wr, float* wi, float* vs, lapack_int ldvs, float* rconde, float* rcondv);
lapack_int LAPACKE_dgeesx(int matrix_order, char jobvs, char sort, LAPACK_D_SELECT2 select, char sense, lapack_int n, double* a, lapack_int lda, lapack_int * sdim, double* wr, double* wi, double* vs, lapack_int ldvs, double* rconde, double* rcondv);
lapack_int LAPACKE_cgeesx(int matrix_order, char jobvs, char sort, LAPACK_C_SELECT1 select, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * sdim, lapack_complex_float * w, lapack_complex_float * vs, lapack_int ldvs, float* rconde, float* rcondv);
lapack_int LAPACKE_zgeesx(int matrix_order, char jobvs, char sort, LAPACK_Z_SELECT1 select, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * sdim, lapack_complex_double * w, lapack_complex_double * vs, lapack_int ldvs, double* rconde, double* rcondv);
lapack_int LAPACKE_sgeev(int matrix_order, char jobvl, char jobvr, lapack_int n, float* a, lapack_int lda, float* wr, float* wi, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr);
lapack_int LAPACKE_dgeev(int matrix_order, char jobvl, char jobvr, lapack_int n, double* a, lapack_int lda, double* wr, double* wi, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr);
lapack_int LAPACKE_cgeev(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * w, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr);
lapack_int LAPACKE_zgeev(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * w, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr);
lapack_int LAPACKE_sgeevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, float* a, lapack_int lda, float* wr, float* wi, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* scale, float* abnrm, float* rconde, float* rcondv);
lapack_int LAPACKE_dgeevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, double* a, lapack_int lda, double* wr, double* wi, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* scale, double* abnrm, double* rconde, double* rcondv);
lapack_int LAPACKE_cgeevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * w, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* scale, float* abnrm, float* rconde, float* rcondv);
lapack_int LAPACKE_zgeevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * w, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* scale, double* abnrm, double* rconde, double* rcondv);
lapack_int LAPACKE_sgehrd(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgehrd(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgehrd(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgehrd(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgejsv(int matrix_order, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, lapack_int m, lapack_int n, float* a, lapack_int lda, float* sva, float* u, lapack_int ldu, float* v, lapack_int ldv, float* stat, lapack_int * istat);
lapack_int LAPACKE_dgejsv(int matrix_order, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, lapack_int m, lapack_int n, double* a, lapack_int lda, double* sva, double* u, lapack_int ldu, double* v, lapack_int ldv, double* stat, lapack_int * istat);
lapack_int LAPACKE_sgelq2(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgelq2(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgelq2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgelq2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgelqf(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgelqf(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgelqf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgelqf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgels(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dgels(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_cgels(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgels(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sgelsd(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb, float* s, float rcond, lapack_int * rank);
lapack_int LAPACKE_dgelsd(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, double* s, double rcond, lapack_int * rank);
lapack_int LAPACKE_cgelsd(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* s, float rcond, lapack_int * rank);
lapack_int LAPACKE_zgelsd(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* s, double rcond, lapack_int * rank);
lapack_int LAPACKE_sgelss(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb, float* s, float rcond, lapack_int * rank);
lapack_int LAPACKE_dgelss(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, double* s, double rcond, lapack_int * rank);
lapack_int LAPACKE_cgelss(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* s, float rcond, lapack_int * rank);
lapack_int LAPACKE_zgelss(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* s, double rcond, lapack_int * rank);
lapack_int LAPACKE_sgelsy(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * jpvt, float rcond, lapack_int * rank);
lapack_int LAPACKE_dgelsy(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * jpvt, double rcond, lapack_int * rank);
lapack_int LAPACKE_cgelsy(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * jpvt, float rcond, lapack_int * rank);
lapack_int LAPACKE_zgelsy(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * jpvt, double rcond, lapack_int * rank);
lapack_int LAPACKE_sgeqlf(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgeqlf(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgeqlf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgeqlf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgeqp3(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * jpvt, float* tau);
lapack_int LAPACKE_dgeqp3(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * jpvt, double* tau);
lapack_int LAPACKE_cgeqp3(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * jpvt, lapack_complex_float * tau);
lapack_int LAPACKE_zgeqp3(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * jpvt, lapack_complex_double * tau);
lapack_int LAPACKE_sgeqpf(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * jpvt, float* tau);
lapack_int LAPACKE_dgeqpf(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * jpvt, double* tau);
lapack_int LAPACKE_cgeqpf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * jpvt, lapack_complex_float * tau);
lapack_int LAPACKE_zgeqpf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * jpvt, lapack_complex_double * tau);
lapack_int LAPACKE_sgeqr2(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgeqr2(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgeqr2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgeqr2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgeqrf(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgeqrf(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgeqrf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgeqrf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgeqrfp(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgeqrfp(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgeqrfp(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgeqrfp(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgerfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dgerfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cgerfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zgerfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_sgerfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* r, const float* c, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dgerfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* r, const double* c, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_cgerfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const float* r, const float* c, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zgerfsx(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const double* r, const double* c, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_sgerqf(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dgerqf(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_cgerqf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_zgerqf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_sgesdd(int matrix_order, char jobz, lapack_int m, lapack_int n, float* a, lapack_int lda, float* s, float* u, lapack_int ldu, float* vt, lapack_int ldvt);
lapack_int LAPACKE_dgesdd(int matrix_order, char jobz, lapack_int m, lapack_int n, double* a, lapack_int lda, double* s, double* u, lapack_int ldu, double* vt, lapack_int ldvt);
lapack_int LAPACKE_cgesdd(int matrix_order, char jobz, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, float* s, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * vt, lapack_int ldvt);
lapack_int LAPACKE_zgesdd(int matrix_order, char jobz, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, double* s, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * vt, lapack_int ldvt);
lapack_int LAPACKE_sgesv(int matrix_order, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgesv(int matrix_order, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgesv(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgesv(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_dsgesv(int matrix_order, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, lapack_int * ipiv, double* b, lapack_int ldb, double* x, lapack_int ldx, lapack_int * iter);
lapack_int LAPACKE_zcgesv(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, lapack_int * iter);
lapack_int LAPACKE_sgesvd(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, float* a, lapack_int lda, float* s, float* u, lapack_int ldu, float* vt, lapack_int ldvt, float* superb);
lapack_int LAPACKE_dgesvd(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, double* a, lapack_int lda, double* s, double* u, lapack_int ldu, double* vt, lapack_int ldvt, double* superb);
lapack_int LAPACKE_cgesvd(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, float* s, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * vt, lapack_int ldvt, float* superb);
lapack_int LAPACKE_zgesvd(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, double* s, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * vt, lapack_int ldvt, double* superb);
lapack_int LAPACKE_sgesvj(int matrix_order, char joba, char jobu, char jobv, lapack_int m, lapack_int n, float* a, lapack_int lda, float* sva, lapack_int mv, float* v, lapack_int ldv, float* stat);
lapack_int LAPACKE_dgesvj(int matrix_order, char joba, char jobu, char jobv, lapack_int m, lapack_int n, double* a, lapack_int lda, double* sva, lapack_int mv, double* v, lapack_int ldv, double* stat);
lapack_int LAPACKE_sgesvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* rpivot);
lapack_int LAPACKE_dgesvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* rpivot);
lapack_int LAPACKE_cgesvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* rpivot);
lapack_int LAPACKE_zgesvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* rpivot);
lapack_int LAPACKE_sgesvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dgesvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_cgesvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zgesvxx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_sgetf2(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_dgetf2(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_cgetf2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_zgetf2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_sgetrf(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_dgetrf(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_cgetrf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_zgetrf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_sgetri(int matrix_order, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_dgetri(int matrix_order, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_cgetri(int matrix_order, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_zgetri(int matrix_order, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_sgetrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgetrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgetrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgetrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sggbak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* lscale, const float* rscale, lapack_int m, float* v, lapack_int ldv);
lapack_int LAPACKE_dggbak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* lscale, const double* rscale, lapack_int m, double* v, lapack_int ldv);
lapack_int LAPACKE_cggbak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* lscale, const float* rscale, lapack_int m, lapack_complex_float * v, lapack_int ldv);
lapack_int LAPACKE_zggbak(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* lscale, const double* rscale, lapack_int m, lapack_complex_double * v, lapack_int ldv);
lapack_int LAPACKE_sggbal(int matrix_order, char job, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale);
lapack_int LAPACKE_dggbal(int matrix_order, char job, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale);
lapack_int LAPACKE_cggbal(int matrix_order, char job, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale);
lapack_int LAPACKE_zggbal(int matrix_order, char job, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale);
lapack_int LAPACKE_sgges(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * sdim, float* alphar, float* alphai, float* beta, float* vsl, lapack_int ldvsl, float* vsr, lapack_int ldvsr);
lapack_int LAPACKE_dgges(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * sdim, double* alphar, double* alphai, double* beta, double* vsl, lapack_int ldvsl, double* vsr, lapack_int ldvsr);
lapack_int LAPACKE_cgges(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * sdim, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vsl, lapack_int ldvsl, lapack_complex_float * vsr, lapack_int ldvsr);
lapack_int LAPACKE_zgges(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * sdim, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vsl, lapack_int ldvsl, lapack_complex_double * vsr, lapack_int ldvsr);
lapack_int LAPACKE_sggesx(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, char sense, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * sdim, float* alphar, float* alphai, float* beta, float* vsl, lapack_int ldvsl, float* vsr, lapack_int ldvsr, float* rconde, float* rcondv);
lapack_int LAPACKE_dggesx(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, char sense, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * sdim, double* alphar, double* alphai, double* beta, double* vsl, lapack_int ldvsl, double* vsr, lapack_int ldvsr, double* rconde, double* rcondv);
lapack_int LAPACKE_cggesx(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * sdim, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vsl, lapack_int ldvsl, lapack_complex_float * vsr, lapack_int ldvsr, float* rconde, float* rcondv);
lapack_int LAPACKE_zggesx(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * sdim, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vsl, lapack_int ldvsl, lapack_complex_double * vsr, lapack_int ldvsr, double* rconde, double* rcondv);
lapack_int LAPACKE_sggev(int matrix_order, char jobvl, char jobvr, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* alphar, float* alphai, float* beta, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr);
lapack_int LAPACKE_dggev(int matrix_order, char jobvl, char jobvr, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* alphar, double* alphai, double* beta, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr);
lapack_int LAPACKE_cggev(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr);
lapack_int LAPACKE_zggev(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr);
lapack_int LAPACKE_sggevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* alphar, float* alphai, float* beta, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv);
lapack_int LAPACKE_dggevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* alphar, double* alphai, double* beta, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv);
lapack_int LAPACKE_cggevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv);
lapack_int LAPACKE_zggevx(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv);
lapack_int LAPACKE_sggglm(int matrix_order, lapack_int n, lapack_int m, lapack_int p, float* a, lapack_int lda, float* b, lapack_int ldb, float* d, float* x, float* y);
lapack_int LAPACKE_dggglm(int matrix_order, lapack_int n, lapack_int m, lapack_int p, double* a, lapack_int lda, double* b, lapack_int ldb, double* d, double* x, double* y);
lapack_int LAPACKE_cggglm(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * d, lapack_complex_float * x, lapack_complex_float * y);
lapack_int LAPACKE_zggglm(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * d, lapack_complex_double * x, lapack_complex_double * y);
lapack_int LAPACKE_sgghrd(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, float* a, lapack_int lda, float* b, lapack_int ldb, float* q, lapack_int ldq, float* z, lapack_int ldz);
lapack_int LAPACKE_dgghrd(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, double* a, lapack_int lda, double* b, lapack_int ldb, double* q, lapack_int ldq, double* z, lapack_int ldz);
lapack_int LAPACKE_cgghrd(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zgghrd(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_sgglse(int matrix_order, lapack_int m, lapack_int n, lapack_int p, float* a, lapack_int lda, float* b, lapack_int ldb, float* c, float* d, float* x);
lapack_int LAPACKE_dgglse(int matrix_order, lapack_int m, lapack_int n, lapack_int p, double* a, lapack_int lda, double* b, lapack_int ldb, double* c, double* d, double* x);
lapack_int LAPACKE_cgglse(int matrix_order, lapack_int m, lapack_int n, lapack_int p, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * c, lapack_complex_float * d, lapack_complex_float * x);
lapack_int LAPACKE_zgglse(int matrix_order, lapack_int m, lapack_int n, lapack_int p, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * c, lapack_complex_double * d, lapack_complex_double * x);
lapack_int LAPACKE_sggqrf(int matrix_order, lapack_int n, lapack_int m, lapack_int p, float* a, lapack_int lda, float* taua, float* b, lapack_int ldb, float* taub);
lapack_int LAPACKE_dggqrf(int matrix_order, lapack_int n, lapack_int m, lapack_int p, double* a, lapack_int lda, double* taua, double* b, lapack_int ldb, double* taub);
lapack_int LAPACKE_cggqrf(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_float * a, lapack_int lda, lapack_complex_float * taua, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * taub);
lapack_int LAPACKE_zggqrf(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_double * a, lapack_int lda, lapack_complex_double * taua, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * taub);
lapack_int LAPACKE_sggrqf(int matrix_order, lapack_int m, lapack_int p, lapack_int n, float* a, lapack_int lda, float* taua, float* b, lapack_int ldb, float* taub);
lapack_int LAPACKE_dggrqf(int matrix_order, lapack_int m, lapack_int p, lapack_int n, double* a, lapack_int lda, double* taua, double* b, lapack_int ldb, double* taub);
lapack_int LAPACKE_cggrqf(int matrix_order, lapack_int m, lapack_int p, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * taua, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * taub);
lapack_int LAPACKE_zggrqf(int matrix_order, lapack_int m, lapack_int p, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * taua, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * taub);
lapack_int LAPACKE_sggsvd(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, float* a, lapack_int lda, float* b, lapack_int ldb, float* alpha, float* beta, float* u, lapack_int ldu, float* v, lapack_int ldv, float* q, lapack_int ldq, lapack_int * iwork);
lapack_int LAPACKE_dggsvd(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, double* a, lapack_int lda, double* b, lapack_int ldb, double* alpha, double* beta, double* u, lapack_int ldu, double* v, lapack_int ldv, double* q, lapack_int ldq, lapack_int * iwork);
lapack_int LAPACKE_cggsvd(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* alpha, float* beta, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * v, lapack_int ldv, lapack_complex_float * q, lapack_int ldq, lapack_int * iwork);
lapack_int LAPACKE_zggsvd(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* alpha, double* beta, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * v, lapack_int ldv, lapack_complex_double * q, lapack_int ldq, lapack_int * iwork);
lapack_int LAPACKE_sggsvp(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float tola, float tolb, lapack_int * k, lapack_int * l, float* u, lapack_int ldu, float* v, lapack_int ldv, float* q, lapack_int ldq);
lapack_int LAPACKE_dggsvp(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double tola, double tolb, lapack_int * k, lapack_int * l, double* u, lapack_int ldu, double* v, lapack_int ldv, double* q, lapack_int ldq);
lapack_int LAPACKE_cggsvp(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float tola, float tolb, lapack_int * k, lapack_int * l, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * v, lapack_int ldv, lapack_complex_float * q, lapack_int ldq);
lapack_int LAPACKE_zggsvp(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double tola, double tolb, lapack_int * k, lapack_int * l, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * v, lapack_int ldv, lapack_complex_double * q, lapack_int ldq);
lapack_int LAPACKE_sgtcon(char norm, lapack_int n, const float* dl, const float* d, const float* du, const float* du2, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_dgtcon(char norm, lapack_int n, const double* dl, const double* d, const double* du, const double* du2, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_cgtcon(char norm, lapack_int n, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * du2, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_zgtcon(char norm, lapack_int n, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * du2, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_sgtrfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* dl, const float* d, const float* du, const float* dlf, const float* df, const float* duf, const float* du2, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dgtrfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* dl, const double* d, const double* du, const double* dlf, const double* df, const double* duf, const double* du2, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cgtrfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * dlf, const lapack_complex_float * df, const lapack_complex_float * duf, const lapack_complex_float * du2, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zgtrfs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * dlf, const lapack_complex_double * df, const lapack_complex_double * duf, const lapack_complex_double * du2, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_sgtsv(int matrix_order, lapack_int n, lapack_int nrhs, float* dl, float* d, float* du, float* b, lapack_int ldb);
lapack_int LAPACKE_dgtsv(int matrix_order, lapack_int n, lapack_int nrhs, double* dl, double* d, double* du, double* b, lapack_int ldb);
lapack_int LAPACKE_cgtsv(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_float * dl, lapack_complex_float * d, lapack_complex_float * du, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgtsv(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_double * dl, lapack_complex_double * d, lapack_complex_double * du, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sgtsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const float* dl, const float* d, const float* du, float* dlf, float* df, float* duf, float* du2, lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_dgtsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const double* dl, const double* d, const double* du, double* dlf, double* df, double* duf, double* du2, lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_cgtsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, lapack_complex_float * dlf, lapack_complex_float * df, lapack_complex_float * duf, lapack_complex_float * du2, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zgtsvx(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, lapack_complex_double * dlf, lapack_complex_double * df, lapack_complex_double * duf, lapack_complex_double * du2, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_sgttrf(lapack_int n, float* dl, float* d, float* du, float* du2, lapack_int * ipiv);
lapack_int LAPACKE_dgttrf(lapack_int n, double* dl, double* d, double* du, double* du2, lapack_int * ipiv);
lapack_int LAPACKE_cgttrf(lapack_int n, lapack_complex_float * dl, lapack_complex_float * d, lapack_complex_float * du, lapack_complex_float * du2, lapack_int * ipiv);
lapack_int LAPACKE_zgttrf(lapack_int n, lapack_complex_double * dl, lapack_complex_double * d, lapack_complex_double * du, lapack_complex_double * du2, lapack_int * ipiv);
lapack_int LAPACKE_sgttrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* dl, const float* d, const float* du, const float* du2, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgttrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* dl, const double* d, const double* du, const double* du2, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgttrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * du2, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgttrs(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * du2, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chbev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhbev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chbevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhbevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chbevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_zhbevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_chbgst(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * bb, lapack_int ldbb, lapack_complex_float * x, lapack_int ldx);
lapack_int LAPACKE_zhbgst(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * bb, lapack_int ldbb, lapack_complex_double * x, lapack_int ldx);
lapack_int LAPACKE_chbgv(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * bb, lapack_int ldbb, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhbgv(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * bb, lapack_int ldbb, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chbgvd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * bb, lapack_int ldbb, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhbgvd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * bb, lapack_int ldbb, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chbgvx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * bb, lapack_int ldbb, lapack_complex_float * q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_zhbgvx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * bb, lapack_int ldbb, lapack_complex_double * q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_chbtrd(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, float* d, float* e, lapack_complex_float * q, lapack_int ldq);
lapack_int LAPACKE_zhbtrd(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, double* d, double* e, lapack_complex_double * q, lapack_int ldq);
lapack_int LAPACKE_checon(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_zhecon(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_cheequb(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_zheequb(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_cheev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float* w);
lapack_int LAPACKE_zheev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double* w);
lapack_int LAPACKE_cheevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float* w);
lapack_int LAPACKE_zheevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double* w);
lapack_int LAPACKE_cheevr(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_zheevr(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_cheevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_zheevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_chegst(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhegst(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chegv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* w);
lapack_int LAPACKE_zhegv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* w);
lapack_int LAPACKE_chegvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* w);
lapack_int LAPACKE_zhegvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* w);
lapack_int LAPACKE_chegvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_zhegvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_cherfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zherfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cherfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const float* s, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zherfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const double* s, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_chesv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhesv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chesvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zhesvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_chesvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zhesvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_chetrd(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float* d, float* e, lapack_complex_float * tau);
lapack_int LAPACKE_zhetrd(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double* d, double* e, lapack_complex_double * tau);
lapack_int LAPACKE_chetrf(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_zhetrf(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_chetri(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_zhetri(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_chetrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhetrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chfrk(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, float alpha, const lapack_complex_float * a, lapack_int lda, float beta, lapack_complex_float * c);
lapack_int LAPACKE_zhfrk(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, double alpha, const lapack_complex_double * a, lapack_int lda, double beta, lapack_complex_double * c);
lapack_int LAPACKE_shgeqz(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, float* h, lapack_int ldh, float* t, lapack_int ldt, float* alphar, float* alphai, float* beta, float* q, lapack_int ldq, float* z, lapack_int ldz);
lapack_int LAPACKE_dhgeqz(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, double* h, lapack_int ldh, double* t, lapack_int ldt, double* alphar, double* alphai, double* beta, double* q, lapack_int ldq, double* z, lapack_int ldz);
lapack_int LAPACKE_chgeqz(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * h, lapack_int ldh, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhgeqz(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * h, lapack_int ldh, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chpcon(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_zhpcon(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_chpev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhpev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chpevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhpevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chpevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * ap, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_zhpevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * ap, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_chpgst(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_float * ap, const lapack_complex_float * bp);
lapack_int LAPACKE_zhpgst(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_double * ap, const lapack_complex_double * bp);
lapack_int LAPACKE_chpgv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, lapack_complex_float * bp, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhpgv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, lapack_complex_double * bp, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chpgvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, lapack_complex_float * bp, float* w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhpgvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, lapack_complex_double * bp, double* w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_chpgvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * ap, lapack_complex_float * bp, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_zhpgvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * ap, lapack_complex_double * bp, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_chprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zhprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_chpsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhpsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chpsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * afp, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zhpsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * afp, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_chptrd(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, float* d, float* e, lapack_complex_float * tau);
lapack_int LAPACKE_zhptrd(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, double* d, double* e, lapack_complex_double * tau);
lapack_int LAPACKE_chptrf(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, lapack_int * ipiv);
lapack_int LAPACKE_zhptrf(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, lapack_int * ipiv);
lapack_int LAPACKE_chptri(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, const lapack_int * ipiv);
lapack_int LAPACKE_zhptri(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, const lapack_int * ipiv);
lapack_int LAPACKE_chptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_shsein(int matrix_order, char job, char eigsrc, char initv, lapack_logical * select, lapack_int n, const float* h, lapack_int ldh, float* wr, const float* wi, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_dhsein(int matrix_order, char job, char eigsrc, char initv, lapack_logical * select, lapack_int n, const double* h, lapack_int ldh, double* wr, const double* wi, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_chsein(int matrix_order, char job, char eigsrc, char initv, const lapack_logical * select, lapack_int n, const lapack_complex_float * h, lapack_int ldh, lapack_complex_float * w, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_zhsein(int matrix_order, char job, char eigsrc, char initv, const lapack_logical * select, lapack_int n, const lapack_complex_double * h, lapack_int ldh, lapack_complex_double * w, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_shseqr(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, float* h, lapack_int ldh, float* wr, float* wi, float* z, lapack_int ldz);
lapack_int LAPACKE_dhseqr(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, double* h, lapack_int ldh, double* wr, double* wi, double* z, lapack_int ldz);
lapack_int LAPACKE_chseqr(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * h, lapack_int ldh, lapack_complex_float * w, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zhseqr(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * h, lapack_int ldh, lapack_complex_double * w, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_clacgv(lapack_int n, lapack_complex_float * x, lapack_int incx);
lapack_int LAPACKE_zlacgv(lapack_int n, lapack_complex_double * x, lapack_int incx);
lapack_int LAPACKE_slacpy(int matrix_order, char uplo, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dlacpy(int matrix_order, char uplo, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_clacpy(int matrix_order, char uplo, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zlacpy(int matrix_order, char uplo, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_zlag2c(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_float * sa, lapack_int ldsa);
lapack_int LAPACKE_slag2d(int matrix_order, lapack_int m, lapack_int n, const float* sa, lapack_int ldsa, double* a, lapack_int lda);
lapack_int LAPACKE_dlag2s(int matrix_order, lapack_int m, lapack_int n, const double* a, lapack_int lda, float* sa, lapack_int ldsa);
lapack_int LAPACKE_clag2z(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_float * sa, lapack_int ldsa, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_slagge(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* d, float* a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_dlagge(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* d, double* a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_clagge(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* d, lapack_complex_float * a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_zlagge(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* d, lapack_complex_double * a, lapack_int lda, lapack_int * iseed);
float LAPACKE_slamch(char cmach);
double LAPACKE_dlamch(char cmach);
float LAPACKE_slange(int matrix_order, char norm, lapack_int m, lapack_int n, const float* a, lapack_int lda);
double LAPACKE_dlange(int matrix_order, char norm, lapack_int m, lapack_int n, const double* a, lapack_int lda);
float LAPACKE_clange(int matrix_order, char norm, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda);
double LAPACKE_zlange(int matrix_order, char norm, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda);
float LAPACKE_clanhe(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda);
double LAPACKE_zlanhe(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda);
float LAPACKE_slansy(int matrix_order, char norm, char uplo, lapack_int n, const float* a, lapack_int lda);
double LAPACKE_dlansy(int matrix_order, char norm, char uplo, lapack_int n, const double* a, lapack_int lda);
float LAPACKE_clansy(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda);
double LAPACKE_zlansy(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda);
float LAPACKE_slantr(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const float* a, lapack_int lda);
double LAPACKE_dlantr(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const double* a, lapack_int lda);
float LAPACKE_clantr(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda);
double LAPACKE_zlantr(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_slarfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* c, lapack_int ldc);
lapack_int LAPACKE_dlarfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* c, lapack_int ldc);
lapack_int LAPACKE_clarfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zlarfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_slarfg(lapack_int n, float* alpha, float* x, lapack_int incx, float* tau);
lapack_int LAPACKE_dlarfg(lapack_int n, double* alpha, double* x, lapack_int incx, double* tau);
lapack_int LAPACKE_clarfg(lapack_int n, lapack_complex_float * alpha, lapack_complex_float * x, lapack_int incx, lapack_complex_float * tau);
lapack_int LAPACKE_zlarfg(lapack_int n, lapack_complex_double * alpha, lapack_complex_double * x, lapack_int incx, lapack_complex_double * tau);
lapack_int LAPACKE_slarft(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const float* v, lapack_int ldv, const float* tau, float* t, lapack_int ldt);
lapack_int LAPACKE_dlarft(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const double* v, lapack_int ldv, const double* tau, double* t, lapack_int ldt);
lapack_int LAPACKE_clarft(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * tau, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_zlarft(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * tau, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_slarfx(int matrix_order, char side, lapack_int m, lapack_int n, const float* v, float tau, float* c, lapack_int ldc, float* work);
lapack_int LAPACKE_dlarfx(int matrix_order, char side, lapack_int m, lapack_int n, const double* v, double tau, double* c, lapack_int ldc, double* work);
lapack_int LAPACKE_clarfx(int matrix_order, char side, lapack_int m, lapack_int n, const lapack_complex_float * v, lapack_complex_float tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work);
lapack_int LAPACKE_zlarfx(int matrix_order, char side, lapack_int m, lapack_int n, const lapack_complex_double * v, lapack_complex_double tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work);
lapack_int LAPACKE_slarnv(lapack_int idist, lapack_int * iseed, lapack_int n, float* x);
lapack_int LAPACKE_dlarnv(lapack_int idist, lapack_int * iseed, lapack_int n, double* x);
lapack_int LAPACKE_clarnv(lapack_int idist, lapack_int * iseed, lapack_int n, lapack_complex_float * x);
lapack_int LAPACKE_zlarnv(lapack_int idist, lapack_int * iseed, lapack_int n, lapack_complex_double * x);
lapack_int LAPACKE_slaset(int matrix_order, char uplo, lapack_int m, lapack_int n, float alpha, float beta, float* a, lapack_int lda);
lapack_int LAPACKE_dlaset(int matrix_order, char uplo, lapack_int m, lapack_int n, double alpha, double beta, double* a, lapack_int lda);
lapack_int LAPACKE_claset(int matrix_order, char uplo, lapack_int m, lapack_int n, lapack_complex_float alpha, lapack_complex_float beta, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zlaset(int matrix_order, char uplo, lapack_int m, lapack_int n, lapack_complex_double alpha, lapack_complex_double beta, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_slasrt(char id, lapack_int n, float* d);
lapack_int LAPACKE_dlasrt(char id, lapack_int n, double* d);
lapack_int LAPACKE_slaswp(int matrix_order, lapack_int n, float* a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_dlaswp(int matrix_order, lapack_int n, double* a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_claswp(int matrix_order, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_zlaswp(int matrix_order, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_slatms(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, float* d, lapack_int mode, float cond, float dmax, lapack_int kl, lapack_int ku, char pack, float* a, lapack_int lda);
lapack_int LAPACKE_dlatms(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, double* d, lapack_int mode, double cond, double dmax, lapack_int kl, lapack_int ku, char pack, double* a, lapack_int lda);
lapack_int LAPACKE_clatms(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, float* d, lapack_int mode, float cond, float dmax, lapack_int kl, lapack_int ku, char pack, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zlatms(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, double* d, lapack_int mode, double cond, double dmax, lapack_int kl, lapack_int ku, char pack, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_slauum(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dlauum(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_clauum(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zlauum(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_sopgtr(int matrix_order, char uplo, lapack_int n, const float* ap, const float* tau, float* q, lapack_int ldq);
lapack_int LAPACKE_dopgtr(int matrix_order, char uplo, lapack_int n, const double* ap, const double* tau, double* q, lapack_int ldq);
lapack_int LAPACKE_sopmtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const float* ap, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dopmtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const double* ap, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sorgbr(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau);
lapack_int LAPACKE_dorgbr(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau);
lapack_int LAPACKE_sorghr(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, float* a, lapack_int lda, const float* tau);
lapack_int LAPACKE_dorghr(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, double* a, lapack_int lda, const double* tau);
lapack_int LAPACKE_sorglq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau);
lapack_int LAPACKE_dorglq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau);
lapack_int LAPACKE_sorgql(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau);
lapack_int LAPACKE_dorgql(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau);
lapack_int LAPACKE_sorgqr(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau);
lapack_int LAPACKE_dorgqr(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau);
lapack_int LAPACKE_sorgrq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau);
lapack_int LAPACKE_dorgrq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau);
lapack_int LAPACKE_sorgtr(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const float* tau);
lapack_int LAPACKE_dorgtr(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const double* tau);
lapack_int LAPACKE_sormbr(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormbr(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sormhr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormhr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sormlq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormlq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sormql(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormql(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sormqr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormqr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sormrq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormrq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sormrz(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormrz(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_sormtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc);
lapack_int LAPACKE_dormtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc);
lapack_int LAPACKE_spbcon(int matrix_order, char uplo, lapack_int n, lapack_int kd, const float* ab, lapack_int ldab, float anorm, float* rcond);
lapack_int LAPACKE_dpbcon(int matrix_order, char uplo, lapack_int n, lapack_int kd, const double* ab, lapack_int ldab, double anorm, double* rcond);
lapack_int LAPACKE_cpbcon(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_float * ab, lapack_int ldab, float anorm, float* rcond);
lapack_int LAPACKE_zpbcon(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_double * ab, lapack_int ldab, double anorm, double* rcond);
lapack_int LAPACKE_spbequ(int matrix_order, char uplo, lapack_int n, lapack_int kd, const float* ab, lapack_int ldab, float* s, float* scond, float* amax);
lapack_int LAPACKE_dpbequ(int matrix_order, char uplo, lapack_int n, lapack_int kd, const double* ab, lapack_int ldab, double* s, double* scond, double* amax);
lapack_int LAPACKE_cpbequ(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_float * ab, lapack_int ldab, float* s, float* scond, float* amax);
lapack_int LAPACKE_zpbequ(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_double * ab, lapack_int ldab, double* s, double* scond, double* amax);
lapack_int LAPACKE_spbrfs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, const float* afb, lapack_int ldafb, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dpbrfs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, const double* afb, lapack_int ldafb, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cpbrfs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * afb, lapack_int ldafb, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zpbrfs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * afb, lapack_int ldafb, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_spbstf(int matrix_order, char uplo, lapack_int n, lapack_int kb, float* bb, lapack_int ldbb);
lapack_int LAPACKE_dpbstf(int matrix_order, char uplo, lapack_int n, lapack_int kb, double* bb, lapack_int ldbb);
lapack_int LAPACKE_cpbstf(int matrix_order, char uplo, lapack_int n, lapack_int kb, lapack_complex_float * bb, lapack_int ldbb);
lapack_int LAPACKE_zpbstf(int matrix_order, char uplo, lapack_int n, lapack_int kb, lapack_complex_double * bb, lapack_int ldbb);
lapack_int LAPACKE_spbsv(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, float* ab, lapack_int ldab, float* b, lapack_int ldb);
lapack_int LAPACKE_dpbsv(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, double* ab, lapack_int ldab, double* b, lapack_int ldb);
lapack_int LAPACKE_cpbsv(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpbsv(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spbsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, float* ab, lapack_int ldab, float* afb, lapack_int ldafb, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_dpbsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, double* ab, lapack_int ldab, double* afb, lapack_int ldafb, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_cpbsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * afb, lapack_int ldafb, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zpbsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * afb, lapack_int ldafb, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_spbtrf(int matrix_order, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab);
lapack_int LAPACKE_dpbtrf(int matrix_order, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab);
lapack_int LAPACKE_cpbtrf(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab);
lapack_int LAPACKE_zpbtrf(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab);
lapack_int LAPACKE_spbtrs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, float* b, lapack_int ldb);
lapack_int LAPACKE_dpbtrs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, double* b, lapack_int ldb);
lapack_int LAPACKE_cpbtrs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpbtrs(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spftrf(int matrix_order, char transr, char uplo, lapack_int n, float* a);
lapack_int LAPACKE_dpftrf(int matrix_order, char transr, char uplo, lapack_int n, double* a);
lapack_int LAPACKE_cpftrf(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_float * a);
lapack_int LAPACKE_zpftrf(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_double * a);
lapack_int LAPACKE_spftri(int matrix_order, char transr, char uplo, lapack_int n, float* a);
lapack_int LAPACKE_dpftri(int matrix_order, char transr, char uplo, lapack_int n, double* a);
lapack_int LAPACKE_cpftri(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_float * a);
lapack_int LAPACKE_zpftri(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_double * a);
lapack_int LAPACKE_spftrs(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const float* a, float* b, lapack_int ldb);
lapack_int LAPACKE_dpftrs(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const double* a, double* b, lapack_int ldb);
lapack_int LAPACKE_cpftrs(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpftrs(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spocon(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, float anorm, float* rcond);
lapack_int LAPACKE_dpocon(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, double anorm, double* rcond);
lapack_int LAPACKE_cpocon(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float anorm, float* rcond);
lapack_int LAPACKE_zpocon(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double anorm, double* rcond);
lapack_int LAPACKE_spoequ(int matrix_order, lapack_int n, const float* a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_dpoequ(int matrix_order, lapack_int n, const double* a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_cpoequ(int matrix_order, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_zpoequ(int matrix_order, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_spoequb(int matrix_order, lapack_int n, const float* a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_dpoequb(int matrix_order, lapack_int n, const double* a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_cpoequb(int matrix_order, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_zpoequb(int matrix_order, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_sporfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dporfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cporfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zporfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_sporfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const float* s, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dporfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const double* s, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_cporfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const float* s, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zporfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const double* s, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_sposv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dposv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_cposv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zposv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_dsposv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, double* x, lapack_int ldx, lapack_int * iter);
lapack_int LAPACKE_zcposv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, lapack_int * iter);
lapack_int LAPACKE_sposvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_dposvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_cposvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zposvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_sposvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dposvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_cposvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zposvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_spotrf(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dpotrf(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_cpotrf(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zpotrf(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_spotri(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dpotri(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_cpotri(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zpotri(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_spotrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dpotrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_cpotrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpotrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sppcon(int matrix_order, char uplo, lapack_int n, const float* ap, float anorm, float* rcond);
lapack_int LAPACKE_dppcon(int matrix_order, char uplo, lapack_int n, const double* ap, double anorm, double* rcond);
lapack_int LAPACKE_cppcon(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, float anorm, float* rcond);
lapack_int LAPACKE_zppcon(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, double anorm, double* rcond);
lapack_int LAPACKE_sppequ(int matrix_order, char uplo, lapack_int n, const float* ap, float* s, float* scond, float* amax);
lapack_int LAPACKE_dppequ(int matrix_order, char uplo, lapack_int n, const double* ap, double* s, double* scond, double* amax);
lapack_int LAPACKE_cppequ(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, float* s, float* scond, float* amax);
lapack_int LAPACKE_zppequ(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, double* s, double* scond, double* amax);
lapack_int LAPACKE_spprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, const float* afp, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dpprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, const double* afp, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cpprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zpprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_sppsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* ap, float* b, lapack_int ldb);
lapack_int LAPACKE_dppsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* ap, double* b, lapack_int ldb);
lapack_int LAPACKE_cppsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zppsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sppsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* ap, float* afp, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_dppsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* ap, double* afp, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_cppsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_complex_float * afp, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zppsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_complex_double * afp, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_spptrf(int matrix_order, char uplo, lapack_int n, float* ap);
lapack_int LAPACKE_dpptrf(int matrix_order, char uplo, lapack_int n, double* ap);
lapack_int LAPACKE_cpptrf(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap);
lapack_int LAPACKE_zpptrf(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap);
lapack_int LAPACKE_spptri(int matrix_order, char uplo, lapack_int n, float* ap);
lapack_int LAPACKE_dpptri(int matrix_order, char uplo, lapack_int n, double* ap);
lapack_int LAPACKE_cpptri(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap);
lapack_int LAPACKE_zpptri(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap);
lapack_int LAPACKE_spptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, float* b, lapack_int ldb);
lapack_int LAPACKE_dpptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, double* b, lapack_int ldb);
lapack_int LAPACKE_cpptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spstrf(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, lapack_int * piv, lapack_int * rank, float tol);
lapack_int LAPACKE_dpstrf(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, lapack_int * piv, lapack_int * rank, double tol);
lapack_int LAPACKE_cpstrf(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * piv, lapack_int * rank, float tol);
lapack_int LAPACKE_zpstrf(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * piv, lapack_int * rank, double tol);
lapack_int LAPACKE_sptcon(lapack_int n, const float* d, const float* e, float anorm, float* rcond);
lapack_int LAPACKE_dptcon(lapack_int n, const double* d, const double* e, double anorm, double* rcond);
lapack_int LAPACKE_cptcon(lapack_int n, const float* d, const lapack_complex_float * e, float anorm, float* rcond);
lapack_int LAPACKE_zptcon(lapack_int n, const double* d, const lapack_complex_double * e, double anorm, double* rcond);
lapack_int LAPACKE_spteqr(int matrix_order, char compz, lapack_int n, float* d, float* e, float* z, lapack_int ldz);
lapack_int LAPACKE_dpteqr(int matrix_order, char compz, lapack_int n, double* d, double* e, double* z, lapack_int ldz);
lapack_int LAPACKE_cpteqr(int matrix_order, char compz, lapack_int n, float* d, float* e, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zpteqr(int matrix_order, char compz, lapack_int n, double* d, double* e, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_sptrfs(int matrix_order, lapack_int n, lapack_int nrhs, const float* d, const float* e, const float* df, const float* ef, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dptrfs(int matrix_order, lapack_int n, lapack_int nrhs, const double* d, const double* e, const double* df, const double* ef, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_cptrfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* d, const lapack_complex_float * e, const float* df, const lapack_complex_float * ef, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zptrfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* d, const lapack_complex_double * e, const double* df, const lapack_complex_double * ef, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_sptsv(int matrix_order, lapack_int n, lapack_int nrhs, float* d, float* e, float* b, lapack_int ldb);
lapack_int LAPACKE_dptsv(int matrix_order, lapack_int n, lapack_int nrhs, double* d, double* e, double* b, lapack_int ldb);
lapack_int LAPACKE_cptsv(int matrix_order, lapack_int n, lapack_int nrhs, float* d, lapack_complex_float * e, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zptsv(int matrix_order, lapack_int n, lapack_int nrhs, double* d, lapack_complex_double * e, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sptsvx(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const float* d, const float* e, float* df, float* ef, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_dptsvx(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const double* d, const double* e, double* df, double* ef, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_cptsvx(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const float* d, const lapack_complex_float * e, float* df, lapack_complex_float * ef, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zptsvx(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const double* d, const lapack_complex_double * e, double* df, lapack_complex_double * ef, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_spttrf(lapack_int n, float* d, float* e);
lapack_int LAPACKE_dpttrf(lapack_int n, double* d, double* e);
lapack_int LAPACKE_cpttrf(lapack_int n, float* d, lapack_complex_float * e);
lapack_int LAPACKE_zpttrf(lapack_int n, double* d, lapack_complex_double * e);
lapack_int LAPACKE_spttrs(int matrix_order, lapack_int n, lapack_int nrhs, const float* d, const float* e, float* b, lapack_int ldb);
lapack_int LAPACKE_dpttrs(int matrix_order, lapack_int n, lapack_int nrhs, const double* d, const double* e, double* b, lapack_int ldb);
lapack_int LAPACKE_cpttrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* d, const lapack_complex_float * e, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpttrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* d, const lapack_complex_double * e, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_ssbev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dsbev(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_ssbevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dsbevd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_ssbevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_dsbevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_ssbgst(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, const float* bb, lapack_int ldbb, float* x, lapack_int ldx);
lapack_int LAPACKE_dsbgst(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, const double* bb, lapack_int ldbb, double* x, lapack_int ldx);
lapack_int LAPACKE_ssbgv(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, float* bb, lapack_int ldbb, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dsbgv(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, double* bb, lapack_int ldbb, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_ssbgvd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, float* bb, lapack_int ldbb, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dsbgvd(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, double* bb, lapack_int ldbb, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_ssbgvx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, float* bb, lapack_int ldbb, float* q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_dsbgvx(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, double* bb, lapack_int ldbb, double* q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_ssbtrd(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* d, float* e, float* q, lapack_int ldq);
lapack_int LAPACKE_dsbtrd(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* d, double* e, double* q, lapack_int ldq);
lapack_int LAPACKE_ssfrk(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, float alpha, const float* a, lapack_int lda, float beta, float* c);
lapack_int LAPACKE_dsfrk(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, double alpha, const double* a, lapack_int lda, double beta, double* c);
lapack_int LAPACKE_sspcon(int matrix_order, char uplo, lapack_int n, const float* ap, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_dspcon(int matrix_order, char uplo, lapack_int n, const double* ap, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_cspcon(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_zspcon(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_sspev(int matrix_order, char jobz, char uplo, lapack_int n, float* ap, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dspev(int matrix_order, char jobz, char uplo, lapack_int n, double* ap, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_sspevd(int matrix_order, char jobz, char uplo, lapack_int n, float* ap, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dspevd(int matrix_order, char jobz, char uplo, lapack_int n, double* ap, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_sspevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, float* ap, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_dspevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, double* ap, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_sspgst(int matrix_order, lapack_int itype, char uplo, lapack_int n, float* ap, const float* bp);
lapack_int LAPACKE_dspgst(int matrix_order, lapack_int itype, char uplo, lapack_int n, double* ap, const double* bp);
lapack_int LAPACKE_sspgv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* ap, float* bp, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dspgv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* ap, double* bp, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_sspgvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* ap, float* bp, float* w, float* z, lapack_int ldz);
lapack_int LAPACKE_dspgvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* ap, double* bp, double* w, double* z, lapack_int ldz);
lapack_int LAPACKE_sspgvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, float* ap, float* bp, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_dspgvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, double* ap, double* bp, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_ssprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, const float* afp, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dsprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, const double* afp, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_csprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zsprfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_sspsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* ap, lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dspsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* ap, lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cspsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zspsv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sspsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const float* ap, float* afp, lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_dspsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const double* ap, double* afp, lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_cspsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * afp, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zspsvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * afp, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_ssptrd(int matrix_order, char uplo, lapack_int n, float* ap, float* d, float* e, float* tau);
lapack_int LAPACKE_dsptrd(int matrix_order, char uplo, lapack_int n, double* ap, double* d, double* e, double* tau);
lapack_int LAPACKE_ssptrf(int matrix_order, char uplo, lapack_int n, float* ap, lapack_int * ipiv);
lapack_int LAPACKE_dsptrf(int matrix_order, char uplo, lapack_int n, double* ap, lapack_int * ipiv);
lapack_int LAPACKE_csptrf(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, lapack_int * ipiv);
lapack_int LAPACKE_zsptrf(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, lapack_int * ipiv);
lapack_int LAPACKE_ssptri(int matrix_order, char uplo, lapack_int n, float* ap, const lapack_int * ipiv);
lapack_int LAPACKE_dsptri(int matrix_order, char uplo, lapack_int n, double* ap, const lapack_int * ipiv);
lapack_int LAPACKE_csptri(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, const lapack_int * ipiv);
lapack_int LAPACKE_zsptri(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, const lapack_int * ipiv);
lapack_int LAPACKE_ssptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dsptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_csptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zsptrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sstebz(char range, char order, lapack_int n, float vl, float vu, lapack_int il, lapack_int iu, float abstol, const float* d, const float* e, lapack_int * m, lapack_int * nsplit, float* w, lapack_int * iblock, lapack_int * isplit);
lapack_int LAPACKE_dstebz(char range, char order, lapack_int n, double vl, double vu, lapack_int il, lapack_int iu, double abstol, const double* d, const double* e, lapack_int * m, lapack_int * nsplit, double* w, lapack_int * iblock, lapack_int * isplit);
lapack_int LAPACKE_sstedc(int matrix_order, char compz, lapack_int n, float* d, float* e, float* z, lapack_int ldz);
lapack_int LAPACKE_dstedc(int matrix_order, char compz, lapack_int n, double* d, double* e, double* z, lapack_int ldz);
lapack_int LAPACKE_cstedc(int matrix_order, char compz, lapack_int n, float* d, float* e, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zstedc(int matrix_order, char compz, lapack_int n, double* d, double* e, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_sstegr(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_dstegr(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_cstegr(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_zstegr(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_sstein(int matrix_order, lapack_int n, const float* d, const float* e, lapack_int m, const float* w, const lapack_int * iblock, const lapack_int * isplit, float* z, lapack_int ldz, lapack_int * ifailv);
lapack_int LAPACKE_dstein(int matrix_order, lapack_int n, const double* d, const double* e, lapack_int m, const double* w, const lapack_int * iblock, const lapack_int * isplit, double* z, lapack_int ldz, lapack_int * ifailv);
lapack_int LAPACKE_cstein(int matrix_order, lapack_int n, const float* d, const float* e, lapack_int m, const float* w, const lapack_int * iblock, const lapack_int * isplit, lapack_complex_float * z, lapack_int ldz, lapack_int * ifailv);
lapack_int LAPACKE_zstein(int matrix_order, lapack_int n, const double* d, const double* e, lapack_int m, const double* w, const lapack_int * iblock, const lapack_int * isplit, lapack_complex_double * z, lapack_int ldz, lapack_int * ifailv);
lapack_int LAPACKE_sstemr(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac);
lapack_int LAPACKE_dstemr(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac);
lapack_int LAPACKE_cstemr(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac);
lapack_int LAPACKE_zstemr(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac);
lapack_int LAPACKE_ssteqr(int matrix_order, char compz, lapack_int n, float* d, float* e, float* z, lapack_int ldz);
lapack_int LAPACKE_dsteqr(int matrix_order, char compz, lapack_int n, double* d, double* e, double* z, lapack_int ldz);
lapack_int LAPACKE_csteqr(int matrix_order, char compz, lapack_int n, float* d, float* e, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zsteqr(int matrix_order, char compz, lapack_int n, double* d, double* e, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_ssterf(lapack_int n, float* d, float* e);
lapack_int LAPACKE_dsterf(lapack_int n, double* d, double* e);
lapack_int LAPACKE_sstev(int matrix_order, char jobz, lapack_int n, float* d, float* e, float* z, lapack_int ldz);
lapack_int LAPACKE_dstev(int matrix_order, char jobz, lapack_int n, double* d, double* e, double* z, lapack_int ldz);
lapack_int LAPACKE_sstevd(int matrix_order, char jobz, lapack_int n, float* d, float* e, float* z, lapack_int ldz);
lapack_int LAPACKE_dstevd(int matrix_order, char jobz, lapack_int n, double* d, double* e, double* z, lapack_int ldz);
lapack_int LAPACKE_sstevr(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_dstevr(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_sstevx(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_dstevx(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_ssycon(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_dsycon(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_csycon(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, float anorm, float* rcond);
lapack_int LAPACKE_zsycon(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, double anorm, double* rcond);
lapack_int LAPACKE_ssyequb(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_dsyequb(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_csyequb(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_zsyequb(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_ssyev(int matrix_order, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* w);
lapack_int LAPACKE_dsyev(int matrix_order, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* w);
lapack_int LAPACKE_ssyevd(int matrix_order, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* w);
lapack_int LAPACKE_dsyevd(int matrix_order, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* w);
lapack_int LAPACKE_ssyevr(int matrix_order, char jobz, char range, char uplo, lapack_int n, float* a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_dsyevr(int matrix_order, char jobz, char range, char uplo, lapack_int n, double* a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * isuppz);
lapack_int LAPACKE_ssyevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, float* a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_dsyevx(int matrix_order, char jobz, char range, char uplo, lapack_int n, double* a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_ssygst(int matrix_order, lapack_int itype, char uplo, lapack_int n, float* a, lapack_int lda, const float* b, lapack_int ldb);
lapack_int LAPACKE_dsygst(int matrix_order, lapack_int itype, char uplo, lapack_int n, double* a, lapack_int lda, const double* b, lapack_int ldb);
lapack_int LAPACKE_ssygv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* w);
lapack_int LAPACKE_dsygv(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* w);
lapack_int LAPACKE_ssygvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* w);
lapack_int LAPACKE_dsygvd(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* w);
lapack_int LAPACKE_ssygvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_dsygvx(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * ifail);
lapack_int LAPACKE_ssyrfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dsyrfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_csyrfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_zsyrfs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_ssyrfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* s, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dsyrfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* s, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_csyrfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const float* s, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zsyrfsx(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const double* s, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_ssysv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dsysv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_csysv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zsysv(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_ssysvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_dsysvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_csysvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr);
lapack_int LAPACKE_zsysvx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr);
lapack_int LAPACKE_ssysvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_dsysvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_csysvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params);
lapack_int LAPACKE_zsysvxx(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params);
lapack_int LAPACKE_ssytrd(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, float* d, float* e, float* tau);
lapack_int LAPACKE_dsytrd(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, double* d, double* e, double* tau);
lapack_int LAPACKE_ssytrf(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_dsytrf(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_csytrf(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_zsytrf(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_ssytri(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_dsytri(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_csytri(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_zsytri(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_ssytrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dsytrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_csytrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zsytrs(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stbcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const float* ab, lapack_int ldab, float* rcond);
lapack_int LAPACKE_dtbcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const double* ab, lapack_int ldab, double* rcond);
lapack_int LAPACKE_ctbcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const lapack_complex_float * ab, lapack_int ldab, float* rcond);
lapack_int LAPACKE_ztbcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const lapack_complex_double * ab, lapack_int ldab, double* rcond);
lapack_int LAPACKE_stbrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, const float* b, lapack_int ldb, const float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dtbrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, const double* b, lapack_int ldb, const double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_ctbrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_ztbrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_stbtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, float* b, lapack_int ldb);
lapack_int LAPACKE_dtbtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, double* b, lapack_int ldb);
lapack_int LAPACKE_ctbtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztbtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stfsm(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, float alpha, const float* a, float* b, lapack_int ldb);
lapack_int LAPACKE_dtfsm(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, double alpha, const double* a, double* b, lapack_int ldb);
lapack_int LAPACKE_ctfsm(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, lapack_complex_float alpha, const lapack_complex_float * a, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztfsm(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, lapack_complex_double alpha, const lapack_complex_double * a, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stftri(int matrix_order, char transr, char uplo, char diag, lapack_int n, float* a);
lapack_int LAPACKE_dtftri(int matrix_order, char transr, char uplo, char diag, lapack_int n, double* a);
lapack_int LAPACKE_ctftri(int matrix_order, char transr, char uplo, char diag, lapack_int n, lapack_complex_float * a);
lapack_int LAPACKE_ztftri(int matrix_order, char transr, char uplo, char diag, lapack_int n, lapack_complex_double * a);
lapack_int LAPACKE_stfttp(int matrix_order, char transr, char uplo, lapack_int n, const float* arf, float* ap);
lapack_int LAPACKE_dtfttp(int matrix_order, char transr, char uplo, lapack_int n, const double* arf, double* ap);
lapack_int LAPACKE_ctfttp(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * arf, lapack_complex_float * ap);
lapack_int LAPACKE_ztfttp(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * arf, lapack_complex_double * ap);
lapack_int LAPACKE_stfttr(int matrix_order, char transr, char uplo, lapack_int n, const float* arf, float* a, lapack_int lda);
lapack_int LAPACKE_dtfttr(int matrix_order, char transr, char uplo, lapack_int n, const double* arf, double* a, lapack_int lda);
lapack_int LAPACKE_ctfttr(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * arf, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_ztfttr(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * arf, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_stgevc(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const float* s, lapack_int lds, const float* p, lapack_int ldp, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_dtgevc(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const double* s, lapack_int lds, const double* p, lapack_int ldp, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ctgevc(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_float * s, lapack_int lds, const lapack_complex_float * p, lapack_int ldp, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ztgevc(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_double * s, lapack_int lds, const lapack_complex_double * p, lapack_int ldp, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_stgexc(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* q, lapack_int ldq, float* z, lapack_int ldz, lapack_int * ifst, lapack_int * ilst);
lapack_int LAPACKE_dtgexc(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* q, lapack_int ldq, double* z, lapack_int ldz, lapack_int * ifst, lapack_int * ilst);
lapack_int LAPACKE_ctgexc(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_ztgexc(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_stgsen(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* alphar, float* alphai, float* beta, float* q, lapack_int ldq, float* z, lapack_int ldz, lapack_int * m, float* pl, float* pr, float* dif);
lapack_int LAPACKE_dtgsen(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* alphar, double* alphai, double* beta, double* q, lapack_int ldq, double* z, lapack_int ldz, lapack_int * m, double* pl, double* pr, double* dif);
lapack_int LAPACKE_ctgsen(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz, lapack_int * m, float* pl, float* pr, float* dif);
lapack_int LAPACKE_ztgsen(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz, lapack_int * m, double* pl, double* pr, double* dif);
lapack_int LAPACKE_stgsja(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, float* a, lapack_int lda, float* b, lapack_int ldb, float tola, float tolb, float* alpha, float* beta, float* u, lapack_int ldu, float* v, lapack_int ldv, float* q, lapack_int ldq, lapack_int * ncycle);
lapack_int LAPACKE_dtgsja(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, double* a, lapack_int lda, double* b, lapack_int ldb, double tola, double tolb, double* alpha, double* beta, double* u, lapack_int ldu, double* v, lapack_int ldv, double* q, lapack_int ldq, lapack_int * ncycle);
lapack_int LAPACKE_ctgsja(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float tola, float tolb, float* alpha, float* beta, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * v, lapack_int ldv, lapack_complex_float * q, lapack_int ldq, lapack_int * ncycle);
lapack_int LAPACKE_ztgsja(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double tola, double tolb, double* alpha, double* beta, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * v, lapack_int ldv, lapack_complex_double * q, lapack_int ldq, lapack_int * ncycle);
lapack_int LAPACKE_stgsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const float* a, lapack_int lda, const float* b, lapack_int ldb, const float* vl, lapack_int ldvl, const float* vr, lapack_int ldvr, float* s, float* dif, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_dtgsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const double* a, lapack_int lda, const double* b, lapack_int ldb, const double* vl, lapack_int ldvl, const double* vr, lapack_int ldvr, double* s, double* dif, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ctgsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * vl, lapack_int ldvl, const lapack_complex_float * vr, lapack_int ldvr, float* s, float* dif, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ztgsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * vl, lapack_int ldvl, const lapack_complex_double * vr, lapack_int ldvr, double* s, double* dif, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_stgsyl(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const float* a, lapack_int lda, const float* b, lapack_int ldb, float* c, lapack_int ldc, const float* d, lapack_int ldd, const float* e, lapack_int lde, float* f, lapack_int ldf, float* scale, float* dif);
lapack_int LAPACKE_dtgsyl(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const double* a, lapack_int lda, const double* b, lapack_int ldb, double* c, lapack_int ldc, const double* d, lapack_int ldd, const double* e, lapack_int lde, double* f, lapack_int ldf, double* scale, double* dif);
lapack_int LAPACKE_ctgsyl(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * c, lapack_int ldc, const lapack_complex_float * d, lapack_int ldd, const lapack_complex_float * e, lapack_int lde, lapack_complex_float * f, lapack_int ldf, float* scale, float* dif);
lapack_int LAPACKE_ztgsyl(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * c, lapack_int ldc, const lapack_complex_double * d, lapack_int ldd, const lapack_complex_double * e, lapack_int lde, lapack_complex_double * f, lapack_int ldf, double* scale, double* dif);
lapack_int LAPACKE_stpcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const float* ap, float* rcond);
lapack_int LAPACKE_dtpcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const double* ap, double* rcond);
lapack_int LAPACKE_ctpcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_float * ap, float* rcond);
lapack_int LAPACKE_ztpcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_double * ap, double* rcond);
lapack_int LAPACKE_stprfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* ap, const float* b, lapack_int ldb, const float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dtprfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* ap, const double* b, lapack_int ldb, const double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_ctprfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_ztprfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_stptri(int matrix_order, char uplo, char diag, lapack_int n, float* ap);
lapack_int LAPACKE_dtptri(int matrix_order, char uplo, char diag, lapack_int n, double* ap);
lapack_int LAPACKE_ctptri(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_float * ap);
lapack_int LAPACKE_ztptri(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_double * ap);
lapack_int LAPACKE_stptrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* ap, float* b, lapack_int ldb);
lapack_int LAPACKE_dtptrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* ap, double* b, lapack_int ldb);
lapack_int LAPACKE_ctptrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztptrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stpttf(int matrix_order, char transr, char uplo, lapack_int n, const float* ap, float* arf);
lapack_int LAPACKE_dtpttf(int matrix_order, char transr, char uplo, lapack_int n, const double* ap, double* arf);
lapack_int LAPACKE_ctpttf(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * ap, lapack_complex_float * arf);
lapack_int LAPACKE_ztpttf(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * ap, lapack_complex_double * arf);
lapack_int LAPACKE_stpttr(int matrix_order, char uplo, lapack_int n, const float* ap, float* a, lapack_int lda);
lapack_int LAPACKE_dtpttr(int matrix_order, char uplo, lapack_int n, const double* ap, double* a, lapack_int lda);
lapack_int LAPACKE_ctpttr(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_ztpttr(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_strcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const float* a, lapack_int lda, float* rcond);
lapack_int LAPACKE_dtrcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const double* a, lapack_int lda, double* rcond);
lapack_int LAPACKE_ctrcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* rcond);
lapack_int LAPACKE_ztrcon(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* rcond);
lapack_int LAPACKE_strevc(int matrix_order, char side, char howmny, lapack_logical * select, lapack_int n, const float* t, lapack_int ldt, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_dtrevc(int matrix_order, char side, char howmny, lapack_logical * select, lapack_int n, const double* t, lapack_int ldt, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ctrevc(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ztrevc(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_strexc(int matrix_order, char compq, lapack_int n, float* t, lapack_int ldt, float* q, lapack_int ldq, lapack_int * ifst, lapack_int * ilst);
lapack_int LAPACKE_dtrexc(int matrix_order, char compq, lapack_int n, double* t, lapack_int ldt, double* q, lapack_int ldq, lapack_int * ifst, lapack_int * ilst);
lapack_int LAPACKE_ctrexc(int matrix_order, char compq, lapack_int n, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * q, lapack_int ldq, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_ztrexc(int matrix_order, char compq, lapack_int n, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * q, lapack_int ldq, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_strrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* b, lapack_int ldb, const float* x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_dtrrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* b, lapack_int ldb, const double* x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_ctrrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr);
lapack_int LAPACKE_ztrrfs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr);
lapack_int LAPACKE_strsen(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, float* t, lapack_int ldt, float* q, lapack_int ldq, float* wr, float* wi, lapack_int * m, float* s, float* sep);
lapack_int LAPACKE_dtrsen(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, double* t, lapack_int ldt, double* q, lapack_int ldq, double* wr, double* wi, lapack_int * m, double* s, double* sep);
lapack_int LAPACKE_ctrsen(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * w, lapack_int * m, float* s, float* sep);
lapack_int LAPACKE_ztrsen(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * w, lapack_int * m, double* s, double* sep);
lapack_int LAPACKE_strsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const float* t, lapack_int ldt, const float* vl, lapack_int ldvl, const float* vr, lapack_int ldvr, float* s, float* sep, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_dtrsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const double* t, lapack_int ldt, const double* vl, lapack_int ldvl, const double* vr, lapack_int ldvr, double* s, double* sep, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ctrsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_float * t, lapack_int ldt, const lapack_complex_float * vl, lapack_int ldvl, const lapack_complex_float * vr, lapack_int ldvr, float* s, float* sep, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_ztrsna(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_double * t, lapack_int ldt, const lapack_complex_double * vl, lapack_int ldvl, const lapack_complex_double * vr, lapack_int ldvr, double* s, double* sep, lapack_int mm, lapack_int * m);
lapack_int LAPACKE_strsyl(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const float* a, lapack_int lda, const float* b, lapack_int ldb, float* c, lapack_int ldc, float* scale);
lapack_int LAPACKE_dtrsyl(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const double* a, lapack_int lda, const double* b, lapack_int ldb, double* c, lapack_int ldc, double* scale);
lapack_int LAPACKE_ctrsyl(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * c, lapack_int ldc, float* scale);
lapack_int LAPACKE_ztrsyl(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * c, lapack_int ldc, double* scale);
lapack_int LAPACKE_strtri(int matrix_order, char uplo, char diag, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dtrtri(int matrix_order, char uplo, char diag, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_ctrtri(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_ztrtri(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_strtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dtrtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_ctrtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztrtrs(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_strttf(int matrix_order, char transr, char uplo, lapack_int n, const float* a, lapack_int lda, float* arf);
lapack_int LAPACKE_dtrttf(int matrix_order, char transr, char uplo, lapack_int n, const double* a, lapack_int lda, double* arf);
lapack_int LAPACKE_ctrttf(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * arf);
lapack_int LAPACKE_ztrttf(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * arf);
lapack_int LAPACKE_strttp(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, float* ap);
lapack_int LAPACKE_dtrttp(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, double* ap);
lapack_int LAPACKE_ctrttp(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * ap);
lapack_int LAPACKE_ztrttp(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * ap);
lapack_int LAPACKE_stzrzf(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau);
lapack_int LAPACKE_dtzrzf(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau);
lapack_int LAPACKE_ctzrzf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau);
lapack_int LAPACKE_ztzrzf(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau);
lapack_int LAPACKE_cungbr(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau);
lapack_int LAPACKE_zungbr(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau);
lapack_int LAPACKE_cunghr(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau);
lapack_int LAPACKE_zunghr(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau);
lapack_int LAPACKE_cunglq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau);
lapack_int LAPACKE_zunglq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau);
lapack_int LAPACKE_cungql(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau);
lapack_int LAPACKE_zungql(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau);
lapack_int LAPACKE_cungqr(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau);
lapack_int LAPACKE_zungqr(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau);
lapack_int LAPACKE_cungrq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau);
lapack_int LAPACKE_zungrq(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau);
lapack_int LAPACKE_cungtr(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau);
lapack_int LAPACKE_zungtr(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau);
lapack_int LAPACKE_cunmbr(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmbr(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cunmhr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmhr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cunmlq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmlq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cunmql(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmql(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cunmqr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmqr(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cunmrq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmrq(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cunmrz(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmrz(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cunmtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zunmtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_cupgtr(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, const lapack_complex_float * tau, lapack_complex_float * q, lapack_int ldq);
lapack_int LAPACKE_zupgtr(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, const lapack_complex_double * tau, lapack_complex_double * q, lapack_int ldq);
lapack_int LAPACKE_cupmtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_float * ap, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zupmtr(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_double * ap, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_sbdsdc_work(int matrix_order, char uplo, char compq, lapack_int n, float* d, float* e, float* u, lapack_int ldu, float* vt, lapack_int ldvt, float* q, lapack_int * iq, float* work, lapack_int * iwork);
lapack_int LAPACKE_dbdsdc_work(int matrix_order, char uplo, char compq, lapack_int n, double* d, double* e, double* u, lapack_int ldu, double* vt, lapack_int ldvt, double* q, lapack_int * iq, double* work, lapack_int * iwork);
lapack_int LAPACKE_sbdsqr_work(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, float* d, float* e, float* vt, lapack_int ldvt, float* u, lapack_int ldu, float* c, lapack_int ldc, float* work);
lapack_int LAPACKE_dbdsqr_work(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, double* d, double* e, double* vt, lapack_int ldvt, double* u, lapack_int ldu, double* c, lapack_int ldc, double* work);
lapack_int LAPACKE_cbdsqr_work(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, float* d, float* e, lapack_complex_float * vt, lapack_int ldvt, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * c, lapack_int ldc, float* work);
lapack_int LAPACKE_zbdsqr_work(int matrix_order, char uplo, lapack_int n, lapack_int ncvt, lapack_int nru, lapack_int ncc, double* d, double* e, lapack_complex_double * vt, lapack_int ldvt, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * c, lapack_int ldc, double* work);
lapack_int LAPACKE_sdisna_work(char job, lapack_int m, lapack_int n, const float* d, float* sep);
lapack_int LAPACKE_ddisna_work(char job, lapack_int m, lapack_int n, const double* d, double* sep);
lapack_int LAPACKE_sgbbrd_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, float* ab, lapack_int ldab, float* d, float* e, float* q, lapack_int ldq, float* pt, lapack_int ldpt, float* c, lapack_int ldc, float* work);
lapack_int LAPACKE_dgbbrd_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, double* ab, lapack_int ldab, double* d, double* e, double* q, lapack_int ldq, double* pt, lapack_int ldpt, double* c, lapack_int ldc, double* work);
lapack_int LAPACKE_cgbbrd_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, lapack_complex_float * ab, lapack_int ldab, float* d, float* e, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * pt, lapack_int ldpt, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgbbrd_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int ncc, lapack_int kl, lapack_int ku, lapack_complex_double * ab, lapack_int ldab, double* d, double* e, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * pt, lapack_int ldpt, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgbcon_work(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const float* ab, lapack_int ldab, const lapack_int * ipiv, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgbcon_work(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const double* ab, lapack_int ldab, const lapack_int * ipiv, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgbcon_work(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_float * ab, lapack_int ldab, const lapack_int * ipiv, float anorm, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgbcon_work(int matrix_order, char norm, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_double * ab, lapack_int ldab, const lapack_int * ipiv, double anorm, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgbequ_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgbequ_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgbequ_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_float * ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgbequ_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_double * ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgbequb_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgbequb_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgbequb_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_float * ab, lapack_int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgbequb_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const lapack_complex_double * ab, lapack_int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgbrfs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const float* ab, lapack_int ldab, const float* afb, lapack_int ldafb, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgbrfs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const double* ab, lapack_int ldab, const double* afb, lapack_int ldafb, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgbrfs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * afb, lapack_int ldafb, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgbrfs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * afb, lapack_int ldafb, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgbrfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const float* ab, lapack_int ldab, const float* afb, lapack_int ldafb, const lapack_int * ipiv, const float* r, const float* c, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgbrfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const double* ab, lapack_int ldab, const double* afb, lapack_int ldafb, const lapack_int * ipiv, const double* r, const double* c, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgbrfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * afb, lapack_int ldafb, const lapack_int * ipiv, const float* r, const float* c, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgbrfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * afb, lapack_int ldafb, const lapack_int * ipiv, const double* r, const double* c, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgbsv_work(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, float* ab, lapack_int ldab, lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgbsv_work(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, double* ab, lapack_int ldab, lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgbsv_work(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgbsv_work(int matrix_order, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sgbsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, float* ab, lapack_int ldab, float* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgbsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, double* ab, lapack_int ldab, double* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgbsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgbsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgbsvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, float* ab, lapack_int ldab, float* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgbsvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, double* ab, lapack_int ldab, double* afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgbsvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgbsvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * afb, lapack_int ldafb, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgbtrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, float* ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_dgbtrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, double* ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_cgbtrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, lapack_complex_float * ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_zgbtrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, lapack_complex_double * ab, lapack_int ldab, lapack_int * ipiv);
lapack_int LAPACKE_sgbtrs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const float* ab, lapack_int ldab, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgbtrs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const double* ab, lapack_int ldab, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgbtrs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgbtrs_work(int matrix_order, char trans, lapack_int n, lapack_int kl, lapack_int ku, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sgebak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* scale, lapack_int m, float* v, lapack_int ldv);
lapack_int LAPACKE_dgebak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* scale, lapack_int m, double* v, lapack_int ldv);
lapack_int LAPACKE_cgebak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* scale, lapack_int m, lapack_complex_float * v, lapack_int ldv);
lapack_int LAPACKE_zgebak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* scale, lapack_int m, lapack_complex_double * v, lapack_int ldv);
lapack_int LAPACKE_sgebal_work(int matrix_order, char job, lapack_int n, float* a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, float* scale);
lapack_int LAPACKE_dgebal_work(int matrix_order, char job, lapack_int n, double* a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, double* scale);
lapack_int LAPACKE_cgebal_work(int matrix_order, char job, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, float* scale);
lapack_int LAPACKE_zgebal_work(int matrix_order, char job, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ilo, lapack_int * ihi, double* scale);
lapack_int LAPACKE_sgebrd_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* d, float* e, float* tauq, float* taup, float* work, lapack_int lwork);
lapack_int LAPACKE_dgebrd_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* d, double* e, double* tauq, double* taup, double* work, lapack_int lwork);
lapack_int LAPACKE_cgebrd_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, float* d, float* e, lapack_complex_float * tauq, lapack_complex_float * taup, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgebrd_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, double* d, double* e, lapack_complex_double * tauq, lapack_complex_double * taup, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgecon_work(int matrix_order, char norm, lapack_int n, const float* a, lapack_int lda, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgecon_work(int matrix_order, char norm, lapack_int n, const double* a, lapack_int lda, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgecon_work(int matrix_order, char norm, lapack_int n, const lapack_complex_float * a, lapack_int lda, float anorm, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgecon_work(int matrix_order, char norm, lapack_int n, const lapack_complex_double * a, lapack_int lda, double anorm, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgeequ_work(int matrix_order, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgeequ_work(int matrix_order, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgeequ_work(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgeequ_work(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgeequb_work(int matrix_order, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_dgeequb_work(int matrix_order, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_cgeequb_work(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax);
lapack_int LAPACKE_zgeequb_work(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax);
lapack_int LAPACKE_sgees_work(int matrix_order, char jobvs, char sort, LAPACK_S_SELECT2 select, lapack_int n, float* a, lapack_int lda, lapack_int * sdim, float* wr, float* wi, float* vs, lapack_int ldvs, float* work, lapack_int lwork, lapack_logical * bwork);
lapack_int LAPACKE_dgees_work(int matrix_order, char jobvs, char sort, LAPACK_D_SELECT2 select, lapack_int n, double* a, lapack_int lda, lapack_int * sdim, double* wr, double* wi, double* vs, lapack_int ldvs, double* work, lapack_int lwork, lapack_logical * bwork);
lapack_int LAPACKE_cgees_work(int matrix_order, char jobvs, char sort, LAPACK_C_SELECT1 select, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * sdim, lapack_complex_float * w, lapack_complex_float * vs, lapack_int ldvs, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_logical * bwork);
lapack_int LAPACKE_zgees_work(int matrix_order, char jobvs, char sort, LAPACK_Z_SELECT1 select, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * sdim, lapack_complex_double * w, lapack_complex_double * vs, lapack_int ldvs, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_logical * bwork);
lapack_int LAPACKE_sgeesx_work(int matrix_order, char jobvs, char sort, LAPACK_S_SELECT2 select, char sense, lapack_int n, float* a, lapack_int lda, lapack_int * sdim, float* wr, float* wi, float* vs, lapack_int ldvs, float* rconde, float* rcondv, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork, lapack_logical * bwork);
lapack_int LAPACKE_dgeesx_work(int matrix_order, char jobvs, char sort, LAPACK_D_SELECT2 select, char sense, lapack_int n, double* a, lapack_int lda, lapack_int * sdim, double* wr, double* wi, double* vs, lapack_int ldvs, double* rconde, double* rcondv, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork, lapack_logical * bwork);
lapack_int LAPACKE_cgeesx_work(int matrix_order, char jobvs, char sort, LAPACK_C_SELECT1 select, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * sdim, lapack_complex_float * w, lapack_complex_float * vs, lapack_int ldvs, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_logical * bwork);
lapack_int LAPACKE_zgeesx_work(int matrix_order, char jobvs, char sort, LAPACK_Z_SELECT1 select, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * sdim, lapack_complex_double * w, lapack_complex_double * vs, lapack_int ldvs, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_logical * bwork);
lapack_int LAPACKE_sgeev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, float* a, lapack_int lda, float* wr, float* wi, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, float* work, lapack_int lwork);
lapack_int LAPACKE_dgeev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, double* a, lapack_int lda, double* wr, double* wi, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, double* work, lapack_int lwork);
lapack_int LAPACKE_cgeev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * w, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zgeev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * w, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_sgeevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, float* a, lapack_int lda, float* wr, float* wi, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* scale, float* abnrm, float* rconde, float* rcondv, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dgeevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, double* a, lapack_int lda, double* wr, double* wi, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* scale, double* abnrm, double* rconde, double* rcondv, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_cgeevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * w, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* scale, float* abnrm, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zgeevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * w, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* scale, double* abnrm, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_sgehrd_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, float* a, lapack_int lda, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dgehrd_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, double* a, lapack_int lda, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_cgehrd_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgehrd_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgejsv_work(int matrix_order, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, lapack_int m, lapack_int n, float* a, lapack_int lda, float* sva, float* u, lapack_int ldu, float* v, lapack_int ldv, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dgejsv_work(int matrix_order, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, lapack_int m, lapack_int n, double* a, lapack_int lda, double* sva, double* u, lapack_int ldu, double* v, lapack_int ldv, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_sgelq2_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work);
lapack_int LAPACKE_dgelq2_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work);
lapack_int LAPACKE_cgelq2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work);
lapack_int LAPACKE_zgelq2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work);
lapack_int LAPACKE_sgelqf_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dgelqf_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_cgelqf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgelqf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgels_work(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb, float* work, lapack_int lwork);
lapack_int LAPACKE_dgels_work(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, double* work, lapack_int lwork);
lapack_int LAPACKE_cgels_work(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgels_work(int matrix_order, char trans, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgelsd_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb, float* s, float rcond, lapack_int * rank, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dgelsd_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, double* s, double rcond, lapack_int * rank, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_cgelsd_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* s, float rcond, lapack_int * rank, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int * iwork);
lapack_int LAPACKE_zgelsd_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* s, double rcond, lapack_int * rank, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int * iwork);
lapack_int LAPACKE_sgelss_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb, float* s, float rcond, lapack_int * rank, float* work, lapack_int lwork);
lapack_int LAPACKE_dgelss_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, double* s, double rcond, lapack_int * rank, double* work, lapack_int lwork);
lapack_int LAPACKE_cgelss_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* s, float rcond, lapack_int * rank, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zgelss_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* s, double rcond, lapack_int * rank, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_sgelsy_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * jpvt, float rcond, lapack_int * rank, float* work, lapack_int lwork);
lapack_int LAPACKE_dgelsy_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * jpvt, double rcond, lapack_int * rank, double* work, lapack_int lwork);
lapack_int LAPACKE_cgelsy_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * jpvt, float rcond, lapack_int * rank, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zgelsy_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * jpvt, double rcond, lapack_int * rank, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_sgeqlf_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dgeqlf_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_cgeqlf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgeqlf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgeqp3_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * jpvt, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dgeqp3_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * jpvt, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_cgeqp3_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * jpvt, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zgeqp3_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * jpvt, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_sgeqpf_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * jpvt, float* tau, float* work);
lapack_int LAPACKE_dgeqpf_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * jpvt, double* tau, double* work);
lapack_int LAPACKE_cgeqpf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * jpvt, lapack_complex_float * tau, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgeqpf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * jpvt, lapack_complex_double * tau, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgeqr2_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work);
lapack_int LAPACKE_dgeqr2_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work);
lapack_int LAPACKE_cgeqr2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work);
lapack_int LAPACKE_zgeqr2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work);
lapack_int LAPACKE_sgeqrf_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dgeqrf_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_cgeqrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgeqrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgeqrfp_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dgeqrfp_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_cgeqrfp_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgeqrfp_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgerfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgerfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgerfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgerfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgerfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* r, const float* c, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgerfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* r, const double* c, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgerfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const float* r, const float* c, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgerfsx_work(int matrix_order, char trans, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const double* r, const double* c, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgerqf_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dgerqf_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_cgerqf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgerqf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgesdd_work(int matrix_order, char jobz, lapack_int m, lapack_int n, float* a, lapack_int lda, float* s, float* u, lapack_int ldu, float* vt, lapack_int ldvt, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dgesdd_work(int matrix_order, char jobz, lapack_int m, lapack_int n, double* a, lapack_int lda, double* s, double* u, lapack_int ldu, double* vt, lapack_int ldvt, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_cgesdd_work(int matrix_order, char jobz, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, float* s, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * vt, lapack_int ldvt, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int * iwork);
lapack_int LAPACKE_zgesdd_work(int matrix_order, char jobz, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, double* s, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * vt, lapack_int ldvt, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int * iwork);
lapack_int LAPACKE_sgesv_work(int matrix_order, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgesv_work(int matrix_order, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgesv_work(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgesv_work(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_dsgesv_work(int matrix_order, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, lapack_int * ipiv, double* b, lapack_int ldb, double* x, lapack_int ldx, double* work, float* swork, lapack_int * iter);
lapack_int LAPACKE_zcgesv_work(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, lapack_complex_double * work, lapack_complex_float * swork, double* rwork, lapack_int * iter);
lapack_int LAPACKE_sgesvd_work(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, float* a, lapack_int lda, float* s, float* u, lapack_int ldu, float* vt, lapack_int ldvt, float* work, lapack_int lwork);
lapack_int LAPACKE_dgesvd_work(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, double* a, lapack_int lda, double* s, double* u, lapack_int ldu, double* vt, lapack_int ldvt, double* work, lapack_int lwork);
lapack_int LAPACKE_cgesvd_work(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, float* s, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * vt, lapack_int ldvt, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zgesvd_work(int matrix_order, char jobu, char jobvt, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, double* s, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * vt, lapack_int ldvt, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_sgesvj_work(int matrix_order, char joba, char jobu, char jobv, lapack_int m, lapack_int n, float* a, lapack_int lda, float* sva, lapack_int mv, float* v, lapack_int ldv, float* work, lapack_int lwork);
lapack_int LAPACKE_dgesvj_work(int matrix_order, char joba, char jobu, char jobv, lapack_int m, lapack_int n, double* a, lapack_int lda, double* sva, lapack_int mv, double* v, lapack_int ldv, double* work, lapack_int lwork);
lapack_int LAPACKE_sgesvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgesvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgesvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgesvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgesvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgesvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgesvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgesvxx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgetf2_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_dgetf2_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_cgetf2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_zgetf2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_sgetrf_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_dgetrf_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_cgetrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_zgetrf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv);
lapack_int LAPACKE_sgetri_work(int matrix_order, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv, float* work, lapack_int lwork);
lapack_int LAPACKE_dgetri_work(int matrix_order, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv, double* work, lapack_int lwork);
lapack_int LAPACKE_cgetri_work(int matrix_order, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgetri_work(int matrix_order, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgetrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgetrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgetrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgetrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sggbak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* lscale, const float* rscale, lapack_int m, float* v, lapack_int ldv);
lapack_int LAPACKE_dggbak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* lscale, const double* rscale, lapack_int m, double* v, lapack_int ldv);
lapack_int LAPACKE_cggbak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const float* lscale, const float* rscale, lapack_int m, lapack_complex_float * v, lapack_int ldv);
lapack_int LAPACKE_zggbak_work(int matrix_order, char job, char side, lapack_int n, lapack_int ilo, lapack_int ihi, const double* lscale, const double* rscale, lapack_int m, lapack_complex_double * v, lapack_int ldv);
lapack_int LAPACKE_sggbal_work(int matrix_order, char job, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* work);
lapack_int LAPACKE_dggbal_work(int matrix_order, char job, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* work);
lapack_int LAPACKE_cggbal_work(int matrix_order, char job, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* work);
lapack_int LAPACKE_zggbal_work(int matrix_order, char job, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* work);
lapack_int LAPACKE_sgges_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * sdim, float* alphar, float* alphai, float* beta, float* vsl, lapack_int ldvsl, float* vsr, lapack_int ldvsr, float* work, lapack_int lwork, lapack_logical * bwork);
lapack_int LAPACKE_dgges_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * sdim, double* alphar, double* alphai, double* beta, double* vsl, lapack_int ldvsl, double* vsr, lapack_int ldvsr, double* work, lapack_int lwork, lapack_logical * bwork);
lapack_int LAPACKE_cgges_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * sdim, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vsl, lapack_int ldvsl, lapack_complex_float * vsr, lapack_int ldvsr, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_logical * bwork);
lapack_int LAPACKE_zgges_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * sdim, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vsl, lapack_int ldvsl, lapack_complex_double * vsr, lapack_int ldvsr, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_logical * bwork);
lapack_int LAPACKE_sggesx_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, char sense, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int * sdim, float* alphar, float* alphai, float* beta, float* vsl, lapack_int ldvsl, float* vsr, lapack_int ldvsr, float* rconde, float* rcondv, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork, lapack_logical * bwork);
lapack_int LAPACKE_dggesx_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, char sense, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int * sdim, double* alphar, double* alphai, double* beta, double* vsl, lapack_int ldvsl, double* vsr, lapack_int ldvsr, double* rconde, double* rcondv, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork, lapack_logical * bwork);
lapack_int LAPACKE_cggesx_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int * sdim, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vsl, lapack_int ldvsl, lapack_complex_float * vsr, lapack_int ldvsr, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int * iwork, lapack_int liwork, lapack_logical * bwork);
lapack_int LAPACKE_zggesx_work(int matrix_order, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int * sdim, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vsl, lapack_int ldvsl, lapack_complex_double * vsr, lapack_int ldvsr, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int * iwork, lapack_int liwork, lapack_logical * bwork);
lapack_int LAPACKE_sggev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* alphar, float* alphai, float* beta, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, float* work, lapack_int lwork);
lapack_int LAPACKE_dggev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* alphar, double* alphai, double* beta, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, double* work, lapack_int lwork);
lapack_int LAPACKE_cggev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zggev_work(int matrix_order, char jobvl, char jobvr, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_sggevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* alphar, float* alphai, float* beta, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv, float* work, lapack_int lwork, lapack_int * iwork, lapack_logical * bwork);
lapack_int LAPACKE_dggevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* alphar, double* alphai, double* beta, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv, double* work, lapack_int lwork, lapack_int * iwork, lapack_logical * bwork);
lapack_int LAPACKE_cggevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int * iwork, lapack_logical * bwork);
lapack_int LAPACKE_zggevx_work(int matrix_order, char balanc, char jobvl, char jobvr, char sense, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int * iwork, lapack_logical * bwork);
lapack_int LAPACKE_sggglm_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, float* a, lapack_int lda, float* b, lapack_int ldb, float* d, float* x, float* y, float* work, lapack_int lwork);
lapack_int LAPACKE_dggglm_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, double* a, lapack_int lda, double* b, lapack_int ldb, double* d, double* x, double* y, double* work, lapack_int lwork);
lapack_int LAPACKE_cggglm_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * d, lapack_complex_float * x, lapack_complex_float * y, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zggglm_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * d, lapack_complex_double * x, lapack_complex_double * y, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sgghrd_work(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, float* a, lapack_int lda, float* b, lapack_int ldb, float* q, lapack_int ldq, float* z, lapack_int ldz);
lapack_int LAPACKE_dgghrd_work(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, double* a, lapack_int lda, double* b, lapack_int ldb, double* q, lapack_int ldq, double* z, lapack_int ldz);
lapack_int LAPACKE_cgghrd_work(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz);
lapack_int LAPACKE_zgghrd_work(int matrix_order, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz);
lapack_int LAPACKE_sgglse_work(int matrix_order, lapack_int m, lapack_int n, lapack_int p, float* a, lapack_int lda, float* b, lapack_int ldb, float* c, float* d, float* x, float* work, lapack_int lwork);
lapack_int LAPACKE_dgglse_work(int matrix_order, lapack_int m, lapack_int n, lapack_int p, double* a, lapack_int lda, double* b, lapack_int ldb, double* c, double* d, double* x, double* work, lapack_int lwork);
lapack_int LAPACKE_cgglse_work(int matrix_order, lapack_int m, lapack_int n, lapack_int p, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * c, lapack_complex_float * d, lapack_complex_float * x, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zgglse_work(int matrix_order, lapack_int m, lapack_int n, lapack_int p, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * c, lapack_complex_double * d, lapack_complex_double * x, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sggqrf_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, float* a, lapack_int lda, float* taua, float* b, lapack_int ldb, float* taub, float* work, lapack_int lwork);
lapack_int LAPACKE_dggqrf_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, double* a, lapack_int lda, double* taua, double* b, lapack_int ldb, double* taub, double* work, lapack_int lwork);
lapack_int LAPACKE_cggqrf_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_float * a, lapack_int lda, lapack_complex_float * taua, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * taub, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zggqrf_work(int matrix_order, lapack_int n, lapack_int m, lapack_int p, lapack_complex_double * a, lapack_int lda, lapack_complex_double * taua, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * taub, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sggrqf_work(int matrix_order, lapack_int m, lapack_int p, lapack_int n, float* a, lapack_int lda, float* taua, float* b, lapack_int ldb, float* taub, float* work, lapack_int lwork);
lapack_int LAPACKE_dggrqf_work(int matrix_order, lapack_int m, lapack_int p, lapack_int n, double* a, lapack_int lda, double* taua, double* b, lapack_int ldb, double* taub, double* work, lapack_int lwork);
lapack_int LAPACKE_cggrqf_work(int matrix_order, lapack_int m, lapack_int p, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * taua, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * taub, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zggrqf_work(int matrix_order, lapack_int m, lapack_int p, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * taua, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * taub, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_sggsvd_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, float* a, lapack_int lda, float* b, lapack_int ldb, float* alpha, float* beta, float* u, lapack_int ldu, float* v, lapack_int ldv, float* q, lapack_int ldq, float* work, lapack_int * iwork);
lapack_int LAPACKE_dggsvd_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, double* a, lapack_int lda, double* b, lapack_int ldb, double* alpha, double* beta, double* u, lapack_int ldu, double* v, lapack_int ldv, double* q, lapack_int ldq, double* work, lapack_int * iwork);
lapack_int LAPACKE_cggsvd_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* alpha, float* beta, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * v, lapack_int ldv, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * work, float* rwork, lapack_int * iwork);
lapack_int LAPACKE_zggsvd_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int n, lapack_int p, lapack_int * k, lapack_int * l, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* alpha, double* beta, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * v, lapack_int ldv, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * work, double* rwork, lapack_int * iwork);
lapack_int LAPACKE_sggsvp_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float tola, float tolb, lapack_int * k, lapack_int * l, float* u, lapack_int ldu, float* v, lapack_int ldv, float* q, lapack_int ldq, lapack_int * iwork, float* tau, float* work);
lapack_int LAPACKE_dggsvp_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double tola, double tolb, lapack_int * k, lapack_int * l, double* u, lapack_int ldu, double* v, lapack_int ldv, double* q, lapack_int ldq, lapack_int * iwork, double* tau, double* work);
lapack_int LAPACKE_cggsvp_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float tola, float tolb, lapack_int * k, lapack_int * l, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * v, lapack_int ldv, lapack_complex_float * q, lapack_int ldq, lapack_int * iwork, float* rwork, lapack_complex_float * tau, lapack_complex_float * work);
lapack_int LAPACKE_zggsvp_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double tola, double tolb, lapack_int * k, lapack_int * l, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * v, lapack_int ldv, lapack_complex_double * q, lapack_int ldq, lapack_int * iwork, double* rwork, lapack_complex_double * tau, lapack_complex_double * work);
lapack_int LAPACKE_sgtcon_work(char norm, lapack_int n, const float* dl, const float* d, const float* du, const float* du2, const lapack_int * ipiv, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgtcon_work(char norm, lapack_int n, const double* dl, const double* d, const double* du, const double* du2, const lapack_int * ipiv, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgtcon_work(char norm, lapack_int n, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * du2, const lapack_int * ipiv, float anorm, float* rcond, lapack_complex_float * work);
lapack_int LAPACKE_zgtcon_work(char norm, lapack_int n, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * du2, const lapack_int * ipiv, double anorm, double* rcond, lapack_complex_double * work);
lapack_int LAPACKE_sgtrfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* dl, const float* d, const float* du, const float* dlf, const float* df, const float* duf, const float* du2, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgtrfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* dl, const double* d, const double* du, const double* dlf, const double* df, const double* duf, const double* du2, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgtrfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * dlf, const lapack_complex_float * df, const lapack_complex_float * duf, const lapack_complex_float * du2, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgtrfs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * dlf, const lapack_complex_double * df, const lapack_complex_double * duf, const lapack_complex_double * du2, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgtsv_work(int matrix_order, lapack_int n, lapack_int nrhs, float* dl, float* d, float* du, float* b, lapack_int ldb);
lapack_int LAPACKE_dgtsv_work(int matrix_order, lapack_int n, lapack_int nrhs, double* dl, double* d, double* du, double* b, lapack_int ldb);
lapack_int LAPACKE_cgtsv_work(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_float * dl, lapack_complex_float * d, lapack_complex_float * du, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgtsv_work(int matrix_order, lapack_int n, lapack_int nrhs, lapack_complex_double * dl, lapack_complex_double * d, lapack_complex_double * du, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sgtsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const float* dl, const float* d, const float* du, float* dlf, float* df, float* duf, float* du2, lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dgtsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const double* dl, const double* d, const double* du, double* dlf, double* df, double* duf, double* du2, lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cgtsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, lapack_complex_float * dlf, lapack_complex_float * df, lapack_complex_float * duf, lapack_complex_float * du2, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zgtsvx_work(int matrix_order, char fact, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, lapack_complex_double * dlf, lapack_complex_double * df, lapack_complex_double * duf, lapack_complex_double * du2, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sgttrf_work(lapack_int n, float* dl, float* d, float* du, float* du2, lapack_int * ipiv);
lapack_int LAPACKE_dgttrf_work(lapack_int n, double* dl, double* d, double* du, double* du2, lapack_int * ipiv);
lapack_int LAPACKE_cgttrf_work(lapack_int n, lapack_complex_float * dl, lapack_complex_float * d, lapack_complex_float * du, lapack_complex_float * du2, lapack_int * ipiv);
lapack_int LAPACKE_zgttrf_work(lapack_int n, lapack_complex_double * dl, lapack_complex_double * d, lapack_complex_double * du, lapack_complex_double * du2, lapack_int * ipiv);
lapack_int LAPACKE_sgttrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const float* dl, const float* d, const float* du, const float* du2, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dgttrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const double* dl, const double* d, const double* du, const double* du2, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cgttrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * du2, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zgttrs_work(int matrix_order, char trans, lapack_int n, lapack_int nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * du2, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chbev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhbev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chbevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zhbevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_chbevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_zhbevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_chbgst_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * bb, lapack_int ldbb, lapack_complex_float * x, lapack_int ldx, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhbgst_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * bb, lapack_int ldbb, lapack_complex_double * x, lapack_int ldx, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chbgv_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * bb, lapack_int ldbb, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhbgv_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * bb, lapack_int ldbb, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chbgvd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * bb, lapack_int ldbb, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zhbgvd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * bb, lapack_int ldbb, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_chbgvx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * bb, lapack_int ldbb, lapack_complex_float * q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_zhbgvx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * bb, lapack_int ldbb, lapack_complex_double * q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_chbtrd_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab, float* d, float* e, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * work);
lapack_int LAPACKE_zhbtrd_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab, double* d, double* e, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * work);
lapack_int LAPACKE_checon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, float anorm, float* rcond, lapack_complex_float * work);
lapack_int LAPACKE_zhecon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, double anorm, double* rcond, lapack_complex_double * work);
lapack_int LAPACKE_cheequb_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax, lapack_complex_float * work);
lapack_int LAPACKE_zheequb_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax, lapack_complex_double * work);
lapack_int LAPACKE_cheev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float* w, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zheev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double* w, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_cheevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float* w, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zheevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double* w, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_cheevr_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * isuppz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zheevr_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * isuppz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_cheevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_zheevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_chegst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhegst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chegv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* w, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zhegv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* w, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_chegvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float* w, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zhegvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double* w, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_chegvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_zhegvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_cherfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zherfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_cherfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const float* s, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zherfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const double* s, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chesv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zhesv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_chesvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zhesvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_chesvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhesvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chetrd_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, float* d, float* e, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zhetrd_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, double* d, double* e, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_chetrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zhetrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_chetri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work);
lapack_int LAPACKE_zhetri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work);
lapack_int LAPACKE_chetrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhetrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chfrk_work(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, float alpha, const lapack_complex_float * a, lapack_int lda, float beta, lapack_complex_float * c);
lapack_int LAPACKE_zhfrk_work(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, double alpha, const lapack_complex_double * a, lapack_int lda, double beta, lapack_complex_double * c);
lapack_int LAPACKE_shgeqz_work(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, float* h, lapack_int ldh, float* t, lapack_int ldt, float* alphar, float* alphai, float* beta, float* q, lapack_int ldq, float* z, lapack_int ldz, float* work, lapack_int lwork);
lapack_int LAPACKE_dhgeqz_work(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, double* h, lapack_int ldh, double* t, lapack_int ldt, double* alphar, double* alphai, double* beta, double* q, lapack_int ldq, double* z, lapack_int ldz, double* work, lapack_int lwork);
lapack_int LAPACKE_chgeqz_work(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * h, lapack_int ldh, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zhgeqz_work(int matrix_order, char job, char compq, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * h, lapack_int ldh, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_chpcon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, const lapack_int * ipiv, float anorm, float* rcond, lapack_complex_float * work);
lapack_int LAPACKE_zhpcon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, const lapack_int * ipiv, double anorm, double* rcond, lapack_complex_double * work);
lapack_int LAPACKE_chpev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhpev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chpevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zhpevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_chpevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * ap, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_zhpevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * ap, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_chpgst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_float * ap, const lapack_complex_float * bp);
lapack_int LAPACKE_zhpgst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, lapack_complex_double * ap, const lapack_complex_double * bp);
lapack_int LAPACKE_chpgv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, lapack_complex_float * bp, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhpgv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, lapack_complex_double * bp, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chpgvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_float * ap, lapack_complex_float * bp, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zhpgvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, lapack_complex_double * ap, lapack_complex_double * bp, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_chpgvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_float * ap, lapack_complex_float * bp, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_zhpgvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, lapack_complex_double * ap, lapack_complex_double * bp, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_chprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chpsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhpsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_chpsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * afp, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zhpsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * afp, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_chptrd_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, float* d, float* e, lapack_complex_float * tau);
lapack_int LAPACKE_zhptrd_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, double* d, double* e, lapack_complex_double * tau);
lapack_int LAPACKE_chptrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, lapack_int * ipiv);
lapack_int LAPACKE_zhptrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, lapack_int * ipiv);
lapack_int LAPACKE_chptri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * work);
lapack_int LAPACKE_zhptri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * work);
lapack_int LAPACKE_chptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zhptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_shsein_work(int matrix_order, char job, char eigsrc, char initv, lapack_logical * select, lapack_int n, const float* h, lapack_int ldh, float* wr, const float* wi, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, float* work, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_dhsein_work(int matrix_order, char job, char eigsrc, char initv, lapack_logical * select, lapack_int n, const double* h, lapack_int ldh, double* wr, const double* wi, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, double* work, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_chsein_work(int matrix_order, char job, char eigsrc, char initv, const lapack_logical * select, lapack_int n, const lapack_complex_float * h, lapack_int ldh, lapack_complex_float * w, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_complex_float * work, float* rwork, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_zhsein_work(int matrix_order, char job, char eigsrc, char initv, const lapack_logical * select, lapack_int n, const lapack_complex_double * h, lapack_int ldh, lapack_complex_double * w, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_complex_double * work, double* rwork, lapack_int * ifaill, lapack_int * ifailr);
lapack_int LAPACKE_shseqr_work(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, float* h, lapack_int ldh, float* wr, float* wi, float* z, lapack_int ldz, float* work, lapack_int lwork);
lapack_int LAPACKE_dhseqr_work(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, double* h, lapack_int ldh, double* wr, double* wi, double* z, lapack_int ldz, double* work, lapack_int lwork);
lapack_int LAPACKE_chseqr_work(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * h, lapack_int ldh, lapack_complex_float * w, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zhseqr_work(int matrix_order, char job, char compz, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * h, lapack_int ldh, lapack_complex_double * w, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_clacgv_work(lapack_int n, lapack_complex_float * x, lapack_int incx);
lapack_int LAPACKE_zlacgv_work(lapack_int n, lapack_complex_double * x, lapack_int incx);
lapack_int LAPACKE_slacpy_work(int matrix_order, char uplo, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dlacpy_work(int matrix_order, char uplo, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_clacpy_work(int matrix_order, char uplo, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zlacpy_work(int matrix_order, char uplo, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_zlag2c_work(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_float * sa, lapack_int ldsa);
lapack_int LAPACKE_slag2d_work(int matrix_order, lapack_int m, lapack_int n, const float* sa, lapack_int ldsa, double* a, lapack_int lda);
lapack_int LAPACKE_dlag2s_work(int matrix_order, lapack_int m, lapack_int n, const double* a, lapack_int lda, float* sa, lapack_int ldsa);
lapack_int LAPACKE_clag2z_work(int matrix_order, lapack_int m, lapack_int n, const lapack_complex_float * sa, lapack_int ldsa, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_slagge_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* d, float* a, lapack_int lda, lapack_int * iseed, float* work);
lapack_int LAPACKE_dlagge_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* d, double* a, lapack_int lda, lapack_int * iseed, double* work);
lapack_int LAPACKE_clagge_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const float* d, lapack_complex_float * a, lapack_int lda, lapack_int * iseed, lapack_complex_float * work);
lapack_int LAPACKE_zlagge_work(int matrix_order, lapack_int m, lapack_int n, lapack_int kl, lapack_int ku, const double* d, lapack_complex_double * a, lapack_int lda, lapack_int * iseed, lapack_complex_double * work);
lapack_int LAPACKE_claghe_work(int matrix_order, lapack_int n, lapack_int k, const float* d, lapack_complex_float * a, lapack_int lda, lapack_int * iseed, lapack_complex_float * work);
lapack_int LAPACKE_zlaghe_work(int matrix_order, lapack_int n, lapack_int k, const double* d, lapack_complex_double * a, lapack_int lda, lapack_int * iseed, lapack_complex_double * work);
lapack_int LAPACKE_slagsy_work(int matrix_order, lapack_int n, lapack_int k, const float* d, float* a, lapack_int lda, lapack_int * iseed, float* work);
lapack_int LAPACKE_dlagsy_work(int matrix_order, lapack_int n, lapack_int k, const double* d, double* a, lapack_int lda, lapack_int * iseed, double* work);
lapack_int LAPACKE_clagsy_work(int matrix_order, lapack_int n, lapack_int k, const float* d, lapack_complex_float * a, lapack_int lda, lapack_int * iseed, lapack_complex_float * work);
lapack_int LAPACKE_zlagsy_work(int matrix_order, lapack_int n, lapack_int k, const double* d, lapack_complex_double * a, lapack_int lda, lapack_int * iseed, lapack_complex_double * work);
lapack_int LAPACKE_slapmr_work(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, float* x, lapack_int ldx, lapack_int * k);
lapack_int LAPACKE_dlapmr_work(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, double* x, lapack_int ldx, lapack_int * k);
lapack_int LAPACKE_clapmr_work(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, lapack_complex_float * x, lapack_int ldx, lapack_int * k);
lapack_int LAPACKE_zlapmr_work(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, lapack_complex_double * x, lapack_int ldx, lapack_int * k);
lapack_int LAPACKE_slartgp_work(float f, float g, float* cs, float* sn, float* r);
lapack_int LAPACKE_dlartgp_work(double f, double g, double* cs, double* sn, double* r);
lapack_int LAPACKE_slartgs_work(float x, float y, float sigma, float* cs, float* sn);
lapack_int LAPACKE_dlartgs_work(double x, double y, double sigma, double* cs, double* sn);
float LAPACKE_slapy2_work(float x, float y);
double LAPACKE_dlapy2_work(double x, double y);
float LAPACKE_slapy3_work(float x, float y, float z);
double LAPACKE_dlapy3_work(double x, double y, double z);
float LAPACKE_slamch_work(char cmach);
double LAPACKE_dlamch_work(char cmach);
float LAPACKE_slange_work(int matrix_order, char norm, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* work);
double LAPACKE_dlange_work(int matrix_order, char norm, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* work);
float LAPACKE_clange_work(int matrix_order, char norm, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* work);
double LAPACKE_zlange_work(int matrix_order, char norm, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* work);
float LAPACKE_clanhe_work(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* work);
double LAPACKE_zlanhe_work(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* work);
float LAPACKE_slansy_work(int matrix_order, char norm, char uplo, lapack_int n, const float* a, lapack_int lda, float* work);
double LAPACKE_dlansy_work(int matrix_order, char norm, char uplo, lapack_int n, const double* a, lapack_int lda, double* work);
float LAPACKE_clansy_work(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* work);
double LAPACKE_zlansy_work(int matrix_order, char norm, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* work);
float LAPACKE_slantr_work(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const float* a, lapack_int lda, float* work);
double LAPACKE_dlantr_work(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const double* a, lapack_int lda, double* work);
float LAPACKE_clantr_work(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* work);
double LAPACKE_zlantr_work(int matrix_order, char norm, char uplo, char diag, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* work);
lapack_int LAPACKE_slarfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* c, lapack_int ldc, float* work, lapack_int ldwork);
lapack_int LAPACKE_dlarfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* c, lapack_int ldc, double* work, lapack_int ldwork);
lapack_int LAPACKE_clarfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int ldwork);
lapack_int LAPACKE_zlarfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int ldwork);
lapack_int LAPACKE_slarfg_work(lapack_int n, float* alpha, float* x, lapack_int incx, float* tau);
lapack_int LAPACKE_dlarfg_work(lapack_int n, double* alpha, double* x, lapack_int incx, double* tau);
lapack_int LAPACKE_clarfg_work(lapack_int n, lapack_complex_float * alpha, lapack_complex_float * x, lapack_int incx, lapack_complex_float * tau);
lapack_int LAPACKE_zlarfg_work(lapack_int n, lapack_complex_double * alpha, lapack_complex_double * x, lapack_int incx, lapack_complex_double * tau);
lapack_int LAPACKE_slarft_work(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const float* v, lapack_int ldv, const float* tau, float* t, lapack_int ldt);
lapack_int LAPACKE_dlarft_work(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const double* v, lapack_int ldv, const double* tau, double* t, lapack_int ldt);
lapack_int LAPACKE_clarft_work(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * tau, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_zlarft_work(int matrix_order, char direct, char storev, lapack_int n, lapack_int k, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * tau, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_slarfx_work(int matrix_order, char side, lapack_int m, lapack_int n, const float* v, float tau, float* c, lapack_int ldc, float* work);
lapack_int LAPACKE_dlarfx_work(int matrix_order, char side, lapack_int m, lapack_int n, const double* v, double tau, double* c, lapack_int ldc, double* work);
lapack_int LAPACKE_clarfx_work(int matrix_order, char side, lapack_int m, lapack_int n, const lapack_complex_float * v, lapack_complex_float tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work);
lapack_int LAPACKE_zlarfx_work(int matrix_order, char side, lapack_int m, lapack_int n, const lapack_complex_double * v, lapack_complex_double tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work);
lapack_int LAPACKE_slarnv_work(lapack_int idist, lapack_int * iseed, lapack_int n, float* x);
lapack_int LAPACKE_dlarnv_work(lapack_int idist, lapack_int * iseed, lapack_int n, double* x);
lapack_int LAPACKE_clarnv_work(lapack_int idist, lapack_int * iseed, lapack_int n, lapack_complex_float * x);
lapack_int LAPACKE_zlarnv_work(lapack_int idist, lapack_int * iseed, lapack_int n, lapack_complex_double * x);
lapack_int LAPACKE_slaset_work(int matrix_order, char uplo, lapack_int m, lapack_int n, float alpha, float beta, float* a, lapack_int lda);
lapack_int LAPACKE_dlaset_work(int matrix_order, char uplo, lapack_int m, lapack_int n, double alpha, double beta, double* a, lapack_int lda);
lapack_int LAPACKE_claset_work(int matrix_order, char uplo, lapack_int m, lapack_int n, lapack_complex_float alpha, lapack_complex_float beta, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zlaset_work(int matrix_order, char uplo, lapack_int m, lapack_int n, lapack_complex_double alpha, lapack_complex_double beta, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_slasrt_work(char id, lapack_int n, float* d);
lapack_int LAPACKE_dlasrt_work(char id, lapack_int n, double* d);
lapack_int LAPACKE_slaswp_work(int matrix_order, lapack_int n, float* a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_dlaswp_work(int matrix_order, lapack_int n, double* a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_claswp_work(int matrix_order, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_zlaswp_work(int matrix_order, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int k1, lapack_int k2, const lapack_int * ipiv, lapack_int incx);
lapack_int LAPACKE_slatms_work(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, float* d, lapack_int mode, float cond, float dmax, lapack_int kl, lapack_int ku, char pack, float* a, lapack_int lda, float* work);
lapack_int LAPACKE_dlatms_work(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, double* d, lapack_int mode, double cond, double dmax, lapack_int kl, lapack_int ku, char pack, double* a, lapack_int lda, double* work);
lapack_int LAPACKE_clatms_work(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, float* d, lapack_int mode, float cond, float dmax, lapack_int kl, lapack_int ku, char pack, lapack_complex_float * a, lapack_int lda, lapack_complex_float * work);
lapack_int LAPACKE_zlatms_work(int matrix_order, lapack_int m, lapack_int n, char dist, lapack_int * iseed, char sym, double* d, lapack_int mode, double cond, double dmax, lapack_int kl, lapack_int ku, char pack, lapack_complex_double * a, lapack_int lda, lapack_complex_double * work);
lapack_int LAPACKE_slauum_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dlauum_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_clauum_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zlauum_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_sopgtr_work(int matrix_order, char uplo, lapack_int n, const float* ap, const float* tau, float* q, lapack_int ldq, float* work);
lapack_int LAPACKE_dopgtr_work(int matrix_order, char uplo, lapack_int n, const double* ap, const double* tau, double* q, lapack_int ldq, double* work);
lapack_int LAPACKE_sopmtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const float* ap, const float* tau, float* c, lapack_int ldc, float* work);
lapack_int LAPACKE_dopmtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const double* ap, const double* tau, double* c, lapack_int ldc, double* work);
lapack_int LAPACKE_sorgbr_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dorgbr_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_sorghr_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, float* a, lapack_int lda, const float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dorghr_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, double* a, lapack_int lda, const double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_sorglq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dorglq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_sorgql_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dorgql_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_sorgqr_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dorgqr_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_sorgrq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, float* a, lapack_int lda, const float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dorgrq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, double* a, lapack_int lda, const double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_sorgtr_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dorgtr_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_sormbr_work(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormbr_work(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_sormhr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormhr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_sormlq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormlq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_sormql_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormql_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_sormqr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormqr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_sormrq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormrq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_sormrz_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormrz_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_sormtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const float* a, lapack_int lda, const float* tau, float* c, lapack_int ldc, float* work, lapack_int lwork);
lapack_int LAPACKE_dormtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const double* a, lapack_int lda, const double* tau, double* c, lapack_int ldc, double* work, lapack_int lwork);
lapack_int LAPACKE_spbcon_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const float* ab, lapack_int ldab, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dpbcon_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const double* ab, lapack_int ldab, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_cpbcon_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_float * ab, lapack_int ldab, float anorm, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zpbcon_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_double * ab, lapack_int ldab, double anorm, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_spbequ_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const float* ab, lapack_int ldab, float* s, float* scond, float* amax);
lapack_int LAPACKE_dpbequ_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const double* ab, lapack_int ldab, double* s, double* scond, double* amax);
lapack_int LAPACKE_cpbequ_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_float * ab, lapack_int ldab, float* s, float* scond, float* amax);
lapack_int LAPACKE_zpbequ_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, const lapack_complex_double * ab, lapack_int ldab, double* s, double* scond, double* amax);
lapack_int LAPACKE_spbrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, const float* afb, lapack_int ldafb, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dpbrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, const double* afb, lapack_int ldafb, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cpbrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * afb, lapack_int ldafb, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zpbrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * afb, lapack_int ldafb, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_spbstf_work(int matrix_order, char uplo, lapack_int n, lapack_int kb, float* bb, lapack_int ldbb);
lapack_int LAPACKE_dpbstf_work(int matrix_order, char uplo, lapack_int n, lapack_int kb, double* bb, lapack_int ldbb);
lapack_int LAPACKE_cpbstf_work(int matrix_order, char uplo, lapack_int n, lapack_int kb, lapack_complex_float * bb, lapack_int ldbb);
lapack_int LAPACKE_zpbstf_work(int matrix_order, char uplo, lapack_int n, lapack_int kb, lapack_complex_double * bb, lapack_int ldbb);
lapack_int LAPACKE_spbsv_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, float* ab, lapack_int ldab, float* b, lapack_int ldb);
lapack_int LAPACKE_dpbsv_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, double* ab, lapack_int ldab, double* b, lapack_int ldb);
lapack_int LAPACKE_cpbsv_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpbsv_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spbsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, float* ab, lapack_int ldab, float* afb, lapack_int ldafb, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dpbsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, double* ab, lapack_int ldab, double* afb, lapack_int ldafb, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cpbsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * afb, lapack_int ldafb, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zpbsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * afb, lapack_int ldafb, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_spbtrf_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab);
lapack_int LAPACKE_dpbtrf_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab);
lapack_int LAPACKE_cpbtrf_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_complex_float * ab, lapack_int ldab);
lapack_int LAPACKE_zpbtrf_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_complex_double * ab, lapack_int ldab);
lapack_int LAPACKE_spbtrs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, float* b, lapack_int ldb);
lapack_int LAPACKE_dpbtrs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, double* b, lapack_int ldb);
lapack_int LAPACKE_cpbtrs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpbtrs_work(int matrix_order, char uplo, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spftrf_work(int matrix_order, char transr, char uplo, lapack_int n, float* a);
lapack_int LAPACKE_dpftrf_work(int matrix_order, char transr, char uplo, lapack_int n, double* a);
lapack_int LAPACKE_cpftrf_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_float * a);
lapack_int LAPACKE_zpftrf_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_double * a);
lapack_int LAPACKE_spftri_work(int matrix_order, char transr, char uplo, lapack_int n, float* a);
lapack_int LAPACKE_dpftri_work(int matrix_order, char transr, char uplo, lapack_int n, double* a);
lapack_int LAPACKE_cpftri_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_float * a);
lapack_int LAPACKE_zpftri_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_complex_double * a);
lapack_int LAPACKE_spftrs_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const float* a, float* b, lapack_int ldb);
lapack_int LAPACKE_dpftrs_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const double* a, double* b, lapack_int ldb);
lapack_int LAPACKE_cpftrs_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpftrs_work(int matrix_order, char transr, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spocon_work(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dpocon_work(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_cpocon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float anorm, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zpocon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double anorm, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_spoequ_work(int matrix_order, lapack_int n, const float* a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_dpoequ_work(int matrix_order, lapack_int n, const double* a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_cpoequ_work(int matrix_order, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_zpoequ_work(int matrix_order, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_spoequb_work(int matrix_order, lapack_int n, const float* a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_dpoequb_work(int matrix_order, lapack_int n, const double* a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_cpoequb_work(int matrix_order, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax);
lapack_int LAPACKE_zpoequb_work(int matrix_order, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax);
lapack_int LAPACKE_sporfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dporfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cporfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zporfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sporfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const float* s, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dporfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const double* s, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_cporfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const float* s, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zporfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const double* s, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sposv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dposv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_cposv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zposv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_dsposv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* b, lapack_int ldb, double* x, lapack_int ldx, double* work, float* swork, lapack_int * iter);
lapack_int LAPACKE_zcposv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, lapack_complex_double * work, lapack_complex_float * swork, double* rwork, lapack_int * iter);
lapack_int LAPACKE_sposvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dposvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cposvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zposvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sposvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dposvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_cposvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zposvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_spotrf_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dpotrf_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_cpotrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zpotrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_spotri_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dpotri_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_cpotri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zpotri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_spotrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dpotrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_cpotrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpotrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sppcon_work(int matrix_order, char uplo, lapack_int n, const float* ap, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dppcon_work(int matrix_order, char uplo, lapack_int n, const double* ap, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_cppcon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, float anorm, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zppcon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, double anorm, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sppequ_work(int matrix_order, char uplo, lapack_int n, const float* ap, float* s, float* scond, float* amax);
lapack_int LAPACKE_dppequ_work(int matrix_order, char uplo, lapack_int n, const double* ap, double* s, double* scond, double* amax);
lapack_int LAPACKE_cppequ_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, float* s, float* scond, float* amax);
lapack_int LAPACKE_zppequ_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, double* s, double* scond, double* amax);
lapack_int LAPACKE_spprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, const float* afp, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dpprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, const double* afp, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cpprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zpprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sppsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* ap, float* b, lapack_int ldb);
lapack_int LAPACKE_dppsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* ap, double* b, lapack_int ldb);
lapack_int LAPACKE_cppsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zppsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sppsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* ap, float* afp, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dppsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* ap, double* afp, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cppsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_complex_float * afp, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zppsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_complex_double * afp, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_spptrf_work(int matrix_order, char uplo, lapack_int n, float* ap);
lapack_int LAPACKE_dpptrf_work(int matrix_order, char uplo, lapack_int n, double* ap);
lapack_int LAPACKE_cpptrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap);
lapack_int LAPACKE_zpptrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap);
lapack_int LAPACKE_spptri_work(int matrix_order, char uplo, lapack_int n, float* ap);
lapack_int LAPACKE_dpptri_work(int matrix_order, char uplo, lapack_int n, double* ap);
lapack_int LAPACKE_cpptri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap);
lapack_int LAPACKE_zpptri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap);
lapack_int LAPACKE_spptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, float* b, lapack_int ldb);
lapack_int LAPACKE_dpptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, double* b, lapack_int ldb);
lapack_int LAPACKE_cpptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_spstrf_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, lapack_int * piv, lapack_int * rank, float tol, float* work);
lapack_int LAPACKE_dpstrf_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, lapack_int * piv, lapack_int * rank, double tol, double* work);
lapack_int LAPACKE_cpstrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * piv, lapack_int * rank, float tol, float* work);
lapack_int LAPACKE_zpstrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * piv, lapack_int * rank, double tol, double* work);
lapack_int LAPACKE_sptcon_work(lapack_int n, const float* d, const float* e, float anorm, float* rcond, float* work);
lapack_int LAPACKE_dptcon_work(lapack_int n, const double* d, const double* e, double anorm, double* rcond, double* work);
lapack_int LAPACKE_cptcon_work(lapack_int n, const float* d, const lapack_complex_float * e, float anorm, float* rcond, float* work);
lapack_int LAPACKE_zptcon_work(lapack_int n, const double* d, const lapack_complex_double * e, double anorm, double* rcond, double* work);
lapack_int LAPACKE_spteqr_work(int matrix_order, char compz, lapack_int n, float* d, float* e, float* z, lapack_int ldz, float* work);
lapack_int LAPACKE_dpteqr_work(int matrix_order, char compz, lapack_int n, double* d, double* e, double* z, lapack_int ldz, double* work);
lapack_int LAPACKE_cpteqr_work(int matrix_order, char compz, lapack_int n, float* d, float* e, lapack_complex_float * z, lapack_int ldz, float* work);
lapack_int LAPACKE_zpteqr_work(int matrix_order, char compz, lapack_int n, double* d, double* e, lapack_complex_double * z, lapack_int ldz, double* work);
lapack_int LAPACKE_sptrfs_work(int matrix_order, lapack_int n, lapack_int nrhs, const float* d, const float* e, const float* df, const float* ef, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work);
lapack_int LAPACKE_dptrfs_work(int matrix_order, lapack_int n, lapack_int nrhs, const double* d, const double* e, const double* df, const double* ef, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work);
lapack_int LAPACKE_cptrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* d, const lapack_complex_float * e, const float* df, const lapack_complex_float * ef, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zptrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* d, const lapack_complex_double * e, const double* df, const lapack_complex_double * ef, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sptsv_work(int matrix_order, lapack_int n, lapack_int nrhs, float* d, float* e, float* b, lapack_int ldb);
lapack_int LAPACKE_dptsv_work(int matrix_order, lapack_int n, lapack_int nrhs, double* d, double* e, double* b, lapack_int ldb);
lapack_int LAPACKE_cptsv_work(int matrix_order, lapack_int n, lapack_int nrhs, float* d, lapack_complex_float * e, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zptsv_work(int matrix_order, lapack_int n, lapack_int nrhs, double* d, lapack_complex_double * e, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sptsvx_work(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const float* d, const float* e, float* df, float* ef, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work);
lapack_int LAPACKE_dptsvx_work(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const double* d, const double* e, double* df, double* ef, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work);
lapack_int LAPACKE_cptsvx_work(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const float* d, const lapack_complex_float * e, float* df, lapack_complex_float * ef, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zptsvx_work(int matrix_order, char fact, lapack_int n, lapack_int nrhs, const double* d, const lapack_complex_double * e, double* df, lapack_complex_double * ef, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_spttrf_work(lapack_int n, float* d, float* e);
lapack_int LAPACKE_dpttrf_work(lapack_int n, double* d, double* e);
lapack_int LAPACKE_cpttrf_work(lapack_int n, float* d, lapack_complex_float * e);
lapack_int LAPACKE_zpttrf_work(lapack_int n, double* d, lapack_complex_double * e);
lapack_int LAPACKE_spttrs_work(int matrix_order, lapack_int n, lapack_int nrhs, const float* d, const float* e, float* b, lapack_int ldb);
lapack_int LAPACKE_dpttrs_work(int matrix_order, lapack_int n, lapack_int nrhs, const double* d, const double* e, double* b, lapack_int ldb);
lapack_int LAPACKE_cpttrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* d, const lapack_complex_float * e, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zpttrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* d, const lapack_complex_double * e, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_ssbev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* w, float* z, lapack_int ldz, float* work);
lapack_int LAPACKE_dsbev_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* w, double* z, lapack_int ldz, double* work);
lapack_int LAPACKE_ssbevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* w, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dsbevd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* w, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ssbevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, float* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_dsbevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, double* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_ssbgst_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, const float* bb, lapack_int ldbb, float* x, lapack_int ldx, float* work);
lapack_int LAPACKE_dsbgst_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, const double* bb, lapack_int ldbb, double* x, lapack_int ldx, double* work);
lapack_int LAPACKE_ssbgv_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, float* bb, lapack_int ldbb, float* w, float* z, lapack_int ldz, float* work);
lapack_int LAPACKE_dsbgv_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, double* bb, lapack_int ldbb, double* w, double* z, lapack_int ldz, double* work);
lapack_int LAPACKE_ssbgvd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, float* bb, lapack_int ldbb, float* w, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dsbgvd_work(int matrix_order, char jobz, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, double* bb, lapack_int ldbb, double* w, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ssbgvx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, float* ab, lapack_int ldab, float* bb, lapack_int ldbb, float* q, lapack_int ldq, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, float* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_dsbgvx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, lapack_int ka, lapack_int kb, double* ab, lapack_int ldab, double* bb, lapack_int ldbb, double* q, lapack_int ldq, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, double* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_ssbtrd_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, float* ab, lapack_int ldab, float* d, float* e, float* q, lapack_int ldq, float* work);
lapack_int LAPACKE_dsbtrd_work(int matrix_order, char vect, char uplo, lapack_int n, lapack_int kd, double* ab, lapack_int ldab, double* d, double* e, double* q, lapack_int ldq, double* work);
lapack_int LAPACKE_ssfrk_work(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, float alpha, const float* a, lapack_int lda, float beta, float* c);
lapack_int LAPACKE_dsfrk_work(int matrix_order, char transr, char uplo, char trans, lapack_int n, lapack_int k, double alpha, const double* a, lapack_int lda, double beta, double* c);
lapack_int LAPACKE_sspcon_work(int matrix_order, char uplo, lapack_int n, const float* ap, const lapack_int * ipiv, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dspcon_work(int matrix_order, char uplo, lapack_int n, const double* ap, const lapack_int * ipiv, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_cspcon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, const lapack_int * ipiv, float anorm, float* rcond, lapack_complex_float * work);
lapack_int LAPACKE_zspcon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, const lapack_int * ipiv, double anorm, double* rcond, lapack_complex_double * work);
lapack_int LAPACKE_sspev_work(int matrix_order, char jobz, char uplo, lapack_int n, float* ap, float* w, float* z, lapack_int ldz, float* work);
lapack_int LAPACKE_dspev_work(int matrix_order, char jobz, char uplo, lapack_int n, double* ap, double* w, double* z, lapack_int ldz, double* work);
lapack_int LAPACKE_sspevd_work(int matrix_order, char jobz, char uplo, lapack_int n, float* ap, float* w, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dspevd_work(int matrix_order, char jobz, char uplo, lapack_int n, double* ap, double* w, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_sspevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, float* ap, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, float* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_dspevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, double* ap, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, double* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_sspgst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, float* ap, const float* bp);
lapack_int LAPACKE_dspgst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, double* ap, const double* bp);
lapack_int LAPACKE_sspgv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* ap, float* bp, float* w, float* z, lapack_int ldz, float* work);
lapack_int LAPACKE_dspgv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* ap, double* bp, double* w, double* z, lapack_int ldz, double* work);
lapack_int LAPACKE_sspgvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* ap, float* bp, float* w, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dspgvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* ap, double* bp, double* w, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_sspgvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, float* ap, float* bp, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, float* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_dspgvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, double* ap, double* bp, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, double* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_ssprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, const float* afp, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dsprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, const double* afp, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_csprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zsprfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_sspsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* ap, lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dspsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* ap, lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_cspsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * ap, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zspsv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * ap, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sspsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const float* ap, float* afp, lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dspsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const double* ap, double* afp, lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_cspsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * afp, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zspsvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * afp, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_ssptrd_work(int matrix_order, char uplo, lapack_int n, float* ap, float* d, float* e, float* tau);
lapack_int LAPACKE_dsptrd_work(int matrix_order, char uplo, lapack_int n, double* ap, double* d, double* e, double* tau);
lapack_int LAPACKE_ssptrf_work(int matrix_order, char uplo, lapack_int n, float* ap, lapack_int * ipiv);
lapack_int LAPACKE_dsptrf_work(int matrix_order, char uplo, lapack_int n, double* ap, lapack_int * ipiv);
lapack_int LAPACKE_csptrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, lapack_int * ipiv);
lapack_int LAPACKE_zsptrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, lapack_int * ipiv);
lapack_int LAPACKE_ssptri_work(int matrix_order, char uplo, lapack_int n, float* ap, const lapack_int * ipiv, float* work);
lapack_int LAPACKE_dsptri_work(int matrix_order, char uplo, lapack_int n, double* ap, const lapack_int * ipiv, double* work);
lapack_int LAPACKE_csptri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * work);
lapack_int LAPACKE_zsptri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * work);
lapack_int LAPACKE_ssptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* ap, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dsptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* ap, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_csptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zsptrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_sstebz_work(char range, char order, lapack_int n, float vl, float vu, lapack_int il, lapack_int iu, float abstol, const float* d, const float* e, lapack_int * m, lapack_int * nsplit, float* w, lapack_int * iblock, lapack_int * isplit, float* work, lapack_int * iwork);
lapack_int LAPACKE_dstebz_work(char range, char order, lapack_int n, double vl, double vu, lapack_int il, lapack_int iu, double abstol, const double* d, const double* e, lapack_int * m, lapack_int * nsplit, double* w, lapack_int * iblock, lapack_int * isplit, double* work, lapack_int * iwork);
lapack_int LAPACKE_sstedc_work(int matrix_order, char compz, lapack_int n, float* d, float* e, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dstedc_work(int matrix_order, char compz, lapack_int n, double* d, double* e, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_cstedc_work(int matrix_order, char compz, lapack_int n, float* d, float* e, lapack_complex_float * z, lapack_int ldz, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zstedc_work(int matrix_order, char compz, lapack_int n, double* d, double* e, lapack_complex_double * z, lapack_int ldz, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_sstegr_work(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * isuppz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dstegr_work(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * isuppz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_cstegr_work(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int * isuppz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zstegr_work(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int * isuppz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_sstein_work(int matrix_order, lapack_int n, const float* d, const float* e, lapack_int m, const float* w, const lapack_int * iblock, const lapack_int * isplit, float* z, lapack_int ldz, float* work, lapack_int * iwork, lapack_int * ifailv);
lapack_int LAPACKE_dstein_work(int matrix_order, lapack_int n, const double* d, const double* e, lapack_int m, const double* w, const lapack_int * iblock, const lapack_int * isplit, double* z, lapack_int ldz, double* work, lapack_int * iwork, lapack_int * ifailv);
lapack_int LAPACKE_cstein_work(int matrix_order, lapack_int n, const float* d, const float* e, lapack_int m, const float* w, const lapack_int * iblock, const lapack_int * isplit, lapack_complex_float * z, lapack_int ldz, float* work, lapack_int * iwork, lapack_int * ifailv);
lapack_int LAPACKE_zstein_work(int matrix_order, lapack_int n, const double* d, const double* e, lapack_int m, const double* w, const lapack_int * iblock, const lapack_int * isplit, lapack_complex_double * z, lapack_int ldz, double* work, lapack_int * iwork, lapack_int * ifailv);
lapack_int LAPACKE_sstemr_work(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dstemr_work(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_cstemr_work(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, lapack_int * m, float* w, lapack_complex_float * z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_zstemr_work(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, lapack_int * m, double* w, lapack_complex_double * z, lapack_int ldz, lapack_int nzc, lapack_int * isuppz, lapack_logical * tryrac, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ssteqr_work(int matrix_order, char compz, lapack_int n, float* d, float* e, float* z, lapack_int ldz, float* work);
lapack_int LAPACKE_dsteqr_work(int matrix_order, char compz, lapack_int n, double* d, double* e, double* z, lapack_int ldz, double* work);
lapack_int LAPACKE_csteqr_work(int matrix_order, char compz, lapack_int n, float* d, float* e, lapack_complex_float * z, lapack_int ldz, float* work);
lapack_int LAPACKE_zsteqr_work(int matrix_order, char compz, lapack_int n, double* d, double* e, lapack_complex_double * z, lapack_int ldz, double* work);
lapack_int LAPACKE_ssterf_work(lapack_int n, float* d, float* e);
lapack_int LAPACKE_dsterf_work(lapack_int n, double* d, double* e);
lapack_int LAPACKE_sstev_work(int matrix_order, char jobz, lapack_int n, float* d, float* e, float* z, lapack_int ldz, float* work);
lapack_int LAPACKE_dstev_work(int matrix_order, char jobz, lapack_int n, double* d, double* e, double* z, lapack_int ldz, double* work);
lapack_int LAPACKE_sstevd_work(int matrix_order, char jobz, lapack_int n, float* d, float* e, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dstevd_work(int matrix_order, char jobz, lapack_int n, double* d, double* e, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_sstevr_work(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * isuppz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dstevr_work(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * isuppz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_sstevx_work(int matrix_order, char jobz, char range, lapack_int n, float* d, float* e, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, float* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_dstevx_work(int matrix_order, char jobz, char range, lapack_int n, double* d, double* e, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, double* work, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_ssycon_work(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, const lapack_int * ipiv, float anorm, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dsycon_work(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, const lapack_int * ipiv, double anorm, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_csycon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, float anorm, float* rcond, lapack_complex_float * work);
lapack_int LAPACKE_zsycon_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, double anorm, double* rcond, lapack_complex_double * work);
lapack_int LAPACKE_ssyequb_work(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, float* s, float* scond, float* amax, float* work);
lapack_int LAPACKE_dsyequb_work(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, double* s, double* scond, double* amax, double* work);
lapack_int LAPACKE_csyequb_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* s, float* scond, float* amax, lapack_complex_float * work);
lapack_int LAPACKE_zsyequb_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* s, double* scond, double* amax, lapack_complex_double * work);
lapack_int LAPACKE_ssyev_work(int matrix_order, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* w, float* work, lapack_int lwork);
lapack_int LAPACKE_dsyev_work(int matrix_order, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* w, double* work, lapack_int lwork);
lapack_int LAPACKE_ssyevd_work(int matrix_order, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* w, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dsyevd_work(int matrix_order, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* w, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ssyevr_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, float* a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, lapack_int * isuppz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dsyevr_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, double* a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, lapack_int * isuppz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ssyevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, float* a, lapack_int lda, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_dsyevx_work(int matrix_order, char jobz, char range, char uplo, lapack_int n, double* a, lapack_int lda, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_ssygst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, float* a, lapack_int lda, const float* b, lapack_int ldb);
lapack_int LAPACKE_dsygst_work(int matrix_order, lapack_int itype, char uplo, lapack_int n, double* a, lapack_int lda, const double* b, lapack_int ldb);
lapack_int LAPACKE_ssygv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* w, float* work, lapack_int lwork);
lapack_int LAPACKE_dsygv_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* w, double* work, lapack_int lwork);
lapack_int LAPACKE_ssygvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* w, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dsygvd_work(int matrix_order, lapack_int itype, char jobz, char uplo, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* w, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ssygvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float vl, float vu, lapack_int il, lapack_int iu, float abstol, lapack_int * m, float* w, float* z, lapack_int ldz, float* work, lapack_int lwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_dsygvx_work(int matrix_order, lapack_int itype, char jobz, char range, char uplo, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double vl, double vu, lapack_int il, lapack_int iu, double abstol, lapack_int * m, double* w, double* z, lapack_int ldz, double* work, lapack_int lwork, lapack_int * iwork, lapack_int * ifail);
lapack_int LAPACKE_ssyrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dsyrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_csyrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zsyrfs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_ssyrfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* af, lapack_int ldaf, const lapack_int * ipiv, const float* s, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dsyrfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* af, lapack_int ldaf, const lapack_int * ipiv, const double* s, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_csyrfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * af, lapack_int ldaf, const lapack_int * ipiv, const float* s, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zsyrfsx_work(int matrix_order, char uplo, char equed, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * af, lapack_int ldaf, const lapack_int * ipiv, const double* s, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_ssysv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, lapack_int * ipiv, float* b, lapack_int ldb, float* work, lapack_int lwork);
lapack_int LAPACKE_dsysv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, lapack_int * ipiv, double* b, lapack_int ldb, double* work, lapack_int lwork);
lapack_int LAPACKE_csysv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zsysv_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_ssysvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, const float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dsysvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, const double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_csysvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, lapack_int lwork, float* rwork);
lapack_int LAPACKE_zsysvx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, lapack_int lwork, double* rwork);
lapack_int LAPACKE_ssysvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, float* a, lapack_int lda, float* af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* s, float* b, lapack_int ldb, float* x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, float* work, lapack_int * iwork);
lapack_int LAPACKE_dsysvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, double* a, lapack_int lda, double* af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* s, double* b, lapack_int ldb, double* x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, double* work, lapack_int * iwork);
lapack_int LAPACKE_csysvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_float * a, lapack_int lda, lapack_complex_float * af, lapack_int ldaf, lapack_int * ipiv, char* equed, float* s, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * x, lapack_int ldx, float* rcond, float* rpvgrw, float* berr, lapack_int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int nparams, float* params, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_zsysvxx_work(int matrix_order, char fact, char uplo, lapack_int n, lapack_int nrhs, lapack_complex_double * a, lapack_int lda, lapack_complex_double * af, lapack_int ldaf, lapack_int * ipiv, char* equed, double* s, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * x, lapack_int ldx, double* rcond, double* rpvgrw, double* berr, lapack_int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int nparams, double* params, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_ssytrd_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, float* d, float* e, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dsytrd_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, double* d, double* e, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_ssytrf_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, lapack_int * ipiv, float* work, lapack_int lwork);
lapack_int LAPACKE_dsytrf_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, lapack_int * ipiv, double* work, lapack_int lwork);
lapack_int LAPACKE_csytrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_int * ipiv, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zsytrf_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_int * ipiv, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_ssytri_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv, float* work);
lapack_int LAPACKE_dsytri_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv, double* work);
lapack_int LAPACKE_csytri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work);
lapack_int LAPACKE_zsytri_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work);
lapack_int LAPACKE_ssytrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_dsytrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_csytrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_zsytrs_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stbcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const float* ab, lapack_int ldab, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dtbcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const double* ab, lapack_int ldab, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_ctbcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const lapack_complex_float * ab, lapack_int ldab, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztbcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, lapack_int kd, const lapack_complex_double * ab, lapack_int ldab, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_stbrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, const float* b, lapack_int ldb, const float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dtbrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, const double* b, lapack_int ldb, const double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_ctbrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztbrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_stbtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const float* ab, lapack_int ldab, float* b, lapack_int ldb);
lapack_int LAPACKE_dtbtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const double* ab, lapack_int ldab, double* b, lapack_int ldb);
lapack_int LAPACKE_ctbtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_float * ab, lapack_int ldab, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztbtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int kd, lapack_int nrhs, const lapack_complex_double * ab, lapack_int ldab, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stfsm_work(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, float alpha, const float* a, float* b, lapack_int ldb);
lapack_int LAPACKE_dtfsm_work(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, double alpha, const double* a, double* b, lapack_int ldb);
lapack_int LAPACKE_ctfsm_work(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, lapack_complex_float alpha, const lapack_complex_float * a, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztfsm_work(int matrix_order, char transr, char side, char uplo, char trans, char diag, lapack_int m, lapack_int n, lapack_complex_double alpha, const lapack_complex_double * a, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stftri_work(int matrix_order, char transr, char uplo, char diag, lapack_int n, float* a);
lapack_int LAPACKE_dtftri_work(int matrix_order, char transr, char uplo, char diag, lapack_int n, double* a);
lapack_int LAPACKE_ctftri_work(int matrix_order, char transr, char uplo, char diag, lapack_int n, lapack_complex_float * a);
lapack_int LAPACKE_ztftri_work(int matrix_order, char transr, char uplo, char diag, lapack_int n, lapack_complex_double * a);
lapack_int LAPACKE_stfttp_work(int matrix_order, char transr, char uplo, lapack_int n, const float* arf, float* ap);
lapack_int LAPACKE_dtfttp_work(int matrix_order, char transr, char uplo, lapack_int n, const double* arf, double* ap);
lapack_int LAPACKE_ctfttp_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * arf, lapack_complex_float * ap);
lapack_int LAPACKE_ztfttp_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * arf, lapack_complex_double * ap);
lapack_int LAPACKE_stfttr_work(int matrix_order, char transr, char uplo, lapack_int n, const float* arf, float* a, lapack_int lda);
lapack_int LAPACKE_dtfttr_work(int matrix_order, char transr, char uplo, lapack_int n, const double* arf, double* a, lapack_int lda);
lapack_int LAPACKE_ctfttr_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * arf, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_ztfttr_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * arf, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_stgevc_work(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const float* s, lapack_int lds, const float* p, lapack_int ldp, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, float* work);
lapack_int LAPACKE_dtgevc_work(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const double* s, lapack_int lds, const double* p, lapack_int ldp, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, double* work);
lapack_int LAPACKE_ctgevc_work(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_float * s, lapack_int lds, const lapack_complex_float * p, lapack_int ldp, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztgevc_work(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_double * s, lapack_int lds, const lapack_complex_double * p, lapack_int ldp, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_stgexc_work(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* q, lapack_int ldq, float* z, lapack_int ldz, lapack_int * ifst, lapack_int * ilst, float* work, lapack_int lwork);
lapack_int LAPACKE_dtgexc_work(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* q, lapack_int ldq, double* z, lapack_int ldz, lapack_int * ifst, lapack_int * ilst, double* work, lapack_int lwork);
lapack_int LAPACKE_ctgexc_work(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_ztgexc_work(int matrix_order, lapack_logical wantq, lapack_logical wantz, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_stgsen_work(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* alphar, float* alphai, float* beta, float* q, lapack_int ldq, float* z, lapack_int ldz, lapack_int * m, float* pl, float* pr, float* dif, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dtgsen_work(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* alphar, double* alphai, double* beta, double* q, lapack_int ldq, double* z, lapack_int ldz, lapack_int * m, double* pl, double* pr, double* dif, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ctgsen_work(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * z, lapack_int ldz, lapack_int * m, float* pl, float* pr, float* dif, lapack_complex_float * work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ztgsen_work(int matrix_order, lapack_int ijob, lapack_logical wantq, lapack_logical wantz, const lapack_logical * select, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * z, lapack_int ldz, lapack_int * m, double* pl, double* pr, double* dif, lapack_complex_double * work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_stgsja_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, float* a, lapack_int lda, float* b, lapack_int ldb, float tola, float tolb, float* alpha, float* beta, float* u, lapack_int ldu, float* v, lapack_int ldv, float* q, lapack_int ldq, float* work, lapack_int * ncycle);
lapack_int LAPACKE_dtgsja_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, double* a, lapack_int lda, double* b, lapack_int ldb, double tola, double tolb, double* alpha, double* beta, double* u, lapack_int ldu, double* v, lapack_int ldv, double* q, lapack_int ldq, double* work, lapack_int * ncycle);
lapack_int LAPACKE_ctgsja_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, float tola, float tolb, float* alpha, float* beta, lapack_complex_float * u, lapack_int ldu, lapack_complex_float * v, lapack_int ldv, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * work, lapack_int * ncycle);
lapack_int LAPACKE_ztgsja_work(int matrix_order, char jobu, char jobv, char jobq, lapack_int m, lapack_int p, lapack_int n, lapack_int k, lapack_int l, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, double tola, double tolb, double* alpha, double* beta, lapack_complex_double * u, lapack_int ldu, lapack_complex_double * v, lapack_int ldv, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * work, lapack_int * ncycle);
lapack_int LAPACKE_stgsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const float* a, lapack_int lda, const float* b, lapack_int ldb, const float* vl, lapack_int ldvl, const float* vr, lapack_int ldvr, float* s, float* dif, lapack_int mm, lapack_int * m, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dtgsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const double* a, lapack_int lda, const double* b, lapack_int ldb, const double* vl, lapack_int ldvl, const double* vr, lapack_int ldvr, double* s, double* dif, lapack_int mm, lapack_int * m, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_ctgsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * vl, lapack_int ldvl, const lapack_complex_float * vr, lapack_int ldvr, float* s, float* dif, lapack_int mm, lapack_int * m, lapack_complex_float * work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_ztgsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * vl, lapack_int ldvl, const lapack_complex_double * vr, lapack_int ldvr, double* s, double* dif, lapack_int mm, lapack_int * m, lapack_complex_double * work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_stgsyl_work(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const float* a, lapack_int lda, const float* b, lapack_int ldb, float* c, lapack_int ldc, const float* d, lapack_int ldd, const float* e, lapack_int lde, float* f, lapack_int ldf, float* scale, float* dif, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dtgsyl_work(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const double* a, lapack_int lda, const double* b, lapack_int ldb, double* c, lapack_int ldc, const double* d, lapack_int ldd, const double* e, lapack_int lde, double* f, lapack_int ldf, double* scale, double* dif, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_ctgsyl_work(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * c, lapack_int ldc, const lapack_complex_float * d, lapack_int ldd, const lapack_complex_float * e, lapack_int lde, lapack_complex_float * f, lapack_int ldf, float* scale, float* dif, lapack_complex_float * work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_ztgsyl_work(int matrix_order, char trans, lapack_int ijob, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * c, lapack_int ldc, const lapack_complex_double * d, lapack_int ldd, const lapack_complex_double * e, lapack_int lde, lapack_complex_double * f, lapack_int ldf, double* scale, double* dif, lapack_complex_double * work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_stpcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const float* ap, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dtpcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const double* ap, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_ctpcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_float * ap, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztpcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_double * ap, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_stprfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* ap, const float* b, lapack_int ldb, const float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dtprfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* ap, const double* b, lapack_int ldb, const double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_ctprfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztprfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_stptri_work(int matrix_order, char uplo, char diag, lapack_int n, float* ap);
lapack_int LAPACKE_dtptri_work(int matrix_order, char uplo, char diag, lapack_int n, double* ap);
lapack_int LAPACKE_ctptri_work(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_float * ap);
lapack_int LAPACKE_ztptri_work(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_double * ap);
lapack_int LAPACKE_stptrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* ap, float* b, lapack_int ldb);
lapack_int LAPACKE_dtptrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* ap, double* b, lapack_int ldb);
lapack_int LAPACKE_ctptrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * ap, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztptrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * ap, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_stpttf_work(int matrix_order, char transr, char uplo, lapack_int n, const float* ap, float* arf);
lapack_int LAPACKE_dtpttf_work(int matrix_order, char transr, char uplo, lapack_int n, const double* ap, double* arf);
lapack_int LAPACKE_ctpttf_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * ap, lapack_complex_float * arf);
lapack_int LAPACKE_ztpttf_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * ap, lapack_complex_double * arf);
lapack_int LAPACKE_stpttr_work(int matrix_order, char uplo, lapack_int n, const float* ap, float* a, lapack_int lda);
lapack_int LAPACKE_dtpttr_work(int matrix_order, char uplo, lapack_int n, const double* ap, double* a, lapack_int lda);
lapack_int LAPACKE_ctpttr_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_ztpttr_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_strcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const float* a, lapack_int lda, float* rcond, float* work, lapack_int * iwork);
lapack_int LAPACKE_dtrcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const double* a, lapack_int lda, double* rcond, double* work, lapack_int * iwork);
lapack_int LAPACKE_ctrcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_float * a, lapack_int lda, float* rcond, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztrcon_work(int matrix_order, char norm, char uplo, char diag, lapack_int n, const lapack_complex_double * a, lapack_int lda, double* rcond, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_strevc_work(int matrix_order, char side, char howmny, lapack_logical * select, lapack_int n, const float* t, lapack_int ldt, float* vl, lapack_int ldvl, float* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, float* work);
lapack_int LAPACKE_dtrevc_work(int matrix_order, char side, char howmny, lapack_logical * select, lapack_int n, const double* t, lapack_int ldt, double* vl, lapack_int ldvl, double* vr, lapack_int ldvr, lapack_int mm, lapack_int * m, double* work);
lapack_int LAPACKE_ctrevc_work(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * vl, lapack_int ldvl, lapack_complex_float * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztrevc_work(int matrix_order, char side, char howmny, const lapack_logical * select, lapack_int n, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * vl, lapack_int ldvl, lapack_complex_double * vr, lapack_int ldvr, lapack_int mm, lapack_int * m, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_strexc_work(int matrix_order, char compq, lapack_int n, float* t, lapack_int ldt, float* q, lapack_int ldq, lapack_int * ifst, lapack_int * ilst, float* work);
lapack_int LAPACKE_dtrexc_work(int matrix_order, char compq, lapack_int n, double* t, lapack_int ldt, double* q, lapack_int ldq, lapack_int * ifst, lapack_int * ilst, double* work);
lapack_int LAPACKE_ctrexc_work(int matrix_order, char compq, lapack_int n, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * q, lapack_int ldq, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_ztrexc_work(int matrix_order, char compq, lapack_int n, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * q, lapack_int ldq, lapack_int ifst, lapack_int ilst);
lapack_int LAPACKE_strrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const float* b, lapack_int ldb, const float* x, lapack_int ldx, float* ferr, float* berr, float* work, lapack_int * iwork);
lapack_int LAPACKE_dtrrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const double* b, lapack_int ldb, const double* x, lapack_int ldx, double* ferr, double* berr, double* work, lapack_int * iwork);
lapack_int LAPACKE_ctrrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, const lapack_complex_float * x, lapack_int ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork);
lapack_int LAPACKE_ztrrfs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, const lapack_complex_double * x, lapack_int ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork);
lapack_int LAPACKE_strsen_work(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, float* t, lapack_int ldt, float* q, lapack_int ldq, float* wr, float* wi, lapack_int * m, float* s, float* sep, float* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_dtrsen_work(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, double* t, lapack_int ldt, double* q, lapack_int ldq, double* wr, double* wi, lapack_int * m, double* s, double* sep, double* work, lapack_int lwork, lapack_int * iwork, lapack_int liwork);
lapack_int LAPACKE_ctrsen_work(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * w, lapack_int * m, float* s, float* sep, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_ztrsen_work(int matrix_order, char job, char compq, const lapack_logical * select, lapack_int n, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * w, lapack_int * m, double* s, double* sep, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_strsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const float* t, lapack_int ldt, const float* vl, lapack_int ldvl, const float* vr, lapack_int ldvr, float* s, float* sep, lapack_int mm, lapack_int * m, float* work, lapack_int ldwork, lapack_int * iwork);
lapack_int LAPACKE_dtrsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const double* t, lapack_int ldt, const double* vl, lapack_int ldvl, const double* vr, lapack_int ldvr, double* s, double* sep, lapack_int mm, lapack_int * m, double* work, lapack_int ldwork, lapack_int * iwork);
lapack_int LAPACKE_ctrsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_float * t, lapack_int ldt, const lapack_complex_float * vl, lapack_int ldvl, const lapack_complex_float * vr, lapack_int ldvr, float* s, float* sep, lapack_int mm, lapack_int * m, lapack_complex_float * work, lapack_int ldwork, float* rwork);
lapack_int LAPACKE_ztrsna_work(int matrix_order, char job, char howmny, const lapack_logical * select, lapack_int n, const lapack_complex_double * t, lapack_int ldt, const lapack_complex_double * vl, lapack_int ldvl, const lapack_complex_double * vr, lapack_int ldvr, double* s, double* sep, lapack_int mm, lapack_int * m, lapack_complex_double * work, lapack_int ldwork, double* rwork);
lapack_int LAPACKE_strsyl_work(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const float* a, lapack_int lda, const float* b, lapack_int ldb, float* c, lapack_int ldc, float* scale);
lapack_int LAPACKE_dtrsyl_work(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const double* a, lapack_int lda, const double* b, lapack_int ldb, double* c, lapack_int ldc, double* scale);
lapack_int LAPACKE_ctrsyl_work(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * b, lapack_int ldb, lapack_complex_float * c, lapack_int ldc, float* scale);
lapack_int LAPACKE_ztrsyl_work(int matrix_order, char trana, char tranb, lapack_int isgn, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * b, lapack_int ldb, lapack_complex_double * c, lapack_int ldc, double* scale);
lapack_int LAPACKE_strtri_work(int matrix_order, char uplo, char diag, lapack_int n, float* a, lapack_int lda);
lapack_int LAPACKE_dtrtri_work(int matrix_order, char uplo, char diag, lapack_int n, double* a, lapack_int lda);
lapack_int LAPACKE_ctrtri_work(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_ztrtri_work(int matrix_order, char uplo, char diag, lapack_int n, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_strtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dtrtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_ctrtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztrtrs_work(int matrix_order, char uplo, char trans, char diag, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_strttf_work(int matrix_order, char transr, char uplo, lapack_int n, const float* a, lapack_int lda, float* arf);
lapack_int LAPACKE_dtrttf_work(int matrix_order, char transr, char uplo, lapack_int n, const double* a, lapack_int lda, double* arf);
lapack_int LAPACKE_ctrttf_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * arf);
lapack_int LAPACKE_ztrttf_work(int matrix_order, char transr, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * arf);
lapack_int LAPACKE_strttp_work(int matrix_order, char uplo, lapack_int n, const float* a, lapack_int lda, float* ap);
lapack_int LAPACKE_dtrttp_work(int matrix_order, char uplo, lapack_int n, const double* a, lapack_int lda, double* ap);
lapack_int LAPACKE_ctrttp_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * a, lapack_int lda, lapack_complex_float * ap);
lapack_int LAPACKE_ztrttp_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * a, lapack_int lda, lapack_complex_double * ap);
lapack_int LAPACKE_stzrzf_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* tau, float* work, lapack_int lwork);
lapack_int LAPACKE_dtzrzf_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* tau, double* work, lapack_int lwork);
lapack_int LAPACKE_ctzrzf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_ztzrzf_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cungbr_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zungbr_work(int matrix_order, char vect, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunghr_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunghr_work(int matrix_order, lapack_int n, lapack_int ilo, lapack_int ihi, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunglq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunglq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cungql_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zungql_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cungqr_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zungqr_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cungrq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zungrq_work(int matrix_order, lapack_int m, lapack_int n, lapack_int k, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cungtr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zungtr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmbr_work(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmbr_work(int matrix_order, char vect, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmhr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmhr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int ilo, lapack_int ihi, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmlq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmlq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmql_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmql_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmqr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmqr_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmrq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmrq_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmrz_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmrz_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cunmtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_float * a, lapack_int lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_zunmtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_double * a, lapack_int lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_cupgtr_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_float * ap, const lapack_complex_float * tau, lapack_complex_float * q, lapack_int ldq, lapack_complex_float * work);
lapack_int LAPACKE_zupgtr_work(int matrix_order, char uplo, lapack_int n, const lapack_complex_double * ap, const lapack_complex_double * tau, lapack_complex_double * q, lapack_int ldq, lapack_complex_double * work);
lapack_int LAPACKE_cupmtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_float * ap, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work);
lapack_int LAPACKE_zupmtr_work(int matrix_order, char side, char uplo, char trans, lapack_int m, lapack_int n, const lapack_complex_double * ap, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work);
lapack_int LAPACKE_claghe(int matrix_order, lapack_int n, lapack_int k, const float* d, lapack_complex_float * a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_zlaghe(int matrix_order, lapack_int n, lapack_int k, const double* d, lapack_complex_double * a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_slagsy(int matrix_order, lapack_int n, lapack_int k, const float* d, float* a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_dlagsy(int matrix_order, lapack_int n, lapack_int k, const double* d, double* a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_clagsy(int matrix_order, lapack_int n, lapack_int k, const float* d, lapack_complex_float * a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_zlagsy(int matrix_order, lapack_int n, lapack_int k, const double* d, lapack_complex_double * a, lapack_int lda, lapack_int * iseed);
lapack_int LAPACKE_slapmr(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, float* x, lapack_int ldx, lapack_int * k);
lapack_int LAPACKE_dlapmr(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, double* x, lapack_int ldx, lapack_int * k);
lapack_int LAPACKE_clapmr(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, lapack_complex_float * x, lapack_int ldx, lapack_int * k);
lapack_int LAPACKE_zlapmr(int matrix_order, lapack_logical forwrd, lapack_int m, lapack_int n, lapack_complex_double * x, lapack_int ldx, lapack_int * k);
float LAPACKE_slapy2(float x, float y);
double LAPACKE_dlapy2(double x, double y);
float LAPACKE_slapy3(float x, float y, float z);
double LAPACKE_dlapy3(double x, double y, double z);
lapack_int LAPACKE_slartgp(float f, float g, float* cs, float* sn, float* r);
lapack_int LAPACKE_dlartgp(double f, double g, double* cs, double* sn, double* r);
lapack_int LAPACKE_slartgs(float x, float y, float sigma, float* cs, float* sn);
lapack_int LAPACKE_dlartgs(double x, double y, double sigma, double* cs, double* sn);
0
lapack_int LAPACKE_cbbcsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, float* theta, float* phi, lapack_complex_float * u1, lapack_int ldu1, lapack_complex_float * u2, lapack_int ldu2, lapack_complex_float * v1t, lapack_int ldv1t, lapack_complex_float * v2t, lapack_int ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e);
lapack_int LAPACKE_cbbcsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, float* theta, float* phi, lapack_complex_float * u1, lapack_int ldu1, lapack_complex_float * u2, lapack_int ldu2, lapack_complex_float * v1t, lapack_int ldv1t, lapack_complex_float * v2t, lapack_int ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e, float* rwork, lapack_int lrwork);
lapack_int LAPACKE_cheswapr(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_cheswapr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_chetri2(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_chetri2_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_chetri2x(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_int nb);
lapack_int LAPACKE_chetri2x_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int nb);
lapack_int LAPACKE_chetrs2(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_chetrs2_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * work);
lapack_int LAPACKE_csyconv(int matrix_order, char uplo, char way, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_csyconv_work(int matrix_order, char uplo, char way, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work);
lapack_int LAPACKE_csyswapr(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_csyswapr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_csytri2(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_csytri2_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_csytri2x(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_int nb);
lapack_int LAPACKE_csytri2x_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int nb);
lapack_int LAPACKE_csytrs2(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_csytrs2_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_float * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * work);
lapack_int LAPACKE_cunbdb(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_float * x11, lapack_int ldx11, lapack_complex_float * x12, lapack_int ldx12, lapack_complex_float * x21, lapack_int ldx21, lapack_complex_float * x22, lapack_int ldx22, float* theta, float* phi, lapack_complex_float * taup1, lapack_complex_float * taup2, lapack_complex_float * tauq1, lapack_complex_float * tauq2);
lapack_int LAPACKE_cunbdb_work(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_float * x11, lapack_int ldx11, lapack_complex_float * x12, lapack_int ldx12, lapack_complex_float * x21, lapack_int ldx21, lapack_complex_float * x22, lapack_int ldx22, float* theta, float* phi, lapack_complex_float * taup1, lapack_complex_float * taup2, lapack_complex_float * tauq1, lapack_complex_float * tauq2, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_cuncsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_float * x11, lapack_int ldx11, lapack_complex_float * x12, lapack_int ldx12, lapack_complex_float * x21, lapack_int ldx21, lapack_complex_float * x22, lapack_int ldx22, float* theta, lapack_complex_float * u1, lapack_int ldu1, lapack_complex_float * u2, lapack_int ldu2, lapack_complex_float * v1t, lapack_int ldv1t, lapack_complex_float * v2t, lapack_int ldv2t);
lapack_int LAPACKE_cuncsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_float * x11, lapack_int ldx11, lapack_complex_float * x12, lapack_int ldx12, lapack_complex_float * x21, lapack_int ldx21, lapack_complex_float * x22, lapack_int ldx22, float* theta, lapack_complex_float * u1, lapack_int ldu1, lapack_complex_float * u2, lapack_int ldu2, lapack_complex_float * v1t, lapack_int ldv1t, lapack_complex_float * v2t, lapack_int ldv2t, lapack_complex_float * work, lapack_int lwork, float* rwork, lapack_int lrwork, lapack_int * iwork);
lapack_int LAPACKE_dbbcsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, double* theta, double* phi, double* u1, lapack_int ldu1, double* u2, lapack_int ldu2, double* v1t, lapack_int ldv1t, double* v2t, lapack_int ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e);
lapack_int LAPACKE_dbbcsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, double* theta, double* phi, double* u1, lapack_int ldu1, double* u2, lapack_int ldu2, double* v1t, lapack_int ldv1t, double* v2t, lapack_int ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e, double* work, lapack_int lwork);
lapack_int LAPACKE_dorbdb(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, double* x11, lapack_int ldx11, double* x12, lapack_int ldx12, double* x21, lapack_int ldx21, double* x22, lapack_int ldx22, double* theta, double* phi, double* taup1, double* taup2, double* tauq1, double* tauq2);
lapack_int LAPACKE_dorbdb_work(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, double* x11, lapack_int ldx11, double* x12, lapack_int ldx12, double* x21, lapack_int ldx21, double* x22, lapack_int ldx22, double* theta, double* phi, double* taup1, double* taup2, double* tauq1, double* tauq2, double* work, lapack_int lwork);
lapack_int LAPACKE_dorcsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, double* x11, lapack_int ldx11, double* x12, lapack_int ldx12, double* x21, lapack_int ldx21, double* x22, lapack_int ldx22, double* theta, double* u1, lapack_int ldu1, double* u2, lapack_int ldu2, double* v1t, lapack_int ldv1t, double* v2t, lapack_int ldv2t);
lapack_int LAPACKE_dorcsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, double* x11, lapack_int ldx11, double* x12, lapack_int ldx12, double* x21, lapack_int ldx21, double* x22, lapack_int ldx22, double* theta, double* u1, lapack_int ldu1, double* u2, lapack_int ldu2, double* v1t, lapack_int ldv1t, double* v2t, lapack_int ldv2t, double* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_dsyconv(int matrix_order, char uplo, char way, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_dsyconv_work(int matrix_order, char uplo, char way, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv, double* work);
lapack_int LAPACKE_dsyswapr(int matrix_order, char uplo, lapack_int n, double* a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_dsyswapr_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_dsytri2(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_dsytri2_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_dsytri2x(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv, lapack_int nb);
lapack_int LAPACKE_dsytri2x_work(int matrix_order, char uplo, lapack_int n, double* a, lapack_int lda, const lapack_int * ipiv, double* work, lapack_int nb);
lapack_int LAPACKE_dsytrs2(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const lapack_int * ipiv, double* b, lapack_int ldb);
lapack_int LAPACKE_dsytrs2_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const double* a, lapack_int lda, const lapack_int * ipiv, double* b, lapack_int ldb, double* work);
lapack_int LAPACKE_sbbcsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, float* theta, float* phi, float* u1, lapack_int ldu1, float* u2, lapack_int ldu2, float* v1t, lapack_int ldv1t, float* v2t, lapack_int ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e);
lapack_int LAPACKE_sbbcsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, float* theta, float* phi, float* u1, lapack_int ldu1, float* u2, lapack_int ldu2, float* v1t, lapack_int ldv1t, float* v2t, lapack_int ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e, float* work, lapack_int lwork);
lapack_int LAPACKE_sorbdb(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, float* x11, lapack_int ldx11, float* x12, lapack_int ldx12, float* x21, lapack_int ldx21, float* x22, lapack_int ldx22, float* theta, float* phi, float* taup1, float* taup2, float* tauq1, float* tauq2);
lapack_int LAPACKE_sorbdb_work(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, float* x11, lapack_int ldx11, float* x12, lapack_int ldx12, float* x21, lapack_int ldx21, float* x22, lapack_int ldx22, float* theta, float* phi, float* taup1, float* taup2, float* tauq1, float* tauq2, float* work, lapack_int lwork);
lapack_int LAPACKE_sorcsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, float* x11, lapack_int ldx11, float* x12, lapack_int ldx12, float* x21, lapack_int ldx21, float* x22, lapack_int ldx22, float* theta, float* u1, lapack_int ldu1, float* u2, lapack_int ldu2, float* v1t, lapack_int ldv1t, float* v2t, lapack_int ldv2t);
lapack_int LAPACKE_sorcsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, float* x11, lapack_int ldx11, float* x12, lapack_int ldx12, float* x21, lapack_int ldx21, float* x22, lapack_int ldx22, float* theta, float* u1, lapack_int ldu1, float* u2, lapack_int ldu2, float* v1t, lapack_int ldv1t, float* v2t, lapack_int ldv2t, float* work, lapack_int lwork, lapack_int * iwork);
lapack_int LAPACKE_ssyconv(int matrix_order, char uplo, char way, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_ssyconv_work(int matrix_order, char uplo, char way, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv, float* work);
lapack_int LAPACKE_ssyswapr(int matrix_order, char uplo, lapack_int n, float* a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_ssyswapr_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_ssytri2(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_ssytri2_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int lwork);
lapack_int LAPACKE_ssytri2x(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv, lapack_int nb);
lapack_int LAPACKE_ssytri2x_work(int matrix_order, char uplo, lapack_int n, float* a, lapack_int lda, const lapack_int * ipiv, float* work, lapack_int nb);
lapack_int LAPACKE_ssytrs2(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const lapack_int * ipiv, float* b, lapack_int ldb);
lapack_int LAPACKE_ssytrs2_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const float* a, lapack_int lda, const lapack_int * ipiv, float* b, lapack_int ldb, float* work);
lapack_int LAPACKE_zbbcsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, double* theta, double* phi, lapack_complex_double * u1, lapack_int ldu1, lapack_complex_double * u2, lapack_int ldu2, lapack_complex_double * v1t, lapack_int ldv1t, lapack_complex_double * v2t, lapack_int ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e);
lapack_int LAPACKE_zbbcsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, lapack_int m, lapack_int p, lapack_int q, double* theta, double* phi, lapack_complex_double * u1, lapack_int ldu1, lapack_complex_double * u2, lapack_int ldu2, lapack_complex_double * v1t, lapack_int ldv1t, lapack_complex_double * v2t, lapack_int ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e, double* rwork, lapack_int lrwork);
lapack_int LAPACKE_zheswapr(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_zheswapr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_zhetri2(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_zhetri2_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_zhetri2x(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_int nb);
lapack_int LAPACKE_zhetri2x_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int nb);
lapack_int LAPACKE_zhetrs2(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_zhetrs2_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * work);
lapack_int LAPACKE_zsyconv(int matrix_order, char uplo, char way, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_zsyconv_work(int matrix_order, char uplo, char way, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work);
lapack_int LAPACKE_zsyswapr(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_zsyswapr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int i1, lapack_int i2);
lapack_int LAPACKE_zsytri2(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv);
lapack_int LAPACKE_zsytri2_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_zsytri2x(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_int nb);
lapack_int LAPACKE_zsytri2x_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int nb);
lapack_int LAPACKE_zsytrs2(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_zsytrs2_work(int matrix_order, char uplo, lapack_int n, lapack_int nrhs, const lapack_complex_double * a, lapack_int lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * work);
lapack_int LAPACKE_zunbdb(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_double * x11, lapack_int ldx11, lapack_complex_double * x12, lapack_int ldx12, lapack_complex_double * x21, lapack_int ldx21, lapack_complex_double * x22, lapack_int ldx22, double* theta, double* phi, lapack_complex_double * taup1, lapack_complex_double * taup2, lapack_complex_double * tauq1, lapack_complex_double * tauq2);
lapack_int LAPACKE_zunbdb_work(int matrix_order, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_double * x11, lapack_int ldx11, lapack_complex_double * x12, lapack_int ldx12, lapack_complex_double * x21, lapack_int ldx21, lapack_complex_double * x22, lapack_int ldx22, double* theta, double* phi, lapack_complex_double * taup1, lapack_complex_double * taup2, lapack_complex_double * tauq1, lapack_complex_double * tauq2, lapack_complex_double * work, lapack_int lwork);
lapack_int LAPACKE_zuncsd(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_double * x11, lapack_int ldx11, lapack_complex_double * x12, lapack_int ldx12, lapack_complex_double * x21, lapack_int ldx21, lapack_complex_double * x22, lapack_int ldx22, double* theta, lapack_complex_double * u1, lapack_int ldu1, lapack_complex_double * u2, lapack_int ldu2, lapack_complex_double * v1t, lapack_int ldv1t, lapack_complex_double * v2t, lapack_int ldv2t);
lapack_int LAPACKE_zuncsd_work(int matrix_order, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, lapack_int m, lapack_int p, lapack_int q, lapack_complex_double * x11, lapack_int ldx11, lapack_complex_double * x12, lapack_int ldx12, lapack_complex_double * x21, lapack_int ldx21, lapack_complex_double * x22, lapack_int ldx22, double* theta, lapack_complex_double * u1, lapack_int ldu1, lapack_complex_double * u2, lapack_int ldu2, lapack_complex_double * v1t, lapack_int ldv1t, lapack_complex_double * v2t, lapack_int ldv2t, lapack_complex_double * work, lapack_int lwork, double* rwork, lapack_int lrwork, lapack_int * iwork);
0
lapack_int LAPACKE_sgemqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* c, lapack_int ldc);
lapack_int LAPACKE_dgemqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* c, lapack_int ldc);
lapack_int LAPACKE_cgemqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * c, lapack_int ldc);
lapack_int LAPACKE_zgemqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * c, lapack_int ldc);
lapack_int LAPACKE_sgeqrt(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, float* a, lapack_int lda, float* t, lapack_int ldt);
lapack_int LAPACKE_dgeqrt(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, double* a, lapack_int lda, double* t, lapack_int ldt);
lapack_int LAPACKE_cgeqrt(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_zgeqrt(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, lapack_complex_double * a, lapack_int lda, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_sgeqrt2(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* t, lapack_int ldt);
lapack_int LAPACKE_dgeqrt2(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* t, lapack_int ldt);
lapack_int LAPACKE_cgeqrt2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_zgeqrt2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_sgeqrt3(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* t, lapack_int ldt);
lapack_int LAPACKE_dgeqrt3(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* t, lapack_int ldt);
lapack_int LAPACKE_cgeqrt3(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_zgeqrt3(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_stpmqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* a, lapack_int lda, float* b, lapack_int ldb);
lapack_int LAPACKE_dtpmqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* a, lapack_int lda, double* b, lapack_int ldb);
lapack_int LAPACKE_ctpmqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb);
lapack_int LAPACKE_ztpmqrt(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb);
lapack_int LAPACKE_dtpqrt(int matrix_order, lapack_int m, lapack_int n, lapack_int l, lapack_int nb, double* a, lapack_int lda, double* b, lapack_int ldb, double* t, lapack_int ldt);
lapack_int LAPACKE_ctpqrt(int matrix_order, lapack_int m, lapack_int n, lapack_int l, lapack_int nb, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_complex_float * b, lapack_int ldb, lapack_int ldt);
lapack_int LAPACKE_ztpqrt(int matrix_order, lapack_int m, lapack_int n, lapack_int l, lapack_int nb, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_stpqrt2(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* t, lapack_int ldt);
lapack_int LAPACKE_dtpqrt2(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* t, lapack_int ldt);
lapack_int LAPACKE_ctpqrt2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_ztpqrt2(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_stprfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* a, lapack_int lda, float* b, lapack_int ldb, lapack_int myldwork);
lapack_int LAPACKE_dtprfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* a, lapack_int lda, double* b, lapack_int ldb, lapack_int myldwork);
lapack_int LAPACKE_ctprfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_int myldwork);
lapack_int LAPACKE_ztprfb(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_int myldwork);
lapack_int LAPACKE_sgemqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* c, lapack_int ldc, float* work);
lapack_int LAPACKE_dgemqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* c, lapack_int ldc, double* work);
lapack_int LAPACKE_cgemqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * c, lapack_int ldc, lapack_complex_float * work);
lapack_int LAPACKE_zgemqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int nb, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * c, lapack_int ldc, lapack_complex_double * work);
lapack_int LAPACKE_sgeqrt_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, float* a, lapack_int lda, float* t, lapack_int ldt, float* work);
lapack_int LAPACKE_dgeqrt_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, double* a, lapack_int lda, double* t, lapack_int ldt, double* work);
lapack_int LAPACKE_cgeqrt_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_int ldt, lapack_complex_float * work);
lapack_int LAPACKE_zgeqrt_work(int matrix_order, lapack_int m, lapack_int n, lapack_int nb, lapack_complex_double * a, lapack_int lda, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * work);
lapack_int LAPACKE_sgeqrt2_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* t, lapack_int ldt);
lapack_int LAPACKE_dgeqrt2_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* t, lapack_int ldt);
lapack_int LAPACKE_cgeqrt2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_zgeqrt2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_sgeqrt3_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* t, lapack_int ldt);
lapack_int LAPACKE_dgeqrt3_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* t, lapack_int ldt);
lapack_int LAPACKE_cgeqrt3_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_zgeqrt3_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_stpmqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* a, lapack_int lda, float* b, lapack_int ldb, float* work);
lapack_int LAPACKE_dtpmqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* a, lapack_int lda, double* b, lapack_int ldb, double* work);
lapack_int LAPACKE_ctpmqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * work);
lapack_int LAPACKE_ztpmqrt_work(int matrix_order, char side, char trans, lapack_int m, lapack_int n, lapack_int k, lapack_int l, lapack_int nb, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * work);
lapack_int LAPACKE_dtpqrt_work(int matrix_order, lapack_int m, lapack_int n, lapack_int l, lapack_int nb, double* a, lapack_int lda, double* b, lapack_int ldb, double* t, lapack_int ldt, double* work);
lapack_int LAPACKE_ctpqrt_work(int matrix_order, lapack_int m, lapack_int n, lapack_int l, lapack_int nb, lapack_complex_float * a, lapack_int lda, lapack_complex_float * t, lapack_complex_float * b, lapack_int ldb, lapack_int ldt, lapack_complex_float * work);
lapack_int LAPACKE_ztpqrt_work(int matrix_order, lapack_int m, lapack_int n, lapack_int l, lapack_int nb, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * t, lapack_int ldt, lapack_complex_double * work);
lapack_int LAPACKE_stpqrt2_work(int matrix_order, lapack_int m, lapack_int n, float* a, lapack_int lda, float* b, lapack_int ldb, float* t, lapack_int ldt);
lapack_int LAPACKE_dtpqrt2_work(int matrix_order, lapack_int m, lapack_int n, double* a, lapack_int lda, double* b, lapack_int ldb, double* t, lapack_int ldt);
lapack_int LAPACKE_ctpqrt2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, lapack_complex_float * t, lapack_int ldt);
lapack_int LAPACKE_ztpqrt2_work(int matrix_order, lapack_int m, lapack_int n, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, lapack_complex_double * t, lapack_int ldt);
lapack_int LAPACKE_stprfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const float* v, lapack_int ldv, const float* t, lapack_int ldt, float* a, lapack_int lda, float* b, lapack_int ldb, const float* mywork, lapack_int myldwork);
lapack_int LAPACKE_dtprfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const double* v, lapack_int ldv, const double* t, lapack_int ldt, double* a, lapack_int lda, double* b, lapack_int ldb, const double* mywork, lapack_int myldwork);
lapack_int LAPACKE_ctprfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_float * v, lapack_int ldv, const lapack_complex_float * t, lapack_int ldt, lapack_complex_float * a, lapack_int lda, lapack_complex_float * b, lapack_int ldb, const float* mywork, lapack_int myldwork);
lapack_int LAPACKE_ztprfb_work(int matrix_order, char side, char trans, char direct, char storev, lapack_int m, lapack_int n, lapack_int k, lapack_int l, const lapack_complex_double * v, lapack_int ldv, const lapack_complex_double * t, lapack_int ldt, lapack_complex_double * a, lapack_int lda, lapack_complex_double * b, lapack_int ldb, const double* mywork, lapack_int myldwork);
X
lapack_int LAPACKE_csyr(int matrix_order, char uplo, lapack_int n, lapack_complex_float alpha, const lapack_complex_float * x, lapack_int incx, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zsyr(int matrix_order, char uplo, lapack_int n, lapack_complex_double alpha, const lapack_complex_double * x, lapack_int incx, lapack_complex_double * a, lapack_int lda);
lapack_int LAPACKE_csyr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_float alpha, const lapack_complex_float * x, lapack_int incx, lapack_complex_float * a, lapack_int lda);
lapack_int LAPACKE_zsyr_work(int matrix_order, char uplo, lapack_int n, lapack_complex_double alpha, const lapack_complex_double * x, lapack_int incx, lapack_complex_double * a, lapack_int lda);
void LAPACK_sgetrf(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_dgetrf(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_cgetrf(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_zgetrf(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_sgbtrf(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, float* ab, lapack_int * ldab, lapack_int * ipiv, lapack_int * info);
void LAPACK_dgbtrf(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, double* ab, lapack_int * ldab, lapack_int * ipiv, lapack_int * info);
void LAPACK_cgbtrf(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_complex_float * ab, lapack_int * ldab, lapack_int * ipiv, lapack_int * info);
void LAPACK_zgbtrf(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_complex_double * ab, lapack_int * ldab, lapack_int * ipiv, lapack_int * info);
void LAPACK_sgttrf(lapack_int * n, float* dl, float* d, float* du, float* du2, lapack_int * ipiv, lapack_int * info);
void LAPACK_dgttrf(lapack_int * n, double* dl, double* d, double* du, double* du2, lapack_int * ipiv, lapack_int * info);
void LAPACK_cgttrf(lapack_int * n, lapack_complex_float * dl, lapack_complex_float * d, lapack_complex_float * du, lapack_complex_float * du2, lapack_int * ipiv, lapack_int * info);
void LAPACK_zgttrf(lapack_int * n, lapack_complex_double * dl, lapack_complex_double * d, lapack_complex_double * du, lapack_complex_double * du2, lapack_int * ipiv, lapack_int * info);
void LAPACK_spotrf(char* uplo, lapack_int * n, float* a, lapack_int * lda, lapack_int * info);
void LAPACK_dpotrf(char* uplo, lapack_int * n, double* a, lapack_int * lda, lapack_int * info);
void LAPACK_cpotrf(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * info);
void LAPACK_zpotrf(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * info);
void LAPACK_dpstrf(char* uplo, lapack_int * n, double* a, lapack_int * lda, lapack_int * piv, lapack_int * rank, double* tol, double* work, lapack_int * info);
void LAPACK_spstrf(char* uplo, lapack_int * n, float* a, lapack_int * lda, lapack_int * piv, lapack_int * rank, float* tol, float* work, lapack_int * info);
void LAPACK_zpstrf(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * piv, lapack_int * rank, double* tol, double* work, lapack_int * info);
void LAPACK_cpstrf(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * piv, lapack_int * rank, float* tol, float* work, lapack_int * info);
void LAPACK_dpftrf(char* transr, char* uplo, lapack_int * n, double* a, lapack_int * info);
void LAPACK_spftrf(char* transr, char* uplo, lapack_int * n, float* a, lapack_int * info);
void LAPACK_zpftrf(char* transr, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * info);
void LAPACK_cpftrf(char* transr, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * info);
void LAPACK_spptrf(char* uplo, lapack_int * n, float* ap, lapack_int * info);
void LAPACK_dpptrf(char* uplo, lapack_int * n, double* ap, lapack_int * info);
void LAPACK_cpptrf(char* uplo, lapack_int * n, lapack_complex_float * ap, lapack_int * info);
void LAPACK_zpptrf(char* uplo, lapack_int * n, lapack_complex_double * ap, lapack_int * info);
void LAPACK_spbtrf(char* uplo, lapack_int * n, lapack_int * kd, float* ab, lapack_int * ldab, lapack_int * info);
void LAPACK_dpbtrf(char* uplo, lapack_int * n, lapack_int * kd, double* ab, lapack_int * ldab, lapack_int * info);
void LAPACK_cpbtrf(char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_float * ab, lapack_int * ldab, lapack_int * info);
void LAPACK_zpbtrf(char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_double * ab, lapack_int * ldab, lapack_int * info);
void LAPACK_spttrf(lapack_int * n, float* d, float* e, lapack_int * info);
void LAPACK_dpttrf(lapack_int * n, double* d, double* e, lapack_int * info);
void LAPACK_cpttrf(lapack_int * n, float* d, lapack_complex_float * e, lapack_int * info);
void LAPACK_zpttrf(lapack_int * n, double* d, lapack_complex_double * e, lapack_int * info);
void LAPACK_ssytrf(char* uplo, lapack_int * n, float* a, lapack_int * lda, lapack_int * ipiv, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dsytrf(char* uplo, lapack_int * n, double* a, lapack_int * lda, lapack_int * ipiv, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_csytrf(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zsytrf(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_chetrf(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zhetrf(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_ssptrf(char* uplo, lapack_int * n, float* ap, lapack_int * ipiv, lapack_int * info);
void LAPACK_dsptrf(char* uplo, lapack_int * n, double* ap, lapack_int * ipiv, lapack_int * info);
void LAPACK_csptrf(char* uplo, lapack_int * n, lapack_complex_float * ap, lapack_int * ipiv, lapack_int * info);
void LAPACK_zsptrf(char* uplo, lapack_int * n, lapack_complex_double * ap, lapack_int * ipiv, lapack_int * info);
void LAPACK_chptrf(char* uplo, lapack_int * n, lapack_complex_float * ap, lapack_int * ipiv, lapack_int * info);
void LAPACK_zhptrf(char* uplo, lapack_int * n, lapack_complex_double * ap, lapack_int * ipiv, lapack_int * info);
void LAPACK_sgetrs(char* trans, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dgetrs(char* trans, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cgetrs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zgetrs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sgbtrs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const float* ab, lapack_int * ldab, const lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dgbtrs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const double* ab, lapack_int * ldab, const lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cgbtrs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const lapack_complex_float * ab, lapack_int * ldab, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zgbtrs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const lapack_complex_double * ab, lapack_int * ldab, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sgttrs(char* trans, lapack_int * n, lapack_int * nrhs, const float* dl, const float* d, const float* du, const float* du2, const lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dgttrs(char* trans, lapack_int * n, lapack_int * nrhs, const double* dl, const double* d, const double* du, const double* du2, const lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cgttrs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * du2, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zgttrs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * du2, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_spotrs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dpotrs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cpotrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zpotrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_dpftrs(char* transr, char* uplo, lapack_int * n, lapack_int * nrhs, const double* a, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_spftrs(char* transr, char* uplo, lapack_int * n, lapack_int * nrhs, const float* a, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_zpftrs(char* transr, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_cpftrs(char* transr, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_spptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* ap, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dpptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* ap, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cpptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zpptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_spbtrs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const float* ab, lapack_int * ldab, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dpbtrs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const double* ab, lapack_int * ldab, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cpbtrs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zpbtrs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_spttrs(lapack_int * n, lapack_int * nrhs, const float* d, const float* e, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dpttrs(lapack_int * n, lapack_int * nrhs, const double* d, const double* e, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cpttrs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* d, const lapack_complex_float * e, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zpttrs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* d, const lapack_complex_double * e, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_ssytrs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dsytrs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_csytrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zsytrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_chetrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zhetrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_ssptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* ap, const lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dsptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* ap, const lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_csptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zsptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_chptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zhptrs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_strtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dtrtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_ctrtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_ztrtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_stptrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const float* ap, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dtptrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const double* ap, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_ctptrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_ztptrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_stbtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const float* ab, lapack_int * ldab, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dtbtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const double* ab, lapack_int * ldab, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_ctbtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_ztbtrs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sgecon(char* norm, lapack_int * n, const float* a, lapack_int * lda, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgecon(char* norm, lapack_int * n, const double* a, lapack_int * lda, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgecon(char* norm, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* anorm, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgecon(char* norm, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* anorm, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sgbcon(char* norm, lapack_int * n, lapack_int * kl, lapack_int * ku, const float* ab, lapack_int * ldab, const lapack_int * ipiv, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgbcon(char* norm, lapack_int * n, lapack_int * kl, lapack_int * ku, const double* ab, lapack_int * ldab, const lapack_int * ipiv, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgbcon(char* norm, lapack_int * n, lapack_int * kl, lapack_int * ku, const lapack_complex_float * ab, lapack_int * ldab, const lapack_int * ipiv, float* anorm, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgbcon(char* norm, lapack_int * n, lapack_int * kl, lapack_int * ku, const lapack_complex_double * ab, lapack_int * ldab, const lapack_int * ipiv, double* anorm, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sgtcon(char* norm, lapack_int * n, const float* dl, const float* d, const float* du, const float* du2, const lapack_int * ipiv, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgtcon(char* norm, lapack_int * n, const double* dl, const double* d, const double* du, const double* du2, const lapack_int * ipiv, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgtcon(char* norm, lapack_int * n, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * du2, const lapack_int * ipiv, float* anorm, float* rcond, lapack_complex_float * work, lapack_int * info);
void LAPACK_zgtcon(char* norm, lapack_int * n, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * du2, const lapack_int * ipiv, double* anorm, double* rcond, lapack_complex_double * work, lapack_int * info);
void LAPACK_spocon(char* uplo, lapack_int * n, const float* a, lapack_int * lda, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dpocon(char* uplo, lapack_int * n, const double* a, lapack_int * lda, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cpocon(char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* anorm, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zpocon(char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* anorm, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sppcon(char* uplo, lapack_int * n, const float* ap, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dppcon(char* uplo, lapack_int * n, const double* ap, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cppcon(char* uplo, lapack_int * n, const lapack_complex_float * ap, float* anorm, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zppcon(char* uplo, lapack_int * n, const lapack_complex_double * ap, double* anorm, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_spbcon(char* uplo, lapack_int * n, lapack_int * kd, const float* ab, lapack_int * ldab, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dpbcon(char* uplo, lapack_int * n, lapack_int * kd, const double* ab, lapack_int * ldab, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cpbcon(char* uplo, lapack_int * n, lapack_int * kd, const lapack_complex_float * ab, lapack_int * ldab, float* anorm, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zpbcon(char* uplo, lapack_int * n, lapack_int * kd, const lapack_complex_double * ab, lapack_int * ldab, double* anorm, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sptcon(lapack_int * n, const float* d, const float* e, float* anorm, float* rcond, float* work, lapack_int * info);
void LAPACK_dptcon(lapack_int * n, const double* d, const double* e, double* anorm, double* rcond, double* work, lapack_int * info);
void LAPACK_cptcon(lapack_int * n, const float* d, const lapack_complex_float * e, float* anorm, float* rcond, float* work, lapack_int * info);
void LAPACK_zptcon(lapack_int * n, const double* d, const lapack_complex_double * e, double* anorm, double* rcond, double* work, lapack_int * info);
void LAPACK_ssycon(char* uplo, lapack_int * n, const float* a, lapack_int * lda, const lapack_int * ipiv, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dsycon(char* uplo, lapack_int * n, const double* a, lapack_int * lda, const lapack_int * ipiv, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_csycon(char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, float* anorm, float* rcond, lapack_complex_float * work, lapack_int * info);
void LAPACK_zsycon(char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, double* anorm, double* rcond, lapack_complex_double * work, lapack_int * info);
void LAPACK_checon(char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, float* anorm, float* rcond, lapack_complex_float * work, lapack_int * info);
void LAPACK_zhecon(char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, double* anorm, double* rcond, lapack_complex_double * work, lapack_int * info);
void LAPACK_sspcon(char* uplo, lapack_int * n, const float* ap, const lapack_int * ipiv, float* anorm, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dspcon(char* uplo, lapack_int * n, const double* ap, const lapack_int * ipiv, double* anorm, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cspcon(char* uplo, lapack_int * n, const lapack_complex_float * ap, const lapack_int * ipiv, float* anorm, float* rcond, lapack_complex_float * work, lapack_int * info);
void LAPACK_zspcon(char* uplo, lapack_int * n, const lapack_complex_double * ap, const lapack_int * ipiv, double* anorm, double* rcond, lapack_complex_double * work, lapack_int * info);
void LAPACK_chpcon(char* uplo, lapack_int * n, const lapack_complex_float * ap, const lapack_int * ipiv, float* anorm, float* rcond, lapack_complex_float * work, lapack_int * info);
void LAPACK_zhpcon(char* uplo, lapack_int * n, const lapack_complex_double * ap, const lapack_int * ipiv, double* anorm, double* rcond, lapack_complex_double * work, lapack_int * info);
void LAPACK_strcon(char* norm, char* uplo, char* diag, lapack_int * n, const float* a, lapack_int * lda, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dtrcon(char* norm, char* uplo, char* diag, lapack_int * n, const double* a, lapack_int * lda, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ctrcon(char* norm, char* uplo, char* diag, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztrcon(char* norm, char* uplo, char* diag, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_stpcon(char* norm, char* uplo, char* diag, lapack_int * n, const float* ap, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dtpcon(char* norm, char* uplo, char* diag, lapack_int * n, const double* ap, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ctpcon(char* norm, char* uplo, char* diag, lapack_int * n, const lapack_complex_float * ap, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztpcon(char* norm, char* uplo, char* diag, lapack_int * n, const lapack_complex_double * ap, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_stbcon(char* norm, char* uplo, char* diag, lapack_int * n, lapack_int * kd, const float* ab, lapack_int * ldab, float* rcond, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dtbcon(char* norm, char* uplo, char* diag, lapack_int * n, lapack_int * kd, const double* ab, lapack_int * ldab, double* rcond, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ctbcon(char* norm, char* uplo, char* diag, lapack_int * n, lapack_int * kd, const lapack_complex_float * ab, lapack_int * ldab, float* rcond, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztbcon(char* norm, char* uplo, char* diag, lapack_int * n, lapack_int * kd, const lapack_complex_double * ab, lapack_int * ldab, double* rcond, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sgerfs(char* trans, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const float* af, lapack_int * ldaf, const lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgerfs(char* trans, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const double* af, lapack_int * ldaf, const lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgerfs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgerfs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_dgerfsx(char* trans, char* equed, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const double* af, lapack_int * ldaf, const lapack_int * ipiv, const double* r, const double* c, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_sgerfsx(char* trans, char* equed, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const float* af, lapack_int * ldaf, const lapack_int * ipiv, const float* r, const float* c, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zgerfsx(char* trans, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const lapack_int * ipiv, const double* r, const double* c, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_cgerfsx(char* trans, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const lapack_int * ipiv, const float* r, const float* c, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_sgbrfs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const float* ab, lapack_int * ldab, const float* afb, lapack_int * ldafb, const lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgbrfs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const double* ab, lapack_int * ldab, const double* afb, lapack_int * ldafb, const lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgbrfs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const lapack_complex_float * ab, lapack_int * ldab, const lapack_complex_float * afb, lapack_int * ldafb, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgbrfs(char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const lapack_complex_double * ab, lapack_int * ldab, const lapack_complex_double * afb, lapack_int * ldafb, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_dgbrfsx(char* trans, char* equed, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const double* ab, lapack_int * ldab, const double* afb, lapack_int * ldafb, const lapack_int * ipiv, const double* r, const double* c, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_sgbrfsx(char* trans, char* equed, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const float* ab, lapack_int * ldab, const float* afb, lapack_int * ldafb, const lapack_int * ipiv, const float* r, const float* c, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zgbrfsx(char* trans, char* equed, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const lapack_complex_double * ab, lapack_int * ldab, const lapack_complex_double * afb, lapack_int * ldafb, const lapack_int * ipiv, const double* r, const double* c, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_cgbrfsx(char* trans, char* equed, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, const lapack_complex_float * ab, lapack_int * ldab, const lapack_complex_float * afb, lapack_int * ldafb, const lapack_int * ipiv, const float* r, const float* c, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_sgtrfs(char* trans, lapack_int * n, lapack_int * nrhs, const float* dl, const float* d, const float* du, const float* dlf, const float* df, const float* duf, const float* du2, const lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgtrfs(char* trans, lapack_int * n, lapack_int * nrhs, const double* dl, const double* d, const double* du, const double* dlf, const double* df, const double* duf, const double* du2, const lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgtrfs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, const lapack_complex_float * dlf, const lapack_complex_float * df, const lapack_complex_float * duf, const lapack_complex_float * du2, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgtrfs(char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, const lapack_complex_double * dlf, const lapack_complex_double * df, const lapack_complex_double * duf, const lapack_complex_double * du2, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sporfs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const float* af, lapack_int * ldaf, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dporfs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const double* af, lapack_int * ldaf, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cporfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zporfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_dporfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const double* af, lapack_int * ldaf, const double* s, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_sporfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const float* af, lapack_int * ldaf, const float* s, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zporfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const double* s, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_cporfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const float* s, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_spprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* ap, const float* afp, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dpprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* ap, const double* afp, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cpprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zpprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_spbrfs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const float* ab, lapack_int * ldab, const float* afb, lapack_int * ldafb, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dpbrfs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const double* ab, lapack_int * ldab, const double* afb, lapack_int * ldafb, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cpbrfs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_float * ab, lapack_int * ldab, const lapack_complex_float * afb, lapack_int * ldafb, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zpbrfs(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_double * ab, lapack_int * ldab, const lapack_complex_double * afb, lapack_int * ldafb, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sptrfs(lapack_int * n, lapack_int * nrhs, const float* d, const float* e, const float* df, const float* ef, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * info);
void LAPACK_dptrfs(lapack_int * n, lapack_int * nrhs, const double* d, const double* e, const double* df, const double* ef, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * info);
void LAPACK_cptrfs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* d, const lapack_complex_float * e, const float* df, const lapack_complex_float * ef, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zptrfs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* d, const lapack_complex_double * e, const double* df, const lapack_complex_double * ef, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_ssyrfs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const float* af, lapack_int * ldaf, const lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dsyrfs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const double* af, lapack_int * ldaf, const lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_csyrfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zsyrfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_dsyrfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const double* af, lapack_int * ldaf, const lapack_int * ipiv, const double* s, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ssyrfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const float* af, lapack_int * ldaf, const lapack_int * ipiv, const float* s, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zsyrfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const lapack_int * ipiv, const double* s, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_csyrfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const lapack_int * ipiv, const float* s, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_cherfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zherfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_zherfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * af, lapack_int * ldaf, const lapack_int * ipiv, const double* s, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_cherfsx(char* uplo, char* equed, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * af, lapack_int * ldaf, const lapack_int * ipiv, const float* s, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ssprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const float* ap, const float* afp, const lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dsprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const double* ap, const double* afp, const lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_csprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zsprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_chprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, const lapack_complex_float * afp, const lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zhprfs(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, const lapack_complex_double * afp, const lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_strrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const float* b, lapack_int * ldb, const float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dtrrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const double* b, lapack_int * ldb, const double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ctrrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * b, lapack_int * ldb, const lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztrrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * b, lapack_int * ldb, const lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_stprfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const float* ap, const float* b, lapack_int * ldb, const float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dtprfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const double* ap, const double* b, lapack_int * ldb, const double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ctprfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, const lapack_complex_float * b, lapack_int * ldb, const lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztprfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, const lapack_complex_double * b, lapack_int * ldb, const lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_stbrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const float* ab, lapack_int * ldab, const float* b, lapack_int * ldb, const float* x, lapack_int * ldx, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dtbrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const double* ab, lapack_int * ldab, const double* b, lapack_int * ldb, const double* x, lapack_int * ldx, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ctbrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_float * ab, lapack_int * ldab, const lapack_complex_float * b, lapack_int * ldb, const lapack_complex_float * x, lapack_int * ldx, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztbrfs(char* uplo, char* trans, char* diag, lapack_int * n, lapack_int * kd, lapack_int * nrhs, const lapack_complex_double * ab, lapack_int * ldab, const lapack_complex_double * b, lapack_int * ldb, const lapack_complex_double * x, lapack_int * ldx, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sgetri(lapack_int * n, float* a, lapack_int * lda, const lapack_int * ipiv, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgetri(lapack_int * n, double* a, lapack_int * lda, const lapack_int * ipiv, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgetri(lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgetri(lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_spotri(char* uplo, lapack_int * n, float* a, lapack_int * lda, lapack_int * info);
void LAPACK_dpotri(char* uplo, lapack_int * n, double* a, lapack_int * lda, lapack_int * info);
void LAPACK_cpotri(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * info);
void LAPACK_zpotri(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * info);
void LAPACK_dpftri(char* transr, char* uplo, lapack_int * n, double* a, lapack_int * info);
void LAPACK_spftri(char* transr, char* uplo, lapack_int * n, float* a, lapack_int * info);
void LAPACK_zpftri(char* transr, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * info);
void LAPACK_cpftri(char* transr, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * info);
void LAPACK_spptri(char* uplo, lapack_int * n, float* ap, lapack_int * info);
void LAPACK_dpptri(char* uplo, lapack_int * n, double* ap, lapack_int * info);
void LAPACK_cpptri(char* uplo, lapack_int * n, lapack_complex_float * ap, lapack_int * info);
void LAPACK_zpptri(char* uplo, lapack_int * n, lapack_complex_double * ap, lapack_int * info);
void LAPACK_ssytri(char* uplo, lapack_int * n, float* a, lapack_int * lda, const lapack_int * ipiv, float* work, lapack_int * info);
void LAPACK_dsytri(char* uplo, lapack_int * n, double* a, lapack_int * lda, const lapack_int * ipiv, double* work, lapack_int * info);
void LAPACK_csytri(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * info);
void LAPACK_zsytri(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * info);
void LAPACK_chetri(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * info);
void LAPACK_zhetri(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * info);
void LAPACK_ssptri(char* uplo, lapack_int * n, float* ap, const lapack_int * ipiv, float* work, lapack_int * info);
void LAPACK_dsptri(char* uplo, lapack_int * n, double* ap, const lapack_int * ipiv, double* work, lapack_int * info);
void LAPACK_csptri(char* uplo, lapack_int * n, lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * info);
void LAPACK_zsptri(char* uplo, lapack_int * n, lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * info);
void LAPACK_chptri(char* uplo, lapack_int * n, lapack_complex_float * ap, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * info);
void LAPACK_zhptri(char* uplo, lapack_int * n, lapack_complex_double * ap, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * info);
void LAPACK_strtri(char* uplo, char* diag, lapack_int * n, float* a, lapack_int * lda, lapack_int * info);
void LAPACK_dtrtri(char* uplo, char* diag, lapack_int * n, double* a, lapack_int * lda, lapack_int * info);
void LAPACK_ctrtri(char* uplo, char* diag, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * info);
void LAPACK_ztrtri(char* uplo, char* diag, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * info);
void LAPACK_dtftri(char* transr, char* uplo, char* diag, lapack_int * n, double* a, lapack_int * info);
void LAPACK_stftri(char* transr, char* uplo, char* diag, lapack_int * n, float* a, lapack_int * info);
void LAPACK_ztftri(char* transr, char* uplo, char* diag, lapack_int * n, lapack_complex_double * a, lapack_int * info);
void LAPACK_ctftri(char* transr, char* uplo, char* diag, lapack_int * n, lapack_complex_float * a, lapack_int * info);
void LAPACK_stptri(char* uplo, char* diag, lapack_int * n, float* ap, lapack_int * info);
void LAPACK_dtptri(char* uplo, char* diag, lapack_int * n, double* ap, lapack_int * info);
void LAPACK_ctptri(char* uplo, char* diag, lapack_int * n, lapack_complex_float * ap, lapack_int * info);
void LAPACK_ztptri(char* uplo, char* diag, lapack_int * n, lapack_complex_double * ap, lapack_int * info);
void LAPACK_sgeequ(lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_dgeequ(lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_cgeequ(lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_zgeequ(lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_dgeequb(lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_sgeequb(lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_zgeequb(lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_cgeequb(lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_sgbequ(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const float* ab, lapack_int * ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_dgbequ(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const double* ab, lapack_int * ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_cgbequ(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const lapack_complex_float * ab, lapack_int * ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_zgbequ(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const lapack_complex_double * ab, lapack_int * ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_dgbequb(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const double* ab, lapack_int * ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_sgbequb(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const float* ab, lapack_int * ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_zgbequb(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const lapack_complex_double * ab, lapack_int * ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax, lapack_int * info);
void LAPACK_cgbequb(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const lapack_complex_float * ab, lapack_int * ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax, lapack_int * info);
void LAPACK_spoequ(lapack_int * n, const float* a, lapack_int * lda, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_dpoequ(lapack_int * n, const double* a, lapack_int * lda, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_cpoequ(lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_zpoequ(lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_dpoequb(lapack_int * n, const double* a, lapack_int * lda, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_spoequb(lapack_int * n, const float* a, lapack_int * lda, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_zpoequb(lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_cpoequb(lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_sppequ(char* uplo, lapack_int * n, const float* ap, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_dppequ(char* uplo, lapack_int * n, const double* ap, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_cppequ(char* uplo, lapack_int * n, const lapack_complex_float * ap, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_zppequ(char* uplo, lapack_int * n, const lapack_complex_double * ap, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_spbequ(char* uplo, lapack_int * n, lapack_int * kd, const float* ab, lapack_int * ldab, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_dpbequ(char* uplo, lapack_int * n, lapack_int * kd, const double* ab, lapack_int * ldab, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_cpbequ(char* uplo, lapack_int * n, lapack_int * kd, const lapack_complex_float * ab, lapack_int * ldab, float* s, float* scond, float* amax, lapack_int * info);
void LAPACK_zpbequ(char* uplo, lapack_int * n, lapack_int * kd, const lapack_complex_double * ab, lapack_int * ldab, double* s, double* scond, double* amax, lapack_int * info);
void LAPACK_dsyequb(char* uplo, lapack_int * n, const double* a, lapack_int * lda, double* s, double* scond, double* amax, double* work, lapack_int * info);
void LAPACK_ssyequb(char* uplo, lapack_int * n, const float* a, lapack_int * lda, float* s, float* scond, float* amax, float* work, lapack_int * info);
void LAPACK_zsyequb(char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* s, double* scond, double* amax, lapack_complex_double * work, lapack_int * info);
void LAPACK_csyequb(char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* s, float* scond, float* amax, lapack_complex_float * work, lapack_int * info);
void LAPACK_zheequb(char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* s, double* scond, double* amax, lapack_complex_double * work, lapack_int * info);
void LAPACK_cheequb(char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* s, float* scond, float* amax, lapack_complex_float * work, lapack_int * info);
void LAPACK_sgesv(lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dgesv(lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cgesv(lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zgesv(lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_dsgesv(lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, lapack_int * ipiv, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* work, float* swork, lapack_int * iter, lapack_int * info);
void LAPACK_zcgesv(lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, lapack_complex_double * work, lapack_complex_float * swork, double* rwork, lapack_int * iter, lapack_int * info);
void LAPACK_sgesvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* af, lapack_int * ldaf, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgesvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* af, lapack_int * ldaf, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgesvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgesvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_dgesvxx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* af, lapack_int * ldaf, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_sgesvxx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* af, lapack_int * ldaf, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zgesvxx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_cgesvxx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_sgbsv(lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, float* ab, lapack_int * ldab, lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dgbsv(lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, double* ab, lapack_int * ldab, lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cgbsv(lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, lapack_complex_float * ab, lapack_int * ldab, lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zgbsv(lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, lapack_complex_double * ab, lapack_int * ldab, lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sgbsvx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, float* ab, lapack_int * ldab, float* afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgbsvx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, double* ab, lapack_int * ldab, double* afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgbsvx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgbsvx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_dgbsvxx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, double* ab, lapack_int * ldab, double* afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, double* r, double* c, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_sgbsvxx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, float* ab, lapack_int * ldab, float* afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, float* r, float* c, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zgbsvxx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, double* r, double* c, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_cgbsvxx(char* fact, char* trans, lapack_int * n, lapack_int * kl, lapack_int * ku, lapack_int * nrhs, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * afb, lapack_int * ldafb, lapack_int * ipiv, char* equed, float* r, float* c, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_sgtsv(lapack_int * n, lapack_int * nrhs, float* dl, float* d, float* du, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dgtsv(lapack_int * n, lapack_int * nrhs, double* dl, double* d, double* du, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cgtsv(lapack_int * n, lapack_int * nrhs, lapack_complex_float * dl, lapack_complex_float * d, lapack_complex_float * du, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zgtsv(lapack_int * n, lapack_int * nrhs, lapack_complex_double * dl, lapack_complex_double * d, lapack_complex_double * du, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sgtsvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, const float* dl, const float* d, const float* du, float* dlf, float* df, float* duf, float* du2, lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dgtsvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, const double* dl, const double* d, const double* du, double* dlf, double* df, double* duf, double* du2, lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cgtsvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * dl, const lapack_complex_float * d, const lapack_complex_float * du, lapack_complex_float * dlf, lapack_complex_float * df, lapack_complex_float * duf, lapack_complex_float * du2, lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgtsvx(char* fact, char* trans, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * dl, const lapack_complex_double * d, const lapack_complex_double * du, lapack_complex_double * dlf, lapack_complex_double * df, lapack_complex_double * duf, lapack_complex_double * du2, lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sposv(char* uplo, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dposv(char* uplo, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cposv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zposv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_dsposv(char* uplo, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* work, float* swork, lapack_int * iter, lapack_int * info);
void LAPACK_zcposv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, lapack_complex_double * work, lapack_complex_float * swork, double* rwork, lapack_int * iter, lapack_int * info);
void LAPACK_sposvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* af, lapack_int * ldaf, char* equed, float* s, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dposvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* af, lapack_int * ldaf, char* equed, double* s, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cposvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, char* equed, float* s, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zposvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, char* equed, double* s, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_dposvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* af, lapack_int * ldaf, char* equed, double* s, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_sposvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* af, lapack_int * ldaf, char* equed, float* s, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zposvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, char* equed, double* s, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_cposvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, char* equed, float* s, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_sppsv(char* uplo, lapack_int * n, lapack_int * nrhs, float* ap, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dppsv(char* uplo, lapack_int * n, lapack_int * nrhs, double* ap, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cppsv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * ap, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zppsv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * ap, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sppsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, float* ap, float* afp, char* equed, float* s, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dppsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, double* ap, double* afp, char* equed, double* s, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cppsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * ap, lapack_complex_float * afp, char* equed, float* s, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zppsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * ap, lapack_complex_double * afp, char* equed, double* s, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_spbsv(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, float* ab, lapack_int * ldab, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dpbsv(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, double* ab, lapack_int * ldab, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cpbsv(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zpbsv(char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_spbsvx(char* fact, char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, float* ab, lapack_int * ldab, float* afb, lapack_int * ldafb, char* equed, float* s, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dpbsvx(char* fact, char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, double* ab, lapack_int * ldab, double* afb, lapack_int * ldafb, char* equed, double* s, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cpbsvx(char* fact, char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * afb, lapack_int * ldafb, char* equed, float* s, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zpbsvx(char* fact, char* uplo, lapack_int * n, lapack_int * kd, lapack_int * nrhs, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * afb, lapack_int * ldafb, char* equed, double* s, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sptsv(lapack_int * n, lapack_int * nrhs, float* d, float* e, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dptsv(lapack_int * n, lapack_int * nrhs, double* d, double* e, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cptsv(lapack_int * n, lapack_int * nrhs, float* d, lapack_complex_float * e, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zptsv(lapack_int * n, lapack_int * nrhs, double* d, lapack_complex_double * e, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sptsvx(char* fact, lapack_int * n, lapack_int * nrhs, const float* d, const float* e, float* df, float* ef, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * info);
void LAPACK_dptsvx(char* fact, lapack_int * n, lapack_int * nrhs, const double* d, const double* e, double* df, double* ef, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * info);
void LAPACK_cptsvx(char* fact, lapack_int * n, lapack_int * nrhs, const float* d, const lapack_complex_float * e, float* df, lapack_complex_float * ef, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zptsvx(char* fact, lapack_int * n, lapack_int * nrhs, const double* d, const lapack_complex_double * e, double* df, lapack_complex_double * ef, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_ssysv(char* uplo, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, lapack_int * ipiv, float* b, lapack_int * ldb, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dsysv(char* uplo, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, lapack_int * ipiv, double* b, lapack_int * ldb, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_csysv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zsysv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_ssysvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, float* af, lapack_int * ldaf, lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dsysvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, double* af, lapack_int * ldaf, lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_csysvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zsysvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_dsysvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* af, lapack_int * ldaf, lapack_int * ipiv, char* equed, double* s, double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ssysvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* af, lapack_int * ldaf, lapack_int * ipiv, char* equed, float* s, float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_zsysvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, double* s, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_csysvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, float* s, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_chesv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zhesv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_chesvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zhesvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_zhesvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, double* s, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* rpvgrw, double* berr, lapack_int * n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, lapack_int * nparams, double* params, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_chesvxx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * af, lapack_int * ldaf, lapack_int * ipiv, char* equed, float* s, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* rpvgrw, float* berr, lapack_int * n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, lapack_int * nparams, float* params, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_sspsv(char* uplo, lapack_int * n, lapack_int * nrhs, float* ap, lapack_int * ipiv, float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dspsv(char* uplo, lapack_int * n, lapack_int * nrhs, double* ap, lapack_int * ipiv, double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_cspsv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * ap, lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zspsv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * ap, lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sspsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const float* ap, float* afp, lapack_int * ipiv, const float* b, lapack_int * ldb, float* x, lapack_int * ldx, float* rcond, float* ferr, float* berr, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dspsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const double* ap, double* afp, lapack_int * ipiv, const double* b, lapack_int * ldb, double* x, lapack_int * ldx, double* rcond, double* ferr, double* berr, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cspsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, lapack_complex_float * afp, lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zspsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, lapack_complex_double * afp, lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_chpsv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_float * ap, lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zhpsv(char* uplo, lapack_int * n, lapack_int * nrhs, lapack_complex_double * ap, lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_chpsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * ap, lapack_complex_float * afp, lapack_int * ipiv, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * x, lapack_int * ldx, float* rcond, float* ferr, float* berr, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zhpsvx(char* fact, char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * ap, lapack_complex_double * afp, lapack_int * ipiv, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * x, lapack_int * ldx, double* rcond, double* ferr, double* berr, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sgeqrf(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgeqrf(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgeqrf(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgeqrf(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgeqpf(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, lapack_int * jpvt, float* tau, float* work, lapack_int * info);
void LAPACK_dgeqpf(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, lapack_int * jpvt, double* tau, double* work, lapack_int * info);
void LAPACK_cgeqpf(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * jpvt, lapack_complex_float * tau, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgeqpf(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * jpvt, lapack_complex_double * tau, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sgeqp3(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, lapack_int * jpvt, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgeqp3(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, lapack_int * jpvt, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgeqp3(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * jpvt, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zgeqp3(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * jpvt, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_sorgqr(lapack_int * m, lapack_int * n, lapack_int * k, float* a, lapack_int * lda, const float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorgqr(lapack_int * m, lapack_int * n, lapack_int * k, double* a, lapack_int * lda, const double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormqr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormqr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cungqr(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zungqr(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmqr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmqr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgelqf(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgelqf(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgelqf(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgelqf(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sorglq(lapack_int * m, lapack_int * n, lapack_int * k, float* a, lapack_int * lda, const float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorglq(lapack_int * m, lapack_int * n, lapack_int * k, double* a, lapack_int * lda, const double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormlq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormlq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunglq(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunglq(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmlq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmlq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgeqlf(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgeqlf(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgeqlf(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgeqlf(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sorgql(lapack_int * m, lapack_int * n, lapack_int * k, float* a, lapack_int * lda, const float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorgql(lapack_int * m, lapack_int * n, lapack_int * k, double* a, lapack_int * lda, const double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cungql(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zungql(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormql(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormql(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmql(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmql(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgerqf(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgerqf(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgerqf(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgerqf(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sorgrq(lapack_int * m, lapack_int * n, lapack_int * k, float* a, lapack_int * lda, const float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorgrq(lapack_int * m, lapack_int * n, lapack_int * k, double* a, lapack_int * lda, const double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cungrq(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zungrq(lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormrq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormrq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmrq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmrq(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_stzrzf(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dtzrzf(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_ctzrzf(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_ztzrzf(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormrz(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormrz(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmrz(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmrz(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sggqrf(lapack_int * n, lapack_int * m, lapack_int * p, float* a, lapack_int * lda, float* taua, float* b, lapack_int * ldb, float* taub, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dggqrf(lapack_int * n, lapack_int * m, lapack_int * p, double* a, lapack_int * lda, double* taua, double* b, lapack_int * ldb, double* taub, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cggqrf(lapack_int * n, lapack_int * m, lapack_int * p, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * taua, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * taub, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zggqrf(lapack_int * n, lapack_int * m, lapack_int * p, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * taua, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * taub, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sggrqf(lapack_int * m, lapack_int * p, lapack_int * n, float* a, lapack_int * lda, float* taua, float* b, lapack_int * ldb, float* taub, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dggrqf(lapack_int * m, lapack_int * p, lapack_int * n, double* a, lapack_int * lda, double* taua, double* b, lapack_int * ldb, double* taub, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cggrqf(lapack_int * m, lapack_int * p, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * taua, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * taub, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zggrqf(lapack_int * m, lapack_int * p, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * taua, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * taub, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgebrd(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* d, float* e, float* tauq, float* taup, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgebrd(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* d, double* e, double* tauq, double* taup, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgebrd(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* d, float* e, lapack_complex_float * tauq, lapack_complex_float * taup, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgebrd(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* d, double* e, lapack_complex_double * tauq, lapack_complex_double * taup, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgbbrd(char* vect, lapack_int * m, lapack_int * n, lapack_int * ncc, lapack_int * kl, lapack_int * ku, float* ab, lapack_int * ldab, float* d, float* e, float* q, lapack_int * ldq, float* pt, lapack_int * ldpt, float* c, lapack_int * ldc, float* work, lapack_int * info);
void LAPACK_dgbbrd(char* vect, lapack_int * m, lapack_int * n, lapack_int * ncc, lapack_int * kl, lapack_int * ku, double* ab, lapack_int * ldab, double* d, double* e, double* q, lapack_int * ldq, double* pt, lapack_int * ldpt, double* c, lapack_int * ldc, double* work, lapack_int * info);
void LAPACK_cgbbrd(char* vect, lapack_int * m, lapack_int * n, lapack_int * ncc, lapack_int * kl, lapack_int * ku, lapack_complex_float * ab, lapack_int * ldab, float* d, float* e, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * pt, lapack_int * ldpt, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zgbbrd(char* vect, lapack_int * m, lapack_int * n, lapack_int * ncc, lapack_int * kl, lapack_int * ku, lapack_complex_double * ab, lapack_int * ldab, double* d, double* e, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * pt, lapack_int * ldpt, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sorgbr(char* vect, lapack_int * m, lapack_int * n, lapack_int * k, float* a, lapack_int * lda, const float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorgbr(char* vect, lapack_int * m, lapack_int * n, lapack_int * k, double* a, lapack_int * lda, const double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormbr(char* vect, char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormbr(char* vect, char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cungbr(char* vect, lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zungbr(char* vect, lapack_int * m, lapack_int * n, lapack_int * k, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmbr(char* vect, char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmbr(char* vect, char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sbdsqr(char* uplo, lapack_int * n, lapack_int * ncvt, lapack_int * nru, lapack_int * ncc, float* d, float* e, float* vt, lapack_int * ldvt, float* u, lapack_int * ldu, float* c, lapack_int * ldc, float* work, lapack_int * info);
void LAPACK_dbdsqr(char* uplo, lapack_int * n, lapack_int * ncvt, lapack_int * nru, lapack_int * ncc, double* d, double* e, double* vt, lapack_int * ldvt, double* u, lapack_int * ldu, double* c, lapack_int * ldc, double* work, lapack_int * info);
void LAPACK_cbdsqr(char* uplo, lapack_int * n, lapack_int * ncvt, lapack_int * nru, lapack_int * ncc, float* d, float* e, lapack_complex_float * vt, lapack_int * ldvt, lapack_complex_float * u, lapack_int * ldu, lapack_complex_float * c, lapack_int * ldc, float* work, lapack_int * info);
void LAPACK_zbdsqr(char* uplo, lapack_int * n, lapack_int * ncvt, lapack_int * nru, lapack_int * ncc, double* d, double* e, lapack_complex_double * vt, lapack_int * ldvt, lapack_complex_double * u, lapack_int * ldu, lapack_complex_double * c, lapack_int * ldc, double* work, lapack_int * info);
void LAPACK_sbdsdc(char* uplo, char* compq, lapack_int * n, float* d, float* e, float* u, lapack_int * ldu, float* vt, lapack_int * ldvt, float* q, lapack_int * iq, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dbdsdc(char* uplo, char* compq, lapack_int * n, double* d, double* e, double* u, lapack_int * ldu, double* vt, lapack_int * ldvt, double* q, lapack_int * iq, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_ssytrd(char* uplo, lapack_int * n, float* a, lapack_int * lda, float* d, float* e, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dsytrd(char* uplo, lapack_int * n, double* a, lapack_int * lda, double* d, double* e, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sorgtr(char* uplo, lapack_int * n, float* a, lapack_int * lda, const float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorgtr(char* uplo, lapack_int * n, double* a, lapack_int * lda, const double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_chetrd(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* d, float* e, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zhetrd(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* d, double* e, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_cungtr(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zungtr(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_ssptrd(char* uplo, lapack_int * n, float* ap, float* d, float* e, float* tau, lapack_int * info);
void LAPACK_dsptrd(char* uplo, lapack_int * n, double* ap, double* d, double* e, double* tau, lapack_int * info);
void LAPACK_sopgtr(char* uplo, lapack_int * n, const float* ap, const float* tau, float* q, lapack_int * ldq, float* work, lapack_int * info);
void LAPACK_dopgtr(char* uplo, lapack_int * n, const double* ap, const double* tau, double* q, lapack_int * ldq, double* work, lapack_int * info);
void LAPACK_sopmtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const float* ap, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * info);
void LAPACK_dopmtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const double* ap, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * info);
void LAPACK_chptrd(char* uplo, lapack_int * n, lapack_complex_float * ap, float* d, float* e, lapack_complex_float * tau, lapack_int * info);
void LAPACK_zhptrd(char* uplo, lapack_int * n, lapack_complex_double * ap, double* d, double* e, lapack_complex_double * tau, lapack_int * info);
void LAPACK_cupgtr(char* uplo, lapack_int * n, const lapack_complex_float * ap, const lapack_complex_float * tau, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * work, lapack_int * info);
void LAPACK_zupgtr(char* uplo, lapack_int * n, const lapack_complex_double * ap, const lapack_complex_double * tau, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * work, lapack_int * info);
void LAPACK_cupmtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const lapack_complex_float * ap, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * info);
void LAPACK_zupmtr(char* side, char* uplo, char* trans, lapack_int * m, lapack_int * n, const lapack_complex_double * ap, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * info);
void LAPACK_ssbtrd(char* vect, char* uplo, lapack_int * n, lapack_int * kd, float* ab, lapack_int * ldab, float* d, float* e, float* q, lapack_int * ldq, float* work, lapack_int * info);
void LAPACK_dsbtrd(char* vect, char* uplo, lapack_int * n, lapack_int * kd, double* ab, lapack_int * ldab, double* d, double* e, double* q, lapack_int * ldq, double* work, lapack_int * info);
void LAPACK_chbtrd(char* vect, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_float * ab, lapack_int * ldab, float* d, float* e, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * work, lapack_int * info);
void LAPACK_zhbtrd(char* vect, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_double * ab, lapack_int * ldab, double* d, double* e, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * work, lapack_int * info);
void LAPACK_ssterf(lapack_int * n, float* d, float* e, lapack_int * info);
void LAPACK_dsterf(lapack_int * n, double* d, double* e, lapack_int * info);
void LAPACK_ssteqr(char* compz, lapack_int * n, float* d, float* e, float* z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_dsteqr(char* compz, lapack_int * n, double* d, double* e, double* z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_csteqr(char* compz, lapack_int * n, float* d, float* e, lapack_complex_float * z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_zsteqr(char* compz, lapack_int * n, double* d, double* e, lapack_complex_double * z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_sstemr(char* jobz, char* range, lapack_int * n, float* d, float* e, float* vl, float* vu, lapack_int * il, lapack_int * iu, lapack_int * m, float* w, float* z, lapack_int * ldz, lapack_int * nzc, lapack_int * isuppz, lapack_logical * tryrac, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dstemr(char* jobz, char* range, lapack_int * n, double* d, double* e, double* vl, double* vu, lapack_int * il, lapack_int * iu, lapack_int * m, double* w, double* z, lapack_int * ldz, lapack_int * nzc, lapack_int * isuppz, lapack_logical * tryrac, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_cstemr(char* jobz, char* range, lapack_int * n, float* d, float* e, float* vl, float* vu, lapack_int * il, lapack_int * iu, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_int * nzc, lapack_int * isuppz, lapack_logical * tryrac, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zstemr(char* jobz, char* range, lapack_int * n, double* d, double* e, double* vl, double* vu, lapack_int * il, lapack_int * iu, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_int * nzc, lapack_int * isuppz, lapack_logical * tryrac, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_sstedc(char* compz, lapack_int * n, float* d, float* e, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dstedc(char* compz, lapack_int * n, double* d, double* e, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_cstedc(char* compz, lapack_int * n, float* d, float* e, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zstedc(char* compz, lapack_int * n, double* d, double* e, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_sstegr(char* jobz, char* range, lapack_int * n, float* d, float* e, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, lapack_int * isuppz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dstegr(char* jobz, char* range, lapack_int * n, double* d, double* e, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, lapack_int * isuppz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_cstegr(char* jobz, char* range, lapack_int * n, float* d, float* e, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_int * isuppz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zstegr(char* jobz, char* range, lapack_int * n, double* d, double* e, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_int * isuppz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_spteqr(char* compz, lapack_int * n, float* d, float* e, float* z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_dpteqr(char* compz, lapack_int * n, double* d, double* e, double* z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_cpteqr(char* compz, lapack_int * n, float* d, float* e, lapack_complex_float * z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_zpteqr(char* compz, lapack_int * n, double* d, double* e, lapack_complex_double * z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_sstebz(char* range, char* order, lapack_int * n, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, const float* d, const float* e, lapack_int * m, lapack_int * nsplit, float* w, lapack_int * iblock, lapack_int * isplit, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dstebz(char* range, char* order, lapack_int * n, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, const double* d, const double* e, lapack_int * m, lapack_int * nsplit, double* w, lapack_int * iblock, lapack_int * isplit, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_sstein(lapack_int * n, const float* d, const float* e, lapack_int * m, const float* w, const lapack_int * iblock, const lapack_int * isplit, float* z, lapack_int * ldz, float* work, lapack_int * iwork, lapack_int * ifailv, lapack_int * info);
void LAPACK_dstein(lapack_int * n, const double* d, const double* e, lapack_int * m, const double* w, const lapack_int * iblock, const lapack_int * isplit, double* z, lapack_int * ldz, double* work, lapack_int * iwork, lapack_int * ifailv, lapack_int * info);
void LAPACK_cstein(lapack_int * n, const float* d, const float* e, lapack_int * m, const float* w, const lapack_int * iblock, const lapack_int * isplit, lapack_complex_float * z, lapack_int * ldz, float* work, lapack_int * iwork, lapack_int * ifailv, lapack_int * info);
void LAPACK_zstein(lapack_int * n, const double* d, const double* e, lapack_int * m, const double* w, const lapack_int * iblock, const lapack_int * isplit, lapack_complex_double * z, lapack_int * ldz, double* work, lapack_int * iwork, lapack_int * ifailv, lapack_int * info);
void LAPACK_sdisna(char* job, lapack_int * m, lapack_int * n, const float* d, float* sep, lapack_int * info);
void LAPACK_ddisna(char* job, lapack_int * m, lapack_int * n, const double* d, double* sep, lapack_int * info);
void LAPACK_ssygst(lapack_int * itype, char* uplo, lapack_int * n, float* a, lapack_int * lda, const float* b, lapack_int * ldb, lapack_int * info);
void LAPACK_dsygst(lapack_int * itype, char* uplo, lapack_int * n, double* a, lapack_int * lda, const double* b, lapack_int * ldb, lapack_int * info);
void LAPACK_chegst(lapack_int * itype, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * b, lapack_int * ldb, lapack_int * info);
void LAPACK_zhegst(lapack_int * itype, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * b, lapack_int * ldb, lapack_int * info);
void LAPACK_sspgst(lapack_int * itype, char* uplo, lapack_int * n, float* ap, const float* bp, lapack_int * info);
void LAPACK_dspgst(lapack_int * itype, char* uplo, lapack_int * n, double* ap, const double* bp, lapack_int * info);
void LAPACK_chpgst(lapack_int * itype, char* uplo, lapack_int * n, lapack_complex_float * ap, const lapack_complex_float * bp, lapack_int * info);
void LAPACK_zhpgst(lapack_int * itype, char* uplo, lapack_int * n, lapack_complex_double * ap, const lapack_complex_double * bp, lapack_int * info);
void LAPACK_ssbgst(char* vect, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, float* ab, lapack_int * ldab, const float* bb, lapack_int * ldbb, float* x, lapack_int * ldx, float* work, lapack_int * info);
void LAPACK_dsbgst(char* vect, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, double* ab, lapack_int * ldab, const double* bb, lapack_int * ldbb, double* x, lapack_int * ldx, double* work, lapack_int * info);
void LAPACK_chbgst(char* vect, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_float * ab, lapack_int * ldab, const lapack_complex_float * bb, lapack_int * ldbb, lapack_complex_float * x, lapack_int * ldx, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zhbgst(char* vect, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_double * ab, lapack_int * ldab, const lapack_complex_double * bb, lapack_int * ldbb, lapack_complex_double * x, lapack_int * ldx, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_spbstf(char* uplo, lapack_int * n, lapack_int * kb, float* bb, lapack_int * ldbb, lapack_int * info);
void LAPACK_dpbstf(char* uplo, lapack_int * n, lapack_int * kb, double* bb, lapack_int * ldbb, lapack_int * info);
void LAPACK_cpbstf(char* uplo, lapack_int * n, lapack_int * kb, lapack_complex_float * bb, lapack_int * ldbb, lapack_int * info);
void LAPACK_zpbstf(char* uplo, lapack_int * n, lapack_int * kb, lapack_complex_double * bb, lapack_int * ldbb, lapack_int * info);
void LAPACK_sgehrd(lapack_int * n, lapack_int * ilo, lapack_int * ihi, float* a, lapack_int * lda, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgehrd(lapack_int * n, lapack_int * ilo, lapack_int * ihi, double* a, lapack_int * lda, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgehrd(lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgehrd(lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sorghr(lapack_int * n, lapack_int * ilo, lapack_int * ihi, float* a, lapack_int * lda, const float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorghr(lapack_int * n, lapack_int * ilo, lapack_int * ihi, double* a, lapack_int * lda, const double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sormhr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const float* a, lapack_int * lda, const float* tau, float* c, lapack_int * ldc, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dormhr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const double* a, lapack_int * lda, const double* tau, double* c, lapack_int * ldc, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunghr(lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunghr(lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_cunmhr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zunmhr(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgebal(char* job, lapack_int * n, float* a, lapack_int * lda, lapack_int * ilo, lapack_int * ihi, float* scale, lapack_int * info);
void LAPACK_dgebal(char* job, lapack_int * n, double* a, lapack_int * lda, lapack_int * ilo, lapack_int * ihi, double* scale, lapack_int * info);
void LAPACK_cgebal(char* job, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * ilo, lapack_int * ihi, float* scale, lapack_int * info);
void LAPACK_zgebal(char* job, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * ilo, lapack_int * ihi, double* scale, lapack_int * info);
void LAPACK_sgebak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const float* scale, lapack_int * m, float* v, lapack_int * ldv, lapack_int * info);
void LAPACK_dgebak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const double* scale, lapack_int * m, double* v, lapack_int * ldv, lapack_int * info);
void LAPACK_cgebak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const float* scale, lapack_int * m, lapack_complex_float * v, lapack_int * ldv, lapack_int * info);
void LAPACK_zgebak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const double* scale, lapack_int * m, lapack_complex_double * v, lapack_int * ldv, lapack_int * info);
void LAPACK_shseqr(char* job, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, float* h, lapack_int * ldh, float* wr, float* wi, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dhseqr(char* job, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, double* h, lapack_int * ldh, double* wr, double* wi, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_chseqr(char* job, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_float * h, lapack_int * ldh, lapack_complex_float * w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zhseqr(char* job, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_double * h, lapack_int * ldh, lapack_complex_double * w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_shsein(char* job, char* eigsrc, char* initv, lapack_logical * select, lapack_int * n, const float* h, lapack_int * ldh, float* wr, const float* wi, float* vl, lapack_int * ldvl, float* vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, float* work, lapack_int * ifaill, lapack_int * ifailr, lapack_int * info);
void LAPACK_dhsein(char* job, char* eigsrc, char* initv, lapack_logical * select, lapack_int * n, const double* h, lapack_int * ldh, double* wr, const double* wi, double* vl, lapack_int * ldvl, double* vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, double* work, lapack_int * ifaill, lapack_int * ifailr, lapack_int * info);
void LAPACK_chsein(char* job, char* eigsrc, char* initv, const lapack_logical * select, lapack_int * n, const lapack_complex_float * h, lapack_int * ldh, lapack_complex_float * w, lapack_complex_float * vl, lapack_int * ldvl, lapack_complex_float * vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, lapack_complex_float * work, float* rwork, lapack_int * ifaill, lapack_int * ifailr, lapack_int * info);
void LAPACK_zhsein(char* job, char* eigsrc, char* initv, const lapack_logical * select, lapack_int * n, const lapack_complex_double * h, lapack_int * ldh, lapack_complex_double * w, lapack_complex_double * vl, lapack_int * ldvl, lapack_complex_double * vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, lapack_complex_double * work, double* rwork, lapack_int * ifaill, lapack_int * ifailr, lapack_int * info);
void LAPACK_strevc(char* side, char* howmny, lapack_logical * select, lapack_int * n, const float* t, lapack_int * ldt, float* vl, lapack_int * ldvl, float* vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, float* work, lapack_int * info);
void LAPACK_dtrevc(char* side, char* howmny, lapack_logical * select, lapack_int * n, const double* t, lapack_int * ldt, double* vl, lapack_int * ldvl, double* vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, double* work, lapack_int * info);
void LAPACK_ctrevc(char* side, char* howmny, const lapack_logical * select, lapack_int * n, lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * vl, lapack_int * ldvl, lapack_complex_float * vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztrevc(char* side, char* howmny, const lapack_logical * select, lapack_int * n, lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * vl, lapack_int * ldvl, lapack_complex_double * vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_strsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const float* t, lapack_int * ldt, const float* vl, lapack_int * ldvl, const float* vr, lapack_int * ldvr, float* s, float* sep, lapack_int * mm, lapack_int * m, float* work, lapack_int * ldwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dtrsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const double* t, lapack_int * ldt, const double* vl, lapack_int * ldvl, const double* vr, lapack_int * ldvr, double* s, double* sep, lapack_int * mm, lapack_int * m, double* work, lapack_int * ldwork, lapack_int * iwork, lapack_int * info);
void LAPACK_ctrsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const lapack_complex_float * t, lapack_int * ldt, const lapack_complex_float * vl, lapack_int * ldvl, const lapack_complex_float * vr, lapack_int * ldvr, float* s, float* sep, lapack_int * mm, lapack_int * m, lapack_complex_float * work, lapack_int * ldwork, float* rwork, lapack_int * info);
void LAPACK_ztrsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const lapack_complex_double * t, lapack_int * ldt, const lapack_complex_double * vl, lapack_int * ldvl, const lapack_complex_double * vr, lapack_int * ldvr, double* s, double* sep, lapack_int * mm, lapack_int * m, lapack_complex_double * work, lapack_int * ldwork, double* rwork, lapack_int * info);
void LAPACK_strexc(char* compq, lapack_int * n, float* t, lapack_int * ldt, float* q, lapack_int * ldq, lapack_int * ifst, lapack_int * ilst, float* work, lapack_int * info);
void LAPACK_dtrexc(char* compq, lapack_int * n, double* t, lapack_int * ldt, double* q, lapack_int * ldq, lapack_int * ifst, lapack_int * ilst, double* work, lapack_int * info);
void LAPACK_ctrexc(char* compq, lapack_int * n, lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * q, lapack_int * ldq, lapack_int * ifst, lapack_int * ilst, lapack_int * info);
void LAPACK_ztrexc(char* compq, lapack_int * n, lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * q, lapack_int * ldq, lapack_int * ifst, lapack_int * ilst, lapack_int * info);
void LAPACK_strsen(char* job, char* compq, const lapack_logical * select, lapack_int * n, float* t, lapack_int * ldt, float* q, lapack_int * ldq, float* wr, float* wi, lapack_int * m, float* s, float* sep, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dtrsen(char* job, char* compq, const lapack_logical * select, lapack_int * n, double* t, lapack_int * ldt, double* q, lapack_int * ldq, double* wr, double* wi, lapack_int * m, double* s, double* sep, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_ctrsen(char* job, char* compq, const lapack_logical * select, lapack_int * n, lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * w, lapack_int * m, float* s, float* sep, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_ztrsen(char* job, char* compq, const lapack_logical * select, lapack_int * n, lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * w, lapack_int * m, double* s, double* sep, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_strsyl(char* trana, char* tranb, lapack_int * isgn, lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, const float* b, lapack_int * ldb, float* c, lapack_int * ldc, float* scale, lapack_int * info);
void LAPACK_dtrsyl(char* trana, char* tranb, lapack_int * isgn, lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, const double* b, lapack_int * ldb, double* c, lapack_int * ldc, double* scale, lapack_int * info);
void LAPACK_ctrsyl(char* trana, char* tranb, lapack_int * isgn, lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * c, lapack_int * ldc, float* scale, lapack_int * info);
void LAPACK_ztrsyl(char* trana, char* tranb, lapack_int * isgn, lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * c, lapack_int * ldc, double* scale, lapack_int * info);
void LAPACK_sgghrd(char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* q, lapack_int * ldq, float* z, lapack_int * ldz, lapack_int * info);
void LAPACK_dgghrd(char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* q, lapack_int * ldq, double* z, lapack_int * ldz, lapack_int * info);
void LAPACK_cgghrd(char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * z, lapack_int * ldz, lapack_int * info);
void LAPACK_zgghrd(char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * z, lapack_int * ldz, lapack_int * info);
void LAPACK_sggbal(char* job, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* work, lapack_int * info);
void LAPACK_dggbal(char* job, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* work, lapack_int * info);
void LAPACK_cggbal(char* job, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* work, lapack_int * info);
void LAPACK_zggbal(char* job, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* work, lapack_int * info);
void LAPACK_sggbak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const float* lscale, const float* rscale, lapack_int * m, float* v, lapack_int * ldv, lapack_int * info);
void LAPACK_dggbak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const double* lscale, const double* rscale, lapack_int * m, double* v, lapack_int * ldv, lapack_int * info);
void LAPACK_cggbak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const float* lscale, const float* rscale, lapack_int * m, lapack_complex_float * v, lapack_int * ldv, lapack_int * info);
void LAPACK_zggbak(char* job, char* side, lapack_int * n, lapack_int * ilo, lapack_int * ihi, const double* lscale, const double* rscale, lapack_int * m, lapack_complex_double * v, lapack_int * ldv, lapack_int * info);
void LAPACK_shgeqz(char* job, char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, float* h, lapack_int * ldh, float* t, lapack_int * ldt, float* alphar, float* alphai, float* beta, float* q, lapack_int * ldq, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dhgeqz(char* job, char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, double* h, lapack_int * ldh, double* t, lapack_int * ldt, double* alphar, double* alphai, double* beta, double* q, lapack_int * ldq, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_chgeqz(char* job, char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_float * h, lapack_int * ldh, lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zhgeqz(char* job, char* compq, char* compz, lapack_int * n, lapack_int * ilo, lapack_int * ihi, lapack_complex_double * h, lapack_int * ldh, lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_stgevc(char* side, char* howmny, const lapack_logical * select, lapack_int * n, const float* s, lapack_int * lds, const float* p, lapack_int * ldp, float* vl, lapack_int * ldvl, float* vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, float* work, lapack_int * info);
void LAPACK_dtgevc(char* side, char* howmny, const lapack_logical * select, lapack_int * n, const double* s, lapack_int * lds, const double* p, lapack_int * ldp, double* vl, lapack_int * ldvl, double* vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, double* work, lapack_int * info);
void LAPACK_ctgevc(char* side, char* howmny, const lapack_logical * select, lapack_int * n, const lapack_complex_float * s, lapack_int * lds, const lapack_complex_float * p, lapack_int * ldp, lapack_complex_float * vl, lapack_int * ldvl, lapack_complex_float * vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_ztgevc(char* side, char* howmny, const lapack_logical * select, lapack_int * n, const lapack_complex_double * s, lapack_int * lds, const lapack_complex_double * p, lapack_int * ldp, lapack_complex_double * vl, lapack_int * ldvl, lapack_complex_double * vr, lapack_int * ldvr, lapack_int * mm, lapack_int * m, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_stgexc(lapack_logical * wantq, lapack_logical * wantz, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* q, lapack_int * ldq, float* z, lapack_int * ldz, lapack_int * ifst, lapack_int * ilst, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dtgexc(lapack_logical * wantq, lapack_logical * wantz, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* q, lapack_int * ldq, double* z, lapack_int * ldz, lapack_int * ifst, lapack_int * ilst, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_ctgexc(lapack_logical * wantq, lapack_logical * wantz, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * z, lapack_int * ldz, lapack_int * ifst, lapack_int * ilst, lapack_int * info);
void LAPACK_ztgexc(lapack_logical * wantq, lapack_logical * wantz, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * z, lapack_int * ldz, lapack_int * ifst, lapack_int * ilst, lapack_int * info);
void LAPACK_stgsen(lapack_int * ijob, lapack_logical * wantq, lapack_logical * wantz, const lapack_logical * select, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* alphar, float* alphai, float* beta, float* q, lapack_int * ldq, float* z, lapack_int * ldz, lapack_int * m, float* pl, float* pr, float* dif, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dtgsen(lapack_int * ijob, lapack_logical * wantq, lapack_logical * wantz, const lapack_logical * select, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* alphar, double* alphai, double* beta, double* q, lapack_int * ldq, double* z, lapack_int * ldz, lapack_int * m, double* pl, double* pr, double* dif, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_ctgsen(lapack_int * ijob, lapack_logical * wantq, lapack_logical * wantz, const lapack_logical * select, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * z, lapack_int * ldz, lapack_int * m, float* pl, float* pr, float* dif, lapack_complex_float * work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_ztgsen(lapack_int * ijob, lapack_logical * wantq, lapack_logical * wantz, const lapack_logical * select, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * z, lapack_int * ldz, lapack_int * m, double* pl, double* pr, double* dif, lapack_complex_double * work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_stgsyl(char* trans, lapack_int * ijob, lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, const float* b, lapack_int * ldb, float* c, lapack_int * ldc, const float* d, lapack_int * ldd, const float* e, lapack_int * lde, float* f, lapack_int * ldf, float* scale, float* dif, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dtgsyl(char* trans, lapack_int * ijob, lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, const double* b, lapack_int * ldb, double* c, lapack_int * ldc, const double* d, lapack_int * ldd, const double* e, lapack_int * lde, double* f, lapack_int * ldf, double* scale, double* dif, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_ctgsyl(char* trans, lapack_int * ijob, lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * c, lapack_int * ldc, const lapack_complex_float * d, lapack_int * ldd, const lapack_complex_float * e, lapack_int * lde, lapack_complex_float * f, lapack_int * ldf, float* scale, float* dif, lapack_complex_float * work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_ztgsyl(char* trans, lapack_int * ijob, lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * c, lapack_int * ldc, const lapack_complex_double * d, lapack_int * ldd, const lapack_complex_double * e, lapack_int * lde, lapack_complex_double * f, lapack_int * ldf, double* scale, double* dif, lapack_complex_double * work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_stgsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const float* a, lapack_int * lda, const float* b, lapack_int * ldb, const float* vl, lapack_int * ldvl, const float* vr, lapack_int * ldvr, float* s, float* dif, lapack_int * mm, lapack_int * m, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dtgsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const double* a, lapack_int * lda, const double* b, lapack_int * ldb, const double* vl, lapack_int * ldvl, const double* vr, lapack_int * ldvr, double* s, double* dif, lapack_int * mm, lapack_int * m, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_ctgsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, const lapack_complex_float * b, lapack_int * ldb, const lapack_complex_float * vl, lapack_int * ldvl, const lapack_complex_float * vr, lapack_int * ldvr, float* s, float* dif, lapack_int * mm, lapack_int * m, lapack_complex_float * work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_ztgsna(char* job, char* howmny, const lapack_logical * select, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, const lapack_complex_double * b, lapack_int * ldb, const lapack_complex_double * vl, lapack_int * ldvl, const lapack_complex_double * vr, lapack_int * ldvr, double* s, double* dif, lapack_int * mm, lapack_int * m, lapack_complex_double * work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_sggsvp(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* tola, float* tolb, lapack_int * k, lapack_int * l, float* u, lapack_int * ldu, float* v, lapack_int * ldv, float* q, lapack_int * ldq, lapack_int * iwork, float* tau, float* work, lapack_int * info);
void LAPACK_dggsvp(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* tola, double* tolb, lapack_int * k, lapack_int * l, double* u, lapack_int * ldu, double* v, lapack_int * ldv, double* q, lapack_int * ldq, lapack_int * iwork, double* tau, double* work, lapack_int * info);
void LAPACK_cggsvp(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* tola, float* tolb, lapack_int * k, lapack_int * l, lapack_complex_float * u, lapack_int * ldu, lapack_complex_float * v, lapack_int * ldv, lapack_complex_float * q, lapack_int * ldq, lapack_int * iwork, float* rwork, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * info);
void LAPACK_zggsvp(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* tola, double* tolb, lapack_int * k, lapack_int * l, lapack_complex_double * u, lapack_int * ldu, lapack_complex_double * v, lapack_int * ldv, lapack_complex_double * q, lapack_int * ldq, lapack_int * iwork, double* rwork, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * info);
void LAPACK_stgsja(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, lapack_int * k, lapack_int * l, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* tola, float* tolb, float* alpha, float* beta, float* u, lapack_int * ldu, float* v, lapack_int * ldv, float* q, lapack_int * ldq, float* work, lapack_int * ncycle, lapack_int * info);
void LAPACK_dtgsja(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, lapack_int * k, lapack_int * l, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* tola, double* tolb, double* alpha, double* beta, double* u, lapack_int * ldu, double* v, lapack_int * ldv, double* q, lapack_int * ldq, double* work, lapack_int * ncycle, lapack_int * info);
void LAPACK_ctgsja(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, lapack_int * k, lapack_int * l, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* tola, float* tolb, float* alpha, float* beta, lapack_complex_float * u, lapack_int * ldu, lapack_complex_float * v, lapack_int * ldv, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * work, lapack_int * ncycle, lapack_int * info);
void LAPACK_ztgsja(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * p, lapack_int * n, lapack_int * k, lapack_int * l, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* tola, double* tolb, double* alpha, double* beta, lapack_complex_double * u, lapack_int * ldu, lapack_complex_double * v, lapack_int * ldv, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * work, lapack_int * ncycle, lapack_int * info);
void LAPACK_sgels(char* trans, lapack_int * m, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgels(char* trans, lapack_int * m, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgels(char* trans, lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgels(char* trans, lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgelsy(lapack_int * m, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* b, lapack_int * ldb, lapack_int * jpvt, float* rcond, lapack_int * rank, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgelsy(lapack_int * m, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* b, lapack_int * ldb, lapack_int * jpvt, double* rcond, lapack_int * rank, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgelsy(lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_int * jpvt, float* rcond, lapack_int * rank, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zgelsy(lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_int * jpvt, double* rcond, lapack_int * rank, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_sgelss(lapack_int * m, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* s, float* rcond, lapack_int * rank, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgelss(lapack_int * m, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* s, double* rcond, lapack_int * rank, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgelss(lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* s, float* rcond, lapack_int * rank, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zgelss(lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* s, double* rcond, lapack_int * rank, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_sgelsd(lapack_int * m, lapack_int * n, lapack_int * nrhs, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* s, float* rcond, lapack_int * rank, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dgelsd(lapack_int * m, lapack_int * n, lapack_int * nrhs, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* s, double* rcond, lapack_int * rank, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_cgelsd(lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* s, float* rcond, lapack_int * rank, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * iwork, lapack_int * info);
void LAPACK_zgelsd(lapack_int * m, lapack_int * n, lapack_int * nrhs, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* s, double* rcond, lapack_int * rank, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * iwork, lapack_int * info);
void LAPACK_sgglse(lapack_int * m, lapack_int * n, lapack_int * p, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* c, float* d, float* x, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgglse(lapack_int * m, lapack_int * n, lapack_int * p, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* c, double* d, double* x, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgglse(lapack_int * m, lapack_int * n, lapack_int * p, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * c, lapack_complex_float * d, lapack_complex_float * x, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgglse(lapack_int * m, lapack_int * n, lapack_int * p, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * c, lapack_complex_double * d, lapack_complex_double * x, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_sggglm(lapack_int * n, lapack_int * m, lapack_int * p, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* d, float* x, float* y, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dggglm(lapack_int * n, lapack_int * m, lapack_int * p, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* d, double* x, double* y, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cggglm(lapack_int * n, lapack_int * m, lapack_int * p, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * d, lapack_complex_float * x, lapack_complex_float * y, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zggglm(lapack_int * n, lapack_int * m, lapack_int * p, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * d, lapack_complex_double * x, lapack_complex_double * y, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_ssyev(char* jobz, char* uplo, lapack_int * n, float* a, lapack_int * lda, float* w, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dsyev(char* jobz, char* uplo, lapack_int * n, double* a, lapack_int * lda, double* w, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cheev(char* jobz, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* w, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zheev(char* jobz, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* w, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_ssyevd(char* jobz, char* uplo, lapack_int * n, float* a, lapack_int * lda, float* w, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dsyevd(char* jobz, char* uplo, lapack_int * n, double* a, lapack_int * lda, double* w, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_cheevd(char* jobz, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* w, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zheevd(char* jobz, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* w, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_ssyevx(char* jobz, char* range, char* uplo, lapack_int * n, float* a, lapack_int * lda, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_dsyevx(char* jobz, char* range, char* uplo, lapack_int * n, double* a, lapack_int * lda, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_cheevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_zheevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_ssyevr(char* jobz, char* range, char* uplo, lapack_int * n, float* a, lapack_int * lda, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, lapack_int * isuppz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dsyevr(char* jobz, char* range, char* uplo, lapack_int * n, double* a, lapack_int * lda, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, lapack_int * isuppz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_cheevr(char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_int * isuppz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zheevr(char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_int * isuppz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_sspev(char* jobz, char* uplo, lapack_int * n, float* ap, float* w, float* z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_dspev(char* jobz, char* uplo, lapack_int * n, double* ap, double* w, double* z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_chpev(char* jobz, char* uplo, lapack_int * n, lapack_complex_float * ap, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zhpev(char* jobz, char* uplo, lapack_int * n, lapack_complex_double * ap, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sspevd(char* jobz, char* uplo, lapack_int * n, float* ap, float* w, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dspevd(char* jobz, char* uplo, lapack_int * n, double* ap, double* w, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_chpevd(char* jobz, char* uplo, lapack_int * n, lapack_complex_float * ap, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zhpevd(char* jobz, char* uplo, lapack_int * n, lapack_complex_double * ap, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_sspevx(char* jobz, char* range, char* uplo, lapack_int * n, float* ap, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, float* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_dspevx(char* jobz, char* range, char* uplo, lapack_int * n, double* ap, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, double* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_chpevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_float * ap, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_zhpevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_double * ap, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_ssbev(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, float* ab, lapack_int * ldab, float* w, float* z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_dsbev(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, double* ab, lapack_int * ldab, double* w, double* z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_chbev(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_float * ab, lapack_int * ldab, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zhbev(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_double * ab, lapack_int * ldab, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_ssbevd(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, float* ab, lapack_int * ldab, float* w, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dsbevd(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, double* ab, lapack_int * ldab, double* w, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_chbevd(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_float * ab, lapack_int * ldab, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zhbevd(char* jobz, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_double * ab, lapack_int * ldab, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_ssbevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * kd, float* ab, lapack_int * ldab, float* q, lapack_int * ldq, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, float* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_dsbevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * kd, double* ab, lapack_int * ldab, double* q, lapack_int * ldq, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, double* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_chbevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * q, lapack_int * ldq, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_zhbevx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * kd, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * q, lapack_int * ldq, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_sstev(char* jobz, lapack_int * n, float* d, float* e, float* z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_dstev(char* jobz, lapack_int * n, double* d, double* e, double* z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_sstevd(char* jobz, lapack_int * n, float* d, float* e, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dstevd(char* jobz, lapack_int * n, double* d, double* e, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_sstevx(char* jobz, char* range, lapack_int * n, float* d, float* e, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, float* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_dstevx(char* jobz, char* range, lapack_int * n, double* d, double* e, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, double* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_sstevr(char* jobz, char* range, lapack_int * n, float* d, float* e, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, lapack_int * isuppz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dstevr(char* jobz, char* range, lapack_int * n, double* d, double* e, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, lapack_int * isuppz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_sgees(char* jobvs, char* sort, LAPACK_S_SELECT2 select, lapack_int * n, float* a, lapack_int * lda, lapack_int * sdim, float* wr, float* wi, float* vs, lapack_int * ldvs, float* work, lapack_int * lwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_dgees(char* jobvs, char* sort, LAPACK_D_SELECT2 select, lapack_int * n, double* a, lapack_int * lda, lapack_int * sdim, double* wr, double* wi, double* vs, lapack_int * ldvs, double* work, lapack_int * lwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_cgees(char* jobvs, char* sort, LAPACK_C_SELECT1 select, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * sdim, lapack_complex_float * w, lapack_complex_float * vs, lapack_int * ldvs, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_zgees(char* jobvs, char* sort, LAPACK_Z_SELECT1 select, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * sdim, lapack_complex_double * w, lapack_complex_double * vs, lapack_int * ldvs, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_sgeesx(char* jobvs, char* sort, LAPACK_S_SELECT2 select, char* sense, lapack_int * n, float* a, lapack_int * lda, lapack_int * sdim, float* wr, float* wi, float* vs, lapack_int * ldvs, float* rconde, float* rcondv, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_dgeesx(char* jobvs, char* sort, LAPACK_D_SELECT2 select, char* sense, lapack_int * n, double* a, lapack_int * lda, lapack_int * sdim, double* wr, double* wi, double* vs, lapack_int * ldvs, double* rconde, double* rcondv, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_cgeesx(char* jobvs, char* sort, LAPACK_C_SELECT1 select, char* sense, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * sdim, lapack_complex_float * w, lapack_complex_float * vs, lapack_int * ldvs, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_zgeesx(char* jobvs, char* sort, LAPACK_Z_SELECT1 select, char* sense, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * sdim, lapack_complex_double * w, lapack_complex_double * vs, lapack_int * ldvs, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_sgeev(char* jobvl, char* jobvr, lapack_int * n, float* a, lapack_int * lda, float* wr, float* wi, float* vl, lapack_int * ldvl, float* vr, lapack_int * ldvr, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgeev(char* jobvl, char* jobvr, lapack_int * n, double* a, lapack_int * lda, double* wr, double* wi, double* vl, lapack_int * ldvl, double* vr, lapack_int * ldvr, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgeev(char* jobvl, char* jobvr, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * w, lapack_complex_float * vl, lapack_int * ldvl, lapack_complex_float * vr, lapack_int * ldvr, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zgeev(char* jobvl, char* jobvr, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * w, lapack_complex_double * vl, lapack_int * ldvl, lapack_complex_double * vr, lapack_int * ldvr, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_sgeevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, float* a, lapack_int * lda, float* wr, float* wi, float* vl, lapack_int * ldvl, float* vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, float* scale, float* abnrm, float* rconde, float* rcondv, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dgeevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, double* a, lapack_int * lda, double* wr, double* wi, double* vl, lapack_int * ldvl, double* vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, double* scale, double* abnrm, double* rconde, double* rcondv, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_cgeevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * w, lapack_complex_float * vl, lapack_int * ldvl, lapack_complex_float * vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, float* scale, float* abnrm, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zgeevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * w, lapack_complex_double * vl, lapack_int * ldvl, lapack_complex_double * vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, double* scale, double* abnrm, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_sgesvd(char* jobu, char* jobvt, lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* s, float* u, lapack_int * ldu, float* vt, lapack_int * ldvt, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgesvd(char* jobu, char* jobvt, lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* s, double* u, lapack_int * ldu, double* vt, lapack_int * ldvt, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgesvd(char* jobu, char* jobvt, lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* s, lapack_complex_float * u, lapack_int * ldu, lapack_complex_float * vt, lapack_int * ldvt, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zgesvd(char* jobu, char* jobvt, lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* s, lapack_complex_double * u, lapack_int * ldu, lapack_complex_double * vt, lapack_int * ldvt, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_sgesdd(char* jobz, lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* s, float* u, lapack_int * ldu, float* vt, lapack_int * ldvt, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dgesdd(char* jobz, lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* s, double* u, lapack_int * ldu, double* vt, lapack_int * ldvt, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_cgesdd(char* jobz, lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, float* s, lapack_complex_float * u, lapack_int * ldu, lapack_complex_float * vt, lapack_int * ldvt, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * iwork, lapack_int * info);
void LAPACK_zgesdd(char* jobz, lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, double* s, lapack_complex_double * u, lapack_int * ldu, lapack_complex_double * vt, lapack_int * ldvt, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dgejsv(char* joba, char* jobu, char* jobv, char* jobr, char* jobt, char* jobp, lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* sva, double* u, lapack_int * ldu, double* v, lapack_int * ldv, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_sgejsv(char* joba, char* jobu, char* jobv, char* jobr, char* jobt, char* jobp, lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* sva, float* u, lapack_int * ldu, float* v, lapack_int * ldv, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dgesvj(char* joba, char* jobu, char* jobv, lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* sva, lapack_int * mv, double* v, lapack_int * ldv, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sgesvj(char* joba, char* jobu, char* jobv, lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* sva, lapack_int * mv, float* v, lapack_int * ldv, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sggsvd(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * n, lapack_int * p, lapack_int * k, lapack_int * l, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* alpha, float* beta, float* u, lapack_int * ldu, float* v, lapack_int * ldv, float* q, lapack_int * ldq, float* work, lapack_int * iwork, lapack_int * info);
void LAPACK_dggsvd(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * n, lapack_int * p, lapack_int * k, lapack_int * l, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* alpha, double* beta, double* u, lapack_int * ldu, double* v, lapack_int * ldv, double* q, lapack_int * ldq, double* work, lapack_int * iwork, lapack_int * info);
void LAPACK_cggsvd(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * n, lapack_int * p, lapack_int * k, lapack_int * l, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* alpha, float* beta, lapack_complex_float * u, lapack_int * ldu, lapack_complex_float * v, lapack_int * ldv, lapack_complex_float * q, lapack_int * ldq, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * info);
void LAPACK_zggsvd(char* jobu, char* jobv, char* jobq, lapack_int * m, lapack_int * n, lapack_int * p, lapack_int * k, lapack_int * l, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* alpha, double* beta, lapack_complex_double * u, lapack_int * ldu, lapack_complex_double * v, lapack_int * ldv, lapack_complex_double * q, lapack_int * ldq, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * info);
void LAPACK_ssygv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* w, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dsygv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* w, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_chegv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* w, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zhegv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* w, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_ssygvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* w, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dsygvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* w, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_chegvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* w, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zhegvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* w, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_ssygvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_dsygvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_chegvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_zhegvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_sspgv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, float* ap, float* bp, float* w, float* z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_dspgv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, double* ap, double* bp, double* w, double* z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_chpgv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_float * ap, lapack_complex_float * bp, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zhpgv(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_double * ap, lapack_complex_double * bp, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_sspgvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, float* ap, float* bp, float* w, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dspgvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, double* ap, double* bp, double* w, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_chpgvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_float * ap, lapack_complex_float * bp, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zhpgvd(lapack_int * itype, char* jobz, char* uplo, lapack_int * n, lapack_complex_double * ap, lapack_complex_double * bp, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_sspgvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, float* ap, float* bp, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, float* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_dspgvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, double* ap, double* bp, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, double* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_chpgvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_float * ap, lapack_complex_float * bp, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_zhpgvx(lapack_int * itype, char* jobz, char* range, char* uplo, lapack_int * n, lapack_complex_double * ap, lapack_complex_double * bp, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_ssbgv(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, float* ab, lapack_int * ldab, float* bb, lapack_int * ldbb, float* w, float* z, lapack_int * ldz, float* work, lapack_int * info);
void LAPACK_dsbgv(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, double* ab, lapack_int * ldab, double* bb, lapack_int * ldbb, double* w, double* z, lapack_int * ldz, double* work, lapack_int * info);
void LAPACK_chbgv(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * bb, lapack_int * ldbb, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * info);
void LAPACK_zhbgv(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * bb, lapack_int * ldbb, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * info);
void LAPACK_ssbgvd(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, float* ab, lapack_int * ldab, float* bb, lapack_int * ldbb, float* w, float* z, lapack_int * ldz, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_dsbgvd(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, double* ab, lapack_int * ldab, double* bb, lapack_int * ldbb, double* w, double* z, lapack_int * ldz, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_chbgvd(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * bb, lapack_int * ldbb, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_zhbgvd(char* jobz, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * bb, lapack_int * ldbb, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * liwork, lapack_int * info);
void LAPACK_ssbgvx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, float* ab, lapack_int * ldab, float* bb, lapack_int * ldbb, float* q, lapack_int * ldq, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, float* z, lapack_int * ldz, float* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_dsbgvx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, double* ab, lapack_int * ldab, double* bb, lapack_int * ldbb, double* q, lapack_int * ldq, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, double* z, lapack_int * ldz, double* work, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_chbgvx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_float * ab, lapack_int * ldab, lapack_complex_float * bb, lapack_int * ldbb, lapack_complex_float * q, lapack_int * ldq, float* vl, float* vu, lapack_int * il, lapack_int * iu, float* abstol, lapack_int * m, float* w, lapack_complex_float * z, lapack_int * ldz, lapack_complex_float * work, float* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_zhbgvx(char* jobz, char* range, char* uplo, lapack_int * n, lapack_int * ka, lapack_int * kb, lapack_complex_double * ab, lapack_int * ldab, lapack_complex_double * bb, lapack_int * ldbb, lapack_complex_double * q, lapack_int * ldq, double* vl, double* vu, lapack_int * il, lapack_int * iu, double* abstol, lapack_int * m, double* w, lapack_complex_double * z, lapack_int * ldz, lapack_complex_double * work, double* rwork, lapack_int * iwork, lapack_int * ifail, lapack_int * info);
void LAPACK_sgges(char* jobvsl, char* jobvsr, char* sort, LAPACK_S_SELECT3 selctg, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, lapack_int * sdim, float* alphar, float* alphai, float* beta, float* vsl, lapack_int * ldvsl, float* vsr, lapack_int * ldvsr, float* work, lapack_int * lwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_dgges(char* jobvsl, char* jobvsr, char* sort, LAPACK_D_SELECT3 selctg, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, lapack_int * sdim, double* alphar, double* alphai, double* beta, double* vsl, lapack_int * ldvsl, double* vsr, lapack_int * ldvsr, double* work, lapack_int * lwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_cgges(char* jobvsl, char* jobvsr, char* sort, LAPACK_C_SELECT2 selctg, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_int * sdim, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vsl, lapack_int * ldvsl, lapack_complex_float * vsr, lapack_int * ldvsr, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_zgges(char* jobvsl, char* jobvsr, char* sort, LAPACK_Z_SELECT2 selctg, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_int * sdim, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vsl, lapack_int * ldvsl, lapack_complex_double * vsr, lapack_int * ldvsr, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_sggesx(char* jobvsl, char* jobvsr, char* sort, LAPACK_S_SELECT3 selctg, char* sense, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, lapack_int * sdim, float* alphar, float* alphai, float* beta, float* vsl, lapack_int * ldvsl, float* vsr, lapack_int * ldvsr, float* rconde, float* rcondv, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_dggesx(char* jobvsl, char* jobvsr, char* sort, LAPACK_D_SELECT3 selctg, char* sense, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, lapack_int * sdim, double* alphar, double* alphai, double* beta, double* vsl, lapack_int * ldvsl, double* vsr, lapack_int * ldvsr, double* rconde, double* rcondv, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * liwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_cggesx(char* jobvsl, char* jobvsr, char* sort, LAPACK_C_SELECT2 selctg, char* sense, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_int * sdim, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vsl, lapack_int * ldvsl, lapack_complex_float * vsr, lapack_int * ldvsr, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * iwork, lapack_int * liwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_zggesx(char* jobvsl, char* jobvsr, char* sort, LAPACK_Z_SELECT2 selctg, char* sense, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_int * sdim, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vsl, lapack_int * ldvsl, lapack_complex_double * vsr, lapack_int * ldvsr, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * iwork, lapack_int * liwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_sggev(char* jobvl, char* jobvr, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* alphar, float* alphai, float* beta, float* vl, lapack_int * ldvl, float* vr, lapack_int * ldvr, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dggev(char* jobvl, char* jobvr, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* alphar, double* alphai, double* beta, double* vl, lapack_int * ldvl, double* vr, lapack_int * ldvr, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cggev(char* jobvl, char* jobvr, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vl, lapack_int * ldvl, lapack_complex_float * vr, lapack_int * ldvr, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * info);
void LAPACK_zggev(char* jobvl, char* jobvr, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vl, lapack_int * ldvl, lapack_complex_double * vr, lapack_int * ldvr, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * info);
void LAPACK_sggevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* alphar, float* alphai, float* beta, float* vl, lapack_int * ldvl, float* vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv, float* work, lapack_int * lwork, lapack_int * iwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_dggevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* alphar, double* alphai, double* beta, double* vl, lapack_int * ldvl, double* vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv, double* work, lapack_int * lwork, lapack_int * iwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_cggevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * vl, lapack_int * ldvl, lapack_complex_float * vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * iwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_zggevx(char* balanc, char* jobvl, char* jobvr, char* sense, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * vl, lapack_int * ldvl, lapack_complex_double * vr, lapack_int * ldvr, lapack_int * ilo, lapack_int * ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * iwork, lapack_logical * bwork, lapack_int * info);
void LAPACK_dsfrk(char* transr, char* uplo, char* trans, lapack_int * n, lapack_int * k, double* alpha, const double* a, lapack_int * lda, double* beta, double* c);
void LAPACK_ssfrk(char* transr, char* uplo, char* trans, lapack_int * n, lapack_int * k, float* alpha, const float* a, lapack_int * lda, float* beta, float* c);
void LAPACK_zhfrk(char* transr, char* uplo, char* trans, lapack_int * n, lapack_int * k, double* alpha, const lapack_complex_double * a, lapack_int * lda, double* beta, lapack_complex_double * c);
void LAPACK_chfrk(char* transr, char* uplo, char* trans, lapack_int * n, lapack_int * k, float* alpha, const lapack_complex_float * a, lapack_int * lda, float* beta, lapack_complex_float * c);
void LAPACK_dtfsm(char* transr, char* side, char* uplo, char* trans, char* diag, lapack_int * m, lapack_int * n, double* alpha, const double* a, double* b, lapack_int * ldb);
void LAPACK_stfsm(char* transr, char* side, char* uplo, char* trans, char* diag, lapack_int * m, lapack_int * n, float* alpha, const float* a, float* b, lapack_int * ldb);
void LAPACK_ztfsm(char* transr, char* side, char* uplo, char* trans, char* diag, lapack_int * m, lapack_int * n, lapack_complex_double * alpha, const lapack_complex_double * a, lapack_complex_double * b, lapack_int * ldb);
void LAPACK_ctfsm(char* transr, char* side, char* uplo, char* trans, char* diag, lapack_int * m, lapack_int * n, lapack_complex_float * alpha, const lapack_complex_float * a, lapack_complex_float * b, lapack_int * ldb);
void LAPACK_dtfttp(char* transr, char* uplo, lapack_int * n, const double* arf, double* ap, lapack_int * info);
void LAPACK_stfttp(char* transr, char* uplo, lapack_int * n, const float* arf, float* ap, lapack_int * info);
void LAPACK_ztfttp(char* transr, char* uplo, lapack_int * n, const lapack_complex_double * arf, lapack_complex_double * ap, lapack_int * info);
void LAPACK_ctfttp(char* transr, char* uplo, lapack_int * n, const lapack_complex_float * arf, lapack_complex_float * ap, lapack_int * info);
void LAPACK_dtfttr(char* transr, char* uplo, lapack_int * n, const double* arf, double* a, lapack_int * lda, lapack_int * info);
void LAPACK_stfttr(char* transr, char* uplo, lapack_int * n, const float* arf, float* a, lapack_int * lda, lapack_int * info);
void LAPACK_ztfttr(char* transr, char* uplo, lapack_int * n, const lapack_complex_double * arf, lapack_complex_double * a, lapack_int * lda, lapack_int * info);
void LAPACK_ctfttr(char* transr, char* uplo, lapack_int * n, const lapack_complex_float * arf, lapack_complex_float * a, lapack_int * lda, lapack_int * info);
void LAPACK_dtpttf(char* transr, char* uplo, lapack_int * n, const double* ap, double* arf, lapack_int * info);
void LAPACK_stpttf(char* transr, char* uplo, lapack_int * n, const float* ap, float* arf, lapack_int * info);
void LAPACK_ztpttf(char* transr, char* uplo, lapack_int * n, const lapack_complex_double * ap, lapack_complex_double * arf, lapack_int * info);
void LAPACK_ctpttf(char* transr, char* uplo, lapack_int * n, const lapack_complex_float * ap, lapack_complex_float * arf, lapack_int * info);
void LAPACK_dtpttr(char* uplo, lapack_int * n, const double* ap, double* a, lapack_int * lda, lapack_int * info);
void LAPACK_stpttr(char* uplo, lapack_int * n, const float* ap, float* a, lapack_int * lda, lapack_int * info);
void LAPACK_ztpttr(char* uplo, lapack_int * n, const lapack_complex_double * ap, lapack_complex_double * a, lapack_int * lda, lapack_int * info);
void LAPACK_ctpttr(char* uplo, lapack_int * n, const lapack_complex_float * ap, lapack_complex_float * a, lapack_int * lda, lapack_int * info);
void LAPACK_dtrttf(char* transr, char* uplo, lapack_int * n, const double* a, lapack_int * lda, double* arf, lapack_int * info);
void LAPACK_strttf(char* transr, char* uplo, lapack_int * n, const float* a, lapack_int * lda, float* arf, lapack_int * info);
void LAPACK_ztrttf(char* transr, char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, lapack_complex_double * arf, lapack_int * info);
void LAPACK_ctrttf(char* transr, char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, lapack_complex_float * arf, lapack_int * info);
void LAPACK_dtrttp(char* uplo, lapack_int * n, const double* a, lapack_int * lda, double* ap, lapack_int * info);
void LAPACK_strttp(char* uplo, lapack_int * n, const float* a, lapack_int * lda, float* ap, lapack_int * info);
void LAPACK_ztrttp(char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, lapack_complex_double * ap, lapack_int * info);
void LAPACK_ctrttp(char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, lapack_complex_float * ap, lapack_int * info);
void LAPACK_sgeqrfp(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dgeqrfp(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_cgeqrfp(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zgeqrfp(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_clacgv(lapack_int * n, lapack_complex_float * x, lapack_int * incx);
void LAPACK_zlacgv(lapack_int * n, lapack_complex_double * x, lapack_int * incx);
void LAPACK_slarnv(lapack_int * idist, lapack_int * iseed, lapack_int * n, float* x);
void LAPACK_dlarnv(lapack_int * idist, lapack_int * iseed, lapack_int * n, double* x);
void LAPACK_clarnv(lapack_int * idist, lapack_int * iseed, lapack_int * n, lapack_complex_float * x);
void LAPACK_zlarnv(lapack_int * idist, lapack_int * iseed, lapack_int * n, lapack_complex_double * x);
void LAPACK_sgeqr2(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * info);
void LAPACK_dgeqr2(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * info);
void LAPACK_cgeqr2(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * info);
void LAPACK_zgeqr2(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * info);
void LAPACK_slacpy(char* uplo, lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, float* b, lapack_int * ldb);
void LAPACK_dlacpy(char* uplo, lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, double* b, lapack_int * ldb);
void LAPACK_clacpy(char* uplo, lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb);
void LAPACK_zlacpy(char* uplo, lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb);
void LAPACK_sgetf2(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_dgetf2(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_cgetf2(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_zgetf2(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * ipiv, lapack_int * info);
void LAPACK_slaswp(lapack_int * n, float* a, lapack_int * lda, lapack_int * k1, lapack_int * k2, const lapack_int * ipiv, lapack_int * incx);
void LAPACK_dlaswp(lapack_int * n, double* a, lapack_int * lda, lapack_int * k1, lapack_int * k2, const lapack_int * ipiv, lapack_int * incx);
void LAPACK_claswp(lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * k1, lapack_int * k2, const lapack_int * ipiv, lapack_int * incx);
void LAPACK_zlaswp(lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * k1, lapack_int * k2, const lapack_int * ipiv, lapack_int * incx);
float LAPACK_slange(char* norm, lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, float* work);
double LAPACK_dlange(char* norm, lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, double* work);
float LAPACK_clange(char* norm, lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* work);
double LAPACK_zlange(char* norm, lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* work);
float LAPACK_clanhe(char* norm, char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* work);
double LAPACK_zlanhe(char* norm, char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* work);
float LAPACK_slansy(char* norm, char* uplo, lapack_int * n, const float* a, lapack_int * lda, float* work);
double LAPACK_dlansy(char* norm, char* uplo, lapack_int * n, const double* a, lapack_int * lda, double* work);
float LAPACK_clansy(char* norm, char* uplo, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* work);
double LAPACK_zlansy(char* norm, char* uplo, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* work);
float LAPACK_slantr(char* norm, char* uplo, char* diag, lapack_int * m, lapack_int * n, const float* a, lapack_int * lda, float* work);
double LAPACK_dlantr(char* norm, char* uplo, char* diag, lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, double* work);
float LAPACK_clantr(char* norm, char* uplo, char* diag, lapack_int * m, lapack_int * n, const lapack_complex_float * a, lapack_int * lda, float* work);
double LAPACK_zlantr(char* norm, char* uplo, char* diag, lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, double* work);
float LAPACK_slamch(char* cmach);
double LAPACK_dlamch(char* cmach);
void LAPACK_sgelq2(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* tau, float* work, lapack_int * info);
void LAPACK_dgelq2(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* tau, double* work, lapack_int * info);
void LAPACK_cgelq2(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * tau, lapack_complex_float * work, lapack_int * info);
void LAPACK_zgelq2(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * tau, lapack_complex_double * work, lapack_int * info);
void LAPACK_slarfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, const float* v, lapack_int * ldv, const float* t, lapack_int * ldt, float* c, lapack_int * ldc, float* work, lapack_int * ldwork);
void LAPACK_dlarfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, const double* v, lapack_int * ldv, const double* t, lapack_int * ldt, double* c, lapack_int * ldc, double* work, lapack_int * ldwork);
void LAPACK_clarfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_float * v, lapack_int * ldv, const lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * ldwork);
void LAPACK_zlarfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, const lapack_complex_double * v, lapack_int * ldv, const lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * ldwork);
void LAPACK_slarfg(lapack_int * n, float* alpha, float* x, lapack_int * incx, float* tau);
void LAPACK_dlarfg(lapack_int * n, double* alpha, double* x, lapack_int * incx, double* tau);
void LAPACK_clarfg(lapack_int * n, lapack_complex_float * alpha, lapack_complex_float * x, lapack_int * incx, lapack_complex_float * tau);
void LAPACK_zlarfg(lapack_int * n, lapack_complex_double * alpha, lapack_complex_double * x, lapack_int * incx, lapack_complex_double * tau);
void LAPACK_slarft(char* direct, char* storev, lapack_int * n, lapack_int * k, const float* v, lapack_int * ldv, const float* tau, float* t, lapack_int * ldt);
void LAPACK_dlarft(char* direct, char* storev, lapack_int * n, lapack_int * k, const double* v, lapack_int * ldv, const double* tau, double* t, lapack_int * ldt);
void LAPACK_clarft(char* direct, char* storev, lapack_int * n, lapack_int * k, const lapack_complex_float * v, lapack_int * ldv, const lapack_complex_float * tau, lapack_complex_float * t, lapack_int * ldt);
void LAPACK_zlarft(char* direct, char* storev, lapack_int * n, lapack_int * k, const lapack_complex_double * v, lapack_int * ldv, const lapack_complex_double * tau, lapack_complex_double * t, lapack_int * ldt);
void LAPACK_slarfx(char* side, lapack_int * m, lapack_int * n, const float* v, float* tau, float* c, lapack_int * ldc, float* work);
void LAPACK_dlarfx(char* side, lapack_int * m, lapack_int * n, const double* v, double* tau, double* c, lapack_int * ldc, double* work);
void LAPACK_clarfx(char* side, lapack_int * m, lapack_int * n, const lapack_complex_float * v, lapack_complex_float * tau, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work);
void LAPACK_zlarfx(char* side, lapack_int * m, lapack_int * n, const lapack_complex_double * v, lapack_complex_double * tau, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work);
void LAPACK_slatms(lapack_int * m, lapack_int * n, char* dist, lapack_int * iseed, char* sym, float* d, lapack_int * mode, float* cond, float* dmax, lapack_int * kl, lapack_int * ku, char* pack, float* a, lapack_int * lda, float* work, lapack_int * info);
void LAPACK_dlatms(lapack_int * m, lapack_int * n, char* dist, lapack_int * iseed, char* sym, double* d, lapack_int * mode, double* cond, double* dmax, lapack_int * kl, lapack_int * ku, char* pack, double* a, lapack_int * lda, double* work, lapack_int * info);
void LAPACK_clatms(lapack_int * m, lapack_int * n, char* dist, lapack_int * iseed, char* sym, float* d, lapack_int * mode, float* cond, float* dmax, lapack_int * kl, lapack_int * ku, char* pack, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * work, lapack_int * info);
void LAPACK_zlatms(lapack_int * m, lapack_int * n, char* dist, lapack_int * iseed, char* sym, double* d, lapack_int * mode, double* cond, double* dmax, lapack_int * kl, lapack_int * ku, char* pack, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * work, lapack_int * info);
void LAPACK_slag2d(lapack_int * m, lapack_int * n, const float* sa, lapack_int * ldsa, double* a, lapack_int * lda, lapack_int * info);
void LAPACK_dlag2s(lapack_int * m, lapack_int * n, const double* a, lapack_int * lda, float* sa, lapack_int * ldsa, lapack_int * info);
void LAPACK_clag2z(lapack_int * m, lapack_int * n, const lapack_complex_float * sa, lapack_int * ldsa, lapack_complex_double * a, lapack_int * lda, lapack_int * info);
void LAPACK_zlag2c(lapack_int * m, lapack_int * n, const lapack_complex_double * a, lapack_int * lda, lapack_complex_float * sa, lapack_int * ldsa, lapack_int * info);
void LAPACK_slauum(char* uplo, lapack_int * n, float* a, lapack_int * lda, lapack_int * info);
void LAPACK_dlauum(char* uplo, lapack_int * n, double* a, lapack_int * lda, lapack_int * info);
void LAPACK_clauum(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_int * info);
void LAPACK_zlauum(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_int * info);
void LAPACK_slagge(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const float* d, float* a, lapack_int * lda, lapack_int * iseed, float* work, lapack_int * info);
void LAPACK_dlagge(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const double* d, double* a, lapack_int * lda, lapack_int * iseed, double* work, lapack_int * info);
void LAPACK_clagge(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const float* d, lapack_complex_float * a, lapack_int * lda, lapack_int * iseed, lapack_complex_float * work, lapack_int * info);
void LAPACK_zlagge(lapack_int * m, lapack_int * n, lapack_int * kl, lapack_int * ku, const double* d, lapack_complex_double * a, lapack_int * lda, lapack_int * iseed, lapack_complex_double * work, lapack_int * info);
void LAPACK_slaset(char* uplo, lapack_int * m, lapack_int * n, float* alpha, float* beta, float* a, lapack_int * lda);
void LAPACK_dlaset(char* uplo, lapack_int * m, lapack_int * n, double* alpha, double* beta, double* a, lapack_int * lda);
void LAPACK_claset(char* uplo, lapack_int * m, lapack_int * n, lapack_complex_float * alpha, lapack_complex_float * beta, lapack_complex_float * a, lapack_int * lda);
void LAPACK_zlaset(char* uplo, lapack_int * m, lapack_int * n, lapack_complex_double * alpha, lapack_complex_double * beta, lapack_complex_double * a, lapack_int * lda);
void LAPACK_slasrt(char* id, lapack_int * n, float* d, lapack_int * info);
void LAPACK_dlasrt(char* id, lapack_int * n, double* d, lapack_int * info);
void LAPACK_claghe(lapack_int * n, lapack_int * k, const float* d, lapack_complex_float * a, lapack_int * lda, lapack_int * iseed, lapack_complex_float * work, lapack_int * info);
void LAPACK_zlaghe(lapack_int * n, lapack_int * k, const double* d, lapack_complex_double * a, lapack_int * lda, lapack_int * iseed, lapack_complex_double * work, lapack_int * info);
void LAPACK_slagsy(lapack_int * n, lapack_int * k, const float* d, float* a, lapack_int * lda, lapack_int * iseed, float* work, lapack_int * info);
void LAPACK_dlagsy(lapack_int * n, lapack_int * k, const double* d, double* a, lapack_int * lda, lapack_int * iseed, double* work, lapack_int * info);
void LAPACK_clagsy(lapack_int * n, lapack_int * k, const float* d, lapack_complex_float * a, lapack_int * lda, lapack_int * iseed, lapack_complex_float * work, lapack_int * info);
void LAPACK_zlagsy(lapack_int * n, lapack_int * k, const double* d, lapack_complex_double * a, lapack_int * lda, lapack_int * iseed, lapack_complex_double * work, lapack_int * info);
void LAPACK_slapmr(lapack_logical * forwrd, lapack_int * m, lapack_int * n, float* x, lapack_int * ldx, lapack_int * k);
void LAPACK_dlapmr(lapack_logical * forwrd, lapack_int * m, lapack_int * n, double* x, lapack_int * ldx, lapack_int * k);
void LAPACK_clapmr(lapack_logical * forwrd, lapack_int * m, lapack_int * n, lapack_complex_float * x, lapack_int * ldx, lapack_int * k);
void LAPACK_zlapmr(lapack_logical * forwrd, lapack_int * m, lapack_int * n, lapack_complex_double * x, lapack_int * ldx, lapack_int * k);
float LAPACK_slapy2(float* x, float* y);
double LAPACK_dlapy2(double* x, double* y);
float LAPACK_slapy3(float* x, float* y, float* z);
double LAPACK_dlapy3(double* x, double* y, double* z);
void LAPACK_slartgp(float* f, float* g, float* cs, float* sn, float* r);
void LAPACK_dlartgp(double* f, double* g, double* cs, double* sn, double* r);
void LAPACK_slartgs(float* x, float* y, float* sigma, float* cs, float* sn);
void LAPACK_dlartgs(double* x, double* y, double* sigma, double* cs, double* sn);
0
void LAPACK_cbbcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, lapack_int * m, lapack_int * p, lapack_int * q, float* theta, float* phi, lapack_complex_float * u1, lapack_int * ldu1, lapack_complex_float * u2, lapack_int * ldu2, lapack_complex_float * v1t, lapack_int * ldv1t, lapack_complex_float * v2t, lapack_int * ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e, float* rwork, lapack_int * lrwork, lapack_int * info);
void LAPACK_cheswapr(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * i1, lapack_int * i2);
void LAPACK_chetri2(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_chetri2x(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * nb, lapack_int * info);
void LAPACK_chetrs2(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * work, lapack_int * info);
void LAPACK_csyconv(char* uplo, char* way, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * info);
void LAPACK_csyswapr(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * i1, lapack_int * i2);
void LAPACK_csytri2(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_csytri2x(char* uplo, lapack_int * n, lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * nb, lapack_int * info);
void LAPACK_csytrs2(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_float * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * work, lapack_int * info);
void LAPACK_cunbdb(char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, lapack_complex_float * x11, lapack_int * ldx11, lapack_complex_float * x12, lapack_int * ldx12, lapack_complex_float * x21, lapack_int * ldx21, lapack_complex_float * x22, lapack_int * ldx22, float* theta, float* phi, lapack_complex_float * taup1, lapack_complex_float * taup2, lapack_complex_float * tauq1, lapack_complex_float * tauq2, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_cuncsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, lapack_complex_float * x11, lapack_int * ldx11, lapack_complex_float * x12, lapack_int * ldx12, lapack_complex_float * x21, lapack_int * ldx21, lapack_complex_float * x22, lapack_int * ldx22, float* theta, lapack_complex_float * u1, lapack_int * ldu1, lapack_complex_float * u2, lapack_int * ldu2, lapack_complex_float * v1t, lapack_int * ldv1t, lapack_complex_float * v2t, lapack_int * ldv2t, lapack_complex_float * work, lapack_int * lwork, float* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dbbcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, lapack_int * m, lapack_int * p, lapack_int * q, double* theta, double* phi, double* u1, lapack_int * ldu1, double* u2, lapack_int * ldu2, double* v1t, lapack_int * ldv1t, double* v2t, lapack_int * ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorbdb(char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, double* x11, lapack_int * ldx11, double* x12, lapack_int * ldx12, double* x21, lapack_int * ldx21, double* x22, lapack_int * ldx22, double* theta, double* phi, double* taup1, double* taup2, double* tauq1, double* tauq2, double* work, lapack_int * lwork, lapack_int * info);
void LAPACK_dorcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, double* x11, lapack_int * ldx11, double* x12, lapack_int * ldx12, double* x21, lapack_int * ldx21, double* x22, lapack_int * ldx22, double* theta, double* u1, lapack_int * ldu1, double* u2, lapack_int * ldu2, double* v1t, lapack_int * ldv1t, double* v2t, lapack_int * ldv2t, double* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_dsyconv(char* uplo, char* way, lapack_int * n, double* a, lapack_int * lda, const lapack_int * ipiv, double* work, lapack_int * info);
void LAPACK_dsyswapr(char* uplo, lapack_int * n, double* a, lapack_int * i1, lapack_int * i2);
void LAPACK_dsytri2(char* uplo, lapack_int * n, double* a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_dsytri2x(char* uplo, lapack_int * n, double* a, lapack_int * lda, const lapack_int * ipiv, double* work, lapack_int * nb, lapack_int * info);
void LAPACK_dsytrs2(char* uplo, lapack_int * n, lapack_int * nrhs, const double* a, lapack_int * lda, const lapack_int * ipiv, double* b, lapack_int * ldb, double* work, lapack_int * info);
void LAPACK_sbbcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, lapack_int * m, lapack_int * p, lapack_int * q, float* theta, float* phi, float* u1, lapack_int * ldu1, float* u2, lapack_int * ldu2, float* v1t, lapack_int * ldv1t, float* v2t, lapack_int * ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sorbdb(char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, float* x11, lapack_int * ldx11, float* x12, lapack_int * ldx12, float* x21, lapack_int * ldx21, float* x22, lapack_int * ldx22, float* theta, float* phi, float* taup1, float* taup2, float* tauq1, float* tauq2, float* work, lapack_int * lwork, lapack_int * info);
void LAPACK_sorcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, float* x11, lapack_int * ldx11, float* x12, lapack_int * ldx12, float* x21, lapack_int * ldx21, float* x22, lapack_int * ldx22, float* theta, float* u1, lapack_int * ldu1, float* u2, lapack_int * ldu2, float* v1t, lapack_int * ldv1t, float* v2t, lapack_int * ldv2t, float* work, lapack_int * lwork, lapack_int * iwork, lapack_int * info);
void LAPACK_ssyconv(char* uplo, char* way, lapack_int * n, float* a, lapack_int * lda, const lapack_int * ipiv, float* work, lapack_int * info);
void LAPACK_ssyswapr(char* uplo, lapack_int * n, float* a, lapack_int * i1, lapack_int * i2);
void LAPACK_ssytri2(char* uplo, lapack_int * n, float* a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_float * work, lapack_int * lwork, lapack_int * info);
void LAPACK_ssytri2x(char* uplo, lapack_int * n, float* a, lapack_int * lda, const lapack_int * ipiv, float* work, lapack_int * nb, lapack_int * info);
void LAPACK_ssytrs2(char* uplo, lapack_int * n, lapack_int * nrhs, const float* a, lapack_int * lda, const lapack_int * ipiv, float* b, lapack_int * ldb, float* work, lapack_int * info);
void LAPACK_zbbcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, lapack_int * m, lapack_int * p, lapack_int * q, double* theta, double* phi, lapack_complex_double * u1, lapack_int * ldu1, lapack_complex_double * u2, lapack_int * ldu2, lapack_complex_double * v1t, lapack_int * ldv1t, lapack_complex_double * v2t, lapack_int * ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e, double* rwork, lapack_int * lrwork, lapack_int * info);
void LAPACK_zheswapr(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * i1, lapack_int * i2);
void LAPACK_zhetri2(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zhetri2x(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * nb, lapack_int * info);
void LAPACK_zhetrs2(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * work, lapack_int * info);
void LAPACK_zsyconv(char* uplo, char* way, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * info);
void LAPACK_zsyswapr(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * i1, lapack_int * i2);
void LAPACK_zsytri2(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zsytri2x(char* uplo, lapack_int * n, lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * work, lapack_int * nb, lapack_int * info);
void LAPACK_zsytrs2(char* uplo, lapack_int * n, lapack_int * nrhs, const lapack_complex_double * a, lapack_int * lda, const lapack_int * ipiv, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * work, lapack_int * info);
void LAPACK_zunbdb(char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, lapack_complex_double * x11, lapack_int * ldx11, lapack_complex_double * x12, lapack_int * ldx12, lapack_complex_double * x21, lapack_int * ldx21, lapack_complex_double * x22, lapack_int * ldx22, double* theta, double* phi, lapack_complex_double * taup1, lapack_complex_double * taup2, lapack_complex_double * tauq1, lapack_complex_double * tauq2, lapack_complex_double * work, lapack_int * lwork, lapack_int * info);
void LAPACK_zuncsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, char* signs, lapack_int * m, lapack_int * p, lapack_int * q, lapack_complex_double * x11, lapack_int * ldx11, lapack_complex_double * x12, lapack_int * ldx12, lapack_complex_double * x21, lapack_int * ldx21, lapack_complex_double * x22, lapack_int * ldx22, double* theta, lapack_complex_double * u1, lapack_int * ldu1, lapack_complex_double * u2, lapack_int * ldu2, lapack_complex_double * v1t, lapack_int * ldv1t, lapack_complex_double * v2t, lapack_int * ldv2t, lapack_complex_double * work, lapack_int * lwork, double* rwork, lapack_int * lrwork, lapack_int * iwork, lapack_int * info);
0
void LAPACK_sgemqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * nb, const float* v, lapack_int * ldv, const float* t, lapack_int * ldt, float* c, lapack_int * ldc, float* work, lapack_int * info);
void LAPACK_dgemqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * nb, const double* v, lapack_int * ldv, const double* t, lapack_int * ldt, double* c, lapack_int * ldc, double* work, lapack_int * info);
void LAPACK_cgemqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * nb, const lapack_complex_float * v, lapack_int * ldv, const lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * c, lapack_int * ldc, lapack_complex_float * work, lapack_int * info);
void LAPACK_zgemqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * nb, const lapack_complex_double * v, lapack_int * ldv, const lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * c, lapack_int * ldc, lapack_complex_double * work, lapack_int * info);
void LAPACK_sgeqrt(lapack_int * m, lapack_int * n, lapack_int * nb, float* a, lapack_int * lda, float* t, lapack_int * ldt, float* work, lapack_int * info);
void LAPACK_dgeqrt(lapack_int * m, lapack_int * n, lapack_int * nb, double* a, lapack_int * lda, double* t, lapack_int * ldt, double* work, lapack_int * info);
void LAPACK_cgeqrt(lapack_int * m, lapack_int * n, lapack_int * nb, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * work, lapack_int * info);
void LAPACK_zgeqrt(lapack_int * m, lapack_int * n, lapack_int * nb, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * work, lapack_int * info);
void LAPACK_sgeqrt2(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* t, lapack_int * ldt, lapack_int * info);
void LAPACK_dgeqrt2(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* t, lapack_int * ldt, lapack_int * info);
void LAPACK_cgeqrt2(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * t, lapack_int * ldt, lapack_int * info);
void LAPACK_zgeqrt2(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * t, lapack_int * ldt, lapack_int * info);
void LAPACK_sgeqrt3(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* t, lapack_int * ldt, lapack_int * info);
void LAPACK_dgeqrt3(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* t, lapack_int * ldt, lapack_int * info);
void LAPACK_cgeqrt3(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * t, lapack_int * ldt, lapack_int * info);
void LAPACK_zgeqrt3(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * t, lapack_int * ldt, lapack_int * info);
void LAPACK_stpmqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, lapack_int * nb, const float* v, lapack_int * ldv, const float* t, lapack_int * ldt, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* work, lapack_int * info);
void LAPACK_dtpmqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, lapack_int * nb, const double* v, lapack_int * ldv, const double* t, lapack_int * ldt, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* work, lapack_int * info);
void LAPACK_ctpmqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, lapack_int * nb, const lapack_complex_float * v, lapack_int * ldv, const lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * work, lapack_int * info);
void LAPACK_ztpmqrt(char* side, char* trans, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, lapack_int * nb, const lapack_complex_double * v, lapack_int * ldv, const lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * work, lapack_int * info);
void LAPACK_dtpqrt(lapack_int * m, lapack_int * n, lapack_int * l, lapack_int * nb, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* t, lapack_int * ldt, double* work, lapack_int * info);
void LAPACK_ctpqrt(lapack_int * m, lapack_int * n, lapack_int * l, lapack_int * nb, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * t, lapack_complex_float * b, lapack_int * ldb, lapack_int * ldt, lapack_complex_float * work, lapack_int * info);
void LAPACK_ztpqrt(lapack_int * m, lapack_int * n, lapack_int * l, lapack_int * nb, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * work, lapack_int * info);
void LAPACK_stpqrt2(lapack_int * m, lapack_int * n, float* a, lapack_int * lda, float* b, lapack_int * ldb, float* t, lapack_int * ldt, lapack_int * info);
void LAPACK_dtpqrt2(lapack_int * m, lapack_int * n, double* a, lapack_int * lda, double* b, lapack_int * ldb, double* t, lapack_int * ldt, lapack_int * info);
void LAPACK_ctpqrt2(lapack_int * m, lapack_int * n, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, lapack_complex_float * t, lapack_int * ldt, lapack_int * info);
void LAPACK_ztpqrt2(lapack_int * m, lapack_int * n, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, lapack_complex_double * t, lapack_int * ldt, lapack_int * info);
void LAPACK_stprfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const float* v, lapack_int * ldv, const float* t, lapack_int * ldt, float* a, lapack_int * lda, float* b, lapack_int * ldb, const float* mywork, lapack_int * myldwork);
void LAPACK_dtprfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const double* v, lapack_int * ldv, const double* t, lapack_int * ldt, double* a, lapack_int * lda, double* b, lapack_int * ldb, const double* mywork, lapack_int * myldwork);
void LAPACK_ctprfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const lapack_complex_float * v, lapack_int * ldv, const lapack_complex_float * t, lapack_int * ldt, lapack_complex_float * a, lapack_int * lda, lapack_complex_float * b, lapack_int * ldb, const float* mywork, lapack_int * myldwork);
void LAPACK_ztprfb(char* side, char* trans, char* direct, char* storev, lapack_int * m, lapack_int * n, lapack_int * k, lapack_int * l, const lapack_complex_double * v, lapack_int * ldv, const lapack_complex_double * t, lapack_int * ldt, lapack_complex_double * a, lapack_int * lda, lapack_complex_double * b, lapack_int * ldb, const double* mywork, lapack_int * myldwork);
X
void LAPACK_csyr(char* uplo, lapack_int * n, lapack_complex_float * alpha, const lapack_complex_float * x, lapack_int * incx, lapack_complex_float * a, lapack_int * lda);
void LAPACK_zsyr(char* uplo, lapack_int * n, lapack_complex_double * alpha, const lapack_complex_double * x, lapack_int * incx, lapack_complex_double * a, lapack_int * lda);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

define COLAMD_DEBUG0(void);
define COLAMD_DEBUG1(void);
define COLAMD_DEBUG2(void);
define COLAMD_DEBUG3(void);
define COLAMD_DEBUG4(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Derived& analyzePattern(const MatrixType & matrix);
Derived& factorize(const MatrixType & matrix);
Derived& compute(const MatrixType & matrix);
return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return m_iparm(void);
return m_dparm(void);
check the matrix
void init(void);
Compute the ordering and the symbolic factorization
void analyzePattern(ColSpMatrix & mat);
Compute the numerical factorization
void factorize(ColSpMatrix & mat);
void compute(ColSpMatrix & mat);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

This method is an alias for zeta(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return householderQ(void);
ColPivHouseholderQR& compute(const EigenBase<InputType>&matrix);
void computeInPlace(void);
PlainObject c(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void computeInPlace(void);
PlainObject c(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

FullPivHouseholderQR& compute(const EigenBase<InputType>&matrix);
void computeInPlace(void);
RealScalar biggest(void);
PlainObject c(void);
WorkVectorType workspace(void);
return MatrixQReturnType(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void computeInPlace(void);
PlainObject c(void);
PlainObject c(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
CholMatrixType tmp(void);
CholMatrixType tmp(void);
void factorize_preordered(const CholMatrixType & a);
CholMatrixType tmp(void);
void analyzePattern_preordered(const CholMatrixType & a, bool doLDLT);
void ordering(const MatrixType & a, ConstCholMatrixPtr & pmat, CholMatrixType & ap);
return MatrixL(void);
return MatrixL(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator it(void);
count of nonzeros in column k of L for (typename CholMatrixType::InnerIterator it(ap);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

	// Auto-generated bindings for fftw3_integration

	void init(double estimatedDensity);
	void init(int mode);
	void setZero(void);
	void restart(void);
Scalar & coeffRef(Index i);
Scalar & coeff(Index i);
m_allocatedElements * sizeof(void);
else init(void);
TODO factorize the following code to reduce code generation eigen_assert(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return searchLowerIndex(void);
endif eigen_internal_assert(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator rhsIt(void);
InnerIterator lhsIt(void);
RowMajorMatrix resRow(void);
ColMajorMatrix resCol(void);
InnerIterator rhsIt(void);
InnerIterator lhsIt(void);
ColMajorLhs lhsCol(void);
ColMajorRhs rhsCol(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);
return derived(void);
SrcEvaluatorType srcEvaluator(void);
InnerIterator it(void);
InnerIterator it(void);
InnerIterator i(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EvaluatorType matEval(void);
InnerIterator it(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

IndexVector root(void);
IndexVector pp(void);
InnerIterator it(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

explicit SparseCompressedBase(const SparseCompressedBase<OtherDerived>&);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Scalar& valueRef(void);
EvalIterator i(void);
return derived(void);
EvalIterator i(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LhsEval lhsEval(void);
endif for (Index c = 0; c < rhs.cols();
	Scalar tmp(void);
	LhsInnerIterator it(void);
	LhsEval lhsEval(void);
	LhsInnerIterator it(void);
	LhsEval lhsEval(void);
	LhsInnerIterator it(void);
	LhsInnerIterator it(void);
	LhsNested lhsNested(void);
	RhsNested rhsNested(void);
	LhsNested lhsNested(void);
	RhsNested rhsNested(void);
InnerIterator it(void);
return Scalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator i(void);
Scalar res(void);
InnerIterator i(void);
InnerIterator j(void);
Scalar res(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Scalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return insert(void);
else
return insert(void);
Scalar& insert(Index row, Index col);
inline void reserve(const SizesType & reserveSizes);
return insertBackByOuterInner(void);
void setFromTriplets(const InputIterators & begin, const InputIterators & end);
void setFromTriplets(const InputIterators & begin, const InputIterators & end, DupFunctor dup_func);
return insert(IsRowMajor ? j : i, IsRowMajor ? i : j);
TODO optimize the uncompressed mode to avoid moving and allocating the data twice makeCompressed(void);
return resize(void);
return ConstDiagonalReturnType(void);
return DiagonalReturnType(void);
endif initAssignment(void);
EIGEN_DONT_INLINE Scalar& insertCompressed(Index row, Index col);
EIGEN_DONT_INLINE Scalar& insertUncompressed(Index row, Index col);
InputIterator it(void);
InputIterator it(void);
SparseMatrixType m(void);
value buffers for (Index j = 0; j < outerSize();
	OtherCopyEval otherCopyEval(void);
	InnerIterator it(void);
	InnerIterator it(void);
	return insertUncompressed(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

	// Auto-generated bindings for fftw3_integration

	return derived(void);
inline Derived& assign(const OtherDerived & other);
inline void assignGeneric(const OtherDerived & other);
InnerIterator it(void);
InnerIterator it(void);
Type selfadjointView(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

MatrixType mat(void);
InnerIterator it(void);
InnerIterator it(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LhsNested lhsNested(void);
RhsNested rhsNested(void);
LhsNested lhsNested(void);
RhsNested rhsNested(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Scalar res(void);
InnerIterator iter(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

inline Ref(const SparseMatrix<MatScalar, MatIndex>&expr);
inline Ref(const MappedSparseMatrix<MatScalar, MatIndex>&expr);
inline Ref(const SparseVector<MatScalar, MatIndex>&expr);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void permute_symm_to_symm(const MatrixType & mat, SparseMatrix<typename MatrixType::Scalar, typename MatrixType::StorageIndex>&_dest, const typename MatrixType::StorageIndex * perm = 0);
void permute_symm_to_fullsymm(const MatrixType & mat, SparseMatrix<typename MatrixType::Scalar, typename MatrixType::StorageIndex>&_dest, const typename MatrixType::StorageIndex * perm = 0);
SparseLhsTypeNested lhs_nested(void);
LhsEval lhsEval(void);
LhsIterator i(void);
Scalar res_j(void);
RhsNested rhsNested(void);
LhsNested lhsNested(void);
MatEval matEval(void);
MatIterator it(void);
MatIterator it(void);
MatEval matEval(void);
VectorI count(void);
MatIterator it(void);
MatIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return sparse_sparse_product_with_pruning_impl2(void);
InnerIterator rhsIt(void);
Iterator it(void);
ColMajorMatrixLhs colLhs(void);
ColMajorMatrixRhs colRhs(void);
RowMajorMatrixLhs rowLhs(void);
RowMajorMatrixRhs rowRhs(void);
ColMajorMatrixRhs colRhs(void);
ColMajorMatrixLhs colLhs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

operator bool(void);
return Scalar(void);
Scalar& valueRef(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

operator Op(void);
operator Op(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return coeff(IsColVector ? row : col);
return coeffRef(IsColVector ? row : col);
return insertBack(void);
return insertBackUnordered(void);
return insert(void);
endif check_template_parameters(void);
return fill(IsColVector ? r : c);
return fillrand(IsColVector ? r : c);
return insert(void);
SrcEvaluatorType srcEval(void);
InnerIterator it(void);
SrcEvaluatorType srcEval(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

code
* MatrixXd D(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LhsEval lhsEval(void);
Scalar lastVal(void);
LhsIterator it(void);
LhsEval lhsEval(void);
Scalar l_ii(void);
LhsIterator it(void);
LhsEval lhsEval(void);
LhsIterator it(void);
LhsEval lhsEval(void);
make sure the binary search is safe for partially sorted elements
LhsIterator it(void);
LhsIterator it(void);
InnerIterator rhsIt(void);
InnerIterator it(void);
Iterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

helps to detect aliasing when applying the permutations for (Index j = 0; j < B.cols();
	void simplicialfactorize(const MatrixType & matrix);
	Analyze analyzePattern(void);
	Factorize factorize(void);
	helps to detect aliasing when applying the permutations for (Index j = 0; j < B.cols();
		InnerIterator it(void);
		InnerIterator it(void);
		InnerIterator it(void);
		InnerIterator it(void);
		e reorder the matrix according to the postorder of the etree
		PermutationType post_perm(void);
		Set up pointers for integer working arrays
		IndexVector segrep(void);
		IndexVector parent(void);
		IndexVector xplore(void);
		IndexVector repfnz(void);
IndexVector panel_lsub(void);
IndexVector xprune(void);
IndexVector marker(void);
Identify initial relaxed snodes
IndexVector relax_end(void);
InnerIterator it(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Index expand(VectorType & vec, Index & length, Index nbElts, Index keep_prev, Index & num_expansions);
Index memInit(Index m, Index n, Index annz, Index lwork, Index fillratio, Index panel_size, GlobalLU_t & glu);
Index memXpand(VectorType & vec, Index & maxlen, Index nbElts, MemType memtype, Index & num_expansions);
Index snode_dfs(const Index jcol, const Index kcol, const MatrixType & mat, IndexVector & xprune, IndexVector & marker, GlobalLU_t & glu);
Index pivotL(const Index jcol, const RealScalar & diagpivotthresh, IndexVector & perm_r, IndexVector & iperm_c, Index & pivrow, GlobalLU_t & glu);
void dfs_kernel(const StorageIndex jj, IndexVector & perm_r, Index & nseg, IndexVector & panel_lsub, IndexVector & segrep, Ref<IndexVector> repfnz_col, IndexVector & xprune, Ref<IndexVector> marker, IndexVector & parent, IndexVector & xplore, GlobalLU_t & glu, Index & nextl_col, Index krow, Traits & traits);
void panel_dfs(const Index m, const Index w, const Index jcol, MatrixType & A, IndexVector & perm_r, Index & nseg, ScalarVector & dense, IndexVector & panel_lsub, IndexVector & segrep, IndexVector & repfnz, IndexVector & xprune, IndexVector & marker, IndexVector & parent, IndexVector & xplore, GlobalLU_t & glu);
void panel_bmod(const Index m, const Index w, const Index jcol, const Index nseg, ScalarVector & dense, ScalarVector & tempv, IndexVector & segrep, IndexVector & repfnz, GlobalLU_t & glu);
Index column_dfs(const Index m, const Index jcol, IndexVector & perm_r, Index maxsuper, Index & nseg, BlockIndexVector lsub_col, IndexVector & segrep, BlockIndexVector repfnz, IndexVector & xprune, IndexVector & marker, IndexVector & parent, IndexVector & xplore, GlobalLU_t & glu);
Index column_bmod(const Index jcol, const Index nseg, BlockScalarVector dense, ScalarVector & tempv, BlockIndexVector segrep, BlockIndexVector repfnz, Index fpanelc, GlobalLU_t & glu);
Index copy_to_ucol(const Index jcol, const Index nseg, IndexVector & segrep, BlockIndexVector repfnz, IndexVector & perm_r, BlockScalarVector dense, GlobalLU_t & glu);
void pruneL(const Index jcol, const IndexVector & perm_r, const Index pivrow, const Index nseg, const IndexVector & segrep, BlockIndexVector repfnz, IndexVector & xprune, GlobalLU_t & glu);
void countnz(const Index n, Index & nnzL, Index & nnzU, GlobalLU_t & glu);
void fixupL(const Index n, const IndexVector & perm_r, GlobalLU_t & glu);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

should go into ucol(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Post order etree
IndexVector inv_post(void);
Renumber etree in postorder
IndexVector iwork(void);
IndexVector et_save(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static EIGEN_DONT_INLINE void run(const Index segsize, BlockScalarVector & dense, ScalarVector & tempv, ScalarVector & lusup, Index & luptr, const Index lda, const Index nrow, IndexVector & lsub, const Index lptr, const Index no_zeros);
static EIGEN_DONT_INLINE void run(const Index /*segsize*/, BlockScalarVector & dense, ScalarVector& /*tempv*/, ScalarVector & lusup, Index & luptr, const Index lda, const Index nrow, IndexVector & lsub, const Index lptr, const Index no_zeros);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

m * sizeof(void);
m * sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator it(void);
go to the next nonzero dfs_kernel(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

diagonal index
RealScalar pivmax(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

rep irep in U(j] Index jsupno = glu.supno(jcol);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return index(void);
InnerIterator it(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void analyzePattern(const MatrixType & mat);
void factorize(const MatrixType & mat);
type matCpy(void);
Number of nonzero for the current column of R and Q
ScalarVector tval(void);
InnerIterator itp(void);
Scalar tdot(void);
InnerIterator itq(void);
InnerIterator itq(void);
columns to the end
QRMatrixType tempR(void);
other column by column for (Index j = 0; j < res.cols();
	Q * other column by column for (Index j = 0; j < res.cols();

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

		// Auto-generated bindings for fftw3_integration

		MatrixType mat(void);
		return PermutationType(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

		// Auto-generated bindings for fftw3_integration

		void factorize(const MatrixType & matrix);
void factorize(const MatrixType & matrix);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifdef EIGEN_BDCSVD_DEBUG_VERBOSE
IOFormat bdcsvdfmt(" [");
BDCSVD& compute(const MatrixType & matrix, unsigned int computationOptions);
return compute(void);
void allocate(Index rows, Index cols, unsigned int computationOptions);
void divide(Index firstCol, Index lastCol, Index firstRowW, Index firstColW, Index shift);
void computeSVDofM(Index firstCol, Index n, MatrixXr & U, VectorType & singVals, MatrixXr & V);
void computeSingVals(const ArrayRef & col0, const ArrayRef & diag, const IndicesRef & perm, VectorType & singVals, ArrayRef shifts, ArrayRef mus);
void perturbCol0(const ArrayRef & col0, const ArrayRef & diag, const IndicesRef & perm, const VectorType & singVals, const ArrayRef & shifts, const ArrayRef & mus, ArrayRef zhat);
void computeSingVecs(const ArrayRef & zhat, const ArrayRef & diag, const IndicesRef & perm, const VectorType & singVals, const ArrayRef & shifts, const ArrayRef & mus, MatrixXr & U, MatrixXr & V);
void deflation43(Index firstCol, Index shift, Index i, Index size);
void deflation44(Index firstColu, Index firstColm, Index firstRowW, Index firstColW, Index i, Index j, Index size);
void deflation(Index firstCol, Index lastCol, Index k, Index firstRowW, Index firstColW, Index shift);
void copyUV(const HouseholderU & householderU, const HouseholderV & householderV, const NaiveU & naiveU, const NaiveV & naivev);
void structured_update(Dynamic > A, const MatrixXr & B, Index n1);
static RealScalar secularEq(RealScalar x, const ArrayRef & col0, const ArrayRef & diag, const IndicesRef & perm, const ArrayRef & diagShifted, RealScalar shift);
try to deflate singular values in combined matrix deflation(void);
and mus computeSingVals(void);
Compute zhat perturbCol0(void);
endif computeSingVecs(void);
ifdef EIGEN_BDCSVD_SANITY_CHECKS assert(k == 0 || singVals[k] >= singVals[k - 1]);
ifdef EIGEN_BDCSVD_SANITY_CHECKS assert(void);
endif deflation43(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

JacobiSVD& compute(const MatrixType & matrix, unsigned int computationOptions);
return compute(void);
void allocate(Index rows, Index cols, unsigned int computationOptions);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return true if already allocated
bool allocate(Index rows, Index cols, unsigned int computationOptions);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

UpperBidiagonalization& compute(const MatrixType & matrix);
UpperBidiagonalization& computeUnblocked(const MatrixType & matrix);
ColVectorType temp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return umfpack_di_symbolic(void);
return umfpack_dl_symbolic(void);
return umfpack_di_numeric(void);
return umfpack_dl_numeric(void);
return umfpack_di_solve(void);
return umfpack_dl_solve(void);
return umfpack_di_get_lunz(void);
return umfpack_zi_get_lunz(void);
return umfpack_dl_get_lunz(void);
return umfpack_zl_get_lunz(void);
return umfpack_di_get_numeric(void);
return umfpack_zi_get_numeric(void);
return umfpack_dl_get_numeric(void);
return umfpack_zl_get_numeric(void);
return umfpack_di_get_determinant(void);
return umfpack_zi_get_determinant(void);
return umfpack_dl_get_determinant(void);
return umfpack_zl_get_determinant(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return coeff(void);
return coeffRef(void);
return coeff(void);
return coeff(void);
return coeff(void);
return coeff(void);
return coeffRef(void);
return coeffRef(void);
return coeffRef(void);
return coeffRef(void);
Assign assign(void);
Assign assign(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return nullaryExpr(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return TensorBlockDescriptor(void);
return BlockDescriptor(void);
return TensorMaterializedBlock(m_materialized_in_output ? internal::TensorBlockKind::kMaterializedInOutput : internal::TensorBlockKind::kMaterializedInScratch);
return Copy(void);
return Target(void);
TensorBlockEvaluator eval(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return coeffColMajor(void);
return coeffRowMajor(void);
return emptyBlock(void);
return TensorBlock(void);
return BroadcastBlock(void);
return BroadcastBlock(void);
Src src(void);
Dst dst(materialized_output + offset);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LhsMapper lhs(void);
RhsMapper rhs(void);
const Scalar alpha(void);
const Index resIncr(void);
initialize data mappers
LhsMapper lhs(void);
RhsMapper rhs(void);
OutputMapper output(void);
TensorContractionKernel kernel(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

the code is a bit faster with this here then at bottom of loop __syncthreads(void);
wait for shared mem packing to be done before starting computation __syncthreads(void);
i
Scalar lcol(void);
Scalar lcol(void);
Scalar lcol(void);
Scalar lcol(void);
Scalar lcol(void);
Scalar lcol(void);
Scalar lcol(void);
Scalar lcol(void);
j
Scalar rrow(void);
Scalar rrow(void);
Scalar rrow(void);
Scalar rrow(void);
Scalar rrow(void);
Scalar rrow(void);
Scalar rrow(void);
Scalar rrow(void);
block reduceMatrix(void);
wait for shared mem to be out of use __syncthreads(void);
end loop over k __syncthreads(void);
const dim3 num_blocks(void);
const dim3 block_size(void);
const dim3 num_blocks(void);
const dim3 block_size(void);
const dim3 num_blocks(void);
const dim3 block_size(void);
initialize data mappers
LhsMapper lhs(void);
RhsMapper rhs(void);
OutputMapper output(void);
else setGpuSharedMemConfig(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return loadConstant(void);
current code assumes packet size must be a multiple of 2 EIGEN_STATIC_ASSERT(packet_size % 2 == 0);
return m_base_mapper(void);
return m_base_mapper(i + m_vert_offset);
return m_base_mapper(void);
return m_base_mapper(i + m_vert_offset, j + m_horiz_offset);
return LinearMapper(void);
return LinearMapper(i + m_vert_offset, j + m_horiz_offset);
return SubMapper(void);
return VectorMapper(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return tensorMapper(void);
initialize data mappers
LhsMapper lhs(void);
RhsMapper rhs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

else pack_lhs(void);
m* n * sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EvalTo evalToTmp(void);
EvalTo evalToTmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return TensorOpCost(void);
return TensorOpCost(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Assign assign(void);
Sum sum(void);
Assign assign(void);
Difference difference(void);
Assign assign(void);
Assign assign(void);
Assign assign(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return allocate(void);
Running on the host CPU
return l1CacheSize(void);
Running single threaded on the host CPU
return l3CacheSize(void);
Running on a HIP device
return firstLevelCacheSize(void);
Running on a CUDA device
return firstLevelCacheSize(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

new GpuDeviceProperties(void);
return GetGpuDeviceProperties(void);
else EIGEN_UNUSED_VARIABLE(void);
else eigen_assert(false && "The default device should be used instead to generate kernel code");
return firstLevelCacheSize(void);
else gpu_assert(false && "The default device should be used instead to generate kernel code");

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef EIGEN_SYCL_ASYNC_EXECUTION synchronize(void);
return getPowerOfTwo(void);
else eigen_assert(void);
else EIGEN_UNUSED_VARIABLE(void);
endif callback(void);
return firstLevelCacheSize(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return allocate(void);
return l1CacheSize(void);
new Notification(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return __ldg(void);
return __ldg(void);
return loadConstant(void);
return loadConstant(void);
return m_wrapper(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Evaluator evaluator(void);
TensorBlockScratch scratch(void);
Evaluator evaluator(void);
Evaluator evaluator(void);
TensorBlockScratch scratch(void);
TensorBlockScratch scratch(void);
TensorBlockScratch scratch(void);
TensorBlockScratch scratch(void);
static void run(const Expression & expr, const GpuDevice & device);
Evaluator evaluator(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

const ComplexScalar wp(void);
ComplexScalar w(void);
ComplexScalar temp0(data[i + n2] * w);
ComplexScalar temp1(data[i + 1 + n2] * w * wp_one);
ComplexScalar temp2(data[i + 2 + n2] * w * wp_one_2);
ComplexScalar temp3(data[i + 3 + n2] * w * wp_one_3);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return coeff(void);
return coeffRef(void);
return coeff(void);
return coeff(void);
return coeff(void);
return coeff(void);
return coeffRef(void);
return coeffRef(void);
return coeffRef(void);
return coeffRef(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return conv(void);
return conv(void);
return conv(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return m_generator(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Scalar(void);
return Scalar(void);
return packetWithPossibleZero(void);
return packetWithPossibleZero(void);
return packetWithPossibleZero(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Scalar(void);
return TensorOpCost(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifdef EIGEN_GPU_COMPILE_PHASE
return __clz(void);
ifdef EIGEN_GPU_COMPILE_PHASE
return __clzll(void);
return __umulhi(void);
return __umul64hi(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return customIndices2Array(typename gen_numeric_list < Index);
static yes check(void);
static no check(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return packetColMajor(void);
return packetRowMajor(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
Every other case
return packetWithPossibleZero(void);
Every other case
return packetWithPossibleZero(void);
Every other case
return packetWithPossibleZero(void);
Every other case
return packetWithPossibleZero(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

__global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void FullReductionKernel(const S, typename S::CoeffReturnType*, unsigned int*);
__global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void ReductionInitFullReduxKernelHalfFloat(const S);
__global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void FullReductionKernelHalfFloat(const S);
__global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void InnerReductionKernelHalfFloat(const S);
__global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void InnerReductionKernel(const S, typename S::CoeffReturnType*);
__global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void OuterReductionKernel(const S, typename S::CoeffReturnType*);
Op reducer(void);
Op reducer(void);
Op reducer(void);
Op reducer(void);
return evalSubExprsIfNeededCommon(void);
Op reducer(void);
Op reducer(void);
Op reducer(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

300 gpu_assert(0 && "Shouldn't be called on unsupported device");
return atomicExch(void);
300 gpu_assert(0 && "Shouldn't be called on unsupported device");
Let the last block reset the semaphore atomicInc(gridDim.x + 1);
300 gpu_assert(0 && "Shouldn't be called on unsupported device");
300 gpu_assert(0 && "Shouldn't be called on unsupported device");

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return type(void);
return type(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return coeff(void);
return coeffRef(void);
return coeff(void);
return coeff(void);
return coeff(void);
return coeff(void);
return coeffRef(void);
return coeffRef(void);
return coeffRef(void);
return coeffRef(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return items_per_cacheline * divup(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Dimensions input_strides(void);
DimensionsMap dst_to_src_dim_map(void);
Dimensions output_strides(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

new FixedDimensions(void);
Self tmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

All the trace dimensions must have the same size eigen_assert(m_reducedDims[0] == m_reducedDims[reduced_index]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Scalar(void);
return Scalar(void);
return Scalar(void);
return packetWithPossibleZero(void);
return packetWithPossibleZero(void);
return packetWithPossibleZero(void);
return packetWithPossibleZero(void);
return packetWithPossibleZero(void);
return TensorOpCost(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void add(int one, int two, int flags = 0);
void updateGlobalFlags(int flagDiffOfSameGenerator);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Scalar value(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return act(void);
return act(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

zero sized partition eigen_plain_assert(end <= num_threads_);
return Task(void);
return Task(void);
return Steal(void);
return Steal(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Work(void);
return Work(void);
return Work(void);
return Work(void);
return Work(void);
return CalculateSize(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return SpilledLocal(void);
return SpilledLocal(void);
return SpilledLocal(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return InstType(void);
return InstType(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return MakeAutoDiffScalar(m_value * other, m_derivatives * other);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

go through child objects of second tree
Helper1 helper(void);
go through child volumes of second tree
Helper2 helper(void);
go through child volumes of second tree
Helper2 helper(void);
go through child objects of second tree
Helper1 helper(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

the recursive part of the algorithm

ObjectList tmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ArpackGeneralizedSelfAdjointEigenSolver& compute(const MatrixType & A, const MatrixType & B, Index nbrEigenvalues, std::string eigs_sigma = "LM", int options = ComputeEigenvectors, RealScalar tol = 0.0);
ArpackGeneralizedSelfAdjointEigenSolver& compute(const MatrixType & A, Index nbrEigenvalues, std::string eigs_sigma = "LM", int options = ComputeEigenvectors, RealScalar tol = 0.0);
MatrixType B(void);
InnerIterator it(void);
MatrixType AminusSigmaB(void);
void ssaupd_(int* ido, char* bmat, int* n, char* which, int* nev, float* tol, float* resid, int* ncv, float* v, int* ldv, int* iparam, int* ipntr, float* workd, float* workl, int* lworkl, int* info);
void sseupd_(int* rvec, char* All, int* select, float* d, float* z, int* ldz, float* sigma, char* bmat, int* n, char* which, int* nev, float* tol, float* resid, int* ncv, float* v, int* ldv, int* iparam, int* ipntr, float* workd, float* workl, int* lworkl, int* ierr);
void dsaupd_(int* ido, char* bmat, int* n, char* which, int* nev, double* tol, double* resid, int* ncv, double* v, int* ldv, int* iparam, int* ipntr, double* workd, double* workl, int* lworkl, int* info);
void dseupd_(int* rvec, char* All, int* select, double* d, double* z, int* ldz, double* sigma, char* bmat, int* n, char* which, int* nev, double* tol, double* resid, int* ncv, double* v, int* ldv, int* iparam, int* ipntr, double* workd, double* workl, int* lworkl, int* ierr);
static inline void applyOP(MatrixSolver & OP, const MatrixType & A, int n, Scalar * in, Scalar * out);
static inline void project(MatrixSolver & OP, int n, int k, Scalar * vecs);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return inverse(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

plusMinus* mat(void);
minusPlus* mat(void);
plusMinus* mat(void);
minusPlus* mat(void);
plusMinus* mat(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

each one takes a decimated version of the input work(void);
tmp* conj(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

DenseVector r0(void);
Initialization
DenseVector g(void);
zero diagonal
DenseVector nrs(void);
ComplexVector eig(void);
DenseMatrix matrixQ(void);
ComplexVector eig(void);
Reorder the absolute values of Schur values
DenseRealVector modulEig(void);
Extract the  Schur vectors corresponding to the smallest Ritz values
DenseMatrix Sr(void);
DenseMatrix MX(void);
DenseVector tv1(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Scalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Vector diag(void);
InnerIterator k_it(void);
InnerIterator j_it(void);
InnerIterator kj_it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return converged(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

initialize
const Index maxIters(void);
the size of the matrix
const RealScalar threshold2(void);
Initialize preconditioned Lanczos
VectorType v_old(void);
initialize v
VectorType v_new(void);
VectorType w(void);
const RealScalar beta_one(void);
Initialize other variables
RealScalar c(void);
the cosine of the Givens rotation
RealScalar c_old(void);
RealScalar s(void);
the sine of the Givens rotation
RealScalar s_old(void);
the sine of the Givens rotation
VectorType p_oold(void);
0
VectorType p(void);
0
RealScalar eta(void);
const RealScalar beta(void);
compute beta_new eigen_assert(beta_new2 >= 0.0 && "PRECONDITIONER IS NOT POSITIVE DEFINITE");

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator it(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

const Lhs1 lhs1(void);
const Rhs1 rhs1(void);
LhsInnerIterator itA(void);
RhsInnerIterator itB(void);
LhsInnerIterator itA(void);
RhsInnerIterator itB(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void lmpar2(const QRSolver & qr, const VectorType & diag, const VectorType & qtb, typename VectorType::Scalar m_delta, typename VectorType::Scalar & par, VectorType & x);
Status minimize(FVectorType & x);
Status minimizeInit(FVectorType & x);
Status minimizeOneStep(FVectorType & x);
return minimize(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

QRSolver qrfac(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

VectorType sdiag(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

FactorType R(void);
InnerIterator itk(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return ldexp(void);
static void run(const MatrixType & arg, MatrixType & U, MatrixType & V, int& squarings);
type tmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

MatrixType compute(const MatrixType & A);
MatrixType X(void);
static void run(const MatrixType & A, AtomicType & atomic, ResultType & result);
permute Schur decomposition matrix_function_permute_schur(void);
matrix function applied to T matrix_function_compute_block_atomic(void);
AtomicType atomic(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

MatrixType compute(const MatrixType & A);
else matrix_log_compute_big(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static int getPadeDegree(float normIminusT);
static int getPadeDegree(double normIminusT);
static int getPadeDegree(long double normIminusT);
static ComplexScalar computeSuperDiag(const ComplexScalar&, const ComplexScalar&, RealScalar p);
static RealScalar computeSuperDiag(RealScalar p);
void compute(ResultType & res, RealScalar p);
void split(RealScalar & p, RealScalar & intpart);
void initialize(void);
void computeIntPower(ResultType & res, RealScalar p);
void computeFracPower(ResultType & res, RealScalar p);
static void revertSchur(MaxCols > &res, const ComplexMatrix & T, const ComplexMatrix & U);
static void revertSchur(MaxCols > &res, const ComplexMatrix & T, const ComplexMatrix & U);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static void run(const MatrixType & arg, ResultType & result);
DerivedEvalType tmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return exp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm_xor_ps(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

chkder_log10e* log(void);
eps* abs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

eps* abs(void);
eps* abs(void);
eps* abs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Status solveInit(FVectorType & x);
Status solveOneStep(FVectorType & x);
Status solve(FVectorType & x);
Status solveNumericalDiffInit(FVectorType & x);
Status solveNumericalDiffOneStep(FVectorType & x);
Status solveNumericalDiff(FVectorType & x);
return solve(void);
return solveNumericalDiff(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Status minimize(FVectorType & x);
Status minimizeInit(FVectorType & x);
Status minimizeOneStep(FVectorType & x);
Status minimizeOptimumStorage(FVectorType & x);
Status minimizeOptimumStorageInit(FVectorType & x);
Status minimizeOptimumStorageOneStep(FVectorType & x);
return minimize(void);
return minimizeOptimumStorage(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

eps* abs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

DenseCompanionMatrixType companMat(void);
bool balanced(RealScalar colNorm, RealScalar rowNorm, bool& isBalanced, RealScalar & colB, RealScalar & rowB);
bool balancedR(RealScalar colNorm, RealScalar rowNorm, bool& isBalanced, RealScalar & colB, RealScalar & rowB);
void balance(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return selectComplexRoot_withRespectToNorm(void);
return selectComplexRoot_withRespectToNorm(void);
RealScalar abs2(void);
RealScalar val(void);
return selectRealRoot_withRespectToAbsRealPart(void);
return selectRealRoot_withRespectToAbsRealPart(void);
return selectRealRoot_withRespectToRealPart(void);
return selectRealRoot_withRespectToRealPart(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return poly_eval_horner(void);
Real cb(void);
return Real(void);
Real cb(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void compute(void);
void computeRowMajor(void);
InnerLowerIterator lIt(void);
InnerLowerIterator lIt(void);
InnerUpperIterator uItPivot(void);
InnerUpperIterator uIt(void);
InnerLowerIterator lIt3(void);
InnerUpperIterator uItPivot(void);
InnerLowerIterator lIt2(void);
InnerUpperIterator uItPivot(void);
InnerUpperIterator uIt(void);
InnerLowerIterator llIt(void);
InnerLowerIterator lIt(void);
InnerUpperIterator uIt(void);
InnerUpperIterator uuIt(void);
InnerLowerIterator lIt(void);
InnerUpperIterator uIt(void);
InnerLowerIterator lIt(void);
InnerUpperIterator uIt(void);
InnerLowerIterator lIt(void);
InnerUpperIterator uIt(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

else
return Scalar(void);
else
return Scalar(void);
else
return Scalar(void);
else
return Scalar(void);
else
return Scalar(void);
else
return Scalar(void);
else
return Scalar(void);
else
return Scalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerLowerIterator lIt(void);
InnerUpperIterator uIt(void);
InnerUpperIterator uIt(void);
InnerLowerIterator lIt(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

operator Op(void);
operator Op(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

avoid leaked data if thrown swap(void);
InnerIterator it_spmat(void);
Allocate the internal arrays setBlockStructure(void);
Now copy the values for (StorageIndex j = blockOuterIndex(bj);
	InnerIterator it_spmat(void);
	InnerIterator it(void);
	pointers to blocks for (StorageIndex idx = 0; idx < nzBlockIdx.size();
		VectorXi rowBlocks(void);
		Size of each block row
		VectorXi colBlocks(void);
		VectorXi nzblock_outer(void);
		Number of nz blocks per outer vector
		VectorXi nz_outer(void);
		InputIterator it(void);
		Temporary markers
		VectorXi block_id(void);
		Fill the matrix for (InputIterator it(begin);
			InputIterator it(void);
			return blockRows(void);
			return blockCols(void);
			BlockInnerIterator itb(void);
			return index(void);
			return outer(void);
			return outer(void);
			return index(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

			// Auto-generated bindings for fftw3_integration

			return insertBackByOuterInner(void);
endif resize(void);
return insertBack(void);
return insert(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

stringstream sline(void);
stringstream sline(void);
istringstream newline(void);
istringstream newline(void);
stringstream fmtline(void);
stringstream line(void);
istringstream newline(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

only the lower part is stored
MatrixType tmp(void);
only the upper part is stored
MatrixType tmp(void);
return bool(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return bessel_i0(void);
return bessel_i0e(void);
return bessel_i1(void);
return bessel_i1e(void);
return bessel_j0(void);
return bessel_y0(void);
return bessel_j1(void);
return bessel_y1(void);
return bessel_k0(void);
return bessel_k0e(void);
return bessel_k1(void);
return bessel_k1e(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return ScalarType(void);
return ScalarType(void);
return ScalarType(void);
return ScalarType(void);
return ScalarType(void);
return ScalarType(void);
return ScalarType(void);
return ScalarType(void);
return ScalarType(void);
return ScalarType(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return igamma(void);
return igamma_der_a(void);
return gamma_sample_der_alpha(void);
return igammac(void);
return betainc(void);
return lgamma(void);
return digamma(void);
return zeta(void);
return polygamma(void);
return perf(void);
return erfc(void);
return ndtri(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Scalar(void);
return Scalar(void);
return pdiv(void);
return generic_fast_erf_float(void);
else
return generic_fast_erf_float(void);
return Scalar(void);
return pmul(void);
return Scalar(void);
epsneg
return machep(void);
return Scalar(void);
return Scalar(void);
return Scalar(void);
return Scalar(void);
return Scalar(void);
return Scalar(void);
return Scalar(void);
s* t* pow(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return lgamma(void);
return digamma(void);
return zeta(void);
return polygamma(void);
return erf(void);
return erfc(void);
return igamma(void);
return igamma_der_a(void);
return gamma_sample_der_alpha(void);
return igammac(void);
return betainc(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static DenseIndex Span(typename SplineTraits<Spline>::Scalar u, DenseIndex degree, const typename SplineTraits<Spline>::KnotVectorType & knots);
static BasisVectorType BasisFunctions(Scalar u, DenseIndex degree, const KnotVectorType & knots);
static BasisDerivativeType BasisFunctionDerivatives(const Scalar u, const DenseIndex order, const DenseIndex degree, const KnotVectorType & knots);
static void BasisFunctionDerivativesImpl(const typename Spline<_Scalar, _Degree>::Scalar u, const DenseIndex order, const DenseIndex p, const typename Spline<_Scalar, _Degree>::KnotVectorType & U, DerivativeType & N_);
BasisVectorType left(void);
BasisVectorType right(void);
BasisVectorType N(void);
Compute the derivatives
DerivativeType a(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

KnotVectorType averageKnots(void);
ParameterVectorType temporaryParameters(numParameters + 1);
KnotVectorType derivativeKnots(void);
ParameterVectorType parameterIndices(void);
static SplineType Interpolate(const PointArrayType & pts, DenseIndex degree);
static SplineType Interpolate(const PointArrayType & pts, DenseIndex degree, const KnotVectorType & knot_parameters);
static SplineType InterpolateWithDerivatives(const PointArrayType & points, const PointArrayType & derivatives, const IndexArray & derivativeIndices, const unsigned int degree);
static SplineType InterpolateWithDerivatives(const PointArrayType & points, const PointArrayType & derivatives, const IndexArray & derivativeIndices, const unsigned int degree, const ParameterVectorType & parameters);
return SplineType(void);
knot parameters ChordLengths(void);
return Interpolate(void);
SplineType spline(void);
return InterpolateWithDerivatives(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_bspline_workspace* gsl_bspline_alloc(const size_t k, const size_t nbreak);
void gsl_bspline_free(gsl_bspline_workspace * w);
size_t gsl_bspline_ncontrol(const gsl_bspline_workspace * w);
size_t gsl_bspline_order(const gsl_bspline_workspace * w);
size_t gsl_bspline_nbreak(const gsl_bspline_workspace * w);
double gsl_bspline_breakpoint(const size_t i, const gsl_bspline_workspace * w);
double gsl_bspline_greville_abscissa(const size_t i, const gsl_bspline_workspace * w);
int gsl_bspline_init_augment(const gsl_vector * breakpts, gsl_bspline_workspace * w);
int gsl_bspline_init_uniform(const double a, const double b, gsl_bspline_workspace * w);
int gsl_bspline_proj_rhs(const gsl_function * F, gsl_vector * y, gsl_bspline_workspace * w);
int gsl_bspline_calc(const double x, const gsl_vector * c, double* result, gsl_bspline_workspace * w);
int gsl_bspline_calc_deriv(const double x, const gsl_vector * c, const size_t nderiv, double* result, gsl_bspline_workspace * w);
int gsl_bspline_vector_calc(const double x, const gsl_matrix * c, gsl_vector * result, gsl_bspline_workspace * w);
int gsl_bspline_vector_calc_deriv(const double x, const gsl_matrix * c, const size_t nderiv, gsl_vector * result, gsl_bspline_workspace * w);
int gsl_bspline_eval_basis(const double x, gsl_vector * B, gsl_bspline_workspace * w);
int gsl_bspline_basis(const double x, gsl_vector * Bk, size_t * istart, gsl_bspline_workspace * w);
int gsl_bspline_eval_deriv_basis(const double x, const size_t nderiv, gsl_matrix * dB, gsl_bspline_workspace * w);
int gsl_bspline_basis_deriv(const double x, const size_t nderiv, gsl_matrix * dB, size_t * istart, gsl_bspline_workspace * w);
int gsl_bspline_init_greville(const gsl_vector * abscissae, gsl_bspline_workspace * w, double* abserr);
int gsl_bspline_gram(const size_t nderiv, gsl_matrix * G, gsl_bspline_workspace * w);
int gsl_bspline_gram_interval(const double a, const double b, const size_t nderiv, gsl_matrix * G, gsl_bspline_workspace * w);
int gsl_bspline_oprod(const size_t nderiv, const double x, gsl_matrix * A, gsl_bspline_workspace * w);
int gsl_bspline_calc_integ(const double a, const double b, const gsl_vector * c, double* result, gsl_bspline_workspace * w);
int gsl_bspline_basis_integ(const double a, const double b, gsl_vector * bint, gsl_bspline_workspace * w);
int gsl_bspline_init_hermite(const size_t nderiv, const gsl_vector * x, gsl_bspline_workspace * w);
int gsl_bspline_col_interp(const gsl_vector * tau, gsl_matrix * XB, gsl_bspline_workspace * w);
int gsl_bspline_interp_chermite(const gsl_vector * x, const gsl_vector * y, const gsl_vector * dy, gsl_vector * c, const gsl_bspline_workspace * w);
int gsl_bspline_lssolve(const gsl_vector * x, const gsl_vector * y, gsl_vector * c, double* chisq, gsl_bspline_workspace * w);
int gsl_bspline_wlssolve(const gsl_vector * x, const gsl_vector * y, const gsl_vector * wts, gsl_vector * c, double* chisq, gsl_bspline_workspace * w);
int gsl_bspline_lsnormal(const gsl_vector * x, const gsl_vector * y, const gsl_vector * wts, gsl_vector * XTy, gsl_matrix * XTX, gsl_bspline_workspace * w);
int gsl_bspline_lsnormalm(const gsl_vector * x, const gsl_matrix * Y, const gsl_vector * wts, gsl_matrix * XTY, gsl_matrix * XTX, gsl_bspline_workspace * w);
int gsl_bspline_plssolve(const gsl_vector * x, const gsl_vector * y, gsl_vector * c, double* chisq, gsl_bspline_workspace * w);
int gsl_bspline_pwlssolve(const gsl_vector * x, const gsl_vector * y, const gsl_vector * wts, gsl_vector * c, double* chisq, gsl_bspline_workspace * w);
int gsl_bspline_plsqr(const gsl_vector * x, const gsl_vector * y, const gsl_vector * wts, gsl_matrix * R, gsl_vector * QTy, double* rnorm, gsl_bspline_workspace * w);
int gsl_bspline_residuals(const gsl_vector * x, const gsl_vector * y, const gsl_vector * c, gsl_vector * r, gsl_bspline_workspace * w);
int gsl_bspline_covariance(const gsl_matrix * XTX, gsl_matrix * cov, gsl_bspline_workspace * w);
int gsl_bspline_rcond(const gsl_matrix * XTX, double* rcond, gsl_bspline_workspace * w);
int gsl_bspline_err(const double x, const size_t nderiv, const gsl_matrix * cov, double* err, gsl_bspline_workspace * w);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_bst_workspace* gsl_bst_alloc(const gsl_bst_type * T, const gsl_bst_allocator * allocator, gsl_bst_cmp_function * compare, void* params);
void gsl_bst_free(gsl_bst_workspace * w);
int gsl_bst_empty(gsl_bst_workspace * w);
void* gsl_bst_insert(void* item, gsl_bst_workspace * w);
void* gsl_bst_find(const void* item, const gsl_bst_workspace * w);
void* gsl_bst_remove(const void* item, gsl_bst_workspace * w);
size_t gsl_bst_nodes(const gsl_bst_workspace * w);
size_t gsl_bst_node_size(const gsl_bst_workspace * w);
const char* gsl_bst_name(const gsl_bst_workspace * w);
int gsl_bst_trav_init(gsl_bst_trav * trav, const gsl_bst_workspace * w);
void* gsl_bst_trav_first(gsl_bst_trav * trav, const gsl_bst_workspace * w);
void* gsl_bst_trav_copy(gsl_bst_trav * dest, const gsl_bst_trav * src);
void* gsl_bst_trav_next(gsl_bst_trav * trav);
void* gsl_bst_trav_prev(gsl_bst_trav * trav);
void* gsl_bst_trav_cur(const gsl_bst_trav * trav);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

float cblas_sdsdot(const int N, const float alpha, const float* X, const int incX, const float* Y, const int incY);
double cblas_dsdot(const int N, const float* X, const int incX, const float* Y, const int incY);
float cblas_sdot(const int N, const float* X, const int incX, const float* Y, const int incY);
double cblas_ddot(const int N, const double* X, const int incX, const double* Y, const int incY);
void cblas_cdotu_sub(const int N, const void* X, const int incX, const void* Y, const int incY, void* dotu);
void cblas_cdotc_sub(const int N, const void* X, const int incX, const void* Y, const int incY, void* dotc);
void cblas_zdotu_sub(const int N, const void* X, const int incX, const void* Y, const int incY, void* dotu);
void cblas_zdotc_sub(const int N, const void* X, const int incX, const void* Y, const int incY, void* dotc);
float cblas_snrm2(const int N, const float* X, const int incX);
float cblas_sasum(const int N, const float* X, const int incX);
double cblas_dnrm2(const int N, const double* X, const int incX);
double cblas_dasum(const int N, const double* X, const int incX);
float cblas_scnrm2(const int N, const void* X, const int incX);
float cblas_scasum(const int N, const void* X, const int incX);
double cblas_dznrm2(const int N, const void* X, const int incX);
double cblas_dzasum(const int N, const void* X, const int incX);
CBLAS_INDEX cblas_isamax(const int N, const float* X, const int incX);
CBLAS_INDEX cblas_idamax(const int N, const double* X, const int incX);
CBLAS_INDEX cblas_icamax(const int N, const void* X, const int incX);
CBLAS_INDEX cblas_izamax(const int N, const void* X, const int incX);
void cblas_sswap(const int N, float* X, const int incX, float* Y, const int incY);
void cblas_scopy(const int N, const float* X, const int incX, float* Y, const int incY);
void cblas_saxpy(const int N, const float alpha, const float* X, const int incX, float* Y, const int incY);
void cblas_dswap(const int N, double* X, const int incX, double* Y, const int incY);
void cblas_dcopy(const int N, const double* X, const int incX, double* Y, const int incY);
void cblas_daxpy(const int N, const double alpha, const double* X, const int incX, double* Y, const int incY);
void cblas_cswap(const int N, void* X, const int incX, void* Y, const int incY);
void cblas_ccopy(const int N, const void* X, const int incX, void* Y, const int incY);
void cblas_caxpy(const int N, const void* alpha, const void* X, const int incX, void* Y, const int incY);
void cblas_zswap(const int N, void* X, const int incX, void* Y, const int incY);
void cblas_zcopy(const int N, const void* X, const int incX, void* Y, const int incY);
void cblas_zaxpy(const int N, const void* alpha, const void* X, const int incX, void* Y, const int incY);
void cblas_srotg(float* a, float* b, float* c, float* s);
void cblas_srotmg(float* d1, float* d2, float* b1, const float b2, float* P);
void cblas_srot(const int N, float* X, const int incX, float* Y, const int incY, const float c, const float s);
void cblas_srotm(const int N, float* X, const int incX, float* Y, const int incY, const float* P);
void cblas_drotg(double* a, double* b, double* c, double* s);
void cblas_drotmg(double* d1, double* d2, double* b1, const double b2, double* P);
void cblas_drot(const int N, double* X, const int incX, double* Y, const int incY, const double c, const double s);
void cblas_drotm(const int N, double* X, const int incX, double* Y, const int incY, const double* P);
void cblas_sscal(const int N, const float alpha, float* X, const int incX);
void cblas_dscal(const int N, const double alpha, double* X, const int incX);
void cblas_cscal(const int N, const void* alpha, void* X, const int incX);
void cblas_zscal(const int N, const void* alpha, void* X, const int incX);
void cblas_csscal(const int N, const float alpha, void* X, const int incX);
void cblas_zdscal(const int N, const double alpha, void* X, const int incX);
void cblas_sgemv(const enum CBLAS_ORDER order, const enum CBLAS_TRANSPOSE TransA, const int M, const int N, const float alpha, const float* A, const int lda, const float* X, const int incX, const float beta, float* Y, const int incY);
void cblas_sgbmv(const enum CBLAS_ORDER order, const enum CBLAS_TRANSPOSE TransA, const int M, const int N, const int KL, const int KU, const float alpha, const float* A, const int lda, const float* X, const int incX, const float beta, float* Y, const int incY);
void cblas_strmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const float* A, const int lda, float* X, const int incX);
void cblas_stbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const int K, const float* A, const int lda, float* X, const int incX);
void cblas_stpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const float* Ap, float* X, const int incX);
void cblas_strsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const float* A, const int lda, float* X, const int incX);
void cblas_stbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const int K, const float* A, const int lda, float* X, const int incX);
void cblas_stpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const float* Ap, float* X, const int incX);
void cblas_dgemv(const enum CBLAS_ORDER order, const enum CBLAS_TRANSPOSE TransA, const int M, const int N, const double alpha, const double* A, const int lda, const double* X, const int incX, const double beta, double* Y, const int incY);
void cblas_dgbmv(const enum CBLAS_ORDER order, const enum CBLAS_TRANSPOSE TransA, const int M, const int N, const int KL, const int KU, const double alpha, const double* A, const int lda, const double* X, const int incX, const double beta, double* Y, const int incY);
void cblas_dtrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const double* A, const int lda, double* X, const int incX);
void cblas_dtbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const int K, const double* A, const int lda, double* X, const int incX);
void cblas_dtpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const double* Ap, double* X, const int incX);
void cblas_dtrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const double* A, const int lda, double* X, const int incX);
void cblas_dtbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const int K, const double* A, const int lda, double* X, const int incX);
void cblas_dtpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const double* Ap, double* X, const int incX);
void cblas_cgemv(const enum CBLAS_ORDER order, const enum CBLAS_TRANSPOSE TransA, const int M, const int N, const void* alpha, const void* A, const int lda, const void* X, const int incX, const void* beta, void* Y, const int incY);
void cblas_cgbmv(const enum CBLAS_ORDER order, const enum CBLAS_TRANSPOSE TransA, const int M, const int N, const int KL, const int KU, const void* alpha, const void* A, const int lda, const void* X, const int incX, const void* beta, void* Y, const int incY);
void cblas_ctrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const void* A, const int lda, void* X, const int incX);
void cblas_ctbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const int K, const void* A, const int lda, void* X, const int incX);
void cblas_ctpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const void* Ap, void* X, const int incX);
void cblas_ctrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const void* A, const int lda, void* X, const int incX);
void cblas_ctbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const int K, const void* A, const int lda, void* X, const int incX);
void cblas_ctpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const void* Ap, void* X, const int incX);
void cblas_zgemv(const enum CBLAS_ORDER order, const enum CBLAS_TRANSPOSE TransA, const int M, const int N, const void* alpha, const void* A, const int lda, const void* X, const int incX, const void* beta, void* Y, const int incY);
void cblas_zgbmv(const enum CBLAS_ORDER order, const enum CBLAS_TRANSPOSE TransA, const int M, const int N, const int KL, const int KU, const void* alpha, const void* A, const int lda, const void* X, const int incX, const void* beta, void* Y, const int incY);
void cblas_ztrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const void* A, const int lda, void* X, const int incX);
void cblas_ztbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const int K, const void* A, const int lda, void* X, const int incX);
void cblas_ztpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const void* Ap, void* X, const int incX);
void cblas_ztrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const void* A, const int lda, void* X, const int incX);
void cblas_ztbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const int K, const void* A, const int lda, void* X, const int incX);
void cblas_ztpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int N, const void* Ap, void* X, const int incX);
void cblas_ssymv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const float alpha, const float* A, const int lda, const float* X, const int incX, const float beta, float* Y, const int incY);
void cblas_ssbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const int K, const float alpha, const float* A, const int lda, const float* X, const int incX, const float beta, float* Y, const int incY);
void cblas_sspmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const float alpha, const float* Ap, const float* X, const int incX, const float beta, float* Y, const int incY);
void cblas_sger(const enum CBLAS_ORDER order, const int M, const int N, const float alpha, const float* X, const int incX, const float* Y, const int incY, float* A, const int lda);
void cblas_ssyr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const float alpha, const float* X, const int incX, float* A, const int lda);
void cblas_sspr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const float alpha, const float* X, const int incX, float* Ap);
void cblas_ssyr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const float alpha, const float* X, const int incX, const float* Y, const int incY, float* A, const int lda);
void cblas_sspr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const float alpha, const float* X, const int incX, const float* Y, const int incY, float* A);
void cblas_dsymv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const double alpha, const double* A, const int lda, const double* X, const int incX, const double beta, double* Y, const int incY);
void cblas_dsbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const int K, const double alpha, const double* A, const int lda, const double* X, const int incX, const double beta, double* Y, const int incY);
void cblas_dspmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const double alpha, const double* Ap, const double* X, const int incX, const double beta, double* Y, const int incY);
void cblas_dger(const enum CBLAS_ORDER order, const int M, const int N, const double alpha, const double* X, const int incX, const double* Y, const int incY, double* A, const int lda);
void cblas_dsyr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const double alpha, const double* X, const int incX, double* A, const int lda);
void cblas_dspr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const double alpha, const double* X, const int incX, double* Ap);
void cblas_dsyr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const double alpha, const double* X, const int incX, const double* Y, const int incY, double* A, const int lda);
void cblas_dspr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const double alpha, const double* X, const int incX, const double* Y, const int incY, double* A);
void cblas_chemv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const void* alpha, const void* A, const int lda, const void* X, const int incX, const void* beta, void* Y, const int incY);
void cblas_chbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const int K, const void* alpha, const void* A, const int lda, const void* X, const int incX, const void* beta, void* Y, const int incY);
void cblas_chpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const void* alpha, const void* Ap, const void* X, const int incX, const void* beta, void* Y, const int incY);
void cblas_cgeru(const enum CBLAS_ORDER order, const int M, const int N, const void* alpha, const void* X, const int incX, const void* Y, const int incY, void* A, const int lda);
void cblas_cgerc(const enum CBLAS_ORDER order, const int M, const int N, const void* alpha, const void* X, const int incX, const void* Y, const int incY, void* A, const int lda);
void cblas_cher(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const float alpha, const void* X, const int incX, void* A, const int lda);
void cblas_chpr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const float alpha, const void* X, const int incX, void* A);
void cblas_cher2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const void* alpha, const void* X, const int incX, const void* Y, const int incY, void* A, const int lda);
void cblas_chpr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const void* alpha, const void* X, const int incX, const void* Y, const int incY, void* Ap);
void cblas_zhemv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const void* alpha, const void* A, const int lda, const void* X, const int incX, const void* beta, void* Y, const int incY);
void cblas_zhbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const int K, const void* alpha, const void* A, const int lda, const void* X, const int incX, const void* beta, void* Y, const int incY);
void cblas_zhpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const void* alpha, const void* Ap, const void* X, const int incX, const void* beta, void* Y, const int incY);
void cblas_zgeru(const enum CBLAS_ORDER order, const int M, const int N, const void* alpha, const void* X, const int incX, const void* Y, const int incY, void* A, const int lda);
void cblas_zgerc(const enum CBLAS_ORDER order, const int M, const int N, const void* alpha, const void* X, const int incX, const void* Y, const int incY, void* A, const int lda);
void cblas_zher(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const double alpha, const void* X, const int incX, void* A, const int lda);
void cblas_zhpr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const double alpha, const void* X, const int incX, void* A);
void cblas_zher2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const void* alpha, const void* X, const int incX, const void* Y, const int incY, void* A, const int lda);
void cblas_zhpr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N, const void* alpha, const void* X, const int incX, const void* Y, const int incY, void* Ap);
void cblas_sgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_TRANSPOSE TransB, const int M, const int N, const int K, const float alpha, const float* A, const int lda, const float* B, const int ldb, const float beta, float* C, const int ldc);
void cblas_ssymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side, const enum CBLAS_UPLO Uplo, const int M, const int N, const float alpha, const float* A, const int lda, const float* B, const int ldb, const float beta, float* C, const int ldc);
void cblas_ssyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans, const int N, const int K, const float alpha, const float* A, const int lda, const float beta, float* C, const int ldc);
void cblas_ssyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans, const int N, const int K, const float alpha, const float* A, const int lda, const float* B, const int ldb, const float beta, float* C, const int ldc);
void cblas_strmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int M, const int N, const float alpha, const float* A, const int lda, float* B, const int ldb);
void cblas_strsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int M, const int N, const float alpha, const float* A, const int lda, float* B, const int ldb);
void cblas_dgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_TRANSPOSE TransB, const int M, const int N, const int K, const double alpha, const double* A, const int lda, const double* B, const int ldb, const double beta, double* C, const int ldc);
void cblas_dsymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side, const enum CBLAS_UPLO Uplo, const int M, const int N, const double alpha, const double* A, const int lda, const double* B, const int ldb, const double beta, double* C, const int ldc);
void cblas_dsyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans, const int N, const int K, const double alpha, const double* A, const int lda, const double beta, double* C, const int ldc);
void cblas_dsyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans, const int N, const int K, const double alpha, const double* A, const int lda, const double* B, const int ldb, const double beta, double* C, const int ldc);
void cblas_dtrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int M, const int N, const double alpha, const double* A, const int lda, double* B, const int ldb);
void cblas_dtrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int M, const int N, const double alpha, const double* A, const int lda, double* B, const int ldb);
void cblas_cgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_TRANSPOSE TransB, const int M, const int N, const int K, const void* alpha, const void* A, const int lda, const void* B, const int ldb, const void* beta, void* C, const int ldc);
void cblas_csymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side, const enum CBLAS_UPLO Uplo, const int M, const int N, const void* alpha, const void* A, const int lda, const void* B, const int ldb, const void* beta, void* C, const int ldc);
void cblas_csyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans, const int N, const int K, const void* alpha, const void* A, const int lda, const void* beta, void* C, const int ldc);
void cblas_csyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans, const int N, const int K, const void* alpha, const void* A, const int lda, const void* B, const int ldb, const void* beta, void* C, const int ldc);
void cblas_ctrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int M, const int N, const void* alpha, const void* A, const int lda, void* B, const int ldb);
void cblas_ctrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int M, const int N, const void* alpha, const void* A, const int lda, void* B, const int ldb);
void cblas_zgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_TRANSPOSE TransB, const int M, const int N, const int K, const void* alpha, const void* A, const int lda, const void* B, const int ldb, const void* beta, void* C, const int ldc);
void cblas_zsymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side, const enum CBLAS_UPLO Uplo, const int M, const int N, const void* alpha, const void* A, const int lda, const void* B, const int ldb, const void* beta, void* C, const int ldc);
void cblas_zsyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans, const int N, const int K, const void* alpha, const void* A, const int lda, const void* beta, void* C, const int ldc);
void cblas_zsyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans, const int N, const int K, const void* alpha, const void* A, const int lda, const void* B, const int ldb, const void* beta, void* C, const int ldc);
void cblas_ztrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int M, const int N, const void* alpha, const void* A, const int lda, void* B, const int ldb);
void cblas_ztrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag, const int M, const int N, const void* alpha, const void* A, const int lda, void* B, const int ldb);
void cblas_chemm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side, const enum CBLAS_UPLO Uplo, const int M, const int N, const void* alpha, const void* A, const int lda, const void* B, const int ldb, const void* beta, void* C, const int ldc);
void cblas_cherk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans, const int N, const int K, const float alpha, const void* A, const int lda, const float beta, void* C, const int ldc);
void cblas_cher2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans, const int N, const int K, const void* alpha, const void* A, const int lda, const void* B, const int ldb, const float beta, void* C, const int ldc);
void cblas_zhemm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side, const enum CBLAS_UPLO Uplo, const int M, const int N, const void* alpha, const void* A, const int lda, const void* B, const int ldb, const void* beta, void* C, const int ldc);
void cblas_zherk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans, const int N, const int K, const double alpha, const void* A, const int lda, const double beta, void* C, const int ldc);
void cblas_zher2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE Trans, const int N, const int K, const void* alpha, const void* A, const int lda, const void* B, const int ldb, const double beta, void* C, const int ldc);
void cblas_xerbla(int p, const char* rout, const char* form);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_cheb_series* gsl_cheb_alloc(const size_t order);
void gsl_cheb_free(gsl_cheb_series * cs);
int gsl_cheb_init(gsl_cheb_series * cs, const gsl_function * func, const double a, const double b);
double gsl_cheb_eval(const gsl_cheb_series * cs, const double x);
int gsl_cheb_eval_err(const gsl_cheb_series * cs, const double x, double* result, double* abserr);
double gsl_cheb_eval_n(const gsl_cheb_series * cs, const size_t order, const double x);
int gsl_cheb_eval_n_err(const gsl_cheb_series * cs, const size_t order, const double x, double* result, double* abserr);
double gsl_cheb_eval_mode(const gsl_cheb_series * cs, const double x, gsl_mode_t mode);
int gsl_cheb_eval_mode_e(const gsl_cheb_series * cs, const double x, gsl_mode_t mode, double* result, double* abserr);
int gsl_cheb_calc_deriv(gsl_cheb_series * deriv, const gsl_cheb_series * cs);
int gsl_cheb_calc_integ(gsl_cheb_series * integ, const gsl_cheb_series * cs);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_dht* gsl_dht_alloc(size_t size);
gsl_dht* gsl_dht_new(size_t size, double nu, double xmax);
int gsl_dht_init(gsl_dht * t, double nu, double xmax);
double gsl_dht_x_sample(const gsl_dht * t, int n);
double gsl_dht_k_sample(const gsl_dht * t, int n);
void gsl_dht_free(gsl_dht * t);
int gsl_dht_apply(const gsl_dht * t, double* f_in, double* f_out);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_eigen_symmv_sort(gsl_vector * eval, gsl_matrix * evec, gsl_eigen_sort_t sort_type);
int gsl_eigen_hermv_sort(gsl_vector * eval, gsl_matrix_complex * evec, gsl_eigen_sort_t sort_type);
int gsl_eigen_nonsymmv_sort(gsl_vector_complex * eval, gsl_matrix_complex * evec, gsl_eigen_sort_t sort_type);
int gsl_schur_gen_eigvals(const gsl_matrix * A, const gsl_matrix * B, double* wr1, double* wr2, double* wi, double* scale1, double* scale2);
int gsl_schur_solve_equation(double ca, const gsl_matrix * A, double z, double d1, double d2, const gsl_vector * b, gsl_vector * x, double* s, double* xnorm, double smin);
int gsl_schur_solve_equation_z(double ca, const gsl_matrix * A, gsl_complex * z, double d1, double d2, const gsl_vector_complex * b, gsl_vector_complex * x, double* s, double* xnorm, double smin);
int gsl_eigen_jacobi(gsl_matrix * matrix, gsl_vector * eval, gsl_matrix * evec, unsigned int max_rot, unsigned int* nrot);
int gsl_eigen_invert_jacobi(const gsl_matrix * matrix, gsl_matrix * ainv, unsigned int max_rot);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void gsl_filter_gaussian_free(gsl_filter_gaussian_workspace * w);
int gsl_filter_gaussian(const gsl_filter_end_t endtype, const double alpha, const size_t order, const gsl_vector * x, gsl_vector * y, gsl_filter_gaussian_workspace * w);
int gsl_filter_gaussian_kernel(const double alpha, const size_t order, const int normalize, gsl_vector * kernel);
void gsl_filter_median_free(gsl_filter_median_workspace * w);
int gsl_filter_median(const gsl_filter_end_t endtype, const gsl_vector * x, gsl_vector * y, gsl_filter_median_workspace * w);
void gsl_filter_rmedian_free(gsl_filter_rmedian_workspace * w);
int gsl_filter_rmedian(const gsl_filter_end_t, const gsl_vector * x, gsl_vector * y, gsl_filter_rmedian_workspace * w);
void gsl_filter_impulse_free(gsl_filter_impulse_workspace * w);
int gsl_filter_impulse(const gsl_filter_end_t endtype, const gsl_filter_scale_t scale_type, const double t, const gsl_vector * x, gsl_vector * y, gsl_vector * xmedian, gsl_vector * xsigma, size_t * noutlier, gsl_vector_int * ioutlier, gsl_filter_impulse_workspace * w);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_histogram* gsl_histogram_calloc_range(size_t n, double* range);
int gsl_histogram_memcpy(gsl_histogram * dest, const gsl_histogram * source);
gsl_histogram* gsl_histogram_clone(const gsl_histogram * source);
int gsl_histogram_equal_bins_p(const gsl_histogram * h1, const gsl_histogram * h2);
int gsl_histogram_add(gsl_histogram * h1, const gsl_histogram * h2);
int gsl_histogram_sub(gsl_histogram * h1, const gsl_histogram * h2);
int gsl_histogram_mul(gsl_histogram * h1, const gsl_histogram * h2);
int gsl_histogram_div(gsl_histogram * h1, const gsl_histogram * h2);
int gsl_histogram_scale(gsl_histogram * h, double scale);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_histogram2d* gsl_histogram2d_calloc_range(size_t nx, size_t ny, double* xrange, double* yrange);
int gsl_histogram2d_memcpy(gsl_histogram2d * dest, const gsl_histogram2d * source);
gsl_histogram2d* gsl_histogram2d_clone(const gsl_histogram2d * source);
double gsl_histogram2d_max_val(const gsl_histogram2d * h);
double gsl_histogram2d_min_val(const gsl_histogram2d * h);
int gsl_histogram2d_equal_bins_p(const gsl_histogram2d * h1, const gsl_histogram2d * h2);
int gsl_histogram2d_add(gsl_histogram2d * h1, const gsl_histogram2d * h2);
int gsl_histogram2d_sub(gsl_histogram2d * h1, const gsl_histogram2d * h2);
int gsl_histogram2d_mul(gsl_histogram2d * h1, const gsl_histogram2d * h2);
int gsl_histogram2d_div(gsl_histogram2d * h1, const gsl_histogram2d * h2);
int gsl_histogram2d_scale(gsl_histogram2d * h, double scale);
int gsl_histogram2d_shift(gsl_histogram2d * h, double shift);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void gsl_integration_romberg_free(gsl_integration_romberg_workspace * w);
int gsl_integration_romberg(const gsl_function * f, const double a, const double b, const double epsabs, const double epsrel, double* result, size_t * neval, gsl_integration_romberg_workspace * w);
gsl_integration_fixed_workspace* gsl_integration_fixed_alloc(const gsl_integration_fixed_type * type, const size_t n, const double a, const double b, const double alpha, const double beta);
void gsl_integration_fixed_free(gsl_integration_fixed_workspace * w);
size_t gsl_integration_fixed_n(const gsl_integration_fixed_workspace * w);
int gsl_integration_fixed(const gsl_function * func, double* result, const gsl_integration_fixed_workspace * w);
gsl_integration_lebedev_workspace* gsl_integration_lebedev_alloc(const size_t n);
void gsl_integration_lebedev_free(gsl_integration_lebedev_workspace * w);
size_t gsl_integration_lebedev_n(const gsl_integration_lebedev_workspace * w);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_interp_accel* gsl_interp_accel_alloc(void);
void gsl_interp_accel_free(gsl_interp_accel * a);
gsl_interp* gsl_interp_alloc(const gsl_interp_type * T, size_t n);
int gsl_interp_init(gsl_interp * obj, const double xa[], const double ya[], size_t size);
const char* gsl_interp_name(const gsl_interp * interp);
unsigned int gsl_interp_min_size(const gsl_interp * interp);
unsigned int gsl_interp_type_min_size(const gsl_interp_type * T);
int gsl_interp_eval_e(const gsl_interp * obj, const double xa[], const double ya[], double x, gsl_interp_accel * a, double* y);
double gsl_interp_eval(const gsl_interp * obj, const double xa[], const double ya[], double x, gsl_interp_accel * a);
int gsl_interp_eval_deriv_e(const gsl_interp * obj, const double xa[], const double ya[], double x, gsl_interp_accel * a, double* d);
double gsl_interp_eval_deriv(const gsl_interp * obj, const double xa[], const double ya[], double x, gsl_interp_accel * a);
int gsl_interp_eval_deriv2_e(const gsl_interp * obj, const double xa[], const double ya[], double x, gsl_interp_accel * a, double* d2);
double gsl_interp_eval_deriv2(const gsl_interp * obj, const double xa[], const double ya[], double x, gsl_interp_accel * a);
int gsl_interp_eval_integ_e(const gsl_interp * obj, const double xa[], const double ya[], double a, double b, gsl_interp_accel * acc, double* result);
double gsl_interp_eval_integ(const gsl_interp * obj, const double xa[], const double ya[], double a, double b, gsl_interp_accel * acc);
void gsl_interp_free(gsl_interp * interp);
INLINE_DECL size_t gsl_interp_bsearch(const double x_array[], double x, size_t index_lo, size_t index_hi);
endif

INLINE_DECL size_t gsl_interp_accel_find(gsl_interp_accel * a, const double x_array[], size_t size, double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_interp2d* gsl_interp2d_alloc(const gsl_interp2d_type * T, const size_t xsize, const size_t ysize);
const char* gsl_interp2d_name(const gsl_interp2d * interp);
size_t gsl_interp2d_min_size(const gsl_interp2d * interp);
size_t gsl_interp2d_type_min_size(const gsl_interp2d_type * T);
int gsl_interp2d_set(const gsl_interp2d * interp, double zarr[], const size_t i, const size_t j, const double z);
double gsl_interp2d_get(const gsl_interp2d * interp, const double zarr[], const size_t i, const size_t j);
size_t gsl_interp2d_idx(const gsl_interp2d * interp, const size_t i, const size_t j);
int gsl_interp2d_init(gsl_interp2d * interp, const double xa[], const double ya[], const double za[], const size_t xsize, const size_t ysize);
void gsl_interp2d_free(gsl_interp2d * interp);
double gsl_interp2d_eval(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya);
double gsl_interp2d_eval_extrap(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya);
int gsl_interp2d_eval_e(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);
ifndef GSL_DISABLE_DEPRECATED

int gsl_interp2d_eval_e_extrap(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);
int gsl_interp2d_eval_extrap_e(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);
double gsl_interp2d_eval_deriv_x(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya);
int gsl_interp2d_eval_deriv_x_e(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);
double gsl_interp2d_eval_deriv_y(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya);
int gsl_interp2d_eval_deriv_y_e(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);
double gsl_interp2d_eval_deriv_xx(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya);
int gsl_interp2d_eval_deriv_xx_e(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);
double gsl_interp2d_eval_deriv_yy(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya);
int gsl_interp2d_eval_deriv_yy_e(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);
double gsl_interp2d_eval_deriv_xy(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya);
int gsl_interp2d_eval_deriv_xy_e(const gsl_interp2d * interp, const double xarr[], const double yarr[], const double zarr[], const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_linalg_exponential_ss(const gsl_matrix * A, gsl_matrix * eA, gsl_mode_t mode);
int gsl_linalg_householder_left(const double tau, const gsl_vector * v, gsl_matrix * A, gsl_vector * work);
int gsl_linalg_householder_right(const double tau, const gsl_vector * v, gsl_matrix * A, gsl_vector * work);
int gsl_linalg_hessenberg_decomp(gsl_matrix * A, gsl_vector * tau);
int gsl_linalg_hessenberg_unpack(gsl_matrix * H, gsl_vector * tau, gsl_matrix * U);
int gsl_linalg_hessenberg_unpack_accum(gsl_matrix * H, gsl_vector * tau, gsl_matrix * U);
int gsl_linalg_hessenberg_set_zero(gsl_matrix * H);
int gsl_linalg_hessenberg_submatrix(gsl_matrix * M, gsl_matrix * A, size_t top, gsl_vector * tau);
int gsl_linalg_hesstri_decomp(gsl_matrix * A, gsl_matrix * B, gsl_matrix * U, gsl_matrix * V, gsl_vector * work);
int gsl_linalg_SV_leverage(const gsl_matrix * U, gsl_vector * h);
int gsl_linalg_QR_QTvec_r(const gsl_matrix * QR, const gsl_matrix * T, gsl_vector * b, gsl_vector * work);
int gsl_linalg_QR_QTmat_r(const gsl_matrix * QR, const gsl_matrix * T, gsl_matrix * B, gsl_matrix * work);
int gsl_linalg_QR_unpack_r(const gsl_matrix * QR, const gsl_matrix * T, gsl_matrix * Q, gsl_matrix * R);
int gsl_linalg_QR_rcond(const gsl_matrix * QR, double* rcond, gsl_vector * work);
int gsl_linalg_complex_QR_QHvec_r(const gsl_matrix_complex * QR, const gsl_matrix_complex * T, gsl_vector_complex * b, gsl_vector_complex * work);
int gsl_linalg_complex_QR_QHmat_r(const gsl_matrix_complex * QR, const gsl_matrix_complex * T, gsl_matrix_complex * B, gsl_matrix_complex * work);
int gsl_linalg_complex_QR_unpack_r(const gsl_matrix_complex * QR, const gsl_matrix_complex * T, gsl_matrix_complex * Q, gsl_matrix_complex * R);
int gsl_linalg_QRPT_rcond(const gsl_matrix * QR, double* rcond, gsl_vector * work);
int gsl_linalg_QR_UD_QTvec(const gsl_matrix * Y, const gsl_matrix * T, gsl_vector * b, gsl_vector * work);
int gsl_linalg_QR_UR_QTvec(const gsl_matrix * Y, const gsl_matrix * T, gsl_vector * b, gsl_vector * work);
int gsl_linalg_QR_UU_QTvec(const gsl_matrix * Y, const gsl_matrix * T, gsl_vector * b, gsl_vector * work);
int gsl_linalg_COD_decomp(gsl_matrix * A, gsl_vector * tau_Q, gsl_vector * tau_Z, gsl_permutation * p, size_t * rank, gsl_vector * work);
int gsl_linalg_COD_decomp_e(gsl_matrix * A, gsl_vector * tau_Q, gsl_vector * tau_Z, gsl_permutation * p, double tol, size_t * rank, gsl_vector * work);
int gsl_linalg_COD_unpack(const gsl_matrix * QRZT, const gsl_vector * tau_Q, const gsl_vector * tau_Z, const size_t rank, gsl_matrix * Q, gsl_matrix * R, gsl_matrix * Z);
int gsl_linalg_COD_matZ(const gsl_matrix * QRZT, const gsl_vector * tau_Z, const size_t rank, gsl_matrix * A, gsl_vector * work);
int gsl_linalg_LQ_lssolve(const gsl_matrix * LQ, const gsl_vector * tau, const gsl_vector * b, gsl_vector * x, gsl_vector * residual);
int gsl_linalg_LQ_QTvec(const gsl_matrix * LQ, const gsl_vector * tau, gsl_vector * v);
int gsl_linalg_cholesky_invert(gsl_matrix * cholesky);
int gsl_linalg_cholesky_decomp_unit(gsl_matrix * A, gsl_vector * D);
int gsl_linalg_cholesky_scale(const gsl_matrix * A, gsl_vector * S);
int gsl_linalg_cholesky_scale_apply(gsl_matrix * A, const gsl_vector * S);
int gsl_linalg_cholesky_decomp2(gsl_matrix * A, gsl_vector * S);
int gsl_linalg_complex_cholesky_invert(gsl_matrix_complex * cholesky);
int gsl_linalg_complex_cholesky_scale(const gsl_matrix_complex * A, gsl_vector * S);
int gsl_linalg_complex_cholesky_scale_apply(gsl_matrix_complex * A, const gsl_vector * S);
int gsl_linalg_complex_cholesky_decomp2(gsl_matrix_complex * A, gsl_vector * S);
int gsl_linalg_pcholesky_solve(const gsl_matrix * LDLT, const gsl_permutation * p, const gsl_vector * b, gsl_vector * x);
int gsl_linalg_pcholesky_svx(const gsl_matrix * LDLT, const gsl_permutation * p, gsl_vector * x);
int gsl_linalg_pcholesky_decomp2(gsl_matrix * A, gsl_permutation * p, gsl_vector * S);
int gsl_linalg_pcholesky_solve2(const gsl_matrix * LDLT, const gsl_permutation * p, const gsl_vector * S, const gsl_vector * b, gsl_vector * x);
int gsl_linalg_pcholesky_svx2(const gsl_matrix * LDLT, const gsl_permutation * p, const gsl_vector * S, gsl_vector * x);
int gsl_linalg_pcholesky_invert(const gsl_matrix * LDLT, const gsl_permutation * p, gsl_matrix * Ainv);
int gsl_linalg_mcholesky_solve(const gsl_matrix * LDLT, const gsl_permutation * p, const gsl_vector * b, gsl_vector * x);
int gsl_linalg_mcholesky_svx(const gsl_matrix * LDLT, const gsl_permutation * p, gsl_vector * x);
int gsl_linalg_mcholesky_invert(const gsl_matrix * LDLT, const gsl_permutation * p, gsl_matrix * Ainv);
int gsl_linalg_cholesky_band_decomp(gsl_matrix * A);
int gsl_linalg_cholesky_band_scale(const gsl_matrix * A, gsl_vector * S);
int gsl_linalg_cholesky_band_scale_apply(gsl_matrix * A, const gsl_vector * S);
int gsl_linalg_tri_rcond(CBLAS_UPLO_t Uplo, const gsl_matrix * A, double* rcond, gsl_vector * work);
int gsl_linalg_tri_upper_rcond(const gsl_matrix * A, double* rcond, gsl_vector * work);
int gsl_linalg_tri_lower_rcond(const gsl_matrix * A, double* rcond, gsl_vector * work);
int gsl_linalg_tri_upper_invert(gsl_matrix * T);
int gsl_linalg_tri_lower_invert(gsl_matrix * T);
int gsl_linalg_tri_upper_unit_invert(gsl_matrix * T);
int gsl_linalg_tri_lower_unit_invert(gsl_matrix * T);
int gsl_linalg_tri_invert(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix * T);
int gsl_linalg_complex_tri_invert(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix_complex * T);
int gsl_linalg_tri_LTL(gsl_matrix * L);
int gsl_linalg_tri_UL(gsl_matrix * LU);
int gsl_linalg_complex_tri_LHL(gsl_matrix_complex * L);
int gsl_linalg_complex_tri_UL(gsl_matrix_complex * LU);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_matrix_char_memcpy(gsl_matrix_char * dest, const gsl_matrix_char * src);
int gsl_matrix_char_swap(gsl_matrix_char * m1, gsl_matrix_char * m2);
int gsl_matrix_char_tricpy(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix_char * dest, const gsl_matrix_char * src);
int gsl_matrix_char_swap_rows(gsl_matrix_char * m, const size_t i, const size_t j);
int gsl_matrix_char_swap_columns(gsl_matrix_char * m, const size_t i, const size_t j);
int gsl_matrix_char_swap_rowcol(gsl_matrix_char * m, const size_t i, const size_t j);
int gsl_matrix_char_get_row(gsl_vector_char * v, const gsl_matrix_char * m, const size_t i);
int gsl_matrix_char_get_col(gsl_vector_char * v, const gsl_matrix_char * m, const size_t j);
int gsl_matrix_char_set_row(gsl_matrix_char * m, const size_t i, const gsl_vector_char * v);
int gsl_matrix_char_set_col(gsl_matrix_char * m, const size_t j, const gsl_vector_char * v);
INLINE_DECL char gsl_matrix_char_get(const gsl_matrix_char * m, const size_t i, const size_t j);
INLINE_DECL void gsl_matrix_char_set(gsl_matrix_char * m, const size_t i, const size_t j, const char x);
INLINE_DECL char* gsl_matrix_char_ptr(gsl_matrix_char * m, const size_t i, const size_t j);
INLINE_DECL const char* gsl_matrix_char_const_ptr(const gsl_matrix_char * m, const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_matrix_complex_memcpy(gsl_matrix_complex * dest, const gsl_matrix_complex * src);
int gsl_matrix_complex_swap(gsl_matrix_complex * m1, gsl_matrix_complex * m2);
int gsl_matrix_complex_tricpy(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix_complex * dest, const gsl_matrix_complex * src);
int gsl_matrix_complex_swap_rows(gsl_matrix_complex * m, const size_t i, const size_t j);
int gsl_matrix_complex_swap_columns(gsl_matrix_complex * m, const size_t i, const size_t j);
int gsl_matrix_complex_swap_rowcol(gsl_matrix_complex * m, const size_t i, const size_t j);
int gsl_matrix_complex_transpose_tricpy(CBLAS_UPLO_t Uplo_src, CBLAS_DIAG_t Diag, gsl_matrix_complex * dest, const gsl_matrix_complex * src);
int gsl_matrix_complex_get_row(gsl_vector_complex * v, const gsl_matrix_complex * m, const size_t i);
int gsl_matrix_complex_get_col(gsl_vector_complex * v, const gsl_matrix_complex * m, const size_t j);
int gsl_matrix_complex_set_row(gsl_matrix_complex * m, const size_t i, const gsl_vector_complex * v);
int gsl_matrix_complex_set_col(gsl_matrix_complex * m, const size_t j, const gsl_vector_complex * v);
INLINE_DECL gsl_complex gsl_matrix_complex_get(const gsl_matrix_complex * m, const size_t i, const size_t j);
INLINE_DECL void gsl_matrix_complex_set(gsl_matrix_complex * m, const size_t i, const size_t j, const gsl_complex x);
INLINE_DECL gsl_complex* gsl_matrix_complex_ptr(gsl_matrix_complex * m, const size_t i, const size_t j);
INLINE_DECL const gsl_complex* gsl_matrix_complex_const_ptr(const gsl_matrix_complex * m, const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_matrix_complex_float_memcpy(gsl_matrix_complex_float * dest, const gsl_matrix_complex_float * src);
int gsl_matrix_complex_float_swap(gsl_matrix_complex_float * m1, gsl_matrix_complex_float * m2);
int gsl_matrix_complex_float_tricpy(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix_complex_float * dest, const gsl_matrix_complex_float * src);
int gsl_matrix_complex_float_swap_rows(gsl_matrix_complex_float * m, const size_t i, const size_t j);
int gsl_matrix_complex_float_swap_columns(gsl_matrix_complex_float * m, const size_t i, const size_t j);
int gsl_matrix_complex_float_swap_rowcol(gsl_matrix_complex_float * m, const size_t i, const size_t j);
int gsl_matrix_complex_float_transpose_tricpy(CBLAS_UPLO_t Uplo_src, CBLAS_DIAG_t Diag, gsl_matrix_complex_float * dest, const gsl_matrix_complex_float * src);
int gsl_matrix_complex_float_get_row(gsl_vector_complex_float * v, const gsl_matrix_complex_float * m, const size_t i);
int gsl_matrix_complex_float_get_col(gsl_vector_complex_float * v, const gsl_matrix_complex_float * m, const size_t j);
int gsl_matrix_complex_float_set_row(gsl_matrix_complex_float * m, const size_t i, const gsl_vector_complex_float * v);
int gsl_matrix_complex_float_set_col(gsl_matrix_complex_float * m, const size_t j, const gsl_vector_complex_float * v);
INLINE_DECL gsl_complex_float gsl_matrix_complex_float_get(const gsl_matrix_complex_float * m, const size_t i, const size_t j);
INLINE_DECL void gsl_matrix_complex_float_set(gsl_matrix_complex_float * m, const size_t i, const size_t j, const gsl_complex_float x);
INLINE_DECL gsl_complex_float* gsl_matrix_complex_float_ptr(gsl_matrix_complex_float * m, const size_t i, const size_t j);
INLINE_DECL const gsl_complex_float* gsl_matrix_complex_float_const_ptr(const gsl_matrix_complex_float * m, const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_matrix_complex_long_double_memcpy(gsl_matrix_complex_long_double * dest, const gsl_matrix_complex_long_double * src);
int gsl_matrix_complex_long_double_swap(gsl_matrix_complex_long_double * m1, gsl_matrix_complex_long_double * m2);
int gsl_matrix_complex_long_double_tricpy(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix_complex_long_double * dest, const gsl_matrix_complex_long_double * src);
int gsl_matrix_complex_long_double_swap_rows(gsl_matrix_complex_long_double * m, const size_t i, const size_t j);
int gsl_matrix_complex_long_double_swap_columns(gsl_matrix_complex_long_double * m, const size_t i, const size_t j);
int gsl_matrix_complex_long_double_swap_rowcol(gsl_matrix_complex_long_double * m, const size_t i, const size_t j);
int gsl_matrix_complex_long_double_transpose_tricpy(CBLAS_UPLO_t Uplo_src, CBLAS_DIAG_t Diag, gsl_matrix_complex_long_double * dest, const gsl_matrix_complex_long_double * src);
int gsl_matrix_complex_long_double_get_row(gsl_vector_complex_long_double * v, const gsl_matrix_complex_long_double * m, const size_t i);
int gsl_matrix_complex_long_double_get_col(gsl_vector_complex_long_double * v, const gsl_matrix_complex_long_double * m, const size_t j);
int gsl_matrix_complex_long_double_set_row(gsl_matrix_complex_long_double * m, const size_t i, const gsl_vector_complex_long_double * v);
int gsl_matrix_complex_long_double_set_col(gsl_matrix_complex_long_double * m, const size_t j, const gsl_vector_complex_long_double * v);
INLINE_DECL gsl_complex_long_double gsl_matrix_complex_long_double_get(const gsl_matrix_complex_long_double * m, const size_t i, const size_t j);
INLINE_DECL void gsl_matrix_complex_long_double_set(gsl_matrix_complex_long_double * m, const size_t i, const size_t j, const gsl_complex_long_double x);
INLINE_DECL gsl_complex_long_double* gsl_matrix_complex_long_double_ptr(gsl_matrix_complex_long_double * m, const size_t i, const size_t j);
INLINE_DECL const gsl_complex_long_double* gsl_matrix_complex_long_double_const_ptr(const gsl_matrix_complex_long_double * m, const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_matrix_memcpy(gsl_matrix * dest, const gsl_matrix * src);
int gsl_matrix_swap(gsl_matrix * m1, gsl_matrix * m2);
int gsl_matrix_tricpy(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix * dest, const gsl_matrix * src);
int gsl_matrix_swap_rows(gsl_matrix * m, const size_t i, const size_t j);
int gsl_matrix_swap_columns(gsl_matrix * m, const size_t i, const size_t j);
int gsl_matrix_swap_rowcol(gsl_matrix * m, const size_t i, const size_t j);
int gsl_matrix_get_row(gsl_vector * v, const gsl_matrix * m, const size_t i);
int gsl_matrix_get_col(gsl_vector * v, const gsl_matrix * m, const size_t j);
int gsl_matrix_set_row(gsl_matrix * m, const size_t i, const gsl_vector * v);
int gsl_matrix_set_col(gsl_matrix * m, const size_t j, const gsl_vector * v);
INLINE_DECL double gsl_matrix_get(const gsl_matrix * m, const size_t i, const size_t j);
INLINE_DECL void gsl_matrix_set(gsl_matrix * m, const size_t i, const size_t j, const double x);
INLINE_DECL double* gsl_matrix_ptr(gsl_matrix * m, const size_t i, const size_t j);
INLINE_DECL const double* gsl_matrix_const_ptr(const gsl_matrix * m, const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_matrix_float_memcpy(gsl_matrix_float * dest, const gsl_matrix_float * src);
int gsl_matrix_float_swap(gsl_matrix_float * m1, gsl_matrix_float * m2);
int gsl_matrix_float_tricpy(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix_float * dest, const gsl_matrix_float * src);
int gsl_matrix_float_swap_rows(gsl_matrix_float * m, const size_t i, const size_t j);
int gsl_matrix_float_swap_columns(gsl_matrix_float * m, const size_t i, const size_t j);
int gsl_matrix_float_swap_rowcol(gsl_matrix_float * m, const size_t i, const size_t j);
int gsl_matrix_float_get_row(gsl_vector_float * v, const gsl_matrix_float * m, const size_t i);
int gsl_matrix_float_get_col(gsl_vector_float * v, const gsl_matrix_float * m, const size_t j);
int gsl_matrix_float_set_row(gsl_matrix_float * m, const size_t i, const gsl_vector_float * v);
int gsl_matrix_float_set_col(gsl_matrix_float * m, const size_t j, const gsl_vector_float * v);
INLINE_DECL float gsl_matrix_float_get(const gsl_matrix_float * m, const size_t i, const size_t j);
INLINE_DECL void gsl_matrix_float_set(gsl_matrix_float * m, const size_t i, const size_t j, const float x);
INLINE_DECL float* gsl_matrix_float_ptr(gsl_matrix_float * m, const size_t i, const size_t j);
INLINE_DECL const float* gsl_matrix_float_const_ptr(const gsl_matrix_float * m, const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_matrix_int_memcpy(gsl_matrix_int * dest, const gsl_matrix_int * src);
int gsl_matrix_int_swap(gsl_matrix_int * m1, gsl_matrix_int * m2);
int gsl_matrix_int_tricpy(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix_int * dest, const gsl_matrix_int * src);
int gsl_matrix_int_swap_rows(gsl_matrix_int * m, const size_t i, const size_t j);
int gsl_matrix_int_swap_columns(gsl_matrix_int * m, const size_t i, const size_t j);
int gsl_matrix_int_swap_rowcol(gsl_matrix_int * m, const size_t i, const size_t j);
int gsl_matrix_int_get_row(gsl_vector_int * v, const gsl_matrix_int * m, const size_t i);
int gsl_matrix_int_get_col(gsl_vector_int * v, const gsl_matrix_int * m, const size_t j);
int gsl_matrix_int_set_row(gsl_matrix_int * m, const size_t i, const gsl_vector_int * v);
int gsl_matrix_int_set_col(gsl_matrix_int * m, const size_t j, const gsl_vector_int * v);
INLINE_DECL int gsl_matrix_int_get(const gsl_matrix_int * m, const size_t i, const size_t j);
INLINE_DECL void gsl_matrix_int_set(gsl_matrix_int * m, const size_t i, const size_t j, const int x);
INLINE_DECL int* gsl_matrix_int_ptr(gsl_matrix_int * m, const size_t i, const size_t j);
INLINE_DECL const int* gsl_matrix_int_const_ptr(const gsl_matrix_int * m, const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_matrix_long_memcpy(gsl_matrix_long * dest, const gsl_matrix_long * src);
int gsl_matrix_long_swap(gsl_matrix_long * m1, gsl_matrix_long * m2);
int gsl_matrix_long_tricpy(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix_long * dest, const gsl_matrix_long * src);
int gsl_matrix_long_swap_rows(gsl_matrix_long * m, const size_t i, const size_t j);
int gsl_matrix_long_swap_columns(gsl_matrix_long * m, const size_t i, const size_t j);
int gsl_matrix_long_swap_rowcol(gsl_matrix_long * m, const size_t i, const size_t j);
int gsl_matrix_long_get_row(gsl_vector_long * v, const gsl_matrix_long * m, const size_t i);
int gsl_matrix_long_get_col(gsl_vector_long * v, const gsl_matrix_long * m, const size_t j);
int gsl_matrix_long_set_row(gsl_matrix_long * m, const size_t i, const gsl_vector_long * v);
int gsl_matrix_long_set_col(gsl_matrix_long * m, const size_t j, const gsl_vector_long * v);
INLINE_DECL long gsl_matrix_long_get(const gsl_matrix_long * m, const size_t i, const size_t j);
INLINE_DECL void gsl_matrix_long_set(gsl_matrix_long * m, const size_t i, const size_t j, const long x);
INLINE_DECL long* gsl_matrix_long_ptr(gsl_matrix_long * m, const size_t i, const size_t j);
INLINE_DECL const long* gsl_matrix_long_const_ptr(const gsl_matrix_long * m, const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_matrix_long_double_memcpy(gsl_matrix_long_double * dest, const gsl_matrix_long_double * src);
int gsl_matrix_long_double_swap(gsl_matrix_long_double * m1, gsl_matrix_long_double * m2);
int gsl_matrix_long_double_tricpy(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix_long_double * dest, const gsl_matrix_long_double * src);
int gsl_matrix_long_double_swap_rows(gsl_matrix_long_double * m, const size_t i, const size_t j);
int gsl_matrix_long_double_swap_columns(gsl_matrix_long_double * m, const size_t i, const size_t j);
int gsl_matrix_long_double_swap_rowcol(gsl_matrix_long_double * m, const size_t i, const size_t j);
int gsl_matrix_long_double_get_row(gsl_vector_long_double * v, const gsl_matrix_long_double * m, const size_t i);
int gsl_matrix_long_double_get_col(gsl_vector_long_double * v, const gsl_matrix_long_double * m, const size_t j);
int gsl_matrix_long_double_set_row(gsl_matrix_long_double * m, const size_t i, const gsl_vector_long_double * v);
int gsl_matrix_long_double_set_col(gsl_matrix_long_double * m, const size_t j, const gsl_vector_long_double * v);
INLINE_DECL long double gsl_matrix_long_double_get(const gsl_matrix_long_double * m, const size_t i, const size_t j);
INLINE_DECL void gsl_matrix_long_double_set(gsl_matrix_long_double * m, const size_t i, const size_t j, const long double x);
INLINE_DECL long double* gsl_matrix_long_double_ptr(gsl_matrix_long_double * m, const size_t i, const size_t j);
INLINE_DECL const long double* gsl_matrix_long_double_const_ptr(const gsl_matrix_long_double * m, const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_matrix_short_memcpy(gsl_matrix_short * dest, const gsl_matrix_short * src);
int gsl_matrix_short_swap(gsl_matrix_short * m1, gsl_matrix_short * m2);
int gsl_matrix_short_tricpy(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix_short * dest, const gsl_matrix_short * src);
int gsl_matrix_short_swap_rows(gsl_matrix_short * m, const size_t i, const size_t j);
int gsl_matrix_short_swap_columns(gsl_matrix_short * m, const size_t i, const size_t j);
int gsl_matrix_short_swap_rowcol(gsl_matrix_short * m, const size_t i, const size_t j);
int gsl_matrix_short_get_row(gsl_vector_short * v, const gsl_matrix_short * m, const size_t i);
int gsl_matrix_short_get_col(gsl_vector_short * v, const gsl_matrix_short * m, const size_t j);
int gsl_matrix_short_set_row(gsl_matrix_short * m, const size_t i, const gsl_vector_short * v);
int gsl_matrix_short_set_col(gsl_matrix_short * m, const size_t j, const gsl_vector_short * v);
INLINE_DECL short gsl_matrix_short_get(const gsl_matrix_short * m, const size_t i, const size_t j);
INLINE_DECL void gsl_matrix_short_set(gsl_matrix_short * m, const size_t i, const size_t j, const short x);
INLINE_DECL short* gsl_matrix_short_ptr(gsl_matrix_short * m, const size_t i, const size_t j);
INLINE_DECL const short* gsl_matrix_short_const_ptr(const gsl_matrix_short * m, const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_matrix_uchar_memcpy(gsl_matrix_uchar * dest, const gsl_matrix_uchar * src);
int gsl_matrix_uchar_swap(gsl_matrix_uchar * m1, gsl_matrix_uchar * m2);
int gsl_matrix_uchar_tricpy(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix_uchar * dest, const gsl_matrix_uchar * src);
int gsl_matrix_uchar_swap_rows(gsl_matrix_uchar * m, const size_t i, const size_t j);
int gsl_matrix_uchar_swap_columns(gsl_matrix_uchar * m, const size_t i, const size_t j);
int gsl_matrix_uchar_swap_rowcol(gsl_matrix_uchar * m, const size_t i, const size_t j);
int gsl_matrix_uchar_get_row(gsl_vector_uchar * v, const gsl_matrix_uchar * m, const size_t i);
int gsl_matrix_uchar_get_col(gsl_vector_uchar * v, const gsl_matrix_uchar * m, const size_t j);
int gsl_matrix_uchar_set_row(gsl_matrix_uchar * m, const size_t i, const gsl_vector_uchar * v);
int gsl_matrix_uchar_set_col(gsl_matrix_uchar * m, const size_t j, const gsl_vector_uchar * v);
INLINE_DECL unsigned char gsl_matrix_uchar_get(const gsl_matrix_uchar * m, const size_t i, const size_t j);
INLINE_DECL void gsl_matrix_uchar_set(gsl_matrix_uchar * m, const size_t i, const size_t j, const unsigned char x);
INLINE_DECL unsigned char* gsl_matrix_uchar_ptr(gsl_matrix_uchar * m, const size_t i, const size_t j);
INLINE_DECL const unsigned char* gsl_matrix_uchar_const_ptr(const gsl_matrix_uchar * m, const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_matrix_uint_memcpy(gsl_matrix_uint * dest, const gsl_matrix_uint * src);
int gsl_matrix_uint_swap(gsl_matrix_uint * m1, gsl_matrix_uint * m2);
int gsl_matrix_uint_tricpy(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix_uint * dest, const gsl_matrix_uint * src);
int gsl_matrix_uint_swap_rows(gsl_matrix_uint * m, const size_t i, const size_t j);
int gsl_matrix_uint_swap_columns(gsl_matrix_uint * m, const size_t i, const size_t j);
int gsl_matrix_uint_swap_rowcol(gsl_matrix_uint * m, const size_t i, const size_t j);
int gsl_matrix_uint_get_row(gsl_vector_uint * v, const gsl_matrix_uint * m, const size_t i);
int gsl_matrix_uint_get_col(gsl_vector_uint * v, const gsl_matrix_uint * m, const size_t j);
int gsl_matrix_uint_set_row(gsl_matrix_uint * m, const size_t i, const gsl_vector_uint * v);
int gsl_matrix_uint_set_col(gsl_matrix_uint * m, const size_t j, const gsl_vector_uint * v);
INLINE_DECL unsigned int gsl_matrix_uint_get(const gsl_matrix_uint * m, const size_t i, const size_t j);
INLINE_DECL void gsl_matrix_uint_set(gsl_matrix_uint * m, const size_t i, const size_t j, const unsigned int x);
INLINE_DECL unsigned int* gsl_matrix_uint_ptr(gsl_matrix_uint * m, const size_t i, const size_t j);
INLINE_DECL const unsigned int* gsl_matrix_uint_const_ptr(const gsl_matrix_uint * m, const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_matrix_ulong_memcpy(gsl_matrix_ulong * dest, const gsl_matrix_ulong * src);
int gsl_matrix_ulong_swap(gsl_matrix_ulong * m1, gsl_matrix_ulong * m2);
int gsl_matrix_ulong_tricpy(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix_ulong * dest, const gsl_matrix_ulong * src);
int gsl_matrix_ulong_swap_rows(gsl_matrix_ulong * m, const size_t i, const size_t j);
int gsl_matrix_ulong_swap_columns(gsl_matrix_ulong * m, const size_t i, const size_t j);
int gsl_matrix_ulong_swap_rowcol(gsl_matrix_ulong * m, const size_t i, const size_t j);
int gsl_matrix_ulong_get_row(gsl_vector_ulong * v, const gsl_matrix_ulong * m, const size_t i);
int gsl_matrix_ulong_get_col(gsl_vector_ulong * v, const gsl_matrix_ulong * m, const size_t j);
int gsl_matrix_ulong_set_row(gsl_matrix_ulong * m, const size_t i, const gsl_vector_ulong * v);
int gsl_matrix_ulong_set_col(gsl_matrix_ulong * m, const size_t j, const gsl_vector_ulong * v);
INLINE_DECL unsigned long gsl_matrix_ulong_get(const gsl_matrix_ulong * m, const size_t i, const size_t j);
INLINE_DECL void gsl_matrix_ulong_set(gsl_matrix_ulong * m, const size_t i, const size_t j, const unsigned long x);
INLINE_DECL unsigned long* gsl_matrix_ulong_ptr(gsl_matrix_ulong * m, const size_t i, const size_t j);
INLINE_DECL const unsigned long* gsl_matrix_ulong_const_ptr(const gsl_matrix_ulong * m, const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_matrix_ushort_memcpy(gsl_matrix_ushort * dest, const gsl_matrix_ushort * src);
int gsl_matrix_ushort_swap(gsl_matrix_ushort * m1, gsl_matrix_ushort * m2);
int gsl_matrix_ushort_tricpy(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_matrix_ushort * dest, const gsl_matrix_ushort * src);
int gsl_matrix_ushort_swap_rows(gsl_matrix_ushort * m, const size_t i, const size_t j);
int gsl_matrix_ushort_swap_columns(gsl_matrix_ushort * m, const size_t i, const size_t j);
int gsl_matrix_ushort_swap_rowcol(gsl_matrix_ushort * m, const size_t i, const size_t j);
int gsl_matrix_ushort_get_row(gsl_vector_ushort * v, const gsl_matrix_ushort * m, const size_t i);
int gsl_matrix_ushort_get_col(gsl_vector_ushort * v, const gsl_matrix_ushort * m, const size_t j);
int gsl_matrix_ushort_set_row(gsl_matrix_ushort * m, const size_t i, const gsl_vector_ushort * v);
int gsl_matrix_ushort_set_col(gsl_matrix_ushort * m, const size_t j, const gsl_vector_ushort * v);
INLINE_DECL unsigned short gsl_matrix_ushort_get(const gsl_matrix_ushort * m, const size_t i, const size_t j);
INLINE_DECL void gsl_matrix_ushort_set(gsl_matrix_ushort * m, const size_t i, const size_t j, const unsigned short x);
INLINE_DECL unsigned short* gsl_matrix_ushort_ptr(gsl_matrix_ushort * m, const size_t i, const size_t j);
INLINE_DECL const unsigned short* gsl_matrix_ushort_const_ptr(const gsl_matrix_ushort * m, const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void gsl_message(const char* message, const char* file, int line, unsigned int mask);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_min_find_bracket(gsl_function * f, double* x_minimum, double* f_minimum, double* x_lower, double* f_lower, double* x_upper, double* f_upper, size_t eval_max);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifdef HAVE_INLINE
INLINE_FUN unsigned int GSL_MODE_PREC(gsl_mode_t mt);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_monte_miser_integrate(gsl_monte_function * f, const double xl[], const double xh[], size_t dim, size_t calls, gsl_rng * r, gsl_monte_miser_state * state, double* result, double* abserr);
gsl_monte_miser_state* gsl_monte_miser_alloc(size_t dim);
int gsl_monte_miser_init(gsl_monte_miser_state * state);
void gsl_monte_miser_free(gsl_monte_miser_state * state);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_monte_plain_state* gsl_monte_plain_alloc(size_t dim);
int gsl_monte_plain_init(gsl_monte_plain_state * state);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_monte_vegas_integrate(gsl_monte_function * f, double xl[], double xu[], size_t dim, size_t calls, gsl_rng * r, gsl_monte_vegas_state * state, double* result, double* abserr);
gsl_monte_vegas_state* gsl_monte_vegas_alloc(size_t dim);
int gsl_monte_vegas_init(gsl_monte_vegas_state * state);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void gsl_movstat_free(gsl_movstat_workspace * w);
int gsl_movstat_apply_accum(const gsl_movstat_end_t endtype, const gsl_vector * x, const gsl_movstat_accum * accum, void* accum_params, gsl_vector * y, gsl_vector * z, gsl_movstat_workspace * w);
int gsl_movstat_apply(const gsl_movstat_end_t endtype, const gsl_movstat_function * F, const gsl_vector * x, gsl_vector * y, gsl_movstat_workspace * w);
size_t gsl_movstat_fill(const gsl_movstat_end_t endtype, const gsl_vector * x, const size_t idx, const size_t H, const size_t J, double* window);
int gsl_movstat_mean(const gsl_movstat_end_t endtype, const gsl_vector * x, gsl_vector * y, gsl_movstat_workspace * w);
int gsl_movstat_variance(const gsl_movstat_end_t endtype, const gsl_vector * x, gsl_vector * y, gsl_movstat_workspace * w);
int gsl_movstat_sd(const gsl_movstat_end_t endtype, const gsl_vector * x, gsl_vector * y, gsl_movstat_workspace * w);
int gsl_movstat_median(const gsl_movstat_end_t endtype, const gsl_vector * x, gsl_vector * y, gsl_movstat_workspace * w);
int gsl_movstat_min(const gsl_movstat_end_t endtype, const gsl_vector * x, gsl_vector * y, gsl_movstat_workspace * w);
int gsl_movstat_max(const gsl_movstat_end_t endtype, const gsl_vector * x, gsl_vector * y, gsl_movstat_workspace * w);
int gsl_movstat_minmax(const gsl_movstat_end_t endtype, const gsl_vector * x, gsl_vector * y_min, gsl_vector * y_max, gsl_movstat_workspace * w);
int gsl_movstat_mad0(const gsl_movstat_end_t endtype, const gsl_vector * x, gsl_vector * xmedian, gsl_vector * xmad, gsl_movstat_workspace * w);
int gsl_movstat_mad(const gsl_movstat_end_t endtype, const gsl_vector * x, gsl_vector * xmedian, gsl_vector * xmad, gsl_movstat_workspace * w);
int gsl_movstat_qqr(const gsl_movstat_end_t endtype, const gsl_vector * x, const double q, gsl_vector * xqqr, gsl_movstat_workspace * w);
int gsl_movstat_Sn(const gsl_movstat_end_t endtype, const gsl_vector * x, gsl_vector * xscale, gsl_movstat_workspace * w);
int gsl_movstat_Qn(const gsl_movstat_end_t endtype, const gsl_vector * x, gsl_vector * xscale, gsl_movstat_workspace * w);
int gsl_movstat_sum(const gsl_movstat_end_t endtype, const gsl_vector * x, gsl_vector * y, gsl_movstat_workspace * w);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

size_t gsl_multifit_linear_rank(const double tol, const gsl_multifit_linear_workspace * work);
int gsl_multifit_linear_applyW(const gsl_matrix * X, const gsl_vector * w, const gsl_vector * y, gsl_matrix * WX, gsl_vector * Wy);
int gsl_multifit_linear_lcurvature_menger(const gsl_vector * rho, const gsl_vector * eta, gsl_vector * kappa);
int gsl_multifit_linear_lcorner(const gsl_vector * rho, const gsl_vector * eta, size_t * idx);
int gsl_multifit_linear_lcorner2(const gsl_vector * reg_param, const gsl_vector * eta, size_t * idx);
int gsl_multifit_linear_Lk(const size_t p, const size_t k, gsl_matrix * L);
int gsl_multifit_linear_Lsobolev(const size_t p, const size_t kmax, const gsl_vector * alpha, gsl_matrix * L, gsl_multifit_linear_workspace * work);
int gsl_multifit_linear_gcv_init(const gsl_vector * y, gsl_vector * reg_param, gsl_vector * UTy, double* delta0, gsl_multifit_linear_workspace * work);
int gsl_multifit_linear_gcv_curve(const gsl_vector * reg_param, const gsl_vector * UTy, const double delta0, gsl_vector * G, gsl_multifit_linear_workspace * work);
int gsl_multifit_linear_gcv_min(const gsl_vector * reg_param, const gsl_vector * UTy, const gsl_vector * G, const double delta0, double* lambda, gsl_multifit_linear_workspace * work);
double gsl_multifit_linear_gcv_calc(const double lambda, const gsl_vector * UTy, const double delta0, gsl_multifit_linear_workspace * work);
int gsl_multifit_linear_gcv(const gsl_vector * y, gsl_vector * reg_param, gsl_vector * G, double* lambda, double* G_lambda, gsl_multifit_linear_workspace * work);
void gsl_multifit_robust_free(gsl_multifit_robust_workspace * w);
int gsl_multifit_robust_tune(const double tune, gsl_multifit_robust_workspace * w);
int gsl_multifit_robust_maxiter(const size_t maxiter, gsl_multifit_robust_workspace * w);
gsl_multifit_robust_stats gsl_multifit_robust_statistics(const gsl_multifit_robust_workspace * w);
int gsl_multifit_robust_weights(const gsl_vector * r, gsl_vector * wts, gsl_multifit_robust_workspace * w);
int gsl_multifit_robust(const gsl_matrix * X, const gsl_vector * y, gsl_vector * c, gsl_matrix * cov, gsl_multifit_robust_workspace * w);
int gsl_multifit_robust_est(const gsl_vector * x, const gsl_vector * c, const gsl_matrix * cov, double* y, double* y_err);
int gsl_multifit_robust_residuals(const gsl_matrix * X, const gsl_vector * y, const gsl_vector * c, gsl_vector * r, gsl_multifit_robust_workspace * w);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_multifit_eval_wf(gsl_multifit_function_fdf * fdf, const gsl_vector * x, const gsl_vector * wts, gsl_vector * y);
int gsl_multifit_eval_wdf(gsl_multifit_function_fdf * fdf, const gsl_vector * x, const gsl_vector * wts, gsl_matrix * dy);
int gsl_multifit_fdfsolver_dif_df(const gsl_vector * x, const gsl_vector * wts, gsl_multifit_function_fdf * fdf, const gsl_vector * f, gsl_matrix * J);
int gsl_multifit_fdfsolver_dif_fdf(const gsl_vector * x, gsl_multifit_function_fdf * fdf, gsl_vector * f, gsl_matrix * J);
void gsl_multifit_fdfridge_free(gsl_multifit_fdfridge * work);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_multifit_nlinear_parameters gsl_multifit_nlinear_default_parameters(void);
int gsl_multifit_nlinear_eval_f(gsl_multifit_nlinear_fdf * fdf, const gsl_vector * x, const gsl_vector * swts, gsl_vector * y);
int gsl_multifit_nlinear_eval_df(const gsl_vector * x, const gsl_vector * f, const gsl_vector * swts, const double h, const gsl_multifit_nlinear_fdtype fdtype, gsl_multifit_nlinear_fdf * fdf, gsl_matrix * df, gsl_vector * work);
int gsl_multifit_nlinear_eval_fvv(const double h, const gsl_vector * x, const gsl_vector * v, const gsl_vector * f, const gsl_matrix * J, const gsl_vector * swts, gsl_multifit_nlinear_fdf * fdf, gsl_vector * yvv, gsl_vector * work);
int gsl_multifit_nlinear_df(const double h, const gsl_multifit_nlinear_fdtype fdtype, const gsl_vector * x, const gsl_vector * wts, gsl_multifit_nlinear_fdf * fdf, const gsl_vector * f, gsl_matrix * J, gsl_vector * work);
int gsl_multifit_nlinear_fdfvv(const double h, const gsl_vector * x, const gsl_vector * v, const gsl_vector * f, const gsl_matrix * J, const gsl_vector * swts, gsl_multifit_nlinear_fdf * fdf, gsl_vector * fvv, gsl_vector * work);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_multilarge_linear_workspace* gsl_multilarge_linear_alloc(const gsl_multilarge_linear_type * T, const size_t p);
void gsl_multilarge_linear_free(gsl_multilarge_linear_workspace * w);
int gsl_multilarge_linear_reset(gsl_multilarge_linear_workspace * w);
int gsl_multilarge_linear_accumulate(gsl_matrix * X, gsl_vector * y, gsl_multilarge_linear_workspace * w);
int gsl_multilarge_linear_solve(const double lambda, gsl_vector * c, double* rnorm, double* snorm, gsl_multilarge_linear_workspace * w);
int gsl_multilarge_linear_rcond(double* rcond, gsl_multilarge_linear_workspace * w);
int gsl_multilarge_linear_lcurve(gsl_vector * reg_param, gsl_vector * rho, gsl_vector * eta, gsl_multilarge_linear_workspace * w);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_multilarge_nlinear_parameters gsl_multilarge_nlinear_default_parameters(void);
int gsl_multilarge_nlinear_eval_f(gsl_multilarge_nlinear_fdf * fdf, const gsl_vector * x, const gsl_vector * swts, gsl_vector * y);
int gsl_multilarge_nlinear_eval_df(const CBLAS_TRANSPOSE_t TransJ, const gsl_vector * x, const gsl_vector * f, const gsl_vector * u, const gsl_vector * swts, const double h, const gsl_multilarge_nlinear_fdtype fdtype, gsl_multilarge_nlinear_fdf * fdf, gsl_vector * v, gsl_matrix * JTJ, gsl_vector * work);
int gsl_multilarge_nlinear_eval_fvv(const double h, const gsl_vector * x, const gsl_vector * v, const gsl_vector * f, const gsl_vector * swts, gsl_multilarge_nlinear_fdf * fdf, gsl_vector * yvv, gsl_vector * work);
int gsl_multilarge_nlinear_df(const double h, const gsl_multilarge_nlinear_fdtype fdtype, const gsl_vector * x, const gsl_vector * wts, gsl_multilarge_nlinear_fdf * fdf, const gsl_vector * f, gsl_matrix * J, gsl_vector * work);
int gsl_multilarge_nlinear_fdfvv(const double h, const gsl_vector * x, const gsl_vector * v, const gsl_vector * f, const gsl_matrix * J, const gsl_vector * swts, gsl_multilarge_nlinear_fdf * fdf, gsl_vector * fvv, gsl_vector * work);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_multimin_fminimizer* gsl_multimin_fminimizer_alloc(const gsl_multimin_fminimizer_type * T, size_t n);
void gsl_multimin_fminimizer_free(gsl_multimin_fminimizer * s);
int gsl_multimin_fminimizer_iterate(gsl_multimin_fminimizer * s);
int gsl_multimin_test_gradient(const gsl_vector * g, double epsabs);
int gsl_multimin_test_size(const double size, double epsabs);
gsl_multimin_fdfminimizer* gsl_multimin_fdfminimizer_alloc(const gsl_multimin_fdfminimizer_type * T, size_t n);
void gsl_multimin_fdfminimizer_free(gsl_multimin_fdfminimizer * s);
int gsl_multimin_fdfminimizer_iterate(gsl_multimin_fdfminimizer * s);
int gsl_multimin_fdfminimizer_restart(gsl_multimin_fdfminimizer * s);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_odeiv_step* gsl_odeiv_step_alloc(const gsl_odeiv_step_type * T, size_t dim);
int gsl_odeiv_step_reset(gsl_odeiv_step * s);
void gsl_odeiv_step_free(gsl_odeiv_step * s);
const char* gsl_odeiv_step_name(const gsl_odeiv_step * s);
unsigned int gsl_odeiv_step_order(const gsl_odeiv_step * s);
int gsl_odeiv_step_apply(gsl_odeiv_step * s, double t, double h, double y[], double yerr[], const double dydt_in[], double dydt_out[], const gsl_odeiv_system * dydt);
gsl_odeiv_control* gsl_odeiv_control_alloc(const gsl_odeiv_control_type * T);
int gsl_odeiv_control_init(gsl_odeiv_control * c, double eps_abs, double eps_rel, double a_y, double a_dydt);
void gsl_odeiv_control_free(gsl_odeiv_control * c);
const char* gsl_odeiv_control_name(const gsl_odeiv_control * c);
gsl_odeiv_control* gsl_odeiv_control_standard_new(double eps_abs, double eps_rel, double a_y, double a_dydt);
gsl_odeiv_control* gsl_odeiv_control_y_new(double eps_abs, double eps_rel);
gsl_odeiv_control* gsl_odeiv_control_yp_new(double eps_abs, double eps_rel);
gsl_odeiv_control* gsl_odeiv_control_scaled_new(double eps_abs, double eps_rel, double a_y, double a_dydt, const double scale_abs[], size_t dim);
gsl_odeiv_evolve* gsl_odeiv_evolve_alloc(size_t dim);
int gsl_odeiv_evolve_apply(gsl_odeiv_evolve * e, gsl_odeiv_control * con, gsl_odeiv_step * step, const gsl_odeiv_system * dydt, double* t, double t1, double* h, double y[]);
int gsl_odeiv_evolve_reset(gsl_odeiv_evolve * e);
void gsl_odeiv_evolve_free(gsl_odeiv_evolve * e);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

INLINE_DECL double gsl_poly_eval(const double c[], const int len, const double x);
int gsl_poly_eval_derivs(const double c[], const size_t lenc, const double x, double res[], const size_t lenres);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

endif

__BEGIN_DECLS

INLINE_DECL double gsl_pow_2(const double x);
INLINE_DECL double gsl_pow_3(const double x);
INLINE_DECL double gsl_pow_4(const double x);
INLINE_DECL double gsl_pow_5(const double x);
INLINE_DECL double gsl_pow_6(const double x);
INLINE_DECL double gsl_pow_7(const double x);
INLINE_DECL double gsl_pow_8(const double x);
INLINE_DECL double gsl_pow_9(const double x);
endif

double gsl_pow_int(double x, int n);
double gsl_pow_uint(double x, unsigned int n);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void gsl_ran_discrete_free(gsl_ran_discrete_t * g);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

const gsl_rng_type** gsl_rng_types_setup(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void gsl_rstat_quantile_free(gsl_rstat_quantile_workspace * w);
int gsl_rstat_quantile_reset(gsl_rstat_quantile_workspace * w);
int gsl_rstat_quantile_add(const double x, gsl_rstat_quantile_workspace * w);
double gsl_rstat_quantile_get(gsl_rstat_quantile_workspace * w);
void gsl_rstat_free(gsl_rstat_workspace * w);
size_t gsl_rstat_n(const gsl_rstat_workspace * w);
int gsl_rstat_add(const double x, gsl_rstat_workspace * w);
double gsl_rstat_min(const gsl_rstat_workspace * w);
double gsl_rstat_max(const gsl_rstat_workspace * w);
double gsl_rstat_mean(const gsl_rstat_workspace * w);
double gsl_rstat_variance(const gsl_rstat_workspace * w);
double gsl_rstat_sd(const gsl_rstat_workspace * w);
double gsl_rstat_rms(const gsl_rstat_workspace * w);
double gsl_rstat_norm(const gsl_rstat_workspace * w);
double gsl_rstat_sd_mean(const gsl_rstat_workspace * w);
double gsl_rstat_median(gsl_rstat_workspace * w);
double gsl_rstat_skew(const gsl_rstat_workspace * w);
double gsl_rstat_kurtosis(const gsl_rstat_workspace * w);
int gsl_rstat_reset(gsl_rstat_workspace * w);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_airy_Ai_e(const double x, const gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_airy_Ai(const double x, gsl_mode_t mode);
int gsl_sf_airy_Bi_e(const double x, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_airy_Bi(const double x, gsl_mode_t mode);
int gsl_sf_airy_Ai_scaled_e(const double x, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_airy_Ai_scaled(const double x, gsl_mode_t mode);
int gsl_sf_airy_Bi_scaled_e(const double x, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_airy_Bi_scaled(const double x, gsl_mode_t mode);
int gsl_sf_airy_Ai_deriv_e(const double x, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_airy_Ai_deriv(const double x, gsl_mode_t mode);
int gsl_sf_airy_Bi_deriv_e(const double x, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_airy_Bi_deriv(const double x, gsl_mode_t mode);
int gsl_sf_airy_Ai_deriv_scaled_e(const double x, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_airy_Ai_deriv_scaled(const double x, gsl_mode_t mode);
int gsl_sf_airy_Bi_deriv_scaled_e(const double x, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_airy_Bi_deriv_scaled(const double x, gsl_mode_t mode);
int gsl_sf_airy_zero_Ai_e(unsigned int s, gsl_sf_result * result);
double gsl_sf_airy_zero_Ai(unsigned int s);
int gsl_sf_airy_zero_Bi_e(unsigned int s, gsl_sf_result * result);
double gsl_sf_airy_zero_Bi(unsigned int s);
int gsl_sf_airy_zero_Ai_deriv_e(unsigned int s, gsl_sf_result * result);
double gsl_sf_airy_zero_Ai_deriv(unsigned int s);
int gsl_sf_airy_zero_Bi_deriv_e(unsigned int s, gsl_sf_result * result);
double gsl_sf_airy_zero_Bi_deriv(unsigned int s);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_alf_precompute(const gsl_sf_alf_t norm, const size_t lmax, const size_t mmax, const size_t flags, double output_array[]);
size_t gsl_sf_alf_array_size(const size_t lmax, const size_t mmax);
int gsl_sf_alf_array(const size_t lmax, const size_t mmax, const double x, double result_array[]);
int gsl_sf_alf_deriv_array(const size_t lmax, const size_t mmax, const double x, double result_array[], double result_deriv_array[]);
int gsl_sf_alf_vsh_array(const size_t lmax, const size_t mmax, const double x, double result_array[], double result_deriv_array[]);
INLINE_DECL size_t gsl_sf_alf_nlm(const size_t lmax, const size_t mmax);
INLINE_DECL size_t gsl_sf_alf_array_index(const size_t l, const size_t m, const size_t lmax);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_bessel_J0_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_J0(const double x);
int gsl_sf_bessel_J1_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_J1(const double x);
int gsl_sf_bessel_Jn_e(int n, double x, gsl_sf_result * result);
double gsl_sf_bessel_Jn(const int n, const double x);
int gsl_sf_bessel_Jn_array(int nmin, int nmax, double x, double* result_array);
int gsl_sf_bessel_Y0_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_Y0(const double x);
int gsl_sf_bessel_Y1_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_Y1(const double x);
int gsl_sf_bessel_Yn_e(int n, const double x, gsl_sf_result * result);
double gsl_sf_bessel_Yn(const int n, const double x);
int gsl_sf_bessel_Yn_array(const int nmin, const int nmax, const double x, double* result_array);
int gsl_sf_bessel_I0_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_I0(const double x);
int gsl_sf_bessel_I1_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_I1(const double x);
int gsl_sf_bessel_In_e(const int n, const double x, gsl_sf_result * result);
double gsl_sf_bessel_In(const int n, const double x);
int gsl_sf_bessel_In_array(const int nmin, const int nmax, const double x, double* result_array);
int gsl_sf_bessel_I0_scaled_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_I0_scaled(const double x);
int gsl_sf_bessel_I1_scaled_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_I1_scaled(const double x);
int gsl_sf_bessel_In_scaled_e(int n, const double x, gsl_sf_result * result);
double gsl_sf_bessel_In_scaled(const int n, const double x);
int gsl_sf_bessel_In_scaled_array(const int nmin, const int nmax, const double x, double* result_array);
int gsl_sf_bessel_K0_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_K0(const double x);
int gsl_sf_bessel_K1_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_K1(const double x);
int gsl_sf_bessel_Kn_e(const int n, const double x, gsl_sf_result * result);
double gsl_sf_bessel_Kn(const int n, const double x);
int gsl_sf_bessel_Kn_array(const int nmin, const int nmax, const double x, double* result_array);
int gsl_sf_bessel_K0_scaled_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_K0_scaled(const double x);
int gsl_sf_bessel_K1_scaled_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_K1_scaled(const double x);
int gsl_sf_bessel_Kn_scaled_e(int n, const double x, gsl_sf_result * result);
double gsl_sf_bessel_Kn_scaled(const int n, const double x);
int gsl_sf_bessel_Kn_scaled_array(const int nmin, const int nmax, const double x, double* result_array);
int gsl_sf_bessel_j0_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_j0(const double x);
int gsl_sf_bessel_j1_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_j1(const double x);
int gsl_sf_bessel_j2_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_j2(const double x);
int gsl_sf_bessel_jl_e(const int l, const double x, gsl_sf_result * result);
double gsl_sf_bessel_jl(const int l, const double x);
int gsl_sf_bessel_jl_array(const int lmax, const double x, double* result_array);
int gsl_sf_bessel_jl_steed_array(const int lmax, const double x, double* jl_x_array);
int gsl_sf_bessel_y0_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_y0(const double x);
int gsl_sf_bessel_y1_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_y1(const double x);
int gsl_sf_bessel_y2_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_y2(const double x);
int gsl_sf_bessel_yl_e(int l, const double x, gsl_sf_result * result);
double gsl_sf_bessel_yl(const int l, const double x);
int gsl_sf_bessel_yl_array(const int lmax, const double x, double* result_array);
int gsl_sf_bessel_i0_scaled_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_i0_scaled(const double x);
int gsl_sf_bessel_i1_scaled_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_i1_scaled(const double x);
int gsl_sf_bessel_i2_scaled_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_i2_scaled(const double x);
int gsl_sf_bessel_il_scaled_e(const int l, double x, gsl_sf_result * result);
double gsl_sf_bessel_il_scaled(const int l, const double x);
int gsl_sf_bessel_il_scaled_array(const int lmax, const double x, double* result_array);
int gsl_sf_bessel_k0_scaled_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_k0_scaled(const double x);
int gsl_sf_bessel_k1_scaled_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_k1_scaled(const double x);
int gsl_sf_bessel_k2_scaled_e(const double x, gsl_sf_result * result);
double gsl_sf_bessel_k2_scaled(const double x);
int gsl_sf_bessel_kl_scaled_e(int l, const double x, gsl_sf_result * result);
double gsl_sf_bessel_kl_scaled(const int l, const double x);
int gsl_sf_bessel_kl_scaled_array(const int lmax, const double x, double* result_array);
int gsl_sf_bessel_Jnu_e(const double nu, const double x, gsl_sf_result * result);
double gsl_sf_bessel_Jnu(const double nu, const double x);
int gsl_sf_bessel_Ynu_e(double nu, double x, gsl_sf_result * result);
double gsl_sf_bessel_Ynu(const double nu, const double x);
int gsl_sf_bessel_sequence_Jnu_e(double nu, gsl_mode_t mode, size_t size, double* v);
int gsl_sf_bessel_Inu_scaled_e(double nu, double x, gsl_sf_result * result);
double gsl_sf_bessel_Inu_scaled(double nu, double x);
int gsl_sf_bessel_Inu_e(double nu, double x, gsl_sf_result * result);
double gsl_sf_bessel_Inu(double nu, double x);
int gsl_sf_bessel_Knu_scaled_e(const double nu, const double x, gsl_sf_result * result);
double gsl_sf_bessel_Knu_scaled(const double nu, const double x);
int gsl_sf_bessel_Knu_scaled_e10_e(const double nu, const double x, gsl_sf_result_e10 * result);
int gsl_sf_bessel_Knu_e(const double nu, const double x, gsl_sf_result * result);
double gsl_sf_bessel_Knu(const double nu, const double x);
int gsl_sf_bessel_lnKnu_e(const double nu, const double x, gsl_sf_result * result);
double gsl_sf_bessel_lnKnu(const double nu, const double x);
int gsl_sf_bessel_zero_J0_e(unsigned int s, gsl_sf_result * result);
double gsl_sf_bessel_zero_J0(unsigned int s);
int gsl_sf_bessel_zero_J1_e(unsigned int s, gsl_sf_result * result);
double gsl_sf_bessel_zero_J1(unsigned int s);
int gsl_sf_bessel_zero_Jnu_e(double nu, unsigned int s, gsl_sf_result * result);
double gsl_sf_bessel_zero_Jnu(double nu, unsigned int s);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_clausen_e(double x, gsl_sf_result * result);
double gsl_sf_clausen(const double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_hydrogenicR_1_e(const double Z, const double r, gsl_sf_result * result);
double gsl_sf_hydrogenicR_1(const double Z, const double r);
int gsl_sf_hydrogenicR_e(const int n, const int l, const double Z, const double r, gsl_sf_result * result);
double gsl_sf_hydrogenicR(const int n, const int l, const double Z, const double r);
int gsl_sf_coulomb_wave_FG_e(const double eta, const double x, const double lam_F, const int k_lam_G, gsl_sf_result * F, gsl_sf_result * Fp, gsl_sf_result * G, gsl_sf_result * Gp, double* exp_F, double* exp_G);
int gsl_sf_coulomb_wave_F_array(double lam_min, int kmax, double eta, double x, double* fc_array, double* F_exponent);
int gsl_sf_coulomb_wave_FG_array(double lam_min, int kmax, double eta, double x, double* fc_array, double* gc_array, double* F_exponent, double* G_exponent);
int gsl_sf_coulomb_wave_FGp_array(double lam_min, int kmax, double eta, double x, double* fc_array, double* fcp_array, double* gc_array, double* gcp_array, double* F_exponent, double* G_exponent);
int gsl_sf_coulomb_wave_sphF_array(double lam_min, int kmax, double eta, double x, double* fc_array, double* F_exponent);
int gsl_sf_coulomb_CL_e(double L, double eta, gsl_sf_result * result);
int gsl_sf_coulomb_CL_array(double Lmin, int kmax, double eta, double* cl);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_coupling_3j_e(int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc, gsl_sf_result * result);
double gsl_sf_coupling_3j(int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);
int gsl_sf_coupling_6j_e(int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, gsl_sf_result * result);
double gsl_sf_coupling_6j(int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);
int gsl_sf_coupling_RacahW_e(int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, gsl_sf_result * result);
double gsl_sf_coupling_RacahW(int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);
int gsl_sf_coupling_9j_e(int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji, gsl_sf_result * result);
double gsl_sf_coupling_9j(int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);
ifndef GSL_DISABLE_DEPRECATED
int gsl_sf_coupling_6j_INCORRECT_e(int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, gsl_sf_result * result);
double gsl_sf_coupling_6j_INCORRECT(int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_dawson_e(double x, gsl_sf_result * result);
double gsl_sf_dawson(double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_debye_1_e(const double x, gsl_sf_result * result);
double gsl_sf_debye_1(const double x);
int gsl_sf_debye_2_e(const double x, gsl_sf_result * result);
double gsl_sf_debye_2(const double x);
int gsl_sf_debye_3_e(const double x, gsl_sf_result * result);
double gsl_sf_debye_3(const double x);
int gsl_sf_debye_4_e(const double x, gsl_sf_result * result);
double gsl_sf_debye_4(const double x);
int gsl_sf_debye_5_e(const double x, gsl_sf_result * result);
double gsl_sf_debye_5(const double x);
int gsl_sf_debye_6_e(const double x, gsl_sf_result * result);
double gsl_sf_debye_6(const double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_dilog_e(const double x, gsl_sf_result * result);
double gsl_sf_dilog(const double x);
int gsl_sf_complex_dilog_xy_e(const double x, const double y, gsl_sf_result * result_re, gsl_sf_result * result_im);
int gsl_sf_complex_dilog_e(const double r, const double theta, gsl_sf_result * result_re, gsl_sf_result * result_im);
int gsl_sf_complex_spence_xy_e(const double x, const double y, gsl_sf_result * real_sp, gsl_sf_result * imag_sp);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_multiply_e(const double x, const double y, gsl_sf_result * result);
double gsl_sf_multiply(const double x, const double y);
int gsl_sf_multiply_err_e(const double x, const double dx, const double y, const double dy, gsl_sf_result * result);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_ellint_Kcomp_e(double k, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_ellint_Kcomp(double k, gsl_mode_t mode);
int gsl_sf_ellint_Ecomp_e(double k, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_ellint_Ecomp(double k, gsl_mode_t mode);
int gsl_sf_ellint_Pcomp_e(double k, double n, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_ellint_Pcomp(double k, double n, gsl_mode_t mode);
int gsl_sf_ellint_Dcomp_e(double k, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_ellint_Dcomp(double k, gsl_mode_t mode);
int gsl_sf_ellint_F_e(double phi, double k, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_ellint_F(double phi, double k, gsl_mode_t mode);
int gsl_sf_ellint_E_e(double phi, double k, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_ellint_E(double phi, double k, gsl_mode_t mode);
int gsl_sf_ellint_P_e(double phi, double k, double n, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_ellint_P(double phi, double k, double n, gsl_mode_t mode);
int gsl_sf_ellint_D_e(double phi, double k, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_ellint_D(double phi, double k, gsl_mode_t mode);
int gsl_sf_ellint_RC_e(double x, double y, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_ellint_RC(double x, double y, gsl_mode_t mode);
int gsl_sf_ellint_RD_e(double x, double y, double z, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_ellint_RD(double x, double y, double z, gsl_mode_t mode);
int gsl_sf_ellint_RF_e(double x, double y, double z, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_ellint_RF(double x, double y, double z, gsl_mode_t mode);
int gsl_sf_ellint_RJ_e(double x, double y, double z, double p, gsl_mode_t mode, gsl_sf_result * result);
double gsl_sf_ellint_RJ(double x, double y, double z, double p, gsl_mode_t mode);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_elljac_e(double u, double m, double* sn, double* cn, double* dn);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_erfc_e(double x, gsl_sf_result * result);
double gsl_sf_erfc(double x);
int gsl_sf_log_erfc_e(double x, gsl_sf_result * result);
double gsl_sf_log_erfc(double x);
int gsl_sf_erf_e(double x, gsl_sf_result * result);
double gsl_sf_erf(double x);
int gsl_sf_erf_Z_e(double x, gsl_sf_result * result);
int gsl_sf_erf_Q_e(double x, gsl_sf_result * result);
double gsl_sf_erf_Z(double x);
double gsl_sf_erf_Q(double x);
int gsl_sf_hazard_e(double x, gsl_sf_result * result);
double gsl_sf_hazard(double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_exp_e(const double x, gsl_sf_result * result);
double gsl_sf_exp(const double x);
int gsl_sf_exp_e10_e(const double x, gsl_sf_result_e10 * result);
int gsl_sf_exp_mult_e(const double x, const double y, gsl_sf_result * result);
double gsl_sf_exp_mult(const double x, const double y);
int gsl_sf_exp_mult_e10_e(const double x, const double y, gsl_sf_result_e10 * result);
int gsl_sf_expm1_e(const double x, gsl_sf_result * result);
double gsl_sf_expm1(const double x);
int gsl_sf_exprel_e(const double x, gsl_sf_result * result);
double gsl_sf_exprel(const double x);
int gsl_sf_exprel_2_e(double x, gsl_sf_result * result);
double gsl_sf_exprel_2(const double x);
int gsl_sf_exprel_n_e(const int n, const double x, gsl_sf_result * result);
double gsl_sf_exprel_n(const int n, const double x);
int gsl_sf_exprel_n_CF_e(const double n, const double x, gsl_sf_result * result);
int gsl_sf_exp_err_e(const double x, const double dx, gsl_sf_result * result);
int gsl_sf_exp_err_e10_e(const double x, const double dx, gsl_sf_result_e10 * result);
int gsl_sf_exp_mult_err_e(const double x, const double dx, const double y, const double dy, gsl_sf_result * result);
int gsl_sf_exp_mult_err_e10_e(const double x, const double dx, const double y, const double dy, gsl_sf_result_e10 * result);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_expint_E1_e(const double x, gsl_sf_result * result);
double gsl_sf_expint_E1(const double x);
int gsl_sf_expint_E2_e(const double x, gsl_sf_result * result);
double gsl_sf_expint_E2(const double x);
int gsl_sf_expint_En_e(const int n, const double x, gsl_sf_result * result);
double gsl_sf_expint_En(const int n, const double x);
int gsl_sf_expint_E1_scaled_e(const double x, gsl_sf_result * result);
double gsl_sf_expint_E1_scaled(const double x);
int gsl_sf_expint_E2_scaled_e(const double x, gsl_sf_result * result);
double gsl_sf_expint_E2_scaled(const double x);
int gsl_sf_expint_En_scaled_e(const int n, const double x, gsl_sf_result * result);
double gsl_sf_expint_En_scaled(const int n, const double x);
int gsl_sf_expint_Ei_e(const double x, gsl_sf_result * result);
double gsl_sf_expint_Ei(const double x);
int gsl_sf_expint_Ei_scaled_e(const double x, gsl_sf_result * result);
double gsl_sf_expint_Ei_scaled(const double x);
int gsl_sf_Shi_e(const double x, gsl_sf_result * result);
double gsl_sf_Shi(const double x);
int gsl_sf_Chi_e(const double x, gsl_sf_result * result);
double gsl_sf_Chi(const double x);
int gsl_sf_expint_3_e(const double x, gsl_sf_result * result);
double gsl_sf_expint_3(double x);
int gsl_sf_Si_e(const double x, gsl_sf_result * result);
double gsl_sf_Si(const double x);
int gsl_sf_Ci_e(const double x, gsl_sf_result * result);
double gsl_sf_Ci(const double x);
int gsl_sf_atanint_e(const double x, gsl_sf_result * result);
double gsl_sf_atanint(const double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_fermi_dirac_m1_e(const double x, gsl_sf_result * result);
double gsl_sf_fermi_dirac_m1(const double x);
int gsl_sf_fermi_dirac_0_e(const double x, gsl_sf_result * result);
double gsl_sf_fermi_dirac_0(const double x);
int gsl_sf_fermi_dirac_1_e(const double x, gsl_sf_result * result);
double gsl_sf_fermi_dirac_1(const double x);
int gsl_sf_fermi_dirac_2_e(const double x, gsl_sf_result * result);
double gsl_sf_fermi_dirac_2(const double x);
int gsl_sf_fermi_dirac_int_e(const int j, const double x, gsl_sf_result * result);
double gsl_sf_fermi_dirac_int(const int j, const double x);
int gsl_sf_fermi_dirac_mhalf_e(const double x, gsl_sf_result * result);
double gsl_sf_fermi_dirac_mhalf(const double x);
int gsl_sf_fermi_dirac_half_e(const double x, gsl_sf_result * result);
double gsl_sf_fermi_dirac_half(const double x);
int gsl_sf_fermi_dirac_3half_e(const double x, gsl_sf_result * result);
double gsl_sf_fermi_dirac_3half(const double x);
int gsl_sf_fermi_dirac_inc_0_e(const double x, const double b, gsl_sf_result * result);
double gsl_sf_fermi_dirac_inc_0(const double x, const double b);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_lngamma_e(double x, gsl_sf_result * result);
double gsl_sf_lngamma(const double x);
int gsl_sf_lngamma_sgn_e(double x, gsl_sf_result * result_lg, double* sgn);
int gsl_sf_gamma_e(const double x, gsl_sf_result * result);
double gsl_sf_gamma(const double x);
int gsl_sf_gammastar_e(const double x, gsl_sf_result * result);
double gsl_sf_gammastar(const double x);
int gsl_sf_gammainv_e(const double x, gsl_sf_result * result);
double gsl_sf_gammainv(const double x);
int gsl_sf_lngamma_complex_e(double zr, double zi, gsl_sf_result * lnr, gsl_sf_result * arg);
int gsl_sf_taylorcoeff_e(const int n, const double x, gsl_sf_result * result);
double gsl_sf_taylorcoeff(const int n, const double x);
int gsl_sf_fact_e(const unsigned int n, gsl_sf_result * result);
double gsl_sf_fact(const unsigned int n);
int gsl_sf_doublefact_e(const unsigned int n, gsl_sf_result * result);
double gsl_sf_doublefact(const unsigned int n);
int gsl_sf_lnfact_e(const unsigned int n, gsl_sf_result * result);
double gsl_sf_lnfact(const unsigned int n);
int gsl_sf_lndoublefact_e(const unsigned int n, gsl_sf_result * result);
double gsl_sf_lndoublefact(const unsigned int n);
int gsl_sf_lnchoose_e(unsigned int n, unsigned int m, gsl_sf_result * result);
double gsl_sf_lnchoose(unsigned int n, unsigned int m);
int gsl_sf_choose_e(unsigned int n, unsigned int m, gsl_sf_result * result);
double gsl_sf_choose(unsigned int n, unsigned int m);
int gsl_sf_lnpoch_e(const double a, const double x, gsl_sf_result * result);
double gsl_sf_lnpoch(const double a, const double x);
int gsl_sf_lnpoch_sgn_e(const double a, const double x, gsl_sf_result * result, double* sgn);
int gsl_sf_poch_e(const double a, const double x, gsl_sf_result * result);
double gsl_sf_poch(const double a, const double x);
int gsl_sf_pochrel_e(const double a, const double x, gsl_sf_result * result);
double gsl_sf_pochrel(const double a, const double x);
int gsl_sf_gamma_inc_Q_e(const double a, const double x, gsl_sf_result * result);
double gsl_sf_gamma_inc_Q(const double a, const double x);
int gsl_sf_gamma_inc_P_e(const double a, const double x, gsl_sf_result * result);
double gsl_sf_gamma_inc_P(const double a, const double x);
int gsl_sf_gamma_inc_e(const double a, const double x, gsl_sf_result * result);
double gsl_sf_gamma_inc(const double a, const double x);
int gsl_sf_lnbeta_e(const double a, const double b, gsl_sf_result * result);
double gsl_sf_lnbeta(const double a, const double b);
int gsl_sf_lnbeta_sgn_e(const double x, const double y, gsl_sf_result * result, double* sgn);
int gsl_sf_beta_e(const double a, const double b, gsl_sf_result * result);
double gsl_sf_beta(const double a, const double b);
int gsl_sf_beta_inc_e(const double a, const double b, const double x, gsl_sf_result * result);
double gsl_sf_beta_inc(const double a, const double b, const double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_gegenpoly_1_e(double lambda, double x, gsl_sf_result * result);
int gsl_sf_gegenpoly_2_e(double lambda, double x, gsl_sf_result * result);
int gsl_sf_gegenpoly_3_e(double lambda, double x, gsl_sf_result * result);
double gsl_sf_gegenpoly_1(double lambda, double x);
double gsl_sf_gegenpoly_2(double lambda, double x);
double gsl_sf_gegenpoly_3(double lambda, double x);
int gsl_sf_gegenpoly_n_e(int n, double lambda, double x, gsl_sf_result * result);
double gsl_sf_gegenpoly_n(int n, double lambda, double x);
int gsl_sf_gegenpoly_array(int nmax, double lambda, double x, double* result_array);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

endif

__BEGIN_DECLS

int gsl_sf_hermite_prob_e(const int n, const double x, gsl_sf_result * result);
double gsl_sf_hermite_prob(const int n, const double x);
int gsl_sf_hermite_prob_deriv_e(const int m, const int n, const double x, gsl_sf_result * result);
double gsl_sf_hermite_prob_deriv(const int m, const int n, const double x);
int gsl_sf_hermite_e(const int n, const double x, gsl_sf_result * result);
double gsl_sf_hermite(const int n, const double x);
int gsl_sf_hermite_deriv_e(const int m, const int n, const double x, gsl_sf_result * result);
double gsl_sf_hermite_deriv(const int m, const int n, const double x);
int gsl_sf_hermite_func_e(const int n, const double x, gsl_sf_result * result);
double gsl_sf_hermite_func(const int n, const double x);
int gsl_sf_hermite_func_fast_e(const int n, const double x, gsl_sf_result * result);
double gsl_sf_hermite_func_fast(const int n, const double x);
int gsl_sf_hermite_prob_array(const int nmax, const double x, double* result_array);
int gsl_sf_hermite_prob_array_deriv(const int m, const int nmax, const double x, double* result_array);
int gsl_sf_hermite_prob_deriv_array(const int mmax, const int n, const double x, double* result_array);
int gsl_sf_hermite_prob_series_e(const int n, const double x, const double* a, gsl_sf_result * result);
double gsl_sf_hermite_prob_series(const int n, const double x, const double* a);
int gsl_sf_hermite_array(const int nmax, const double x, double* result_array);
int gsl_sf_hermite_array_deriv(const int m, const int nmax, const double x, double* result_array);
int gsl_sf_hermite_deriv_array(const int mmax, const int n, const double x, double* result_array);
int gsl_sf_hermite_series_e(const int n, const double x, const double* a, gsl_sf_result * result);
double gsl_sf_hermite_series(const int n, const double x, const double* a);
int gsl_sf_hermite_func_array(const int nmax, const double x, double* result_array);
int gsl_sf_hermite_func_series_e(const int n, const double x, const double* a, gsl_sf_result * result);
double gsl_sf_hermite_func_series(const int n, const double x, const double* a);
int gsl_sf_hermite_func_der_e(const int m, const int n, const double x, gsl_sf_result * result);
double gsl_sf_hermite_func_der(const int m, const int n, const double x);
int gsl_sf_hermite_prob_zero_e(const int n, const int s, gsl_sf_result * result);
double gsl_sf_hermite_prob_zero(const int n, const int s);
int gsl_sf_hermite_zero_e(const int n, const int s, gsl_sf_result * result);
double gsl_sf_hermite_zero(const int n, const int s);
int gsl_sf_hermite_func_zero_e(const int n, const int s, gsl_sf_result * result);
double gsl_sf_hermite_func_zero(const int n, const int s);
ifndef GSL_DISABLE_DEPRECATED

int gsl_sf_hermite_phys_e(const int n, const double x, gsl_sf_result * result);
double gsl_sf_hermite_phys(const int n, const double x);
int gsl_sf_hermite_phys_der_e(const int m, const int n, const double x, gsl_sf_result * result);
double gsl_sf_hermite_phys_der(const int m, const int n, const double x);
int gsl_sf_hermite_phys_array(const int nmax, const double x, double* result_array);
int gsl_sf_hermite_phys_series_e(const int n, const double x, const double* a, gsl_sf_result * result);
double gsl_sf_hermite_phys_series(const int n, const double x, const double* a);
int gsl_sf_hermite_phys_array_der(const int m, const int nmax, const double x, double* result_array);
int gsl_sf_hermite_phys_der_array(const int mmax, const int n, const double x, double* result_array);
int gsl_sf_hermite_phys_zero_e(const int n, const int s, gsl_sf_result * result);
double gsl_sf_hermite_phys_zero(const int n, const int s);
int gsl_sf_hermite_prob_array_der(const int m, const int nmax, const double x, double* result_array);
int gsl_sf_hermite_prob_der_array(const int mmax, const int n, const double x, double* result_array);
int gsl_sf_hermite_prob_der_e(const int m, const int n, const double x, gsl_sf_result * result);
double gsl_sf_hermite_prob_der(const int m, const int n, const double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_hyperg_0F1_e(double c, double x, gsl_sf_result * result);
double gsl_sf_hyperg_0F1(const double c, const double x);
int gsl_sf_hyperg_1F1_int_e(const int m, const int n, const double x, gsl_sf_result * result);
double gsl_sf_hyperg_1F1_int(const int m, const int n, double x);
int gsl_sf_hyperg_1F1_e(const double a, const double b, const double x, gsl_sf_result * result);
double gsl_sf_hyperg_1F1(double a, double b, double x);
int gsl_sf_hyperg_U_int_e(const int m, const int n, const double x, gsl_sf_result * result);
double gsl_sf_hyperg_U_int(const int m, const int n, const double x);
int gsl_sf_hyperg_U_int_e10_e(const int m, const int n, const double x, gsl_sf_result_e10 * result);
int gsl_sf_hyperg_U_e(const double a, const double b, const double x, gsl_sf_result * result);
double gsl_sf_hyperg_U(const double a, const double b, const double x);
int gsl_sf_hyperg_U_e10_e(const double a, const double b, const double x, gsl_sf_result_e10 * result);
int gsl_sf_hyperg_2F1_e(double a, double b, const double c, const double x, gsl_sf_result * result);
double gsl_sf_hyperg_2F1(double a, double b, double c, double x);
int gsl_sf_hyperg_2F1_conj_e(const double aR, const double aI, const double c, const double x, gsl_sf_result * result);
double gsl_sf_hyperg_2F1_conj(double aR, double aI, double c, double x);
int gsl_sf_hyperg_2F1_renorm_e(const double a, const double b, const double c, const double x, gsl_sf_result * result);
double gsl_sf_hyperg_2F1_renorm(double a, double b, double c, double x);
int gsl_sf_hyperg_2F1_conj_renorm_e(const double aR, const double aI, const double c, const double x, gsl_sf_result * result);
double gsl_sf_hyperg_2F1_conj_renorm(double aR, double aI, double c, double x);
int gsl_sf_hyperg_2F0_e(const double a, const double b, const double x, gsl_sf_result * result);
double gsl_sf_hyperg_2F0(const double a, const double b, const double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_laguerre_1_e(const double a, const double x, gsl_sf_result * result);
int gsl_sf_laguerre_2_e(const double a, const double x, gsl_sf_result * result);
int gsl_sf_laguerre_3_e(const double a, const double x, gsl_sf_result * result);
double gsl_sf_laguerre_1(double a, double x);
double gsl_sf_laguerre_2(double a, double x);
double gsl_sf_laguerre_3(double a, double x);
int gsl_sf_laguerre_n_e(const int n, const double a, const double x, gsl_sf_result * result);
double gsl_sf_laguerre_n(int n, double a, double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_lambert_W0_e(double x, gsl_sf_result * result);
double gsl_sf_lambert_W0(double x);
int gsl_sf_lambert_Wm1_e(double x, gsl_sf_result * result);
double gsl_sf_lambert_Wm1(double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_legendre_Pl_e(const int l, const double x, gsl_sf_result * result);
double gsl_sf_legendre_Pl(const int l, const double x);
int gsl_sf_legendre_Pl_array(const int lmax, const double x, double* result_array);
int gsl_sf_legendre_Pl_deriv_array(const int lmax, const double x, double* result_array, double* result_deriv_array);
int gsl_sf_legendre_P1_e(double x, gsl_sf_result * result);
int gsl_sf_legendre_P2_e(double x, gsl_sf_result * result);
int gsl_sf_legendre_P3_e(double x, gsl_sf_result * result);
double gsl_sf_legendre_P1(const double x);
double gsl_sf_legendre_P2(const double x);
double gsl_sf_legendre_P3(const double x);
int gsl_sf_legendre_Q0_e(const double x, gsl_sf_result * result);
double gsl_sf_legendre_Q0(const double x);
int gsl_sf_legendre_Q1_e(const double x, gsl_sf_result * result);
double gsl_sf_legendre_Q1(const double x);
int gsl_sf_legendre_Ql_e(const int l, const double x, gsl_sf_result * result);
double gsl_sf_legendre_Ql(const int l, const double x);
int gsl_sf_legendre_Plm_e(const int l, const int m, const double x, gsl_sf_result * result);
double gsl_sf_legendre_Plm(const int l, const int m, const double x);
int gsl_sf_legendre_Plm_array(const int lmax, const int m, const double x, double* result_array);
int gsl_sf_legendre_Plm_deriv_array(const int lmax, const int m, const double x, double* result_array, double* result_deriv_array);
int gsl_sf_legendre_sphPlm_e(const int l, int m, const double x, gsl_sf_result * result);
double gsl_sf_legendre_sphPlm(const int l, const int m, const double x);
int gsl_sf_legendre_sphPlm_array(const int lmax, int m, const double x, double* result_array);
int gsl_sf_legendre_sphPlm_deriv_array(const int lmax, const int m, const double x, double* result_array, double* result_deriv_array);
int gsl_sf_legendre_array_size(const int lmax, const int m);
int gsl_sf_conicalP_half_e(const double lambda, const double x, gsl_sf_result * result);
double gsl_sf_conicalP_half(const double lambda, const double x);
int gsl_sf_conicalP_mhalf_e(const double lambda, const double x, gsl_sf_result * result);
double gsl_sf_conicalP_mhalf(const double lambda, const double x);
int gsl_sf_conicalP_0_e(const double lambda, const double x, gsl_sf_result * result);
double gsl_sf_conicalP_0(const double lambda, const double x);
int gsl_sf_conicalP_1_e(const double lambda, const double x, gsl_sf_result * result);
double gsl_sf_conicalP_1(const double lambda, const double x);
int gsl_sf_conicalP_sph_reg_e(const int l, const double lambda, const double x, gsl_sf_result * result);
double gsl_sf_conicalP_sph_reg(const int l, const double lambda, const double x);
int gsl_sf_conicalP_cyl_reg_e(const int m, const double lambda, const double x, gsl_sf_result * result);
double gsl_sf_conicalP_cyl_reg(const int m, const double lambda, const double x);
int gsl_sf_legendre_H3d_0_e(const double lambda, const double eta, gsl_sf_result * result);
double gsl_sf_legendre_H3d_0(const double lambda, const double eta);
int gsl_sf_legendre_H3d_1_e(const double lambda, const double eta, gsl_sf_result * result);
double gsl_sf_legendre_H3d_1(const double lambda, const double eta);
int gsl_sf_legendre_H3d_e(const int l, const double lambda, const double eta, gsl_sf_result * result);
double gsl_sf_legendre_H3d(const int l, const double lambda, const double eta);
int gsl_sf_legendre_H3d_array(const int lmax, const double lambda, const double eta, double* result_array);
int gsl_sf_legendre_array(const gsl_sf_legendre_t norm, const size_t lmax, const double x, double result_array[]);
int gsl_sf_legendre_array_e(const gsl_sf_legendre_t norm, const size_t lmax, const double x, const double csphase, double result_array[]);
int gsl_sf_legendre_deriv_array(const gsl_sf_legendre_t norm, const size_t lmax, const double x, double result_array[], double result_deriv_array[]);
int gsl_sf_legendre_deriv_array_e(const gsl_sf_legendre_t norm, const size_t lmax, const double x, const double csphase, double result_array[], double result_deriv_array[]);
int gsl_sf_legendre_deriv_alt_array(const gsl_sf_legendre_t norm, const size_t lmax, const double x, double result_array[], double result_deriv_array[]);
int gsl_sf_legendre_deriv_alt_array_e(const gsl_sf_legendre_t norm, const size_t lmax, const double x, const double csphase, double result_array[], double result_deriv_array[]);
int gsl_sf_legendre_deriv2_array(const gsl_sf_legendre_t norm, const size_t lmax, const double x, double result_array[], double result_deriv_array[], double result_deriv2_array[]);
int gsl_sf_legendre_deriv2_array_e(const gsl_sf_legendre_t norm, const size_t lmax, const double x, const double csphase, double result_array[], double result_deriv_array[], double result_deriv2_array[]);
int gsl_sf_legendre_deriv2_alt_array(const gsl_sf_legendre_t norm, const size_t lmax, const double x, double result_array[], double result_deriv_array[], double result_deriv2_array[]);
int gsl_sf_legendre_deriv2_alt_array_e(const gsl_sf_legendre_t norm, const size_t lmax, const double x, const double csphase, double result_array[], double result_deriv_array[], double result_deriv2_array[]);
size_t gsl_sf_legendre_array_n(const size_t lmax);
size_t gsl_sf_legendre_nlm(const size_t lmax);
INLINE_DECL size_t gsl_sf_legendre_array_index(const size_t l, const size_t m);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_log_e(const double x, gsl_sf_result * result);
double gsl_sf_log(const double x);
int gsl_sf_log_abs_e(const double x, gsl_sf_result * result);
double gsl_sf_log_abs(const double x);
int gsl_sf_complex_log_e(const double zr, const double zi, gsl_sf_result * lnr, gsl_sf_result * theta);
int gsl_sf_log_1plusx_e(const double x, gsl_sf_result * result);
double gsl_sf_log_1plusx(const double x);
int gsl_sf_log_1plusx_mx_e(const double x, gsl_sf_result * result);
double gsl_sf_log_1plusx_mx(const double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_mathieu_a_array(int order_min, int order_max, double qq, gsl_sf_mathieu_workspace * work, double result_array[]);
int gsl_sf_mathieu_b_array(int order_min, int order_max, double qq, gsl_sf_mathieu_workspace * work, double result_array[]);
int gsl_sf_mathieu_a_e(int order, double qq, gsl_sf_result * result);
double gsl_sf_mathieu_a(int order, double qq);
int gsl_sf_mathieu_b_e(int order, double qq, gsl_sf_result * result);
double gsl_sf_mathieu_b(int order, double qq);
int gsl_sf_mathieu_a_coeff(int order, double qq, double aa, double coeff[]);
int gsl_sf_mathieu_b_coeff(int order, double qq, double aa, double coeff[]);
void gsl_sf_mathieu_free(gsl_sf_mathieu_workspace * workspace);
int gsl_sf_mathieu_ce_e(int order, double qq, double zz, gsl_sf_result * result);
double gsl_sf_mathieu_ce(int order, double qq, double zz);
int gsl_sf_mathieu_se_e(int order, double qq, double zz, gsl_sf_result * result);
double gsl_sf_mathieu_se(int order, double qq, double zz);
int gsl_sf_mathieu_ce_array(int nmin, int nmax, double qq, double zz, gsl_sf_mathieu_workspace * work, double result_array[]);
int gsl_sf_mathieu_se_array(int nmin, int nmax, double qq, double zz, gsl_sf_mathieu_workspace * work, double result_array[]);
int gsl_sf_mathieu_Mc_e(int kind, int order, double qq, double zz, gsl_sf_result * result);
double gsl_sf_mathieu_Mc(int kind, int order, double qq, double zz);
int gsl_sf_mathieu_Ms_e(int kind, int order, double qq, double zz, gsl_sf_result * result);
double gsl_sf_mathieu_Ms(int kind, int order, double qq, double zz);
int gsl_sf_mathieu_Mc_array(int kind, int nmin, int nmax, double qq, double zz, gsl_sf_mathieu_workspace * work, double result_array[]);
int gsl_sf_mathieu_Ms_array(int kind, int nmin, int nmax, double qq, double zz, gsl_sf_mathieu_workspace * work, double result_array[]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_pow_int_e(double x, int n, gsl_sf_result * result);
double gsl_sf_pow_int(const double x, const int n);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_psi_int_e(const int n, gsl_sf_result * result);
double gsl_sf_psi_int(const int n);
int gsl_sf_psi_e(const double x, gsl_sf_result * result);
double gsl_sf_psi(const double x);
int gsl_sf_psi_1piy_e(const double y, gsl_sf_result * result);
double gsl_sf_psi_1piy(const double y);
int gsl_sf_complex_psi_e(const double x, const double y, gsl_sf_result * result_re, gsl_sf_result * result_im);
int gsl_sf_psi_1_int_e(const int n, gsl_sf_result * result);
double gsl_sf_psi_1_int(const int n);
int gsl_sf_psi_1_e(const double x, gsl_sf_result * result);
double gsl_sf_psi_1(const double x);
int gsl_sf_psi_n_e(const int n, const double x, gsl_sf_result * result);
double gsl_sf_psi_n(const int n, const double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_result_smash_e(const gsl_sf_result_e10 * re, gsl_sf_result * r);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_sin_pi_e(double x, gsl_sf_result * result);
double gsl_sf_sin_pi(const double x);
int gsl_sf_cos_pi_e(double x, gsl_sf_result * result);
double gsl_sf_cos_pi(const double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_synchrotron_1_e(const double x, gsl_sf_result * result);
double gsl_sf_synchrotron_1(const double x);
int gsl_sf_synchrotron_2_e(const double x, gsl_sf_result * result);
double gsl_sf_synchrotron_2(const double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_transport_2_e(const double x, gsl_sf_result * result);
double gsl_sf_transport_2(const double x);
int gsl_sf_transport_3_e(const double x, gsl_sf_result * result);
double gsl_sf_transport_3(const double x);
int gsl_sf_transport_4_e(const double x, gsl_sf_result * result);
double gsl_sf_transport_4(const double x);
int gsl_sf_transport_5_e(const double x, gsl_sf_result * result);
double gsl_sf_transport_5(const double x);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_sin_e(double x, gsl_sf_result * result);
double gsl_sf_sin(const double x);
int gsl_sf_cos_e(double x, gsl_sf_result * result);
double gsl_sf_cos(const double x);
int gsl_sf_hypot_e(const double x, const double y, gsl_sf_result * result);
double gsl_sf_hypot(const double x, const double y);
int gsl_sf_complex_sin_e(const double zr, const double zi, gsl_sf_result * szr, gsl_sf_result * szi);
int gsl_sf_complex_cos_e(const double zr, const double zi, gsl_sf_result * czr, gsl_sf_result * czi);
int gsl_sf_complex_logsin_e(const double zr, const double zi, gsl_sf_result * lszr, gsl_sf_result * lszi);
int gsl_sf_sinc_e(double x, gsl_sf_result * result);
double gsl_sf_sinc(const double x);
int gsl_sf_lnsinh_e(const double x, gsl_sf_result * result);
double gsl_sf_lnsinh(const double x);
int gsl_sf_lncosh_e(const double x, gsl_sf_result * result);
double gsl_sf_lncosh(const double x);
int gsl_sf_polar_to_rect(const double r, const double theta, gsl_sf_result * x, gsl_sf_result * y);
int gsl_sf_rect_to_polar(const double x, const double y, gsl_sf_result * r, gsl_sf_result * theta);
int gsl_sf_sin_err_e(const double x, const double dx, gsl_sf_result * result);
int gsl_sf_cos_err_e(const double x, const double dx, gsl_sf_result * result);
int gsl_sf_angle_restrict_symm_e(double* theta);
double gsl_sf_angle_restrict_symm(const double theta);
int gsl_sf_angle_restrict_pos_e(double* theta);
double gsl_sf_angle_restrict_pos(const double theta);
int gsl_sf_angle_restrict_symm_err_e(const double theta, gsl_sf_result * result);
int gsl_sf_angle_restrict_pos_err_e(const double theta, gsl_sf_result * result);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_sf_zeta_int_e(const int n, gsl_sf_result * result);
double gsl_sf_zeta_int(const int n);
int gsl_sf_zeta_e(const double s, gsl_sf_result * result);
double gsl_sf_zeta(const double s);
int gsl_sf_zetam1_e(const double s, gsl_sf_result * result);
double gsl_sf_zetam1(const double s);
int gsl_sf_zetam1_int_e(const int s, gsl_sf_result * result);
double gsl_sf_zetam1_int(const int s);
int gsl_sf_hzeta_e(const double s, const double q, gsl_sf_result * result);
double gsl_sf_hzeta(const double s, const double q);
int gsl_sf_eta_int_e(int n, gsl_sf_result * result);
double gsl_sf_eta_int(const int n);
int gsl_sf_eta_e(const double s, gsl_sf_result * result);
double gsl_sf_eta(const double s);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void gsl_siman_solve(const gsl_rng * r, void* x0_p, gsl_siman_Efunc_t Ef, gsl_siman_step_t take_step, gsl_siman_metric_t distance, gsl_siman_print_t print_position, gsl_siman_copy_t copyfunc, gsl_siman_copy_construct_t copy_constructor, gsl_siman_destroy_t destructor, size_t element_size, gsl_siman_params_t params);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_spblas_dgemv(const CBLAS_TRANSPOSE_t TransA, const double alpha, const gsl_spmatrix * A, const gsl_vector * x, const double beta, gsl_vector * y);
int gsl_spblas_dgemm(const double alpha, const gsl_spmatrix * A, const gsl_spmatrix * B, gsl_spmatrix * C);
size_t gsl_spblas_scatter(const gsl_spmatrix * A, const size_t j, const double alpha, int* w, double* x, const int mark, gsl_spmatrix * C, size_t nz);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_splinalg_itersolve* gsl_splinalg_itersolve_alloc(const gsl_splinalg_itersolve_type * T, const size_t n, const size_t m);
void gsl_splinalg_itersolve_free(gsl_splinalg_itersolve * w);
int gsl_splinalg_itersolve_iterate(const gsl_spmatrix * A, const gsl_vector * b, const double tol, gsl_vector * x, gsl_splinalg_itersolve * w);
double gsl_splinalg_itersolve_normr(const gsl_splinalg_itersolve * w);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_spline* gsl_spline_alloc(const gsl_interp_type * T, size_t size);
int gsl_spline_init(gsl_spline * spline, const double xa[], const double ya[], size_t size);
const char* gsl_spline_name(const gsl_spline * spline);
unsigned int gsl_spline_min_size(const gsl_spline * spline);
int gsl_spline_eval_e(const gsl_spline * spline, double x, gsl_interp_accel * a, double* y);
double gsl_spline_eval(const gsl_spline * spline, double x, gsl_interp_accel * a);
int gsl_spline_eval_deriv_e(const gsl_spline * spline, double x, gsl_interp_accel * a, double* y);
double gsl_spline_eval_deriv(const gsl_spline * spline, double x, gsl_interp_accel * a);
int gsl_spline_eval_deriv2_e(const gsl_spline * spline, double x, gsl_interp_accel * a, double* y);
double gsl_spline_eval_deriv2(const gsl_spline * spline, double x, gsl_interp_accel * a);
int gsl_spline_eval_integ_e(const gsl_spline * spline, double a, double b, gsl_interp_accel * acc, double* y);
double gsl_spline_eval_integ(const gsl_spline * spline, double a, double b, gsl_interp_accel * acc);
void gsl_spline_free(gsl_spline * spline);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

gsl_spline2d* gsl_spline2d_alloc(const gsl_interp2d_type * T, size_t xsize, size_t ysize);
int gsl_spline2d_init(gsl_spline2d * interp, const double xa[], const double ya[], const double za[], size_t xsize, size_t ysize);
void gsl_spline2d_free(gsl_spline2d * interp);
double gsl_spline2d_eval(const gsl_spline2d * interp, const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya);
int gsl_spline2d_eval_e(const gsl_spline2d * interp, const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);
double gsl_spline2d_eval_extrap(const gsl_spline2d * interp, const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya);
int gsl_spline2d_eval_extrap_e(const gsl_spline2d * interp, const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);
double gsl_spline2d_eval_deriv_x(const gsl_spline2d * interp, const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya);
int gsl_spline2d_eval_deriv_x_e(const gsl_spline2d * interp, const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);
double gsl_spline2d_eval_deriv_y(const gsl_spline2d * interp, const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya);
int gsl_spline2d_eval_deriv_y_e(const gsl_spline2d * interp, const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);
double gsl_spline2d_eval_deriv_xx(const gsl_spline2d * interp, const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya);
int gsl_spline2d_eval_deriv_xx_e(const gsl_spline2d * interp, const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);
double gsl_spline2d_eval_deriv_yy(const gsl_spline2d * interp, const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya);
int gsl_spline2d_eval_deriv_yy_e(const gsl_spline2d * interp, const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);
double gsl_spline2d_eval_deriv_xy(const gsl_spline2d * interp, const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya);
int gsl_spline2d_eval_deriv_xy_e(const gsl_spline2d * interp, const double x, const double y, gsl_interp_accel * xa, gsl_interp_accel * ya, double* z);
size_t gsl_spline2d_min_size(const gsl_spline2d * interp);
const char* gsl_spline2d_name(const gsl_spline2d * interp);
int gsl_spline2d_set(const gsl_spline2d * interp, double zarr[], const size_t i, const size_t j, const double z);
double gsl_spline2d_get(const gsl_spline2d * interp, const double zarr[], const size_t i, const size_t j);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void gsl_spmatrix_cumsum(const size_t n, int* c);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

char gsl_stats_char_select(char data[], const size_t stride, const size_t n, const size_t k);
double gsl_stats_char_mad0(const char data[], const size_t stride, const size_t n, double work[]);
double gsl_stats_char_mad(const char data[], const size_t stride, const size_t n, double work[]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

double gsl_stats_select(double data[], const size_t stride, const size_t n, const size_t k);
double gsl_stats_mad0(const double data[], const size_t stride, const size_t n, double work[]);
double gsl_stats_mad(const double data[], const size_t stride, const size_t n, double work[]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

float gsl_stats_float_select(float data[], const size_t stride, const size_t n, const size_t k);
double gsl_stats_float_mad0(const float data[], const size_t stride, const size_t n, double work[]);
double gsl_stats_float_mad(const float data[], const size_t stride, const size_t n, double work[]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int gsl_stats_int_select(int data[], const size_t stride, const size_t n, const size_t k);
double gsl_stats_int_mad0(const int data[], const size_t stride, const size_t n, double work[]);
double gsl_stats_int_mad(const int data[], const size_t stride, const size_t n, double work[]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

long gsl_stats_long_select(long data[], const size_t stride, const size_t n, const size_t k);
double gsl_stats_long_mad0(const long data[], const size_t stride, const size_t n, double work[]);
double gsl_stats_long_mad(const long data[], const size_t stride, const size_t n, double work[]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

long double gsl_stats_long_double_select(long double data[], const size_t stride, const size_t n, const size_t k);
double gsl_stats_long_double_mad0(const long double data[], const size_t stride, const size_t n, double work[]);
double gsl_stats_long_double_mad(const long double data[], const size_t stride, const size_t n, double work[]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

short gsl_stats_short_select(short data[], const size_t stride, const size_t n, const size_t k);
double gsl_stats_short_mad0(const short data[], const size_t stride, const size_t n, double work[]);
double gsl_stats_short_mad(const short data[], const size_t stride, const size_t n, double work[]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

unsigned char gsl_stats_uchar_select(unsigned char data[], const size_t stride, const size_t n, const size_t k);
double gsl_stats_uchar_mad0(const unsigned char data[], const size_t stride, const size_t n, double work[]);
double gsl_stats_uchar_mad(const unsigned char data[], const size_t stride, const size_t n, double work[]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

unsigned int gsl_stats_uint_select(unsigned int data[], const size_t stride, const size_t n, const size_t k);
double gsl_stats_uint_mad0(const unsigned int data[], const size_t stride, const size_t n, double work[]);
double gsl_stats_uint_mad(const unsigned int data[], const size_t stride, const size_t n, double work[]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

unsigned long gsl_stats_ulong_select(unsigned long data[], const size_t stride, const size_t n, const size_t k);
double gsl_stats_ulong_mad0(const unsigned long data[], const size_t stride, const size_t n, double work[]);
double gsl_stats_ulong_mad(const unsigned long data[], const size_t stride, const size_t n, double work[]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

unsigned short gsl_stats_ushort_select(unsigned short data[], const size_t stride, const size_t n, const size_t k);
double gsl_stats_ushort_mad0(const unsigned short data[], const size_t stride, const size_t n, double work[]);
double gsl_stats_ushort_mad(const unsigned short data[], const size_t stride, const size_t n, double work[]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

double gsl_ldexp(const double x, const int e);
double gsl_frexp(const double x, int* e);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

works only for lzma_stream_buffer_encode(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

OSSL_DEPRECATEDIN_3_0
int AES_set_encrypt_key(const unsigned char* userKey, const int bits, AES_KEY * key);
OSSL_DEPRECATEDIN_3_0
int AES_set_decrypt_key(const unsigned char* userKey, const int bits, AES_KEY * key);
OSSL_DEPRECATEDIN_3_0
void AES_encrypt(const unsigned char* in, unsigned char* out, const AES_KEY * key);
OSSL_DEPRECATEDIN_3_0
void AES_decrypt(const unsigned char* in, unsigned char* out, const AES_KEY * key);
OSSL_DEPRECATEDIN_3_0
void AES_ecb_encrypt(const unsigned char* in, unsigned char* out, const AES_KEY * key, const int enc);
OSSL_DEPRECATEDIN_3_0
void AES_cbc_encrypt(const unsigned char* in, unsigned char* out, size_t length, const AES_KEY * key, unsigned char* ivec, const int enc);
OSSL_DEPRECATEDIN_3_0
void AES_cfb128_encrypt(const unsigned char* in, unsigned char* out, size_t length, const AES_KEY * key, unsigned char* ivec, int* num, const int enc);
OSSL_DEPRECATEDIN_3_0
void AES_cfb1_encrypt(const unsigned char* in, unsigned char* out, size_t length, const AES_KEY * key, unsigned char* ivec, int* num, const int enc);
OSSL_DEPRECATEDIN_3_0
void AES_cfb8_encrypt(const unsigned char* in, unsigned char* out, size_t length, const AES_KEY * key, unsigned char* ivec, int* num, const int enc);
OSSL_DEPRECATEDIN_3_0
void AES_ofb128_encrypt(const unsigned char* in, unsigned char* out, size_t length, const AES_KEY * key, unsigned char* ivec, int* num);
OSSL_DEPRECATEDIN_3_0
void AES_ige_encrypt(const unsigned char* in, unsigned char* out, size_t length, const AES_KEY * key, unsigned char* ivec, const int enc);
OSSL_DEPRECATEDIN_3_0
void AES_bi_ige_encrypt(const unsigned char* in, unsigned char* out, size_t length, const AES_KEY * key, const AES_KEY * key2, const unsigned char* ivec, const int enc);
OSSL_DEPRECATEDIN_3_0
int AES_wrap_key(AES_KEY * key, const unsigned char* iv, unsigned char* out, const unsigned char* in, unsigned int inlen);
OSSL_DEPRECATEDIN_3_0
int AES_unwrap_key(AES_KEY * key, const unsigned char* iv, unsigned char* out, const unsigned char* in, unsigned int inlen);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

typedef int i2d_of_void(const void*, unsigned char**);
int ASN1_TYPE_get(const ASN1_TYPE * a);
void ASN1_TYPE_set(ASN1_TYPE * a, int type, void* value);
int ASN1_TYPE_set1(ASN1_TYPE * a, int type, const void* value);
int ASN1_TYPE_cmp(const ASN1_TYPE * a, const ASN1_TYPE * b);
void ASN1_STRING_free(ASN1_STRING * a);
void ASN1_STRING_clear_free(ASN1_STRING * a);
int ASN1_STRING_copy(ASN1_STRING * dst, const ASN1_STRING * str);
int ASN1_STRING_cmp(const ASN1_STRING * a, const ASN1_STRING * b);
int ASN1_STRING_set(ASN1_STRING * str, const void* data, int len);
void ASN1_STRING_set0(ASN1_STRING * str, void* data, int len);
int ASN1_STRING_length(const ASN1_STRING * x);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 void ASN1_STRING_length_set(ASN1_STRING * x, int n);
endif
int ASN1_STRING_type(const ASN1_STRING * x);
int ASN1_BIT_STRING_set(ASN1_BIT_STRING * a, unsigned char* d, int length);
int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING * a, int n, int value);
int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING * a, int n);
int ASN1_BIT_STRING_check(const ASN1_BIT_STRING * a, const unsigned char* flags, int flags_len);
int ASN1_BIT_STRING_name_print(BIO * out, ASN1_BIT_STRING * bs, BIT_STRING_BITNAME * tbl, int indent);
int ASN1_BIT_STRING_num_asc(const char* name, BIT_STRING_BITNAME * tbl);
int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING * bs, const char* name, int value, BIT_STRING_BITNAME * tbl);
int ASN1_INTEGER_cmp(const ASN1_INTEGER * x, const ASN1_INTEGER * y);
int ASN1_UTCTIME_check(const ASN1_UTCTIME * a);
int ASN1_UTCTIME_set_string(ASN1_UTCTIME * s, const char* str);
int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME * s, time_t t);
int ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME * a);
int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME * s, const char* str);
int ASN1_TIME_diff(int* pday, int* psec, const ASN1_TIME * from, const ASN1_TIME * to);
int ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING * a, const ASN1_OCTET_STRING * b);
int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING * str, const unsigned char* data, int len);
int UTF8_getc(const unsigned char* str, int len, unsigned long* val);
int UTF8_putc(unsigned char* str, int len, unsigned long value);
int ASN1_TIME_check(const ASN1_TIME * t);
int ASN1_TIME_set_string(ASN1_TIME * s, const char* str);
int ASN1_TIME_set_string_X509(ASN1_TIME * s, const char* str);
int ASN1_TIME_to_tm(const ASN1_TIME * s, struct tm* tm);
int ASN1_TIME_normalize(ASN1_TIME * s);
int ASN1_TIME_cmp_time_t(const ASN1_TIME * s, time_t t);
int ASN1_TIME_compare(const ASN1_TIME * a, const ASN1_TIME * b);
int i2a_ASN1_INTEGER(BIO * bp, const ASN1_INTEGER * a);
int a2i_ASN1_INTEGER(BIO * bp, ASN1_INTEGER * bs, char* buf, int size);
int i2a_ASN1_ENUMERATED(BIO * bp, const ASN1_ENUMERATED * a);
int a2i_ASN1_ENUMERATED(BIO * bp, ASN1_ENUMERATED * bs, char* buf, int size);
int i2a_ASN1_OBJECT(BIO * bp, const ASN1_OBJECT * a);
int a2i_ASN1_STRING(BIO * bp, ASN1_STRING * bs, char* buf, int size);
int i2a_ASN1_STRING(BIO * bp, const ASN1_STRING * a, int type);
int i2t_ASN1_OBJECT(char* buf, int buf_len, const ASN1_OBJECT * a);
int a2d_ASN1_OBJECT(unsigned char* out, int olen, const char* buf, int num);
int ASN1_INTEGER_get_int64(int64_t * pr, const ASN1_INTEGER * a);
int ASN1_INTEGER_set_int64(ASN1_INTEGER * a, int64_t r);
int ASN1_INTEGER_get_uint64(uint64_t * pr, const ASN1_INTEGER * a);
int ASN1_INTEGER_set_uint64(ASN1_INTEGER * a, uint64_t r);
int ASN1_INTEGER_set(ASN1_INTEGER * a, long v);
long ASN1_INTEGER_get(const ASN1_INTEGER * a);
int ASN1_ENUMERATED_get_int64(int64_t * pr, const ASN1_ENUMERATED * a);
int ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED * a, int64_t r);
int ASN1_ENUMERATED_set(ASN1_ENUMERATED * a, long v);
long ASN1_ENUMERATED_get(const ASN1_ENUMERATED * a);
int ASN1_PRINTABLE_type(const unsigned char* s, int max);
unsigned long ASN1_tag2bit(int tag);
int ASN1_get_object(const unsigned char** pp, long* plength, int* ptag, int* pclass, long omax);
int ASN1_check_infinite_end(unsigned char** p, long len);
int ASN1_const_check_infinite_end(const unsigned char** p, long len);
void ASN1_put_object(unsigned char** pp, int constructed, int length, int tag, int xclass);
int ASN1_put_eoc(unsigned char** pp);
int ASN1_object_size(int constructed, int length, int tag);
int ASN1_item_sign_ex(const ASN1_ITEM * it, X509_ALGOR * algor1, X509_ALGOR * algor2, ASN1_BIT_STRING * signature, const void* data, const ASN1_OCTET_STRING * id, EVP_PKEY * pkey, const EVP_MD * md, OSSL_LIB_CTX * libctx, const char* propq);
int ASN1_item_verify_ex(const ASN1_ITEM * it, const X509_ALGOR * alg, const ASN1_BIT_STRING * signature, const void* data, const ASN1_OCTET_STRING * id, EVP_PKEY * pkey, OSSL_LIB_CTX * libctx, const char* propq);
int ASN1_i2d_fp(i2d_of_void * i2d, FILE * out, const void* x);
int ASN1_item_i2d_fp(const ASN1_ITEM * it, FILE * out, const void* x);
int ASN1_STRING_print_ex_fp(FILE * fp, const ASN1_STRING * str, unsigned long flags);
endif

int ASN1_STRING_to_UTF8(unsigned char** out, const ASN1_STRING * in);
int ASN1_i2d_bio(i2d_of_void * i2d, BIO * out, const void* x);
int ASN1_item_i2d_bio(const ASN1_ITEM * it, BIO * out, const void* x);
int ASN1_UTCTIME_print(BIO * fp, const ASN1_UTCTIME * a);
int ASN1_GENERALIZEDTIME_print(BIO * fp, const ASN1_GENERALIZEDTIME * a);
int ASN1_TIME_print(BIO * bp, const ASN1_TIME * tm);
int ASN1_TIME_print_ex(BIO * bp, const ASN1_TIME * tm, unsigned long flags);
int ASN1_STRING_print(BIO * bp, const ASN1_STRING * v);
int ASN1_STRING_print_ex(BIO * out, const ASN1_STRING * str, unsigned long flags);
int ASN1_buf_print(BIO * bp, const unsigned char* buf, size_t buflen, int off);
int ASN1_bn_print(BIO * bp, const char* number, const BIGNUM * num, unsigned char* buf, int off);
int ASN1_parse(BIO * bp, const unsigned char* pp, long len, int indent);
int ASN1_parse_dump(BIO * bp, const unsigned char* pp, long len, int indent, int dump);
int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING * s);
int ASN1_TYPE_set_octetstring(ASN1_TYPE * a, unsigned char* data, int len);
int ASN1_TYPE_get_octetstring(const ASN1_TYPE * a, unsigned char* data, int max_len);
int ASN1_TYPE_set_int_octetstring(ASN1_TYPE * a, long num, unsigned char* data, int len);
int ASN1_TYPE_get_int_octetstring(const ASN1_TYPE * a, long* num, unsigned char* data, int max_len);
void ASN1_STRING_set_default_mask(unsigned long mask);
int ASN1_STRING_set_default_mask_asc(const char* p);
unsigned long ASN1_STRING_get_default_mask(void);
int ASN1_mbstring_copy(ASN1_STRING * *out, const unsigned char* in, int len, int inform, unsigned long mask);
int ASN1_mbstring_ncopy(ASN1_STRING * *out, const unsigned char* in, int len, int inform, unsigned long mask, long minsize, long maxsize);
int ASN1_STRING_TABLE_add(unsigned long, unsigned long);
void ASN1_STRING_TABLE_cleanup(void);
void ASN1_item_free(ASN1_VALUE * val, const ASN1_ITEM * it);
int ASN1_item_i2d(const ASN1_VALUE * val, unsigned char** out, const ASN1_ITEM * it);
int ASN1_item_ndef_i2d(const ASN1_VALUE * val, unsigned char** out, const ASN1_ITEM * it);
void ASN1_add_oid_module(void);
void ASN1_add_stable_module(void);
int ASN1_str2mask(const char* str, unsigned long* pmask);
define ASN1_PCTX_FLAGS_NO_STRUCT_NAME          0x100

int ASN1_item_print(BIO * out, const ASN1_VALUE * ifld, int indent, const ASN1_ITEM * it, const ASN1_PCTX * pctx);
void ASN1_PCTX_free(ASN1_PCTX * p);
unsigned long ASN1_PCTX_get_flags(const ASN1_PCTX * p);
void ASN1_PCTX_set_flags(ASN1_PCTX * p, unsigned long flags);
unsigned long ASN1_PCTX_get_nm_flags(const ASN1_PCTX * p);
void ASN1_PCTX_set_nm_flags(ASN1_PCTX * p, unsigned long flags);
unsigned long ASN1_PCTX_get_cert_flags(const ASN1_PCTX * p);
void ASN1_PCTX_set_cert_flags(ASN1_PCTX * p, unsigned long flags);
unsigned long ASN1_PCTX_get_oid_flags(const ASN1_PCTX * p);
void ASN1_PCTX_set_oid_flags(ASN1_PCTX * p, unsigned long flags);
unsigned long ASN1_PCTX_get_str_flags(const ASN1_PCTX * p);
void ASN1_PCTX_set_str_flags(ASN1_PCTX * p, unsigned long flags);
void ASN1_SCTX_free(ASN1_SCTX * p);
unsigned long ASN1_SCTX_get_flags(ASN1_SCTX * p);
void ASN1_SCTX_set_app_data(ASN1_SCTX * p, void* data);
int i2d_ASN1_bio_stream(BIO * out, ASN1_VALUE * val, BIO * in, int flags, const ASN1_ITEM * it);
int PEM_write_bio_ASN1_stream(BIO * out, ASN1_VALUE * val, BIO * in, int flags, const char* hdr, const ASN1_ITEM * it);
int SMIME_crlf_copy(BIO * in, BIO * out, int flags);
int SMIME_text(BIO * in, BIO * out);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

typedef int ASN1_ex_d2i(ASN1_VALUE** pval, const unsigned char** in, long len, const ASN1_ITEM* it, int tag, int aclass, char opt, ASN1_TLC* ctx);
typedef int ASN1_ex_d2i_ex(ASN1_VALUE** pval, const unsigned char** in, long len, const ASN1_ITEM* it, int tag, int aclass, char opt, ASN1_TLC* ctx, OSSL_LIB_CTX* libctx, const char* propq);
typedef int ASN1_ex_i2d(const ASN1_VALUE** pval, unsigned char** out, const ASN1_ITEM* it, int tag, int aclass);
typedef int ASN1_ex_new_func(ASN1_VALUE** pval, const ASN1_ITEM* it);
typedef int ASN1_ex_new_ex_func(ASN1_VALUE** pval, const ASN1_ITEM* it, OSSL_LIB_CTX* libctx, const char* propq);
typedef void ASN1_ex_free_func(ASN1_VALUE** pval, const ASN1_ITEM* it);
typedef int ASN1_ex_print_func(BIO* out, const ASN1_VALUE** pval, int indent, const char* fname, const ASN1_PCTX* pctx);
typedef int ASN1_primitive_i2c(const ASN1_VALUE** pval, unsigned char* cont, int* putype, const ASN1_ITEM* it);
typedef int ASN1_primitive_c2i(ASN1_VALUE** pval, const unsigned char* cont, int len, int utype, char* free_cont, const ASN1_ITEM* it);
typedef int ASN1_primitive_print(BIO* out, const ASN1_VALUE** pval, const ASN1_ITEM* it, int indent, const ASN1_PCTX* pctx);
typedef int ASN1_aux_cb(int operation, ASN1_VALUE** in, const ASN1_ITEM* it, void* exarg);
typedef int ASN1_aux_const_cb(int operation, const ASN1_VALUE** in, const ASN1_ITEM* it, void* exarg);
int ASN1_item_ex_new(ASN1_VALUE * *pval, const ASN1_ITEM * it);
void ASN1_item_ex_free(ASN1_VALUE * *pval, const ASN1_ITEM * it);
int ASN1_item_ex_d2i(ASN1_VALUE * *pval, const unsigned char** in, long len, const ASN1_ITEM * it, int tag, int aclass, char opt, ASN1_TLC * ctx);
int ASN1_item_ex_i2d(const ASN1_VALUE * *pval, unsigned char** out, const ASN1_ITEM * it, int tag, int aclass);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

define ASYNC_STATUS_EAGAIN         3

int ASYNC_init_thread(size_t max_size, size_t init_size);
void ASYNC_cleanup_thread(void);
void ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX * ctx);
int ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX * ctx, const void* key, OSSL_ASYNC_FD * fd, void** custom_data);
int ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX * ctx, OSSL_ASYNC_FD * fd, size_t * numfds);
int ASYNC_WAIT_CTX_get_callback(ASYNC_WAIT_CTX * ctx, ASYNC_callback_fn * callback, void** callback_arg);
int ASYNC_WAIT_CTX_set_callback(ASYNC_WAIT_CTX * ctx, ASYNC_callback_fn callback, void* callback_arg);
int ASYNC_WAIT_CTX_set_status(ASYNC_WAIT_CTX * ctx, int status);
int ASYNC_WAIT_CTX_get_status(ASYNC_WAIT_CTX * ctx);
int ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX * ctx, OSSL_ASYNC_FD * addfd, size_t * numaddfds, OSSL_ASYNC_FD * delfd, size_t * numdelfds);
int ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX * ctx, const void* key);
endif

int ASYNC_is_capable(void);
int ASYNC_set_mem_functions(ASYNC_stack_alloc_fn alloc_fn, ASYNC_stack_free_fn free_fn);
void ASYNC_get_mem_functions(ASYNC_stack_alloc_fn * alloc_fn, ASYNC_stack_free_fn * free_fn);
int ASYNC_pause_job(void);
void ASYNC_block_pause(void);
void ASYNC_unblock_pause(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int BIO_get_new_index(void);
void BIO_set_flags(BIO * b, int flags);
int BIO_test_flags(const BIO * b, int flags);
void BIO_clear_flags(BIO * b, int flags);
OSSL_DEPRECATEDIN_3_0 BIO_callback_fn BIO_get_callback(const BIO * b);
OSSL_DEPRECATEDIN_3_0 void BIO_set_callback(BIO * b, BIO_callback_fn callback);
OSSL_DEPRECATEDIN_3_0 long BIO_debug_callback(BIO * bio, int cmd, const char* argp, int argi, long argl, long ret);
BIO_callback_fn_ex BIO_get_callback_ex(const BIO * b);
void BIO_set_callback_ex(BIO * b, BIO_callback_fn_ex callback);
long BIO_debug_callback_ex(BIO * bio, int oper, const char* argp, size_t len, int argi, long argl, int ret, size_t * processed);
void BIO_set_callback_arg(BIO * b, char* arg);
int BIO_method_type(const BIO * b);
typedef int BIO_info_cb(BIO*);
int BIO_read_filename(BIO * b, const char* name);
size_t BIO_ctrl_pending(BIO * b);
size_t BIO_ctrl_wpending(BIO * b);
size_t BIO_ctrl_get_write_guarantee(BIO * b);
size_t BIO_ctrl_get_read_request(BIO * b);
int BIO_ctrl_reset_read_request(BIO * b);
int BIO_set_ex_data(BIO * bio, int idx, void* data);
uint64_t BIO_number_read(BIO * bio);
uint64_t BIO_number_written(BIO * bio);
int BIO_asn1_set_prefix(BIO * b, asn1_ps_func * prefix, asn1_ps_func * prefix_free);
int BIO_asn1_get_prefix(BIO * b, asn1_ps_func * *pprefix, asn1_ps_func * *pprefix_free);
int BIO_asn1_set_suffix(BIO * b, asn1_ps_func * suffix, asn1_ps_func * suffix_free);
int BIO_asn1_get_suffix(BIO * b, asn1_ps_func * *psuffix, asn1_ps_func * *psuffix_free);
int BIO_free(BIO * a);
void BIO_set_data(BIO * a, void* ptr);
void BIO_set_init(BIO * a, int init);
int BIO_get_init(BIO * a);
void BIO_set_shutdown(BIO * a, int shut);
int BIO_get_shutdown(BIO * a);
void BIO_vfree(BIO * a);
int BIO_up_ref(BIO * a);
int BIO_read(BIO * b, void* data, int dlen);
int BIO_read_ex(BIO * b, void* data, size_t dlen, size_t * readbytes);
__owur int BIO_recvmmsg(BIO * b, BIO_MSG * msg, size_t stride, size_t num_msg, uint64_t flags, size_t * msgs_processed);
int BIO_gets(BIO * bp, char* buf, int size);
int BIO_get_line(BIO * bio, char* buf, int size);
int BIO_write(BIO * b, const void* data, int dlen);
int BIO_write_ex(BIO * b, const void* data, size_t dlen, size_t * written);
__owur int BIO_sendmmsg(BIO * b, BIO_MSG * msg, size_t stride, size_t num_msg, uint64_t flags, size_t * msgs_processed);
__owur int BIO_get_rpoll_descriptor(BIO * b, BIO_POLL_DESCRIPTOR * desc);
__owur int BIO_get_wpoll_descriptor(BIO * b, BIO_POLL_DESCRIPTOR * desc);
int BIO_puts(BIO * bp, const char* buf);
int BIO_indent(BIO * b, int indent, int max);
long BIO_ctrl(BIO * bp, int cmd, long larg, void* parg);
long BIO_callback_ctrl(BIO * b, int cmd, BIO_info_cb * fp);
long BIO_int_ctrl(BIO * bp, int cmd, long larg, int iarg);
void BIO_free_all(BIO * a);
void BIO_set_next(BIO * b, BIO * next);
int BIO_get_retry_reason(BIO * bio);
void BIO_set_retry_reason(BIO * bio, int reason);
int BIO_nread0(BIO * bio, char** buf);
int BIO_nread(BIO * bio, char** buf, int num);
int BIO_nwrite0(BIO * bio, char** buf);
int BIO_nwrite(BIO * bio, char** buf, int num);
int BIO_dgram_non_fatal_error(int error);
int BIO_dgram_is_sctp(BIO * bio);
int BIO_dgram_sctp_notification_cb(BIO * b, BIO_dgram_sctp_notification_handler_fn handle_notifications, void* context);
int BIO_dgram_sctp_wait_for_dry(BIO * b);
int BIO_dgram_sctp_msg_waiting(BIO * b);
ifndef OPENSSL_NO_SOCK
int BIO_sock_should_retry(int i);
int BIO_sock_non_fatal_error(int error);
int BIO_err_is_non_fatal(unsigned int errcode);
int BIO_socket_wait(int fd, int for_read, time_t max_time);
endif
int BIO_wait(BIO * bio, time_t max_time, unsigned int nap_milliseconds);
int BIO_do_connect_retry(BIO * bio, int timeout, int nap_milliseconds);
int BIO_fd_should_retry(int i);
int BIO_fd_non_fatal_error(int error);
int BIO_dump(BIO * b, const void* bytes, int len);
int BIO_dump_indent(BIO * b, const void* bytes, int len, int indent);
ifndef OPENSSL_NO_STDIO
int BIO_dump_fp(FILE * fp, const void* s, int len);
int BIO_dump_indent_fp(FILE * fp, const void* s, int len, int indent);
endif
int BIO_hex_string(BIO * out, int indent, int width, const void* data, int datalen);
int BIO_ADDR_copy(BIO_ADDR * dst, const BIO_ADDR * src);
int BIO_ADDR_rawmake(BIO_ADDR * ap, int family, const void* where, size_t wherelen, unsigned short port);
void BIO_ADDR_free(BIO_ADDR*);
void BIO_ADDR_clear(BIO_ADDR * ap);
int BIO_ADDR_family(const BIO_ADDR * ap);
int BIO_ADDR_rawaddress(const BIO_ADDR * ap, void* p, size_t * l);
unsigned short BIO_ADDR_rawport(const BIO_ADDR * ap);
int BIO_ADDRINFO_family(const BIO_ADDRINFO * bai);
int BIO_ADDRINFO_socktype(const BIO_ADDRINFO * bai);
int BIO_ADDRINFO_protocol(const BIO_ADDRINFO * bai);
void BIO_ADDRINFO_free(BIO_ADDRINFO * bai);
int BIO_parse_hostserv(const char* hostserv, char** host, char** service, enum BIO_hostserv_priorities hostserv_prio);
int BIO_lookup(const char* host, const char* service, enum BIO_lookup_type lookup_type, int family, int socktype, BIO_ADDRINFO * *res);
int BIO_lookup_ex(const char* host, const char* service, int lookup_type, int family, int socktype, int protocol, BIO_ADDRINFO * *res);
int BIO_sock_error(int sock);
int BIO_socket_ioctl(int fd, long type, void* arg);
int BIO_socket_nbio(int fd, int mode);
int BIO_sock_init(void);
endif
int BIO_set_tcp_ndelay(int sock, int turn_on);
OSSL_DEPRECATEDIN_1_1_0 int BIO_get_port(const char* str, unsigned short* port_ptr);
OSSL_DEPRECATEDIN_1_1_0 int BIO_get_host_ip(const char* str, unsigned char* ip);
OSSL_DEPRECATEDIN_1_1_0 int BIO_get_accept_socket(char* host_port, int mode);
OSSL_DEPRECATEDIN_1_1_0 int BIO_accept(int sock, char** ip_port);
int BIO_sock_info(int sock, enum BIO_sock_info_type type, union BIO_sock_info_u* info);
define BIO_SOCK_TFO          0x20

int BIO_socket(int domain, int socktype, int protocol, int options);
int BIO_connect(int sock, const BIO_ADDR * addr, int options);
int BIO_bind(int sock, const BIO_ADDR * addr, int options);
int BIO_listen(int sock, const BIO_ADDR * addr, int options);
int BIO_accept_ex(int accept_sock, BIO_ADDR * addr, int options);
int BIO_closesocket(int sock);
int BIO_new_bio_pair(BIO * *bio1, size_t writebuf1, BIO * *bio2, size_t writebuf2);
ifndef OPENSSL_NO_DGRAM
int BIO_new_bio_dgram_pair(BIO * *bio1, size_t writebuf1, BIO * *bio2, size_t writebuf2);
void BIO_copy_next_retry(BIO * b);
long BIO_ghbn_ctrl(int cmd, int iarg, char* parg);
void BIO_meth_free(BIO_METHOD * biom);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 void BF_set_key(BF_KEY * key, int len, const unsigned char* data);
OSSL_DEPRECATEDIN_3_0 void BF_encrypt(BF_LONG * data, const BF_KEY * key);
OSSL_DEPRECATEDIN_3_0 void BF_decrypt(BF_LONG * data, const BF_KEY * key);
OSSL_DEPRECATEDIN_3_0 void BF_ecb_encrypt(const unsigned char* in, unsigned char* out, const BF_KEY * key, int enc);
OSSL_DEPRECATEDIN_3_0 void BF_cbc_encrypt(const unsigned char* in, unsigned char* out, long length, const BF_KEY * schedule, unsigned char* ivec, int enc);
OSSL_DEPRECATEDIN_3_0 void BF_cfb64_encrypt(const unsigned char* in, unsigned char* out, long length, const BF_KEY * schedule, unsigned char* ivec, int* num, int enc);
OSSL_DEPRECATEDIN_3_0 void BF_ofb64_encrypt(const unsigned char* in, unsigned char* out, long length, const BF_KEY * schedule, unsigned char* ivec, int* num);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

endif

void BN_set_flags(BIGNUM * b, int n);
int BN_get_flags(const BIGNUM * b, int n);
void BN_with_flags(BIGNUM * dest, const BIGNUM * b, int flags);
int BN_GENCB_call(BN_GENCB * cb, int a, int b);
void BN_GENCB_free(BN_GENCB * cb);
int BN_abs_is_word(const BIGNUM * a, const BN_ULONG w);
int BN_is_zero(const BIGNUM * a);
int BN_is_one(const BIGNUM * a);
int BN_is_word(const BIGNUM * a, const BN_ULONG w);
int BN_is_odd(const BIGNUM * a);
void BN_zero_ex(BIGNUM * a);
void BN_CTX_free(BN_CTX * c);
void BN_CTX_start(BN_CTX * ctx);
void BN_CTX_end(BN_CTX * ctx);
int BN_rand_ex(BIGNUM * rnd, int bits, int top, int bottom, unsigned int strength, BN_CTX * ctx);
int BN_rand(BIGNUM * rnd, int bits, int top, int bottom);
int BN_priv_rand_ex(BIGNUM * rnd, int bits, int top, int bottom, unsigned int strength, BN_CTX * ctx);
int BN_priv_rand(BIGNUM * rnd, int bits, int top, int bottom);
int BN_rand_range_ex(BIGNUM * r, const BIGNUM * range, unsigned int strength, BN_CTX * ctx);
int BN_rand_range(BIGNUM * rnd, const BIGNUM * range);
int BN_priv_rand_range_ex(BIGNUM * r, const BIGNUM * range, unsigned int strength, BN_CTX * ctx);
int BN_priv_rand_range(BIGNUM * rnd, const BIGNUM * range);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
int BN_pseudo_rand(BIGNUM * rnd, int bits, int top, int bottom);
OSSL_DEPRECATEDIN_3_0
int BN_pseudo_rand_range(BIGNUM * rnd, const BIGNUM * range);
endif
int BN_num_bits(const BIGNUM * a);
int BN_num_bits_word(BN_ULONG l);
int BN_security_bits(int L, int N);
void BN_clear_free(BIGNUM * a);
void BN_swap(BIGNUM * a, BIGNUM * b);
int BN_bn2bin(const BIGNUM * a, unsigned char* to);
int BN_bn2binpad(const BIGNUM * a, unsigned char* to, int tolen);
int BN_signed_bn2bin(const BIGNUM * a, unsigned char* to, int tolen);
int BN_bn2lebinpad(const BIGNUM * a, unsigned char* to, int tolen);
int BN_signed_bn2lebin(const BIGNUM * a, unsigned char* to, int tolen);
int BN_bn2nativepad(const BIGNUM * a, unsigned char* to, int tolen);
int BN_signed_bn2native(const BIGNUM * a, unsigned char* to, int tolen);
int BN_bn2mpi(const BIGNUM * a, unsigned char* to);
int BN_sub(BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
int BN_usub(BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
int BN_uadd(BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
int BN_add(BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
int BN_mul(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
int BN_sqr(BIGNUM * r, const BIGNUM * a, BN_CTX * ctx);
void BN_set_negative(BIGNUM * b, int n);
int BN_is_negative(const BIGNUM * b);
int BN_div(BIGNUM * dv, BIGNUM * rem, const BIGNUM * m, const BIGNUM * d, BN_CTX * ctx);
int BN_nnmod(BIGNUM * r, const BIGNUM * m, const BIGNUM * d, BN_CTX * ctx);
int BN_mod_add(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_add_quick(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m);
int BN_mod_sub(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_sub_quick(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m);
int BN_mod_mul(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_sqr(BIGNUM * r, const BIGNUM * a, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_lshift1(BIGNUM * r, const BIGNUM * a, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_lshift1_quick(BIGNUM * r, const BIGNUM * a, const BIGNUM * m);
int BN_mod_lshift(BIGNUM * r, const BIGNUM * a, int n, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_lshift_quick(BIGNUM * r, const BIGNUM * a, int n, const BIGNUM * m);
BN_ULONG BN_mod_word(const BIGNUM * a, BN_ULONG w);
BN_ULONG BN_div_word(BIGNUM * a, BN_ULONG w);
int BN_mul_word(BIGNUM * a, BN_ULONG w);
int BN_add_word(BIGNUM * a, BN_ULONG w);
int BN_sub_word(BIGNUM * a, BN_ULONG w);
int BN_set_word(BIGNUM * a, BN_ULONG w);
BN_ULONG BN_get_word(const BIGNUM * a);
int BN_cmp(const BIGNUM * a, const BIGNUM * b);
void BN_free(BIGNUM * a);
int BN_is_bit_set(const BIGNUM * a, int n);
int BN_lshift(BIGNUM * r, const BIGNUM * a, int n);
int BN_lshift1(BIGNUM * r, const BIGNUM * a);
int BN_exp(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int BN_mod_exp(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_exp_mont(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
int BN_mod_exp_mont_consttime(BIGNUM * rr, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * in_mont);
int BN_mod_exp_mont_word(BIGNUM * r, BN_ULONG a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
int BN_mod_exp2_mont(BIGNUM * r, const BIGNUM * a1, const BIGNUM * p1, const BIGNUM * a2, const BIGNUM * p2, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
int BN_mod_exp_simple(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_exp_mont_consttime_x2(BIGNUM * rr1, const BIGNUM * a1, const BIGNUM * p1, const BIGNUM * m1, BN_MONT_CTX * in_mont1, BIGNUM * rr2, const BIGNUM * a2, const BIGNUM * p2, const BIGNUM * m2, BN_MONT_CTX * in_mont2, BN_CTX * ctx);
int BN_mask_bits(BIGNUM * a, int n);
ifndef OPENSSL_NO_STDIO
int BN_print_fp(FILE * fp, const BIGNUM * a);
endif
int BN_print(BIO * bio, const BIGNUM * a);
int BN_reciprocal(BIGNUM * r, const BIGNUM * m, int len, BN_CTX * ctx);
int BN_rshift(BIGNUM * r, const BIGNUM * a, int n);
int BN_rshift1(BIGNUM * r, const BIGNUM * a);
void BN_clear(BIGNUM * a);
int BN_ucmp(const BIGNUM * a, const BIGNUM * b);
int BN_set_bit(BIGNUM * a, int n);
int BN_clear_bit(BIGNUM * a, int n);
int BN_hex2bn(BIGNUM * *a, const char* str);
int BN_dec2bn(BIGNUM * *a, const char* str);
int BN_asc2bn(BIGNUM * *a, const char* str);
int BN_gcd(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
int BN_kronecker(const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
int BN_are_coprime(BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
void BN_consttime_swap(BN_ULONG swap, BIGNUM * a, BIGNUM * b, int nwords);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
int BN_is_prime_ex(const BIGNUM * p, int nchecks, BN_CTX * ctx, BN_GENCB * cb);
OSSL_DEPRECATEDIN_3_0
int BN_is_prime_fasttest_ex(const BIGNUM * p, int nchecks, BN_CTX * ctx, int do_trial_division, BN_GENCB * cb);
int BN_generate_prime_ex2(BIGNUM * ret, int bits, int safe, const BIGNUM * add, const BIGNUM * rem, BN_GENCB * cb, BN_CTX * ctx);
int BN_generate_prime_ex(BIGNUM * ret, int bits, int safe, const BIGNUM * add, const BIGNUM * rem, BN_GENCB * cb);
int BN_check_prime(const BIGNUM * p, BN_CTX * ctx, BN_GENCB * cb);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
int BN_X931_generate_Xpq(BIGNUM * Xp, BIGNUM * Xq, int nbits, BN_CTX * ctx);
OSSL_DEPRECATEDIN_3_0
int BN_X931_derive_prime_ex(BIGNUM * p, BIGNUM * p1, BIGNUM * p2, const BIGNUM * Xp, const BIGNUM * Xp1, const BIGNUM * Xp2, const BIGNUM * e, BN_CTX * ctx, BN_GENCB * cb);
OSSL_DEPRECATEDIN_3_0
int BN_X931_generate_prime_ex(BIGNUM * p, BIGNUM * p1, BIGNUM * p2, BIGNUM * Xp1, BIGNUM * Xp2, const BIGNUM * Xp, const BIGNUM * e, BN_CTX * ctx, BN_GENCB * cb);
int BN_mod_mul_montgomery(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_MONT_CTX * mont, BN_CTX * ctx);
int BN_to_montgomery(BIGNUM * r, const BIGNUM * a, BN_MONT_CTX * mont, BN_CTX * ctx);
int BN_from_montgomery(BIGNUM * r, const BIGNUM * a, BN_MONT_CTX * mont, BN_CTX * ctx);
void BN_MONT_CTX_free(BN_MONT_CTX * mont);
int BN_MONT_CTX_set(BN_MONT_CTX * mont, const BIGNUM * mod, BN_CTX * ctx);
void BN_BLINDING_free(BN_BLINDING * b);
int BN_BLINDING_update(BN_BLINDING * b, BN_CTX * ctx);
int BN_BLINDING_convert(BIGNUM * n, BN_BLINDING * b, BN_CTX * ctx);
int BN_BLINDING_invert(BIGNUM * n, BN_BLINDING * b, BN_CTX * ctx);
int BN_BLINDING_convert_ex(BIGNUM * n, BIGNUM * r, BN_BLINDING * b, BN_CTX*);
int BN_BLINDING_invert_ex(BIGNUM * n, const BIGNUM * r, BN_BLINDING * b, BN_CTX*);
int BN_BLINDING_is_current_thread(BN_BLINDING * b);
void BN_BLINDING_set_current_thread(BN_BLINDING * b);
int BN_BLINDING_lock(BN_BLINDING * b);
int BN_BLINDING_unlock(BN_BLINDING * b);
unsigned long BN_BLINDING_get_flags(const BN_BLINDING*);
void BN_BLINDING_set_flags(BN_BLINDING*, unsigned long);
ifndef OPENSSL_NO_DEPRECATED_0_9_8
OSSL_DEPRECATEDIN_0_9_8
void BN_set_params(int mul, int high, int low, int mont);
OSSL_DEPRECATEDIN_0_9_8
int BN_get_params(int which);
void BN_RECP_CTX_free(BN_RECP_CTX * recp);
int BN_RECP_CTX_set(BN_RECP_CTX * recp, const BIGNUM * rdiv, BN_CTX * ctx);
int BN_mod_mul_reciprocal(BIGNUM * r, const BIGNUM * x, const BIGNUM * y, BN_RECP_CTX * recp, BN_CTX * ctx);
int BN_mod_exp_recp(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx);
int BN_div_recp(BIGNUM * dv, BIGNUM * rem, const BIGNUM * m, BN_RECP_CTX * recp, BN_CTX * ctx);
int BN_GF2m_add(BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
int BN_GF2m_mod(BIGNUM * r, const BIGNUM * a, const BIGNUM * p);
int BN_GF2m_mod_mul(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx);
int BN_GF2m_mod_sqr(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int BN_GF2m_mod_inv(BIGNUM * r, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx);
int BN_GF2m_mod_div(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx);
int BN_GF2m_mod_exp(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx);
int BN_GF2m_mod_sqrt(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int BN_GF2m_mod_solve_quad(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int BN_GF2m_mod_arr(BIGNUM * r, const BIGNUM * a, const int p[]);
int BN_GF2m_mod_mul_arr(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const int p[], BN_CTX * ctx);
int BN_GF2m_mod_sqr_arr(BIGNUM * r, const BIGNUM * a, const int p[], BN_CTX * ctx);
int BN_GF2m_mod_inv_arr(BIGNUM * r, const BIGNUM * b, const int p[], BN_CTX * ctx);
int BN_GF2m_mod_div_arr(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const int p[], BN_CTX * ctx);
int BN_GF2m_mod_exp_arr(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const int p[], BN_CTX * ctx);
int BN_GF2m_mod_sqrt_arr(BIGNUM * r, const BIGNUM * a, const int p[], BN_CTX * ctx);
int BN_GF2m_mod_solve_quad_arr(BIGNUM * r, const BIGNUM * a, const int p[], BN_CTX * ctx);
int BN_GF2m_poly2arr(const BIGNUM * a, int p[], int max);
int BN_GF2m_arr2poly(const int p[], BIGNUM * a);
int BN_nist_mod_192(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int BN_nist_mod_224(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int BN_nist_mod_256(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int BN_nist_mod_384(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int BN_nist_mod_521(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int BN_generate_dsa_nonce(BIGNUM * out, const BIGNUM * range, const BIGNUM * priv, const unsigned char* message, size_t message_len, BN_CTX * ctx);
endif

int BN_bntest_rand(BIGNUM * rnd, int bits, int top, int bottom);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void BUF_MEM_free(BUF_MEM * a);
size_t BUF_MEM_grow(BUF_MEM * str, size_t len);
size_t BUF_MEM_grow_clean(BUF_MEM * str, size_t len);
void BUF_reverse(unsigned char* out, const unsigned char* in, size_t siz);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int Camellia_set_key(const unsigned char* userKey, const int bits, CAMELLIA_KEY * key);
OSSL_DEPRECATEDIN_3_0 void Camellia_encrypt(const unsigned char* in, unsigned char* out, const CAMELLIA_KEY * key);
OSSL_DEPRECATEDIN_3_0 void Camellia_decrypt(const unsigned char* in, unsigned char* out, const CAMELLIA_KEY * key);
OSSL_DEPRECATEDIN_3_0 void Camellia_ecb_encrypt(const unsigned char* in, unsigned char* out, const CAMELLIA_KEY * key, const int enc);
OSSL_DEPRECATEDIN_3_0 void Camellia_cbc_encrypt(const unsigned char* in, unsigned char* out, size_t length, const CAMELLIA_KEY * key, unsigned char* ivec, const int enc);
OSSL_DEPRECATEDIN_3_0 void Camellia_cfb128_encrypt(const unsigned char* in, unsigned char* out, size_t length, const CAMELLIA_KEY * key, unsigned char* ivec, int* num, const int enc);
OSSL_DEPRECATEDIN_3_0 void Camellia_cfb1_encrypt(const unsigned char* in, unsigned char* out, size_t length, const CAMELLIA_KEY * key, unsigned char* ivec, int* num, const int enc);
OSSL_DEPRECATEDIN_3_0 void Camellia_cfb8_encrypt(const unsigned char* in, unsigned char* out, size_t length, const CAMELLIA_KEY * key, unsigned char* ivec, int* num, const int enc);
OSSL_DEPRECATEDIN_3_0 void Camellia_ofb128_encrypt(const unsigned char* in, unsigned char* out, size_t length, const CAMELLIA_KEY * key, unsigned char* ivec, int* num);
OSSL_DEPRECATEDIN_3_0
void Camellia_ctr128_encrypt(const unsigned char* in, unsigned char* out, size_t length, const CAMELLIA_KEY * key, unsigned char ivec[CAMELLIA_BLOCK_SIZE], unsigned char ecount_buf[CAMELLIA_BLOCK_SIZE], unsigned int* num);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
void CAST_set_key(CAST_KEY * key, int len, const unsigned char* data);
OSSL_DEPRECATEDIN_3_0
void CAST_ecb_encrypt(const unsigned char* in, unsigned char* out, const CAST_KEY * key, int enc);
OSSL_DEPRECATEDIN_3_0
void CAST_encrypt(CAST_LONG * data, const CAST_KEY * key);
OSSL_DEPRECATEDIN_3_0
void CAST_decrypt(CAST_LONG * data, const CAST_KEY * key);
OSSL_DEPRECATEDIN_3_0
void CAST_cbc_encrypt(const unsigned char* in, unsigned char* out, long length, const CAST_KEY * ks, unsigned char* iv, int enc);
OSSL_DEPRECATEDIN_3_0
void CAST_cfb64_encrypt(const unsigned char* in, unsigned char* out, long length, const CAST_KEY * schedule, unsigned char* ivec, int* num, int enc);
OSSL_DEPRECATEDIN_3_0
void CAST_ofb64_encrypt(const unsigned char* in, unsigned char* out, long length, const CAST_KEY * schedule, unsigned char* ivec, int* num);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

OSSL_DEPRECATEDIN_3_0 void CMAC_CTX_cleanup(CMAC_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 void CMAC_CTX_free(CMAC_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 int CMAC_CTX_copy(CMAC_CTX * out, const CMAC_CTX * in);
OSSL_DEPRECATEDIN_3_0 int CMAC_Init(CMAC_CTX * ctx, const void* key, size_t keylen, const EVP_CIPHER * cipher, ENGINE * impl);
OSSL_DEPRECATEDIN_3_0 int CMAC_Update(CMAC_CTX * ctx, const void* data, size_t dlen);
OSSL_DEPRECATEDIN_3_0 int CMAC_Final(CMAC_CTX * ctx, unsigned char* out, size_t * poutlen);
OSSL_DEPRECATEDIN_3_0 int CMAC_resume(CMAC_CTX * ctx);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void OSSL_CMP_ITAV_set0(OSSL_CMP_ITAV * itav, ASN1_OBJECT * type, ASN1_TYPE * value);
void OSSL_CMP_ITAV_free(OSSL_CMP_ITAV * itav);
int OSSL_CMP_ITAV_get0_rootCaCert(const OSSL_CMP_ITAV * itav, X509 * *out);
int OSSL_CMP_ITAV_get0_rootCaKeyUpdate(const OSSL_CMP_ITAV * itav, X509 * *newWithNew, X509 * *newWithOld, X509 * *oldWithNew);
void OSSL_CMP_MSG_free(OSSL_CMP_MSG * msg);
void OSSL_CMP_CTX_free(OSSL_CMP_CTX * ctx);
int OSSL_CMP_CTX_reinit(OSSL_CMP_CTX * ctx);
define OSSL_CMP_OPT_NO_CACHE_EXTRACERTS 37
int OSSL_CMP_CTX_set_option(OSSL_CMP_CTX * ctx, int opt, int val);
int OSSL_CMP_CTX_get_option(const OSSL_CMP_CTX * ctx, int opt);
int OSSL_CMP_CTX_set_log_cb(OSSL_CMP_CTX * ctx, OSSL_CMP_log_cb_t cb);
void OSSL_CMP_CTX_print_errors(const OSSL_CMP_CTX * ctx);
int OSSL_CMP_CTX_set1_serverPath(OSSL_CMP_CTX * ctx, const char* path);
int OSSL_CMP_CTX_set1_server(OSSL_CMP_CTX * ctx, const char* address);
int OSSL_CMP_CTX_set_serverPort(OSSL_CMP_CTX * ctx, int port);
int OSSL_CMP_CTX_set1_proxy(OSSL_CMP_CTX * ctx, const char* name);
int OSSL_CMP_CTX_set1_no_proxy(OSSL_CMP_CTX * ctx, const char* names);
ifndef OPENSSL_NO_HTTP
int OSSL_CMP_CTX_set_http_cb(OSSL_CMP_CTX * ctx, OSSL_HTTP_bio_cb_t cb);
int OSSL_CMP_CTX_set_http_cb_arg(OSSL_CMP_CTX * ctx, void* arg);
int OSSL_CMP_CTX_set_transfer_cb(OSSL_CMP_CTX * ctx, OSSL_CMP_transfer_cb_t cb);
int OSSL_CMP_CTX_set_transfer_cb_arg(OSSL_CMP_CTX * ctx, void* arg);
int OSSL_CMP_CTX_set1_srvCert(OSSL_CMP_CTX * ctx, X509 * cert);
int OSSL_CMP_CTX_set1_expected_sender(OSSL_CMP_CTX * ctx, const X509_NAME * name);
int OSSL_CMP_CTX_set0_trustedStore(OSSL_CMP_CTX * ctx, X509_STORE * store);
int OSSL_CMP_CTX_set1_cert(OSSL_CMP_CTX * ctx, X509 * cert);
int OSSL_CMP_CTX_set1_pkey(OSSL_CMP_CTX * ctx, EVP_PKEY * pkey);
int OSSL_CMP_CTX_set1_referenceValue(OSSL_CMP_CTX * ctx, const unsigned char* ref, int len);
int OSSL_CMP_CTX_set1_secretValue(OSSL_CMP_CTX * ctx, const unsigned char* sec, int len);
int OSSL_CMP_CTX_set1_recipient(OSSL_CMP_CTX * ctx, const X509_NAME * name);
int OSSL_CMP_CTX_push0_geninfo_ITAV(OSSL_CMP_CTX * ctx, OSSL_CMP_ITAV * itav);
int OSSL_CMP_CTX_reset_geninfo_ITAVs(OSSL_CMP_CTX * ctx);
int OSSL_CMP_CTX_set0_newPkey(OSSL_CMP_CTX * ctx, int priv, EVP_PKEY * pkey);
int OSSL_CMP_CTX_set1_issuer(OSSL_CMP_CTX * ctx, const X509_NAME * name);
int OSSL_CMP_CTX_set1_serialNumber(OSSL_CMP_CTX * ctx, const ASN1_INTEGER * sn);
int OSSL_CMP_CTX_set1_subjectName(OSSL_CMP_CTX * ctx, const X509_NAME * name);
int OSSL_CMP_CTX_push1_subjectAltName(OSSL_CMP_CTX * ctx, const GENERAL_NAME * name);
int OSSL_CMP_CTX_set0_reqExtensions(OSSL_CMP_CTX * ctx, X509_EXTENSIONS * exts);
int OSSL_CMP_CTX_reqExtensions_have_SAN(OSSL_CMP_CTX * ctx);
int OSSL_CMP_CTX_push0_policy(OSSL_CMP_CTX * ctx, POLICYINFO * pinfo);
int OSSL_CMP_CTX_set1_oldCert(OSSL_CMP_CTX * ctx, X509 * cert);
int OSSL_CMP_CTX_set1_p10CSR(OSSL_CMP_CTX * ctx, const X509_REQ * csr);
int OSSL_CMP_CTX_push0_genm_ITAV(OSSL_CMP_CTX * ctx, OSSL_CMP_ITAV * itav);
int OSSL_CMP_certConf_cb(OSSL_CMP_CTX * ctx, X509 * cert, int fail_info, const char** text);
int OSSL_CMP_CTX_set_certConf_cb(OSSL_CMP_CTX * ctx, OSSL_CMP_certConf_cb_t cb);
int OSSL_CMP_CTX_set_certConf_cb_arg(OSSL_CMP_CTX * ctx, void* arg);
int OSSL_CMP_CTX_get_status(const OSSL_CMP_CTX * ctx);
int OSSL_CMP_CTX_get_failInfoCode(const OSSL_CMP_CTX * ctx);
int OSSL_CMP_CTX_set1_transactionID(OSSL_CMP_CTX * ctx, const ASN1_OCTET_STRING * id);
int OSSL_CMP_CTX_set1_senderNonce(OSSL_CMP_CTX * ctx, const ASN1_OCTET_STRING * nonce);
OSSL_CMP_PKISI* OSSL_CMP_STATUSINFO_new(int status, int fail_info, const char* text);
int OSSL_CMP_MSG_get_bodytype(const OSSL_CMP_MSG * msg);
int OSSL_CMP_MSG_update_transactionID(OSSL_CMP_CTX * ctx, OSSL_CMP_MSG * msg);
int OSSL_CMP_MSG_update_recipNonce(OSSL_CMP_CTX * ctx, OSSL_CMP_MSG * msg);
int OSSL_CMP_MSG_write(const char* file, const OSSL_CMP_MSG * msg);
int i2d_OSSL_CMP_MSG_bio(BIO * bio, const OSSL_CMP_MSG * msg);
int OSSL_CMP_validate_msg(OSSL_CMP_CTX * ctx, const OSSL_CMP_MSG * msg);
int OSSL_CMP_validate_cert_path(const OSSL_CMP_CTX * ctx, X509_STORE * trusted_store, X509 * cert);
OSSL_CMP_MSG* OSSL_CMP_CTX_server_perform(OSSL_CMP_CTX * client_ctx, const OSSL_CMP_MSG * req);
void OSSL_CMP_SRV_CTX_free(OSSL_CMP_SRV_CTX * srv_ctx);
int OSSL_CMP_SRV_CTX_init(OSSL_CMP_SRV_CTX * srv_ctx, void* custom_ctx, OSSL_CMP_SRV_cert_request_cb_t process_cert_request, OSSL_CMP_SRV_rr_cb_t process_rr, OSSL_CMP_SRV_genm_cb_t process_genm, OSSL_CMP_SRV_error_cb_t process_error, OSSL_CMP_SRV_certConf_cb_t process_certConf, OSSL_CMP_SRV_pollReq_cb_t process_pollReq);
int OSSL_CMP_SRV_CTX_init_trans(OSSL_CMP_SRV_CTX * srv_ctx, OSSL_CMP_SRV_delayed_delivery_cb_t delay, OSSL_CMP_SRV_clean_transaction_cb_t clean);
int OSSL_CMP_SRV_CTX_set_send_unprotected_errors(OSSL_CMP_SRV_CTX * srv_ctx, int val);
int OSSL_CMP_SRV_CTX_set_accept_unprotected(OSSL_CMP_SRV_CTX * srv_ctx, int val);
int OSSL_CMP_SRV_CTX_set_accept_raverified(OSSL_CMP_SRV_CTX * srv_ctx, int val);
int OSSL_CMP_SRV_CTX_set_grant_implicit_confirm(OSSL_CMP_SRV_CTX * srv_ctx, int val);
int OSSL_CMP_try_certreq(OSSL_CMP_CTX * ctx, int req_type, const OSSL_CRMF_MSG * crm, int* checkAfter);
int OSSL_CMP_exec_RR_ses(OSSL_CMP_CTX * ctx);
int OSSL_CMP_get1_rootCaKeyUpdate(OSSL_CMP_CTX * ctx, const X509 * oldWithOld, X509 * *newWithNew, X509 * *newWithOld, X509 * *oldWithNew);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

endif

int OSSL_CMP_log_open(void);
void OSSL_CMP_log_close(void);
int OSSL_CMP_print_to_bio(BIO * bio, const char* component, const char* file, int line, OSSL_CMP_severity level, const char* msg);
void OSSL_CMP_print_errors_cb(OSSL_CMP_log_cb_t log_fn);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int CMS_dataFinal(CMS_ContentInfo * cms, BIO * bio);
int CMS_is_detached(CMS_ContentInfo * cms);
int CMS_set_detached(CMS_ContentInfo * cms, int detached);
endif
int CMS_stream(unsigned char*** boundary, CMS_ContentInfo * cms);
int i2d_CMS_bio(BIO * bp, CMS_ContentInfo * cms);
int i2d_CMS_bio_stream(BIO * out, CMS_ContentInfo * cms, BIO * in, int flags);
int PEM_write_bio_CMS_stream(BIO * out, CMS_ContentInfo * cms, BIO * in, int flags);
int SMIME_write_CMS(BIO * bio, CMS_ContentInfo * cms, BIO * data, int flags);
int CMS_final(CMS_ContentInfo * cms, BIO * data, BIO * dcont, unsigned int flags);
int CMS_final_digest(CMS_ContentInfo * cms, const unsigned char* md, unsigned int mdlen, BIO * dcont, unsigned int flags);
int CMS_data(CMS_ContentInfo * cms, BIO * out, unsigned int flags);
int CMS_digest_verify(CMS_ContentInfo * cms, BIO * dcont, BIO * out, unsigned int flags);
int CMS_EncryptedData_decrypt(CMS_ContentInfo * cms, const unsigned char* key, size_t keylen, BIO * dcont, BIO * out, unsigned int flags);
int CMS_EncryptedData_set1_key(CMS_ContentInfo * cms, const EVP_CIPHER * ciph, const unsigned char* key, size_t keylen);
int CMS_decrypt(CMS_ContentInfo * cms, EVP_PKEY * pkey, X509 * cert, BIO * dcont, BIO * out, unsigned int flags);
int CMS_decrypt_set1_pkey(CMS_ContentInfo * cms, EVP_PKEY * pk, X509 * cert);
int CMS_decrypt_set1_pkey_and_peer(CMS_ContentInfo * cms, EVP_PKEY * pk, X509 * cert, X509 * peer);
int CMS_decrypt_set1_key(CMS_ContentInfo * cms, unsigned char* key, size_t keylen, const unsigned char* id, size_t idlen);
int CMS_decrypt_set1_password(CMS_ContentInfo * cms, unsigned char* pass, ossl_ssize_t passlen);
int CMS_RecipientInfo_type(CMS_RecipientInfo * ri);
CMS_ContentInfo* CMS_AuthEnvelopedData_create_ex(const EVP_CIPHER * cipher, OSSL_LIB_CTX * libctx, const char* propq);
int CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo * ri, EVP_PKEY * pkey);
int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo * ri, X509 * cert);
int CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo * ri, EVP_PKEY * *pk, X509 * *recip, X509_ALGOR * *palg);
int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo * ri, ASN1_OCTET_STRING * *keyid, X509_NAME * *issuer, ASN1_INTEGER * *sno);
int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo * ri, X509_ALGOR * *palg, ASN1_OCTET_STRING * *pid, ASN1_GENERALIZEDTIME * *pdate, ASN1_OBJECT * *potherid, ASN1_TYPE * *pothertype);
int CMS_RecipientInfo_set0_key(CMS_RecipientInfo * ri, unsigned char* key, size_t keylen);
int CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo * ri, const unsigned char* id, size_t idlen);
int CMS_RecipientInfo_set0_password(CMS_RecipientInfo * ri, unsigned char* pass, ossl_ssize_t passlen);
int CMS_RecipientInfo_decrypt(CMS_ContentInfo * cms, CMS_RecipientInfo * ri);
int CMS_RecipientInfo_encrypt(const CMS_ContentInfo * cms, CMS_RecipientInfo * ri);
int CMS_uncompress(CMS_ContentInfo * cms, BIO * dcont, BIO * out, unsigned int flags);
int CMS_set1_eContentType(CMS_ContentInfo * cms, const ASN1_OBJECT * oid);
int CMS_add0_cert(CMS_ContentInfo * cms, X509 * cert);
int CMS_add1_cert(CMS_ContentInfo * cms, X509 * cert);
int CMS_add0_crl(CMS_ContentInfo * cms, X509_CRL * crl);
int CMS_add1_crl(CMS_ContentInfo * cms, X509_CRL * crl);
int CMS_SignedData_init(CMS_ContentInfo * cms);
void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo * si, X509 * signer);
int CMS_SignerInfo_get0_signer_id(CMS_SignerInfo * si, ASN1_OCTET_STRING * *keyid, X509_NAME * *issuer, ASN1_INTEGER * *sno);
int CMS_SignerInfo_cert_cmp(CMS_SignerInfo * si, X509 * cert);
void CMS_SignerInfo_get0_algs(CMS_SignerInfo * si, EVP_PKEY * *pk, X509 * *signer, X509_ALGOR * *pdig, X509_ALGOR * *psig);
int CMS_SignerInfo_sign(CMS_SignerInfo * si);
int CMS_SignerInfo_verify(CMS_SignerInfo * si);
int CMS_SignerInfo_verify_content(CMS_SignerInfo * si, BIO * chain);
int CMS_signed_get_attr_count(const CMS_SignerInfo * si);
int CMS_signed_get_attr_by_NID(const CMS_SignerInfo * si, int nid, int lastpos);
int CMS_signed_get_attr_by_OBJ(const CMS_SignerInfo * si, const ASN1_OBJECT * obj, int lastpos);
int CMS_signed_add1_attr(CMS_SignerInfo * si, X509_ATTRIBUTE * attr);
int CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo * si, const ASN1_OBJECT * obj, int type, const void* bytes, int len);
int CMS_signed_add1_attr_by_NID(CMS_SignerInfo * si, int nid, int type, const void* bytes, int len);
int CMS_signed_add1_attr_by_txt(CMS_SignerInfo * si, const char* attrname, int type, const void* bytes, int len);
int CMS_unsigned_get_attr_count(const CMS_SignerInfo * si);
int CMS_unsigned_get_attr_by_NID(const CMS_SignerInfo * si, int nid, int lastpos);
int CMS_unsigned_get_attr_by_OBJ(const CMS_SignerInfo * si, const ASN1_OBJECT * obj, int lastpos);
int CMS_unsigned_add1_attr(CMS_SignerInfo * si, X509_ATTRIBUTE * attr);
int CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo * si, const ASN1_OBJECT * obj, int type, const void* bytes, int len);
int CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo * si, int nid, int type, const void* bytes, int len);
int CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo * si, const char* attrname, int type, const void* bytes, int len);
int CMS_get1_ReceiptRequest(CMS_SignerInfo * si, CMS_ReceiptRequest * *prr);
int CMS_add1_ReceiptRequest(CMS_SignerInfo * si, CMS_ReceiptRequest * rr);
int CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo * ri, X509_ALGOR * *palg, ASN1_OCTET_STRING * *pukm);
int CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo * ri, X509_ALGOR * *pubalg, ASN1_BIT_STRING * *pubkey, ASN1_OCTET_STRING * *keyid, X509_NAME * *issuer, ASN1_INTEGER * *sno);
int CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo * ri, X509 * cert);
int CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey * rek, ASN1_OCTET_STRING * *keyid, ASN1_GENERALIZEDTIME * *tm, CMS_OtherKeyAttribute * *other, X509_NAME * *issuer, ASN1_INTEGER * *sno);
int CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey * rek, X509 * cert);
int CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo * ri, EVP_PKEY * pk);
int CMS_RecipientInfo_kari_set0_pkey_and_peer(CMS_RecipientInfo * ri, EVP_PKEY * pk, X509 * peer);
int CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo * cms, CMS_RecipientInfo * ri, CMS_RecipientEncryptedKey * rek);
int CMS_SharedInfo_encode(unsigned char** pder, X509_ALGOR * kekalg, ASN1_OCTET_STRING * ukm, int keylen);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int COMP_CTX_get_type(const COMP_CTX * comp);
int COMP_get_type(const COMP_METHOD * meth);
void COMP_CTX_free(COMP_CTX * ctx);
int COMP_compress_block(COMP_CTX * ctx, unsigned char* out, int olen, unsigned char* in, int ilen);
int COMP_expand_block(COMP_CTX * ctx, unsigned char* out, int olen, unsigned char* in, int ilen);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

define CONF_MFLAGS_DEFAULT_SECTION     0x20

int CONF_set_default_method(CONF_METHOD * meth);
ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 void OPENSSL_config(const char* config_name);
endif
void NCONF_free(CONF * conf);
void NCONF_free_data(CONF * conf);
int NCONF_load(CONF * conf, const char* file, long* eline);
ifndef OPENSSL_NO_STDIO
int NCONF_load_fp(CONF * conf, FILE * fp, long* eline);
endif
int NCONF_load_bio(CONF * conf, BIO * bp, long* eline);
int NCONF_get_number_e(const CONF * conf, const char* group, const char* name, long* result);
ifndef OPENSSL_NO_STDIO
int NCONF_dump_fp(const CONF * conf, FILE * out);
endif
int NCONF_dump_bio(const CONF * conf, BIO * out);
int CONF_modules_load(const CONF * cnf, const char* appname, unsigned long flags);
int CONF_modules_load_file_ex(OSSL_LIB_CTX * libctx, const char* filename, const char* appname, unsigned long flags);
int CONF_modules_load_file(const char* filename, const char* appname, unsigned long flags);
void CONF_modules_unload(int all);
void CONF_modules_finish(void);
endif
int CONF_module_add(const char* name, conf_init_func * ifunc, conf_finish_func * ffunc);
void CONF_imodule_set_usr_data(CONF_IMODULE * md, void* usr_data);
unsigned long CONF_imodule_get_flags(const CONF_IMODULE * md);
void CONF_imodule_set_flags(CONF_IMODULE * md, unsigned long flags);
void CONF_module_set_usr_data(CONF_MODULE * pmod, void* usr_data);
void OPENSSL_load_builtin_modules(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int _CONF_add_string(CONF * conf, CONF_VALUE * section, CONF_VALUE * value);
long _CONF_get_number(const CONF * conf, const char* section, const char* name);
int _CONF_new_data(CONF * conf);
void _CONF_free_data(CONF * conf);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int OSSL_CRMF_pbm_new(OSSL_LIB_CTX * libctx, const char* propq, const OSSL_CRMF_PBMPARAMETER * pbmp, const unsigned char* msg, size_t msglen, const unsigned char* sec, size_t seclen, unsigned char** mac, size_t * maclen);
int OSSL_CRMF_MSG_set1_regCtrl_regToken(OSSL_CRMF_MSG * msg, const ASN1_UTF8STRING * tok);
int OSSL_CRMF_MSG_set1_regCtrl_authenticator(OSSL_CRMF_MSG * msg, const ASN1_UTF8STRING * auth);
int OSSL_CRMF_MSG_PKIPublicationInfo_push0_SinglePubInfo(OSSL_CRMF_PKIPUBLICATIONINFO * pi, OSSL_CRMF_SINGLEPUBINFO * spi);
define OSSL_CRMF_PUB_METHOD_LDAP     3
int OSSL_CRMF_MSG_set0_SinglePubInfo(OSSL_CRMF_SINGLEPUBINFO * spi, int method, GENERAL_NAME * nm);
define OSSL_CRMF_PUB_ACTION_PLEASEPUBLISH 1
int OSSL_CRMF_MSG_set_PKIPublicationInfo_action(OSSL_CRMF_PKIPUBLICATIONINFO * pi, int action);
int OSSL_CRMF_MSG_set1_regCtrl_pkiPublicationInfo(OSSL_CRMF_MSG * msg, const OSSL_CRMF_PKIPUBLICATIONINFO * pi);
int OSSL_CRMF_MSG_set1_regCtrl_protocolEncrKey(OSSL_CRMF_MSG * msg, const X509_PUBKEY * pubkey);
int OSSL_CRMF_MSG_set1_regCtrl_oldCertID(OSSL_CRMF_MSG * msg, const OSSL_CRMF_CERTID * cid);
int OSSL_CRMF_MSG_set1_regInfo_utf8Pairs(OSSL_CRMF_MSG * msg, const ASN1_UTF8STRING * utf8pairs);
int OSSL_CRMF_MSG_set1_regInfo_certReq(OSSL_CRMF_MSG * msg, const OSSL_CRMF_CERTREQUEST * cr);
int OSSL_CRMF_MSG_set0_validity(OSSL_CRMF_MSG * crm, ASN1_TIME * notBefore, ASN1_TIME * notAfter);
int OSSL_CRMF_MSG_set_certReqId(OSSL_CRMF_MSG * crm, int rid);
int OSSL_CRMF_MSG_get_certReqId(const OSSL_CRMF_MSG * crm);
int OSSL_CRMF_MSG_set0_extensions(OSSL_CRMF_MSG * crm, X509_EXTENSIONS * exts);
int OSSL_CRMF_MSG_push0_extension(OSSL_CRMF_MSG * crm, X509_EXTENSION * ext);
define OSSL_CRMF_POPO_KEYAGREE   3
int OSSL_CRMF_MSG_create_popo(int meth, OSSL_CRMF_MSG * crm, EVP_PKEY * pkey, const EVP_MD * digest, OSSL_LIB_CTX * libctx, const char* propq);
int OSSL_CRMF_MSGS_verify_popo(const OSSL_CRMF_MSGS * reqs, int rid, int acceptRAVerified, OSSL_LIB_CTX * libctx, const char* propq);
int OSSL_CRMF_CERTTEMPLATE_fill(OSSL_CRMF_CERTTEMPLATE * tmpl, EVP_PKEY * pubkey, const X509_NAME * subject, const X509_NAME * issuer, const ASN1_INTEGER * serial);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

__owur int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK * lock);
__owur int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK * lock);
int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK * lock);
void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK * lock);
int CRYPTO_atomic_add(int* val, int amount, int* ret, CRYPTO_RWLOCK * lock);
int CRYPTO_atomic_or(uint64_t * val, uint64_t op, uint64_t * ret, CRYPTO_RWLOCK * lock);
int CRYPTO_atomic_load(uint64_t * val, uint64_t * ret, CRYPTO_RWLOCK * lock);
int CRYPTO_atomic_load_int(int* val, int* ret, CRYPTO_RWLOCK * lock);
size_t OPENSSL_strlcpy(char* dst, const char* src, size_t siz);
size_t OPENSSL_strlcat(char* dst, const char* src, size_t siz);
size_t OPENSSL_strnlen(const char* str, size_t maxlen);
int OPENSSL_buf2hexstr_ex(char* str, size_t str_n, size_t * strlength, const unsigned char* buf, size_t buflen, const char sep);
int OPENSSL_hexstr2buf_ex(unsigned char* buf, size_t buf_n, size_t * buflen, const char* str, const char sep);
int OPENSSL_hexchar2int(unsigned char c);
int OPENSSL_strcasecmp(const char* s1, const char* s2);
int OPENSSL_strncasecmp(const char* s1, const char* s2, size_t n);
unsigned int OPENSSL_version_major(void);
unsigned int OPENSSL_version_minor(void);
unsigned int OPENSSL_version_patch(void);
unsigned long OpenSSL_version_num(void);
define OPENSSL_INFO_CPU_SETTINGS              1008

int OPENSSL_issetugid(void);
__owur int CRYPTO_get_ex_new_index(int class_index, long argl, void* argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
int CRYPTO_free_ex_index(int class_index, int idx);
int CRYPTO_new_ex_data(int class_index, void* obj, CRYPTO_EX_DATA * ad);
int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA * to, const CRYPTO_EX_DATA * from);
void CRYPTO_free_ex_data(int class_index, void* obj, CRYPTO_EX_DATA * ad);
int CRYPTO_alloc_ex_data(int class_index, void* obj, CRYPTO_EX_DATA * ad, int idx);
int CRYPTO_set_ex_data(CRYPTO_EX_DATA * ad, int idx, void* val);
int CRYPTO_set_mem_functions(CRYPTO_malloc_fn malloc_fn, CRYPTO_realloc_fn realloc_fn, CRYPTO_free_fn free_fn);
void CRYPTO_get_mem_functions(CRYPTO_malloc_fn * malloc_fn, CRYPTO_realloc_fn * realloc_fn, CRYPTO_free_fn * free_fn);
void CRYPTO_free(void* ptr, const char* file, int line);
void CRYPTO_clear_free(void* ptr, size_t num, const char* file, int line);
int CRYPTO_secure_malloc_init(size_t sz, size_t minsize);
int CRYPTO_secure_malloc_done(void);
void CRYPTO_secure_free(void* ptr, const char* file, int line);
void CRYPTO_secure_clear_free(void* ptr, size_t num, const char* file, int line);
int CRYPTO_secure_allocated(const void* ptr);
int CRYPTO_secure_malloc_initialized(void);
size_t CRYPTO_secure_actual_size(void* ptr);
size_t CRYPTO_secure_used(void);
void OPENSSL_cleanse(void* ptr, size_t len);
void CRYPTO_get_alloc_counts(int* mcount, int* rcount, int* fcount);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int CRYPTO_set_mem_debug(int flag);
OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_ctrl(int mode);
OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_debug_push(const char* info, const char* file, int line);
OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_debug_pop(void);
OSSL_DEPRECATEDIN_3_0 void CRYPTO_mem_debug_malloc(void* addr, size_t num, int flag, const char* file, int line);
OSSL_DEPRECATEDIN_3_0 void CRYPTO_mem_debug_realloc(void* addr1, void* addr2, size_t num, int flag, const char* file, int line);
OSSL_DEPRECATEDIN_3_0 void CRYPTO_mem_debug_free(void* addr, int flag, const char* file, int line);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_leaks_fp(FILE*);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_leaks(BIO * bio);
ossl_noreturn void OPENSSL_die(const char* assertion, const char* file, int line);
int OPENSSL_isservice(void);
void OPENSSL_init(void);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 void OPENSSL_fork_prepare(void);
OSSL_DEPRECATEDIN_3_0 void OPENSSL_fork_parent(void);
OSSL_DEPRECATEDIN_3_0 void OPENSSL_fork_child(void);
int OPENSSL_gmtime_adj(struct tm* tm, int offset_day, long offset_sec);
int OPENSSL_gmtime_diff(int* pday, int* psec, const struct tm* from, const struct tm* to);
int CRYPTO_memcmp(const void* in_a, const void* in_b, size_t len);
void OPENSSL_cleanup(void);
int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS * settings);
void OPENSSL_thread_stop(void);
void OPENSSL_thread_stop_ex(OSSL_LIB_CTX * ctx);
ifndef OPENSSL_NO_STDIO
int OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS * settings, const char* config_filename);
void OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS * settings, unsigned long flags);
int OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS * settings, const char* config_appname);
endif
void OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS * settings);
int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL * key, void* val);
int CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL * key);
CRYPTO_THREAD_ID CRYPTO_THREAD_get_current_id(void);
int CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b);
int OSSL_LIB_CTX_load_config(OSSL_LIB_CTX * ctx, const char* config_file);
void OSSL_LIB_CTX_free(OSSL_LIB_CTX*);
void OSSL_sleep(uint64_t millis);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int ERR_load_ASN1_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_ASYNC_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_BIO_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_BN_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_BUF_strings(void);
ifndef OPENSSL_NO_CMS
OSSL_DEPRECATEDIN_3_0 int ERR_load_CMS_strings(void);
ifndef OPENSSL_NO_COMP
OSSL_DEPRECATEDIN_3_0 int ERR_load_COMP_strings(void);
endif
OSSL_DEPRECATEDIN_3_0 int ERR_load_CONF_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_CRYPTO_strings(void);
ifndef OPENSSL_NO_CT
OSSL_DEPRECATEDIN_3_0 int ERR_load_CT_strings(void);
ifndef OPENSSL_NO_DH
OSSL_DEPRECATEDIN_3_0 int ERR_load_DH_strings(void);
ifndef OPENSSL_NO_DSA
OSSL_DEPRECATEDIN_3_0 int ERR_load_DSA_strings(void);
ifndef OPENSSL_NO_EC
OSSL_DEPRECATEDIN_3_0 int ERR_load_EC_strings(void);
ifndef OPENSSL_NO_ENGINE
OSSL_DEPRECATEDIN_3_0 int ERR_load_ENGINE_strings(void);
endif
OSSL_DEPRECATEDIN_3_0 int ERR_load_ERR_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_EVP_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_KDF_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_OBJ_strings(void);
ifndef OPENSSL_NO_OCSP
OSSL_DEPRECATEDIN_3_0 int ERR_load_OCSP_strings(void);
endif
OSSL_DEPRECATEDIN_3_0 int ERR_load_PEM_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_PKCS12_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_PKCS7_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_RAND_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_RSA_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_OSSL_STORE_strings(void);
ifndef OPENSSL_NO_TS
OSSL_DEPRECATEDIN_3_0 int ERR_load_TS_strings(void);
endif
OSSL_DEPRECATEDIN_3_0 int ERR_load_UI_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_X509_strings(void);
OSSL_DEPRECATEDIN_3_0 int ERR_load_X509V3_strings(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX * ctx);
X509* CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX * ctx);
int CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX * ctx, X509 * cert);
X509* CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX * ctx);
int CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX * ctx, X509 * issuer);
void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX * ctx, CTLOG_STORE * log_store);
uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX * ctx);
void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX * ctx, uint64_t time_in_ms);
void SCT_free(SCT * sct);
sct_version_t SCT_get_version(const SCT * sct);
__owur int SCT_set_version(SCT * sct, sct_version_t version);
ct_log_entry_type_t SCT_get_log_entry_type(const SCT * sct);
__owur int SCT_set_log_entry_type(SCT * sct, ct_log_entry_type_t entry_type);
size_t SCT_get0_log_id(const SCT * sct, unsigned char** log_id);
__owur int SCT_set0_log_id(SCT * sct, unsigned char* log_id, size_t log_id_len);
__owur int SCT_set1_log_id(SCT * sct, const unsigned char* log_id, size_t log_id_len);
uint64_t SCT_get_timestamp(const SCT * sct);
void SCT_set_timestamp(SCT * sct, uint64_t timestamp);
int SCT_get_signature_nid(const SCT * sct);
__owur int SCT_set_signature_nid(SCT * sct, int nid);
size_t SCT_get0_extensions(const SCT * sct, unsigned char** ext);
void SCT_set0_extensions(SCT * sct, unsigned char* ext, size_t ext_len);
__owur int SCT_set1_extensions(SCT * sct, const unsigned char* ext, size_t ext_len);
size_t SCT_get0_signature(const SCT * sct, unsigned char** sig);
void SCT_set0_signature(SCT * sct, unsigned char* sig, size_t sig_len);
__owur int SCT_set1_signature(SCT * sct, const unsigned char* sig, size_t sig_len);
sct_source_t SCT_get_source(const SCT * sct);
__owur int SCT_set_source(SCT * sct, sct_source_t source);
void SCT_print(const SCT * sct, BIO * out, int indent, const CTLOG_STORE * logs);
sct_validation_status_t SCT_get_validation_status(const SCT * sct);
__owur int SCT_validate(SCT * sct, const CT_POLICY_EVAL_CTX * ctx);
__owur int i2o_SCT(const SCT * sct, unsigned char** out);
int CTLOG_new_from_base64_ex(CTLOG * *ct_log, const char* pkey_base64, const char* name, OSSL_LIB_CTX * libctx, const char* propq);
int CTLOG_new_from_base64(CTLOG * *ct_log, const char* pkey_base64, const char* name);
void CTLOG_free(CTLOG * log);
void CTLOG_get0_log_id(const CTLOG * log, const uint8_t * *log_id, size_t * log_id_len);
void CTLOG_STORE_free(CTLOG_STORE * store);
__owur int CTLOG_STORE_load_file(CTLOG_STORE * store, const char* file);
__owur int CTLOG_STORE_load_default_file(CTLOG_STORE * store);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int OSSL_DECODER_up_ref(OSSL_DECODER * encoder);
void OSSL_DECODER_free(OSSL_DECODER * encoder);
int OSSL_DECODER_is_a(const OSSL_DECODER * encoder, const char* name);
int OSSL_DECODER_get_params(OSSL_DECODER * decoder, OSSL_PARAM params[]);
int OSSL_DECODER_CTX_set_params(OSSL_DECODER_CTX * ctx, const OSSL_PARAM params[]);
void OSSL_DECODER_CTX_free(OSSL_DECODER_CTX * ctx);
int OSSL_DECODER_CTX_set_passphrase(OSSL_DECODER_CTX * ctx, const unsigned char* kstr, size_t klen);
int OSSL_DECODER_CTX_set_pem_password_cb(OSSL_DECODER_CTX * ctx, pem_password_cb * cb, void* cbarg);
int OSSL_DECODER_CTX_set_passphrase_cb(OSSL_DECODER_CTX * ctx, OSSL_PASSPHRASE_CALLBACK * cb, void* cbarg);
int OSSL_DECODER_CTX_set_passphrase_ui(OSSL_DECODER_CTX * ctx, const UI_METHOD * ui_method, void* ui_data);
int OSSL_DECODER_CTX_set_selection(OSSL_DECODER_CTX * ctx, int selection);
int OSSL_DECODER_CTX_set_input_type(OSSL_DECODER_CTX * ctx, const char* input_type);
int OSSL_DECODER_CTX_set_input_structure(OSSL_DECODER_CTX * ctx, const char* input_structure);
int OSSL_DECODER_CTX_add_decoder(OSSL_DECODER_CTX * ctx, OSSL_DECODER * decoder);
int OSSL_DECODER_CTX_add_extra(OSSL_DECODER_CTX * ctx, OSSL_LIB_CTX * libctx, const char* propq);
int OSSL_DECODER_CTX_get_num_decoders(OSSL_DECODER_CTX * ctx);
OSSL_DECODER* OSSL_DECODER_INSTANCE_get_decoder(OSSL_DECODER_INSTANCE * decoder_inst);
void* OSSL_DECODER_INSTANCE_get_decoder_ctx(OSSL_DECODER_INSTANCE * decoder_inst);
const char* OSSL_DECODER_INSTANCE_get_input_type(OSSL_DECODER_INSTANCE * decoder_inst);
const char* OSSL_DECODER_INSTANCE_get_input_structure(OSSL_DECODER_INSTANCE * decoder_inst, int* was_set);
typedef int OSSL_DECODER_CONSTRUCT(OSSL_DECODER_INSTANCE* decoder_inst, const OSSL_PARAM* params, void* construct_data);
typedef void OSSL_DECODER_CLEANUP(void* construct_data);
int OSSL_DECODER_CTX_set_construct(OSSL_DECODER_CTX * ctx, OSSL_DECODER_CONSTRUCT * construct);
int OSSL_DECODER_CTX_set_construct_data(OSSL_DECODER_CTX * ctx, void* construct_data);
int OSSL_DECODER_CTX_set_cleanup(OSSL_DECODER_CTX * ctx, OSSL_DECODER_CLEANUP * cleanup);
int OSSL_DECODER_export(OSSL_DECODER_INSTANCE * decoder_inst, void* reference, size_t reference_sz, OSSL_CALLBACK * export_cb, void* export_cbarg);
int OSSL_DECODER_from_bio(OSSL_DECODER_CTX * ctx, BIO * in);
ifndef OPENSSL_NO_STDIO
int OSSL_DECODER_from_fp(OSSL_DECODER_CTX * ctx, FILE * in);
endif
int OSSL_DECODER_from_data(OSSL_DECODER_CTX * ctx, const unsigned char** pdata, size_t * pdata_len);
OSSL_DECODER_CTX* OSSL_DECODER_CTX_new_for_pkey(EVP_PKEY * *pkey, const char* input_type, const char* input_struct, const char* keytype, int selection, OSSL_LIB_CTX * libctx, const char* propquery);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

OSSL_DEPRECATEDIN_3_0
void DES_ecb3_encrypt(const_DES_cblock * input, DES_cblock * output, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, int enc);
OSSL_DEPRECATEDIN_3_0
DES_LONG DES_cbc_cksum(const unsigned char* input, DES_cblock * output, long length, DES_key_schedule * schedule, const_DES_cblock * ivec);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
void DES_cbc_encrypt(const unsigned char* input, unsigned char* output, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc);
OSSL_DEPRECATEDIN_3_0
void DES_ncbc_encrypt(const unsigned char* input, unsigned char* output, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc);
OSSL_DEPRECATEDIN_3_0
void DES_xcbc_encrypt(const unsigned char* input, unsigned char* output, long length, DES_key_schedule * schedule, DES_cblock * ivec, const_DES_cblock * inw, const_DES_cblock * outw, int enc);
OSSL_DEPRECATEDIN_3_0
void DES_cfb_encrypt(const unsigned char* in, unsigned char* out, int numbits, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc);
OSSL_DEPRECATEDIN_3_0
void DES_ecb_encrypt(const_DES_cblock * input, DES_cblock * output, DES_key_schedule * ks, int enc);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
void DES_encrypt1(DES_LONG * data, DES_key_schedule * ks, int enc);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
void DES_encrypt2(DES_LONG * data, DES_key_schedule * ks, int enc);
OSSL_DEPRECATEDIN_3_0
void DES_encrypt3(DES_LONG * data, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3);
OSSL_DEPRECATEDIN_3_0
void DES_decrypt3(DES_LONG * data, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3);
OSSL_DEPRECATEDIN_3_0
void DES_ede3_cbc_encrypt(const unsigned char* input, unsigned char* output, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int enc);
OSSL_DEPRECATEDIN_3_0
void DES_ede3_cfb64_encrypt(const unsigned char* in, unsigned char* out, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int* num, int enc);
OSSL_DEPRECATEDIN_3_0
void DES_ede3_cfb_encrypt(const unsigned char* in, unsigned char* out, int numbits, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int enc);
OSSL_DEPRECATEDIN_3_0
void DES_ede3_ofb64_encrypt(const unsigned char* in, unsigned char* out, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int* num);
OSSL_DEPRECATEDIN_3_0
void DES_ofb_encrypt(const unsigned char* in, unsigned char* out, int numbits, long length, DES_key_schedule * schedule, DES_cblock * ivec);
OSSL_DEPRECATEDIN_3_0
void DES_pcbc_encrypt(const unsigned char* input, unsigned char* output, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc);
OSSL_DEPRECATEDIN_3_0
DES_LONG DES_quad_cksum(const unsigned char* input, DES_cblock output[], long length, int out_count, DES_cblock * seed);
OSSL_DEPRECATEDIN_3_0 int DES_random_key(DES_cblock * ret);
OSSL_DEPRECATEDIN_3_0 void DES_set_odd_parity(DES_cblock * key);
OSSL_DEPRECATEDIN_3_0 int DES_check_key_parity(const_DES_cblock * key);
OSSL_DEPRECATEDIN_3_0 int DES_is_weak_key(const_DES_cblock * key);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
int DES_set_key(const_DES_cblock * key, DES_key_schedule * schedule);
OSSL_DEPRECATEDIN_3_0
int DES_key_sched(const_DES_cblock * key, DES_key_schedule * schedule);
OSSL_DEPRECATEDIN_3_0
int DES_set_key_checked(const_DES_cblock * key, DES_key_schedule * schedule);
OSSL_DEPRECATEDIN_3_0
void DES_set_key_unchecked(const_DES_cblock * key, DES_key_schedule * schedule);
OSSL_DEPRECATEDIN_3_0 void DES_string_to_key(const char* str, DES_cblock * key);
OSSL_DEPRECATEDIN_3_0
void DES_string_to_2keys(const char* str, DES_cblock * key1, DES_cblock * key2);
OSSL_DEPRECATEDIN_3_0
void DES_cfb64_encrypt(const unsigned char* in, unsigned char* out, long length, DES_key_schedule * schedule, DES_cblock * ivec, int* num, int enc);
OSSL_DEPRECATEDIN_3_0
void DES_ofb64_encrypt(const unsigned char* in, unsigned char* out, long length, DES_key_schedule * schedule, DES_cblock * ivec, int* num);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int EVP_PKEY_CTX_set_dh_paramgen_type(EVP_PKEY_CTX * ctx, int typ);
int EVP_PKEY_CTX_set_dh_paramgen_gindex(EVP_PKEY_CTX * ctx, int gindex);
int EVP_PKEY_CTX_set_dh_paramgen_seed(EVP_PKEY_CTX * ctx, const unsigned char* seed, size_t seedlen);
int EVP_PKEY_CTX_set_dh_paramgen_prime_len(EVP_PKEY_CTX * ctx, int pbits);
int EVP_PKEY_CTX_set_dh_paramgen_subprime_len(EVP_PKEY_CTX * ctx, int qlen);
int EVP_PKEY_CTX_set_dh_paramgen_generator(EVP_PKEY_CTX * ctx, int gen);
int EVP_PKEY_CTX_set_dh_nid(EVP_PKEY_CTX * ctx, int nid);
int EVP_PKEY_CTX_set_dh_rfc5114(EVP_PKEY_CTX * ctx, int gen);
int EVP_PKEY_CTX_set_dhx_rfc5114(EVP_PKEY_CTX * ctx, int gen);
int EVP_PKEY_CTX_set_dh_pad(EVP_PKEY_CTX * ctx, int pad);
int EVP_PKEY_CTX_set_dh_kdf_type(EVP_PKEY_CTX * ctx, int kdf);
int EVP_PKEY_CTX_get_dh_kdf_type(EVP_PKEY_CTX * ctx);
int EVP_PKEY_CTX_set0_dh_kdf_oid(EVP_PKEY_CTX * ctx, ASN1_OBJECT * oid);
int EVP_PKEY_CTX_get0_dh_kdf_oid(EVP_PKEY_CTX * ctx, ASN1_OBJECT * *oid);
int EVP_PKEY_CTX_set_dh_kdf_md(EVP_PKEY_CTX * ctx, const EVP_MD * md);
int EVP_PKEY_CTX_get_dh_kdf_md(EVP_PKEY_CTX * ctx, const EVP_MD * *md);
int EVP_PKEY_CTX_set_dh_kdf_outlen(EVP_PKEY_CTX * ctx, int len);
int EVP_PKEY_CTX_get_dh_kdf_outlen(EVP_PKEY_CTX * ctx, int* len);
int EVP_PKEY_CTX_set0_dh_kdf_ukm(EVP_PKEY_CTX * ctx, unsigned char* ukm, int len);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
int EVP_PKEY_CTX_get0_dh_kdf_ukm(EVP_PKEY_CTX * ctx, unsigned char** ukm);
OSSL_DEPRECATEDIN_3_0 void DH_set_default_method(const DH_METHOD * meth);
OSSL_DEPRECATEDIN_3_0 int DH_set_method(DH * dh, const DH_METHOD * meth);
OSSL_DEPRECATEDIN_3_0 void DH_free(DH * dh);
OSSL_DEPRECATEDIN_3_0 int DH_up_ref(DH * dh);
OSSL_DEPRECATEDIN_3_0 int DH_bits(const DH * dh);
OSSL_DEPRECATEDIN_3_0 int DH_size(const DH * dh);
OSSL_DEPRECATEDIN_3_0 int DH_security_bits(const DH * dh);
OSSL_DEPRECATEDIN_3_0 int DH_set_ex_data(DH * d, int idx, void* arg);
OSSL_DEPRECATEDIN_3_0 int DH_generate_parameters_ex(DH * dh, int prime_len, int generator, BN_GENCB * cb);
OSSL_DEPRECATEDIN_3_0 int DH_check_params_ex(const DH * dh);
OSSL_DEPRECATEDIN_3_0 int DH_check_ex(const DH * dh);
OSSL_DEPRECATEDIN_3_0 int DH_check_pub_key_ex(const DH * dh, const BIGNUM * pub_key);
OSSL_DEPRECATEDIN_3_0 int DH_check_params(const DH * dh, int* ret);
OSSL_DEPRECATEDIN_3_0 int DH_check(const DH * dh, int* codes);
OSSL_DEPRECATEDIN_3_0 int DH_check_pub_key(const DH * dh, const BIGNUM * pub_key, int* codes);
OSSL_DEPRECATEDIN_3_0 int DH_generate_key(DH * dh);
OSSL_DEPRECATEDIN_3_0 int DH_compute_key(unsigned char* key, const BIGNUM * pub_key, DH * dh);
OSSL_DEPRECATEDIN_3_0 int DH_compute_key_padded(unsigned char* key, const BIGNUM * pub_key, DH * dh);
ifndef OPENSSL_NO_STDIO
OSSL_DEPRECATEDIN_3_0 int DHparams_print_fp(FILE * fp, const DH * x);
endif
OSSL_DEPRECATEDIN_3_0 int DHparams_print(BIO * bp, const DH * x);
OSSL_DEPRECATEDIN_3_0 int DH_get_nid(const DH * dh);
OSSL_DEPRECATEDIN_3_0 int DH_KDF_X9_42(unsigned char* out, size_t outlen, const unsigned char* Z, size_t Zlen, ASN1_OBJECT * key_oid, const unsigned char* ukm, size_t ukmlen, const EVP_MD * md);
OSSL_DEPRECATEDIN_3_0 void DH_get0_pqg(const DH * dh, const BIGNUM * *p, const BIGNUM * *q, const BIGNUM * *g);
OSSL_DEPRECATEDIN_3_0 int DH_set0_pqg(DH * dh, BIGNUM * p, BIGNUM * q, BIGNUM * g);
OSSL_DEPRECATEDIN_3_0 void DH_get0_key(const DH * dh, const BIGNUM * *pub_key, const BIGNUM * *priv_key);
OSSL_DEPRECATEDIN_3_0 int DH_set0_key(DH * dh, BIGNUM * pub_key, BIGNUM * priv_key);
OSSL_DEPRECATEDIN_3_0 void DH_clear_flags(DH * dh, int flags);
OSSL_DEPRECATEDIN_3_0 int DH_test_flags(const DH * dh, int flags);
OSSL_DEPRECATEDIN_3_0 void DH_set_flags(DH * dh, int flags);
OSSL_DEPRECATEDIN_3_0 long DH_get_length(const DH * dh);
OSSL_DEPRECATEDIN_3_0 int DH_set_length(DH * dh, long length);
OSSL_DEPRECATEDIN_3_0 void DH_meth_free(DH_METHOD * dhm);
OSSL_DEPRECATEDIN_3_0 int DH_meth_set1_name(DH_METHOD * dhm, const char* name);
OSSL_DEPRECATEDIN_3_0 int DH_meth_get_flags(const DH_METHOD * dhm);
OSSL_DEPRECATEDIN_3_0 int DH_meth_set_flags(DH_METHOD * dhm, int flags);
OSSL_DEPRECATEDIN_3_0 int DH_meth_set0_app_data(DH_METHOD * dhm, void* app_data);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

endif

int EVP_PKEY_CTX_set_dsa_paramgen_bits(EVP_PKEY_CTX * ctx, int nbits);
int EVP_PKEY_CTX_set_dsa_paramgen_q_bits(EVP_PKEY_CTX * ctx, int qbits);
int EVP_PKEY_CTX_set_dsa_paramgen_md_props(EVP_PKEY_CTX * ctx, const char* md_name, const char* md_properties);
int EVP_PKEY_CTX_set_dsa_paramgen_gindex(EVP_PKEY_CTX * ctx, int gindex);
int EVP_PKEY_CTX_set_dsa_paramgen_type(EVP_PKEY_CTX * ctx, const char* name);
int EVP_PKEY_CTX_set_dsa_paramgen_seed(EVP_PKEY_CTX * ctx, const unsigned char* seed, size_t seedlen);
int EVP_PKEY_CTX_set_dsa_paramgen_md(EVP_PKEY_CTX * ctx, const EVP_MD * md);
void DSA_SIG_free(DSA_SIG * a);
void DSA_SIG_get0(const DSA_SIG * sig, const BIGNUM * *pr, const BIGNUM * *ps);
int DSA_SIG_set0(DSA_SIG * sig, BIGNUM * r, BIGNUM * s);
OSSL_DEPRECATEDIN_3_0 int DSA_do_verify(const unsigned char* dgst, int dgst_len, DSA_SIG * sig, DSA * dsa);
OSSL_DEPRECATEDIN_3_0 void DSA_set_default_method(const DSA_METHOD*);
OSSL_DEPRECATEDIN_3_0 int DSA_set_method(DSA * dsa, const DSA_METHOD*);
OSSL_DEPRECATEDIN_3_0 void DSA_free(DSA * r);
OSSL_DEPRECATEDIN_3_0 int DSA_up_ref(DSA * r);
OSSL_DEPRECATEDIN_3_0 int DSA_size(const DSA*);
OSSL_DEPRECATEDIN_3_0 int DSA_bits(const DSA * d);
OSSL_DEPRECATEDIN_3_0 int DSA_security_bits(const DSA * d);
OSSL_DEPRECATEDIN_3_0 int DSA_sign_setup(DSA * dsa, BN_CTX * ctx_in, BIGNUM * *kinvp, BIGNUM * *rp);
OSSL_DEPRECATEDIN_3_0 int DSA_sign(int type, const unsigned char* dgst, int dlen, unsigned char* sig, unsigned int* siglen, DSA * dsa);
OSSL_DEPRECATEDIN_3_0 int DSA_verify(int type, const unsigned char* dgst, int dgst_len, const unsigned char* sigbuf, int siglen, DSA * dsa);
OSSL_DEPRECATEDIN_3_0 int DSA_set_ex_data(DSA * d, int idx, void* arg);
OSSL_DEPRECATEDIN_3_0 int DSA_generate_parameters_ex(DSA * dsa, int bits, const unsigned char* seed, int seed_len, int* counter_ret, unsigned long* h_ret, BN_GENCB * cb);
OSSL_DEPRECATEDIN_3_0 int DSA_generate_key(DSA * a);
OSSL_DEPRECATEDIN_3_0 int DSAparams_print(BIO * bp, const DSA * x);
OSSL_DEPRECATEDIN_3_0 int DSA_print(BIO * bp, const DSA * x, int off);
ifndef OPENSSL_NO_STDIO
OSSL_DEPRECATEDIN_3_0 int DSAparams_print_fp(FILE * fp, const DSA * x);
OSSL_DEPRECATEDIN_3_0 int DSA_print_fp(FILE * bp, const DSA * x, int off);
endif

OSSL_DEPRECATEDIN_3_0 void DSA_get0_pqg(const DSA * d, const BIGNUM * *p, const BIGNUM * *q, const BIGNUM * *g);
OSSL_DEPRECATEDIN_3_0 int DSA_set0_pqg(DSA * d, BIGNUM * p, BIGNUM * q, BIGNUM * g);
OSSL_DEPRECATEDIN_3_0 void DSA_get0_key(const DSA * d, const BIGNUM * *pub_key, const BIGNUM * *priv_key);
OSSL_DEPRECATEDIN_3_0 int DSA_set0_key(DSA * d, BIGNUM * pub_key, BIGNUM * priv_key);
OSSL_DEPRECATEDIN_3_0 void DSA_clear_flags(DSA * d, int flags);
OSSL_DEPRECATEDIN_3_0 int DSA_test_flags(const DSA * d, int flags);
OSSL_DEPRECATEDIN_3_0 void DSA_set_flags(DSA * d, int flags);
OSSL_DEPRECATEDIN_3_0 void DSA_meth_free(DSA_METHOD * dsam);
OSSL_DEPRECATEDIN_3_0 int DSA_meth_set1_name(DSA_METHOD * dsam, const char* name);
OSSL_DEPRECATEDIN_3_0 int DSA_meth_get_flags(const DSA_METHOD * dsam);
OSSL_DEPRECATEDIN_3_0 int DSA_meth_set_flags(DSA_METHOD * dsam, int flags);
OSSL_DEPRECATEDIN_3_0 int DSA_meth_set0_app_data(DSA_METHOD * dsam, void* app_data);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

define OPENSSL_EC_NAMED_CURVE     0x001

int EVP_PKEY_CTX_set_ec_paramgen_curve_nid(EVP_PKEY_CTX * ctx, int nid);
int EVP_PKEY_CTX_set_ec_param_enc(EVP_PKEY_CTX * ctx, int param_enc);
int EVP_PKEY_CTX_set_ecdh_cofactor_mode(EVP_PKEY_CTX * ctx, int cofactor_mode);
int EVP_PKEY_CTX_get_ecdh_cofactor_mode(EVP_PKEY_CTX * ctx);
int EVP_PKEY_CTX_set_ecdh_kdf_type(EVP_PKEY_CTX * ctx, int kdf);
int EVP_PKEY_CTX_get_ecdh_kdf_type(EVP_PKEY_CTX * ctx);
int EVP_PKEY_CTX_set_ecdh_kdf_md(EVP_PKEY_CTX * ctx, const EVP_MD * md);
int EVP_PKEY_CTX_get_ecdh_kdf_md(EVP_PKEY_CTX * ctx, const EVP_MD * *md);
int EVP_PKEY_CTX_set_ecdh_kdf_outlen(EVP_PKEY_CTX * ctx, int len);
int EVP_PKEY_CTX_get_ecdh_kdf_outlen(EVP_PKEY_CTX * ctx, int* len);
int EVP_PKEY_CTX_set0_ecdh_kdf_ukm(EVP_PKEY_CTX * ctx, unsigned char* ukm, int len);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
int EVP_PKEY_CTX_get0_ecdh_kdf_ukm(EVP_PKEY_CTX * ctx, unsigned char** ukm);
OSSL_DEPRECATEDIN_3_0 void EC_GROUP_clear_free(EC_GROUP * group);
OSSL_DEPRECATEDIN_3_0 int EC_METHOD_get_field_type(const EC_METHOD * meth);
void EC_GROUP_free(EC_GROUP * group);
int EC_GROUP_copy(EC_GROUP * dst, const EC_GROUP * src);
int EC_GROUP_set_generator(EC_GROUP * group, const EC_POINT * generator, const BIGNUM * order, const BIGNUM * cofactor);
int EC_GROUP_get_order(const EC_GROUP * group, BIGNUM * order, BN_CTX * ctx);
int EC_GROUP_order_bits(const EC_GROUP * group);
int EC_GROUP_get_cofactor(const EC_GROUP * group, BIGNUM * cofactor, BN_CTX * ctx);
void EC_GROUP_set_curve_name(EC_GROUP * group, int nid);
int EC_GROUP_get_curve_name(const EC_GROUP * group);
int EC_GROUP_get_field_type(const EC_GROUP * group);
void EC_GROUP_set_asn1_flag(EC_GROUP * group, int flag);
int EC_GROUP_get_asn1_flag(const EC_GROUP * group);
void EC_GROUP_set_point_conversion_form(EC_GROUP * group, point_conversion_form_t form);
point_conversion_form_t EC_GROUP_get_point_conversion_form(const EC_GROUP*);
size_t EC_GROUP_get_seed_len(const EC_GROUP*);
size_t EC_GROUP_set_seed(EC_GROUP*, const unsigned char*, size_t len);
int EC_GROUP_set_curve(EC_GROUP * group, const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
int EC_GROUP_get_curve(const EC_GROUP * group, BIGNUM * p, BIGNUM * a, BIGNUM * b, BN_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 int EC_GROUP_set_curve_GFp(EC_GROUP * group, const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 int EC_GROUP_get_curve_GFp(const EC_GROUP * group, BIGNUM * p, BIGNUM * a, BIGNUM * b, BN_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 int EC_GROUP_set_curve_GF2m(EC_GROUP * group, const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 int EC_GROUP_get_curve_GF2m(const EC_GROUP * group, BIGNUM * p, BIGNUM * a, BIGNUM * b, BN_CTX * ctx);
int EC_GROUP_get_degree(const EC_GROUP * group);
int EC_GROUP_check(const EC_GROUP * group, BN_CTX * ctx);
int EC_GROUP_check_discriminant(const EC_GROUP * group, BN_CTX * ctx);
int EC_GROUP_cmp(const EC_GROUP * a, const EC_GROUP * b, BN_CTX * ctx);
size_t EC_get_builtin_curves(EC_builtin_curve * r, size_t nitems);
int EC_curve_nist2nid(const char* name);
int EC_GROUP_check_named_curve(const EC_GROUP * group, int nist_only, BN_CTX * ctx);
void EC_POINT_free(EC_POINT * point);
void EC_POINT_clear_free(EC_POINT * point);
int EC_POINT_copy(EC_POINT * dst, const EC_POINT * src);
int EC_POINT_set_to_infinity(const EC_GROUP * group, EC_POINT * point);
int EC_POINT_set_affine_coordinates(const EC_GROUP * group, EC_POINT * p, const BIGNUM * x, const BIGNUM * y, BN_CTX * ctx);
int EC_POINT_get_affine_coordinates(const EC_GROUP * group, const EC_POINT * p, BIGNUM * x, BIGNUM * y, BN_CTX * ctx);
int EC_POINT_set_compressed_coordinates(const EC_GROUP * group, EC_POINT * p, const BIGNUM * x, int y_bit, BN_CTX * ctx);
size_t EC_POINT_point2oct(const EC_GROUP * group, const EC_POINT * p, point_conversion_form_t form, unsigned char* buf, size_t len, BN_CTX * ctx);
int EC_POINT_oct2point(const EC_GROUP * group, EC_POINT * p, const unsigned char* buf, size_t len, BN_CTX * ctx);
size_t EC_POINT_point2buf(const EC_GROUP * group, const EC_POINT * point, point_conversion_form_t form, unsigned char** pbuf, BN_CTX * ctx);
int EC_POINT_add(const EC_GROUP * group, EC_POINT * r, const EC_POINT * a, const EC_POINT * b, BN_CTX * ctx);
int EC_POINT_dbl(const EC_GROUP * group, EC_POINT * r, const EC_POINT * a, BN_CTX * ctx);
int EC_POINT_invert(const EC_GROUP * group, EC_POINT * a, BN_CTX * ctx);
int EC_POINT_is_at_infinity(const EC_GROUP * group, const EC_POINT * p);
int EC_POINT_is_on_curve(const EC_GROUP * group, const EC_POINT * point, BN_CTX * ctx);
int EC_POINT_cmp(const EC_GROUP * group, const EC_POINT * a, const EC_POINT * b, BN_CTX * ctx);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int EC_POINT_make_affine(const EC_GROUP * group, EC_POINT * point, BN_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 int EC_POINTs_make_affine(const EC_GROUP * group, size_t num, EC_POINT * points[], BN_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 int EC_POINTs_mul(const EC_GROUP * group, EC_POINT * r, const BIGNUM * n, size_t num, const EC_POINT * p[], const BIGNUM * m[], BN_CTX * ctx);
int EC_POINT_mul(const EC_GROUP * group, EC_POINT * r, const BIGNUM * n, const EC_POINT * q, const BIGNUM * m, BN_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 int EC_GROUP_precompute_mult(EC_GROUP * group, BN_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 int EC_GROUP_have_precompute_mult(const EC_GROUP * group);
int EC_GROUP_get_basis_type(const EC_GROUP*);
ifndef OPENSSL_NO_EC2M
int EC_GROUP_get_trinomial_basis(const EC_GROUP*, unsigned int* k);
int EC_GROUP_get_pentanomial_basis(const EC_GROUP*, unsigned int* k1, unsigned int* k2, unsigned int* k3);
int i2d_ECPKParameters(const EC_GROUP*, unsigned char** out);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int ECPKParameters_print(BIO * bp, const EC_GROUP * x, int off);
ifndef OPENSSL_NO_STDIO
OSSL_DEPRECATEDIN_3_0 int ECPKParameters_print_fp(FILE * fp, const EC_GROUP * x, int off);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_get_flags(const EC_KEY * key);
OSSL_DEPRECATEDIN_3_0 void EC_KEY_set_flags(EC_KEY * key, int flags);
OSSL_DEPRECATEDIN_3_0 void EC_KEY_clear_flags(EC_KEY * key, int flags);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_decoded_from_explicit_params(const EC_KEY * key);
OSSL_DEPRECATEDIN_3_0 void EC_KEY_free(EC_KEY * key);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_up_ref(EC_KEY * key);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_set_group(EC_KEY * key, const EC_GROUP * group);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_set_private_key(EC_KEY * key, const BIGNUM * prv);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_set_public_key(EC_KEY * key, const EC_POINT * pub);
OSSL_DEPRECATEDIN_3_0 unsigned EC_KEY_get_enc_flags(const EC_KEY * key);
OSSL_DEPRECATEDIN_3_0 void EC_KEY_set_enc_flags(EC_KEY * eckey, unsigned int flags);
OSSL_DEPRECATEDIN_3_0 point_conversion_form_t EC_KEY_get_conv_form(const EC_KEY * key);
OSSL_DEPRECATEDIN_3_0 void EC_KEY_set_conv_form(EC_KEY * eckey, point_conversion_form_t cform);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int EC_KEY_set_ex_data(EC_KEY * key, int idx, void* arg);
OSSL_DEPRECATEDIN_3_0 void EC_KEY_set_asn1_flag(EC_KEY * eckey, int asn1_flag);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_precompute_mult(EC_KEY * key, BN_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_generate_key(EC_KEY * key);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_check_key(const EC_KEY * key);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_can_sign(const EC_KEY * eckey);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_set_public_key_affine_coordinates(EC_KEY * key, BIGNUM * x, BIGNUM * y);
OSSL_DEPRECATEDIN_3_0 size_t EC_KEY_key2buf(const EC_KEY * key, point_conversion_form_t form, unsigned char** pbuf, BN_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_oct2key(EC_KEY * key, const unsigned char* buf, size_t len, BN_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_oct2priv(EC_KEY * key, const unsigned char* buf, size_t len);
OSSL_DEPRECATEDIN_3_0 size_t EC_KEY_priv2oct(const EC_KEY * key, unsigned char* buf, size_t len);
OSSL_DEPRECATEDIN_3_0 size_t EC_KEY_priv2buf(const EC_KEY * eckey, unsigned char** pbuf);
OSSL_DEPRECATEDIN_3_0 int i2d_ECPrivateKey(const EC_KEY * key, unsigned char** out);
OSSL_DEPRECATEDIN_3_0 int i2d_ECParameters(const EC_KEY * key, unsigned char** out);
OSSL_DEPRECATEDIN_3_0 int i2o_ECPublicKey(const EC_KEY * key, unsigned char** out);
OSSL_DEPRECATEDIN_3_0 int ECParameters_print(BIO * bp, const EC_KEY * key);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_print(BIO * bp, const EC_KEY * key, int off);
OSSL_DEPRECATEDIN_3_0 int ECParameters_print_fp(FILE * fp, const EC_KEY * key);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_print_fp(FILE * fp, const EC_KEY * key, int off);
OSSL_DEPRECATEDIN_3_0 void EC_KEY_set_default_method(const EC_KEY_METHOD * meth);
OSSL_DEPRECATEDIN_3_0 int EC_KEY_set_method(EC_KEY * key, const EC_KEY_METHOD * meth);
OSSL_DEPRECATEDIN_3_0 int ECDH_KDF_X9_62(unsigned char* out, size_t outlen, const unsigned char* Z, size_t Zlen, const unsigned char* sinfo, size_t sinfolen, const EVP_MD * md);
void ECDSA_SIG_free(ECDSA_SIG * sig);
void ECDSA_SIG_get0(const ECDSA_SIG * sig, const BIGNUM * *pr, const BIGNUM * *ps);
int ECDSA_SIG_set0(ECDSA_SIG * sig, BIGNUM * r, BIGNUM * s);
OSSL_DEPRECATEDIN_3_0 int ECDSA_do_verify(const unsigned char* dgst, int dgst_len, const ECDSA_SIG * sig, EC_KEY * eckey);
OSSL_DEPRECATEDIN_3_0 int ECDSA_sign_setup(EC_KEY * eckey, BN_CTX * ctx, BIGNUM * *kinv, BIGNUM * *rp);
OSSL_DEPRECATEDIN_3_0 int ECDSA_sign(int type, const unsigned char* dgst, int dgstlen, unsigned char* sig, unsigned int* siglen, EC_KEY * eckey);
OSSL_DEPRECATEDIN_3_0 int ECDSA_sign_ex(int type, const unsigned char* dgst, int dgstlen, unsigned char* sig, unsigned int* siglen, const BIGNUM * kinv, const BIGNUM * rp, EC_KEY * eckey);
OSSL_DEPRECATEDIN_3_0 int ECDSA_verify(int type, const unsigned char* dgst, int dgstlen, const unsigned char* sig, int siglen, EC_KEY * eckey);
OSSL_DEPRECATEDIN_3_0 int ECDSA_size(const EC_KEY * eckey);
OSSL_DEPRECATEDIN_3_0 void EC_KEY_METHOD_free(EC_KEY_METHOD * meth);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int OSSL_ENCODER_up_ref(OSSL_ENCODER * encoder);
void OSSL_ENCODER_free(OSSL_ENCODER * encoder);
int OSSL_ENCODER_is_a(const OSSL_ENCODER * encoder, const char* name);
int OSSL_ENCODER_get_params(OSSL_ENCODER * encoder, OSSL_PARAM params[]);
int OSSL_ENCODER_CTX_set_params(OSSL_ENCODER_CTX * ctx, const OSSL_PARAM params[]);
void OSSL_ENCODER_CTX_free(OSSL_ENCODER_CTX * ctx);
int OSSL_ENCODER_CTX_set_passphrase(OSSL_ENCODER_CTX * ctx, const unsigned char* kstr, size_t klen);
int OSSL_ENCODER_CTX_set_pem_password_cb(OSSL_ENCODER_CTX * ctx, pem_password_cb * cb, void* cbarg);
int OSSL_ENCODER_CTX_set_passphrase_cb(OSSL_ENCODER_CTX * ctx, OSSL_PASSPHRASE_CALLBACK * cb, void* cbarg);
int OSSL_ENCODER_CTX_set_passphrase_ui(OSSL_ENCODER_CTX * ctx, const UI_METHOD * ui_method, void* ui_data);
int OSSL_ENCODER_CTX_set_cipher(OSSL_ENCODER_CTX * ctx, const char* cipher_name, const char* propquery);
int OSSL_ENCODER_CTX_set_selection(OSSL_ENCODER_CTX * ctx, int selection);
int OSSL_ENCODER_CTX_set_output_type(OSSL_ENCODER_CTX * ctx, const char* output_type);
int OSSL_ENCODER_CTX_set_output_structure(OSSL_ENCODER_CTX * ctx, const char* output_structure);
int OSSL_ENCODER_CTX_add_encoder(OSSL_ENCODER_CTX * ctx, OSSL_ENCODER * encoder);
int OSSL_ENCODER_CTX_add_extra(OSSL_ENCODER_CTX * ctx, OSSL_LIB_CTX * libctx, const char* propq);
int OSSL_ENCODER_CTX_get_num_encoders(OSSL_ENCODER_CTX * ctx);
OSSL_ENCODER* OSSL_ENCODER_INSTANCE_get_encoder(OSSL_ENCODER_INSTANCE * encoder_inst);
void* OSSL_ENCODER_INSTANCE_get_encoder_ctx(OSSL_ENCODER_INSTANCE * encoder_inst);
const char* OSSL_ENCODER_INSTANCE_get_output_type(OSSL_ENCODER_INSTANCE * encoder_inst);
const char* OSSL_ENCODER_INSTANCE_get_output_structure(OSSL_ENCODER_INSTANCE * encoder_inst);
typedef void OSSL_ENCODER_CLEANUP(void* construct_data);
int OSSL_ENCODER_CTX_set_construct(OSSL_ENCODER_CTX * ctx, OSSL_ENCODER_CONSTRUCT * construct);
int OSSL_ENCODER_CTX_set_construct_data(OSSL_ENCODER_CTX * ctx, void* construct_data);
int OSSL_ENCODER_CTX_set_cleanup(OSSL_ENCODER_CTX * ctx, OSSL_ENCODER_CLEANUP * cleanup);
int OSSL_ENCODER_to_bio(OSSL_ENCODER_CTX * ctx, BIO * out);
ifndef OPENSSL_NO_STDIO
int OSSL_ENCODER_to_fp(OSSL_ENCODER_CTX * ctx, FILE * fp);
endif
int OSSL_ENCODER_to_data(OSSL_ENCODER_CTX * ctx, unsigned char** pdata, size_t * pdata_len);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int foo(ENGINE * e, const EVP_CIPHER * *cipher, const int** nids, int nid);
int foo(ENGINE * e, const EVP_MD * *digest, const int** nids, int nid);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int ENGINE_add(ENGINE * e);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int ENGINE_remove(ENGINE * e);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 void ENGINE_load_builtin_engines(void);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 unsigned int ENGINE_get_table_flags(void);
OSSL_DEPRECATEDIN_3_0 void ENGINE_set_table_flags(unsigned int flags);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int ENGINE_register_RSA(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_unregister_RSA(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_register_all_RSA(void);
OSSL_DEPRECATEDIN_3_0 int ENGINE_register_DSA(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_unregister_DSA(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_register_all_DSA(void);
OSSL_DEPRECATEDIN_3_0 int ENGINE_register_EC(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_unregister_EC(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_register_all_EC(void);
OSSL_DEPRECATEDIN_3_0 int ENGINE_register_DH(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_unregister_DH(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_register_all_DH(void);
OSSL_DEPRECATEDIN_3_0 int ENGINE_register_RAND(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_unregister_RAND(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_register_all_RAND(void);
OSSL_DEPRECATEDIN_3_0 int ENGINE_register_ciphers(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_unregister_ciphers(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_register_all_ciphers(void);
OSSL_DEPRECATEDIN_3_0 int ENGINE_register_digests(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_unregister_digests(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_register_all_digests(void);
OSSL_DEPRECATEDIN_3_0 int ENGINE_register_pkey_meths(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_unregister_pkey_meths(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_register_all_pkey_meths(void);
OSSL_DEPRECATEDIN_3_0 int ENGINE_register_pkey_asn1_meths(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_unregister_pkey_asn1_meths(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 void ENGINE_register_all_pkey_asn1_meths(void);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int ENGINE_register_complete(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 int ENGINE_register_all_complete(void);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int ENGINE_cmd_is_executable(ENGINE * e, int cmd);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
int ENGINE_ctrl_cmd_string(ENGINE * e, const char* cmd_name, const char* arg, int cmd_optional);
OSSL_DEPRECATEDIN_3_0 int ENGINE_free(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 int ENGINE_up_ref(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_id(ENGINE * e, const char* id);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_name(ENGINE * e, const char* name);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_RSA(ENGINE * e, const RSA_METHOD * rsa_meth);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_DSA(ENGINE * e, const DSA_METHOD * dsa_meth);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_EC(ENGINE * e, const EC_KEY_METHOD * ecdsa_meth);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_DH(ENGINE * e, const DH_METHOD * dh_meth);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_RAND(ENGINE * e, const RAND_METHOD * rand_meth);
OSSL_DEPRECATEDIN_3_0
int ENGINE_set_destroy_function(ENGINE * e, ENGINE_GEN_INT_FUNC_PTR destroy_f);
OSSL_DEPRECATEDIN_3_0
int ENGINE_set_init_function(ENGINE * e, ENGINE_GEN_INT_FUNC_PTR init_f);
OSSL_DEPRECATEDIN_3_0
int ENGINE_set_finish_function(ENGINE * e, ENGINE_GEN_INT_FUNC_PTR finish_f);
OSSL_DEPRECATEDIN_3_0
int ENGINE_set_ctrl_function(ENGINE * e, ENGINE_CTRL_FUNC_PTR ctrl_f);
OSSL_DEPRECATEDIN_3_0
int ENGINE_set_load_privkey_function(ENGINE * e, ENGINE_LOAD_KEY_PTR loadpriv_f);
OSSL_DEPRECATEDIN_3_0
int ENGINE_set_load_pubkey_function(ENGINE * e, ENGINE_LOAD_KEY_PTR loadpub_f);
OSSL_DEPRECATEDIN_3_0
int ENGINE_set_load_ssl_client_cert_function(ENGINE * e, ENGINE_SSL_CLIENT_CERT_PTR loadssl_f);
OSSL_DEPRECATEDIN_3_0
int ENGINE_set_ciphers(ENGINE * e, ENGINE_CIPHERS_PTR f);
OSSL_DEPRECATEDIN_3_0
int ENGINE_set_digests(ENGINE * e, ENGINE_DIGESTS_PTR f);
OSSL_DEPRECATEDIN_3_0
int ENGINE_set_pkey_meths(ENGINE * e, ENGINE_PKEY_METHS_PTR f);
OSSL_DEPRECATEDIN_3_0
int ENGINE_set_pkey_asn1_meths(ENGINE * e, ENGINE_PKEY_ASN1_METHS_PTR f);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_flags(ENGINE * e, int flags);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_cmd_defns(ENGINE * e, const ENGINE_CMD_DEFN * defns);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_ex_data(ENGINE * e, int idx, void* arg);
OSSL_DEPRECATEDIN_3_0
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE * e);
OSSL_DEPRECATEDIN_3_0
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE * e);
OSSL_DEPRECATEDIN_3_0
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE * e);
OSSL_DEPRECATEDIN_3_0
ENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE * e);
OSSL_DEPRECATEDIN_3_0
ENGINE_LOAD_KEY_PTR ENGINE_get_load_privkey_function(const ENGINE * e);
OSSL_DEPRECATEDIN_3_0
ENGINE_LOAD_KEY_PTR ENGINE_get_load_pubkey_function(const ENGINE * e);
OSSL_DEPRECATEDIN_3_0
ENGINE_SSL_CLIENT_CERT_PTR ENGINE_get_ssl_client_cert_function(const ENGINE * e);
OSSL_DEPRECATEDIN_3_0
ENGINE_CIPHERS_PTR ENGINE_get_ciphers(const ENGINE * e);
OSSL_DEPRECATEDIN_3_0
ENGINE_DIGESTS_PTR ENGINE_get_digests(const ENGINE * e);
OSSL_DEPRECATEDIN_3_0
ENGINE_PKEY_METHS_PTR ENGINE_get_pkey_meths(const ENGINE * e);
OSSL_DEPRECATEDIN_3_0
ENGINE_PKEY_ASN1_METHS_PTR ENGINE_get_pkey_asn1_meths(const ENGINE * e);
OSSL_DEPRECATEDIN_3_0 int ENGINE_get_flags(const ENGINE * e);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int ENGINE_init(ENGINE * e);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int ENGINE_finish(ENGINE * e);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_default_RSA(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_default_string(ENGINE * e, const char* def_list);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_default_DSA(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_default_EC(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_default_DH(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_default_RAND(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_default_ciphers(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_default_digests(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_default_pkey_meths(ENGINE * e);
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_default_pkey_asn1_meths(ENGINE * e);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int ENGINE_set_default(ENGINE * e, unsigned int flags);
OSSL_DEPRECATEDIN_3_0 void ENGINE_add_conf_module(void);
int ENGINE_clear_defaults(void);
OPENSSL_EXPORT unsigned long v_check(unsigned long v);
int fn(ENGINE * e, const char* id);
int bind_engine(ENGINE * e, const char* id, const dynamic_fns * fns);
ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 void ENGINE_setup_bsd_cryptodev(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void ERR_new(void);
void ERR_set_debug(const char* file, int line, const char* func);
void ERR_set_error(int lib, int reason, const char* fmt);
void ERR_vset_error(int lib, int reason, const char* fmt, va_list args);
endif

void ERR_set_error_data(char* data, int flags);
unsigned long ERR_get_error(void);
unsigned long ERR_get_error_all(const char** file, int* line, const char** func, const char** data, int* flags);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
unsigned long ERR_get_error_line(const char** file, int* line);
OSSL_DEPRECATEDIN_3_0
unsigned long ERR_get_error_line_data(const char** file, int* line, const char** data, int* flags);
endif
unsigned long ERR_peek_error(void);
unsigned long ERR_peek_error_line(const char** file, int* line);
unsigned long ERR_peek_error_func(const char** func);
unsigned long ERR_peek_error_data(const char** data, int* flags);
unsigned long ERR_peek_error_all(const char** file, int* line, const char** func, const char** data, int* flags);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
unsigned long ERR_peek_error_line_data(const char** file, int* line, const char** data, int* flags);
endif
unsigned long ERR_peek_last_error(void);
unsigned long ERR_peek_last_error_line(const char** file, int* line);
unsigned long ERR_peek_last_error_func(const char** func);
unsigned long ERR_peek_last_error_data(const char** data, int* flags);
unsigned long ERR_peek_last_error_all(const char** file, int* line, const char** func, const char** data, int* flags);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
unsigned long ERR_peek_last_error_line_data(const char** file, int* line, const char** data, int* flags);
endif

void ERR_clear_error(void);
void ERR_error_string_n(unsigned long e, char* buf, size_t len);
ifndef OPENSSL_NO_STDIO
void ERR_print_errors_fp(FILE * fp);
endif
void ERR_print_errors(BIO * bp);
void ERR_add_error_data(int num);
void ERR_add_error_vdata(int num, va_list args);
void ERR_add_error_txt(const char* sepr, const char* txt);
void ERR_add_error_mem_bio(const char* sep, BIO * bio);
int ERR_load_strings(int lib, ERR_STRING_DATA * str);
int ERR_load_strings_const(const ERR_STRING_DATA * str);
int ERR_unload_strings(int lib, ERR_STRING_DATA * str);
ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 void ERR_remove_thread_state(void*);
ifndef OPENSSL_NO_DEPRECATED_1_0_0
OSSL_DEPRECATEDIN_1_0_0 void ERR_remove_state(unsigned long pid);
endif

int ERR_get_next_error_library(void);
int ERR_set_mark(void);
int ERR_pop_to_mark(void);
int ERR_clear_last_mark(void);
int ERR_count_to_mark(void);
int ERR_pop(void);
void OSSL_ERR_STATE_save(ERR_STATE * es);
void OSSL_ERR_STATE_save_to_mark(ERR_STATE * es);
void OSSL_ERR_STATE_restore(const ERR_STATE * es);
void OSSL_ERR_STATE_free(ERR_STATE * es);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

endif

int EVP_set_default_properties(OSSL_LIB_CTX * libctx, const char* propq);
int EVP_default_properties_is_fips_enabled(OSSL_LIB_CTX * libctx);
int EVP_default_properties_enable_fips(OSSL_LIB_CTX * libctx, int enable);
OSSL_DEPRECATEDIN_3_0 void EVP_MD_meth_free(EVP_MD * md);
OSSL_DEPRECATEDIN_3_0
int EVP_MD_meth_set_input_blocksize(EVP_MD * md, int blocksize);
OSSL_DEPRECATEDIN_3_0
int EVP_MD_meth_set_result_size(EVP_MD * md, int resultsize);
OSSL_DEPRECATEDIN_3_0
int EVP_MD_meth_set_app_datasize(EVP_MD * md, int datasize);
OSSL_DEPRECATEDIN_3_0
int EVP_MD_meth_set_flags(EVP_MD * md, unsigned long flags);
OSSL_DEPRECATEDIN_3_0 int EVP_MD_meth_get_input_blocksize(const EVP_MD * md);
OSSL_DEPRECATEDIN_3_0 int EVP_MD_meth_get_result_size(const EVP_MD * md);
OSSL_DEPRECATEDIN_3_0 int EVP_MD_meth_get_app_datasize(const EVP_MD * md);
OSSL_DEPRECATEDIN_3_0 unsigned long EVP_MD_meth_get_flags(const EVP_MD * md);
OSSL_DEPRECATEDIN_3_0
void EVP_CIPHER_meth_free(EVP_CIPHER * cipher);
OSSL_DEPRECATEDIN_3_0
int EVP_CIPHER_meth_set_iv_length(EVP_CIPHER * cipher, int iv_len);
OSSL_DEPRECATEDIN_3_0
int EVP_CIPHER_meth_set_flags(EVP_CIPHER * cipher, unsigned long flags);
OSSL_DEPRECATEDIN_3_0
int EVP_CIPHER_meth_set_impl_ctx_size(EVP_CIPHER * cipher, int ctx_size);
int EVP_MD_get_type(const EVP_MD * md);
int EVP_MD_is_a(const EVP_MD * md, const char* name);
int EVP_MD_get_pkey_type(const EVP_MD * md);
define EVP_MD_pkey_type EVP_MD_get_pkey_type
int EVP_MD_get_size(const EVP_MD * md);
define EVP_MD_size EVP_MD_get_size
int EVP_MD_get_block_size(const EVP_MD * md);
define EVP_MD_block_size EVP_MD_get_block_size
unsigned long EVP_MD_get_flags(const EVP_MD * md);
define EVP_MD_CTX_pkey_ctx EVP_MD_CTX_get_pkey_ctx
void EVP_MD_CTX_set_pkey_ctx(EVP_MD_CTX * ctx, EVP_PKEY_CTX * pctx);
define EVP_MD_CTX_md_data EVP_MD_CTX_get0_md_data

int EVP_CIPHER_get_nid(const EVP_CIPHER * cipher);
int EVP_CIPHER_is_a(const EVP_CIPHER * cipher, const char* name);
int EVP_CIPHER_get_block_size(const EVP_CIPHER * cipher);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
int EVP_CIPHER_impl_ctx_size(const EVP_CIPHER * cipher);
endif
int EVP_CIPHER_get_key_length(const EVP_CIPHER * cipher);
define EVP_CIPHER_key_length EVP_CIPHER_get_key_length
int EVP_CIPHER_get_iv_length(const EVP_CIPHER * cipher);
define EVP_CIPHER_iv_length EVP_CIPHER_get_iv_length
unsigned long EVP_CIPHER_get_flags(const EVP_CIPHER * cipher);
define EVP_CIPHER_flags EVP_CIPHER_get_flags
int EVP_CIPHER_get_mode(const EVP_CIPHER * cipher);
define EVP_CIPHER_mode EVP_CIPHER_get_mode
int EVP_CIPHER_get_type(const EVP_CIPHER * cipher);
int EVP_CIPHER_up_ref(EVP_CIPHER * cipher);
void EVP_CIPHER_free(EVP_CIPHER * cipher);
int EVP_CIPHER_CTX_is_encrypting(const EVP_CIPHER_CTX * ctx);
define EVP_CIPHER_CTX_encrypting EVP_CIPHER_CTX_is_encrypting
int EVP_CIPHER_CTX_get_nid(const EVP_CIPHER_CTX * ctx);
define EVP_CIPHER_CTX_nid EVP_CIPHER_CTX_get_nid
int EVP_CIPHER_CTX_get_block_size(const EVP_CIPHER_CTX * ctx);
define EVP_CIPHER_CTX_block_size EVP_CIPHER_CTX_get_block_size
int EVP_CIPHER_CTX_get_key_length(const EVP_CIPHER_CTX * ctx);
define EVP_CIPHER_CTX_key_length EVP_CIPHER_CTX_get_key_length
int EVP_CIPHER_CTX_get_iv_length(const EVP_CIPHER_CTX * ctx);
define EVP_CIPHER_CTX_iv_length EVP_CIPHER_CTX_get_iv_length
int EVP_CIPHER_CTX_get_tag_length(const EVP_CIPHER_CTX * ctx);
endif
int EVP_CIPHER_CTX_get_updated_iv(EVP_CIPHER_CTX * ctx, void* buf, size_t len);
int EVP_CIPHER_CTX_get_original_iv(EVP_CIPHER_CTX * ctx, void* buf, size_t len);
endif
int EVP_CIPHER_CTX_get_num(const EVP_CIPHER_CTX * ctx);
define EVP_CIPHER_CTX_num EVP_CIPHER_CTX_get_num
int EVP_CIPHER_CTX_set_num(EVP_CIPHER_CTX * ctx, int num);
int EVP_CIPHER_CTX_copy(EVP_CIPHER_CTX * out, const EVP_CIPHER_CTX * in);
void EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX * ctx, void* data);
ifdef CONST_STRICT
void BIO_set_md(BIO*, const EVP_MD * md);
__owur int EVP_Cipher(EVP_CIPHER_CTX * c, unsigned char* out, const unsigned char* in, unsigned int inl);
int EVP_MD_get_params(const EVP_MD * digest, OSSL_PARAM params[]);
int EVP_MD_CTX_set_params(EVP_MD_CTX * ctx, const OSSL_PARAM params[]);
int EVP_MD_CTX_get_params(EVP_MD_CTX * ctx, OSSL_PARAM params[]);
int EVP_MD_CTX_ctrl(EVP_MD_CTX * ctx, int cmd, int p1, void* p2);
int EVP_MD_CTX_reset(EVP_MD_CTX * ctx);
void EVP_MD_CTX_free(EVP_MD_CTX * ctx);
__owur int EVP_MD_CTX_copy_ex(EVP_MD_CTX * out, const EVP_MD_CTX * in);
void EVP_MD_CTX_set_flags(EVP_MD_CTX * ctx, int flags);
void EVP_MD_CTX_clear_flags(EVP_MD_CTX * ctx, int flags);
int EVP_MD_CTX_test_flags(const EVP_MD_CTX * ctx, int flags);
__owur int EVP_DigestInit_ex2(EVP_MD_CTX * ctx, const EVP_MD * type, const OSSL_PARAM params[]);
__owur int EVP_DigestInit_ex(EVP_MD_CTX * ctx, const EVP_MD * type, ENGINE * impl);
__owur int EVP_DigestUpdate(EVP_MD_CTX * ctx, const void* d, size_t cnt);
__owur int EVP_DigestFinal_ex(EVP_MD_CTX * ctx, unsigned char* md, unsigned int* s);
__owur int EVP_Digest(const void* data, size_t count, unsigned char* md, unsigned int* size, const EVP_MD * type, ENGINE * impl);
__owur int EVP_Q_digest(OSSL_LIB_CTX * libctx, const char* name, const char* propq, const void* data, size_t datalen, unsigned char* md, size_t * mdlen);
__owur int EVP_MD_CTX_copy(EVP_MD_CTX * out, const EVP_MD_CTX * in);
__owur int EVP_DigestInit(EVP_MD_CTX * ctx, const EVP_MD * type);
__owur int EVP_DigestFinal(EVP_MD_CTX * ctx, unsigned char* md, unsigned int* s);
__owur int EVP_DigestFinalXOF(EVP_MD_CTX * ctx, unsigned char* out, size_t outlen);
__owur int EVP_DigestSqueeze(EVP_MD_CTX * ctx, unsigned char* out, size_t outlen);
int EVP_MD_up_ref(EVP_MD * md);
void EVP_MD_free(EVP_MD * md);
int EVP_read_pw_string(char* buf, int length, const char* prompt, int verify);
int EVP_read_pw_string_min(char* buf, int minlen, int maxlen, const char* prompt, int verify);
void EVP_set_pw_prompt(const char* prompt);
__owur int EVP_BytesToKey(const EVP_CIPHER * type, const EVP_MD * md, const unsigned char* salt, const unsigned char* data, int datal, int count, unsigned char* key, unsigned char* iv);
void EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX * ctx, int flags);
void EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX * ctx, int flags);
int EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX * ctx, int flags);
__owur int EVP_EncryptInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char* key, const unsigned char* iv);
__owur int EVP_EncryptInit_ex(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl, const unsigned char* key, const unsigned char* iv);
__owur int EVP_EncryptInit_ex2(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char* key, const unsigned char* iv, const OSSL_PARAM params[]);
__owur int EVP_EncryptUpdate(EVP_CIPHER_CTX * ctx, unsigned char* out, int* outl, const unsigned char* in, int inl);
__owur int EVP_EncryptFinal_ex(EVP_CIPHER_CTX * ctx, unsigned char* out, int* outl);
__owur int EVP_EncryptFinal(EVP_CIPHER_CTX * ctx, unsigned char* out, int* outl);
__owur int EVP_DecryptInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char* key, const unsigned char* iv);
__owur int EVP_DecryptInit_ex(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl, const unsigned char* key, const unsigned char* iv);
__owur int EVP_DecryptInit_ex2(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char* key, const unsigned char* iv, const OSSL_PARAM params[]);
__owur int EVP_DecryptUpdate(EVP_CIPHER_CTX * ctx, unsigned char* out, int* outl, const unsigned char* in, int inl);
__owur int EVP_DecryptFinal(EVP_CIPHER_CTX * ctx, unsigned char* outm, int* outl);
__owur int EVP_DecryptFinal_ex(EVP_CIPHER_CTX * ctx, unsigned char* outm, int* outl);
__owur int EVP_CipherInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char* key, const unsigned char* iv, int enc);
__owur int EVP_CipherInit_ex(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl, const unsigned char* key, const unsigned char* iv, int enc);
__owur int EVP_CipherInit_ex2(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char* key, const unsigned char* iv, int enc, const OSSL_PARAM params[]);
__owur int EVP_CipherUpdate(EVP_CIPHER_CTX * ctx, unsigned char* out, int* outl, const unsigned char* in, int inl);
__owur int EVP_CipherFinal(EVP_CIPHER_CTX * ctx, unsigned char* outm, int* outl);
__owur int EVP_CipherFinal_ex(EVP_CIPHER_CTX * ctx, unsigned char* outm, int* outl);
__owur int EVP_SignFinal(EVP_MD_CTX * ctx, unsigned char* md, unsigned int* s, EVP_PKEY * pkey);
__owur int EVP_SignFinal_ex(EVP_MD_CTX * ctx, unsigned char* md, unsigned int* s, EVP_PKEY * pkey, OSSL_LIB_CTX * libctx, const char* propq);
__owur int EVP_DigestSign(EVP_MD_CTX * ctx, unsigned char* sigret, size_t * siglen, const unsigned char* tbs, size_t tbslen);
__owur int EVP_VerifyFinal(EVP_MD_CTX * ctx, const unsigned char* sigbuf, unsigned int siglen, EVP_PKEY * pkey);
__owur int EVP_VerifyFinal_ex(EVP_MD_CTX * ctx, const unsigned char* sigbuf, unsigned int siglen, EVP_PKEY * pkey, OSSL_LIB_CTX * libctx, const char* propq);
__owur int EVP_DigestVerify(EVP_MD_CTX * ctx, const unsigned char* sigret, size_t siglen, const unsigned char* tbs, size_t tbslen);
__owur int EVP_DigestSignInit_ex(EVP_MD_CTX * ctx, EVP_PKEY_CTX * *pctx, const char* mdname, OSSL_LIB_CTX * libctx, const char* props, EVP_PKEY * pkey, const OSSL_PARAM params[]);
__owur int EVP_DigestSignInit(EVP_MD_CTX * ctx, EVP_PKEY_CTX * *pctx, const EVP_MD * type, ENGINE * e, EVP_PKEY * pkey);
__owur int EVP_DigestSignUpdate(EVP_MD_CTX * ctx, const void* data, size_t dsize);
__owur int EVP_DigestSignFinal(EVP_MD_CTX * ctx, unsigned char* sigret, size_t * siglen);
__owur int EVP_DigestVerifyInit_ex(EVP_MD_CTX * ctx, EVP_PKEY_CTX * *pctx, const char* mdname, OSSL_LIB_CTX * libctx, const char* props, EVP_PKEY * pkey, const OSSL_PARAM params[]);
__owur int EVP_DigestVerifyInit(EVP_MD_CTX * ctx, EVP_PKEY_CTX * *pctx, const EVP_MD * type, ENGINE * e, EVP_PKEY * pkey);
int EVP_DigestVerifyUpdate(EVP_MD_CTX * ctx, const void* data, size_t dsize);
__owur int EVP_DigestVerifyFinal(EVP_MD_CTX * ctx, const unsigned char* sig, size_t siglen);
__owur int EVP_OpenInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * type, const unsigned char* ek, int ekl, const unsigned char* iv, EVP_PKEY * priv);
__owur int EVP_OpenFinal(EVP_CIPHER_CTX * ctx, unsigned char* out, int* outl);
__owur int EVP_SealInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * type, unsigned char** ek, int* ekl, unsigned char* iv, EVP_PKEY * *pubk, int npubk);
__owur int EVP_SealFinal(EVP_CIPHER_CTX * ctx, unsigned char* out, int* outl);
void EVP_ENCODE_CTX_free(EVP_ENCODE_CTX * ctx);
int EVP_ENCODE_CTX_copy(EVP_ENCODE_CTX * dctx, const EVP_ENCODE_CTX * sctx);
int EVP_ENCODE_CTX_num(EVP_ENCODE_CTX * ctx);
void EVP_EncodeInit(EVP_ENCODE_CTX * ctx);
int EVP_EncodeUpdate(EVP_ENCODE_CTX * ctx, unsigned char* out, int* outl, const unsigned char* in, int inl);
void EVP_EncodeFinal(EVP_ENCODE_CTX * ctx, unsigned char* out, int* outl);
int EVP_EncodeBlock(unsigned char* t, const unsigned char* f, int n);
void EVP_DecodeInit(EVP_ENCODE_CTX * ctx);
int EVP_DecodeUpdate(EVP_ENCODE_CTX * ctx, unsigned char* out, int* outl, const unsigned char* in, int inl);
int EVP_DecodeFinal(EVP_ENCODE_CTX * ctx, unsigned char* out, int* outl);
int EVP_DecodeBlock(unsigned char* t, const unsigned char* f, int n);
int EVP_CIPHER_CTX_reset(EVP_CIPHER_CTX * c);
void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX * c);
int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX * x, int keylen);
int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX * c, int pad);
int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX * ctx, int type, int arg, void* ptr);
int EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX * ctx, unsigned char* key);
int EVP_CIPHER_get_params(EVP_CIPHER * cipher, OSSL_PARAM params[]);
int EVP_CIPHER_CTX_set_params(EVP_CIPHER_CTX * ctx, const OSSL_PARAM params[]);
int EVP_CIPHER_CTX_get_params(EVP_CIPHER_CTX * ctx, OSSL_PARAM params[]);
__owur int BIO_set_cipher(BIO * b, const EVP_CIPHER * c, const unsigned char* k, const unsigned char* i, int enc);
endif

int EVP_add_cipher(const EVP_CIPHER * cipher);
int EVP_add_digest(const EVP_MD * digest);
int EVP_MAC_up_ref(EVP_MAC * mac);
void EVP_MAC_free(EVP_MAC * mac);
int EVP_MAC_is_a(const EVP_MAC * mac, const char* name);
int EVP_MAC_get_params(EVP_MAC * mac, OSSL_PARAM params[]);
void EVP_MAC_CTX_free(EVP_MAC_CTX * ctx);
int EVP_MAC_CTX_get_params(EVP_MAC_CTX * ctx, OSSL_PARAM params[]);
int EVP_MAC_CTX_set_params(EVP_MAC_CTX * ctx, const OSSL_PARAM params[]);
size_t EVP_MAC_CTX_get_mac_size(EVP_MAC_CTX * ctx);
size_t EVP_MAC_CTX_get_block_size(EVP_MAC_CTX * ctx);
int EVP_MAC_init(EVP_MAC_CTX * ctx, const unsigned char* key, size_t keylen, const OSSL_PARAM params[]);
int EVP_MAC_update(EVP_MAC_CTX * ctx, const unsigned char* data, size_t datalen);
int EVP_MAC_final(EVP_MAC_CTX * ctx, unsigned char* out, size_t * outl, size_t outsize);
int EVP_MAC_finalXOF(EVP_MAC_CTX * ctx, unsigned char* out, size_t outsize);
int EVP_RAND_up_ref(EVP_RAND * rand);
void EVP_RAND_free(EVP_RAND * rand);
int EVP_RAND_is_a(const EVP_RAND * rand, const char* name);
int EVP_RAND_get_params(EVP_RAND * rand, OSSL_PARAM params[]);
int EVP_RAND_CTX_up_ref(EVP_RAND_CTX * ctx);
void EVP_RAND_CTX_free(EVP_RAND_CTX * ctx);
int EVP_RAND_CTX_get_params(EVP_RAND_CTX * ctx, OSSL_PARAM params[]);
int EVP_RAND_CTX_set_params(EVP_RAND_CTX * ctx, const OSSL_PARAM params[]);
__owur int EVP_RAND_instantiate(EVP_RAND_CTX * ctx, unsigned int strength, int prediction_resistance, const unsigned char* pstr, size_t pstr_len, const OSSL_PARAM params[]);
int EVP_RAND_uninstantiate(EVP_RAND_CTX * ctx);
__owur int EVP_RAND_generate(EVP_RAND_CTX * ctx, unsigned char* out, size_t outlen, unsigned int strength, int prediction_resistance, const unsigned char* addin, size_t addin_len);
int EVP_RAND_reseed(EVP_RAND_CTX * ctx, int prediction_resistance, const unsigned char* ent, size_t ent_len, const unsigned char* addin, size_t addin_len);
__owur int EVP_RAND_nonce(EVP_RAND_CTX * ctx, unsigned char* out, size_t outlen);
__owur int EVP_RAND_enable_locking(EVP_RAND_CTX * ctx);
int EVP_RAND_verify_zeroization(EVP_RAND_CTX * ctx);
unsigned int EVP_RAND_get_strength(EVP_RAND_CTX * ctx);
int EVP_RAND_get_state(EVP_RAND_CTX * ctx);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int EVP_PKEY_decrypt_old(unsigned char* dec_key, const unsigned char* enc_key, int enc_key_len, EVP_PKEY * private_key);
OSSL_DEPRECATEDIN_3_0 int EVP_PKEY_encrypt_old(unsigned char* enc_key, const unsigned char* key, int key_len, EVP_PKEY * pub_key);
endif
int EVP_PKEY_is_a(const EVP_PKEY * pkey, const char* name);
int EVP_PKEY_type(int type);
int EVP_PKEY_get_id(const EVP_PKEY * pkey);
define EVP_PKEY_id EVP_PKEY_get_id
int EVP_PKEY_get_base_id(const EVP_PKEY * pkey);
define EVP_PKEY_base_id EVP_PKEY_get_base_id
int EVP_PKEY_get_bits(const EVP_PKEY * pkey);
define EVP_PKEY_bits EVP_PKEY_get_bits
int EVP_PKEY_get_security_bits(const EVP_PKEY * pkey);
define EVP_PKEY_security_bits EVP_PKEY_get_security_bits
int EVP_PKEY_get_size(const EVP_PKEY * pkey);
define EVP_PKEY_size EVP_PKEY_get_size
int EVP_PKEY_can_sign(const EVP_PKEY * pkey);
int EVP_PKEY_set_type(EVP_PKEY * pkey, int type);
int EVP_PKEY_set_type_str(EVP_PKEY * pkey, const char* str, int len);
int EVP_PKEY_set_type_by_keymgmt(EVP_PKEY * pkey, EVP_KEYMGMT * keymgmt);
ifndef OPENSSL_NO_ENGINE
OSSL_DEPRECATEDIN_3_0
int EVP_PKEY_set1_engine(EVP_PKEY * pkey, ENGINE * e);
endif
OSSL_DEPRECATEDIN_3_0
int EVP_PKEY_assign(EVP_PKEY * pkey, int type, void* key);
OSSL_DEPRECATEDIN_3_0
int EVP_PKEY_set1_RSA(EVP_PKEY * pkey, struct rsa_st* key);
OSSL_DEPRECATEDIN_3_0
int EVP_PKEY_set1_DSA(EVP_PKEY * pkey, struct dsa_st* key);
OSSL_DEPRECATEDIN_3_0 int EVP_PKEY_set1_DH(EVP_PKEY * pkey, struct dh_st* key);
OSSL_DEPRECATEDIN_3_0
int EVP_PKEY_set1_EC_KEY(EVP_PKEY * pkey, struct ec_key_st* key);
int EVP_PKEY_up_ref(EVP_PKEY * pkey);
void EVP_PKEY_free(EVP_PKEY * pkey);
int i2d_PublicKey(const EVP_PKEY * a, unsigned char** pp);
int i2d_PrivateKey(const EVP_PKEY * a, unsigned char** pp);
int i2d_KeyParams(const EVP_PKEY * a, unsigned char** pp);
int i2d_KeyParams_bio(BIO * bp, const EVP_PKEY * pkey);
int EVP_PKEY_copy_parameters(EVP_PKEY * to, const EVP_PKEY * from);
int EVP_PKEY_missing_parameters(const EVP_PKEY * pkey);
int EVP_PKEY_save_parameters(EVP_PKEY * pkey, int mode);
int EVP_PKEY_parameters_eq(const EVP_PKEY * a, const EVP_PKEY * b);
int EVP_PKEY_eq(const EVP_PKEY * a, const EVP_PKEY * b);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
int EVP_PKEY_cmp_parameters(const EVP_PKEY * a, const EVP_PKEY * b);
OSSL_DEPRECATEDIN_3_0
int EVP_PKEY_cmp(const EVP_PKEY * a, const EVP_PKEY * b);
endif

int EVP_PKEY_print_public(BIO * out, const EVP_PKEY * pkey, int indent, ASN1_PCTX * pctx);
int EVP_PKEY_print_private(BIO * out, const EVP_PKEY * pkey, int indent, ASN1_PCTX * pctx);
int EVP_PKEY_print_params(BIO * out, const EVP_PKEY * pkey, int indent, ASN1_PCTX * pctx);
ifndef OPENSSL_NO_STDIO
int EVP_PKEY_print_public_fp(FILE * fp, const EVP_PKEY * pkey, int indent, ASN1_PCTX * pctx);
int EVP_PKEY_print_private_fp(FILE * fp, const EVP_PKEY * pkey, int indent, ASN1_PCTX * pctx);
int EVP_PKEY_print_params_fp(FILE * fp, const EVP_PKEY * pkey, int indent, ASN1_PCTX * pctx);
endif

int EVP_PKEY_get_default_digest_nid(EVP_PKEY * pkey, int* pnid);
int EVP_PKEY_get_default_digest_name(EVP_PKEY * pkey, char* mdname, size_t mdname_sz);
int EVP_PKEY_digestsign_supports_digest(EVP_PKEY * pkey, OSSL_LIB_CTX * libctx, const char* name, const char* propq);
endif

int EVP_PKEY_set1_encoded_public_key(EVP_PKEY * pkey, const unsigned char* pub, size_t publen);
endif

size_t EVP_PKEY_get1_encoded_public_key(EVP_PKEY * pkey, unsigned char** ppub);
int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX * c, ASN1_TYPE * type);
int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX * c, ASN1_TYPE * type);
int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX * c, ASN1_TYPE * type);
int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX * c, ASN1_TYPE * type);
int PKCS5_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char* pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md, int en_de);
int PKCS5_PBE_keyivgen_ex(EVP_CIPHER_CTX * cctx, const char* pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md, int en_de, OSSL_LIB_CTX * libctx, const char* propq);
int PKCS5_PBKDF2_HMAC_SHA1(const char* pass, int passlen, const unsigned char* salt, int saltlen, int iter, int keylen, unsigned char* out);
int PKCS5_PBKDF2_HMAC(const char* pass, int passlen, const unsigned char* salt, int saltlen, int iter, const EVP_MD * digest, int keylen, unsigned char* out);
int PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char* pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md, int en_de);
int PKCS5_v2_PBE_keyivgen_ex(EVP_CIPHER_CTX * ctx, const char* pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md, int en_de, OSSL_LIB_CTX * libctx, const char* propq);
ifndef OPENSSL_NO_SCRYPT
int EVP_PBE_scrypt(const char* pass, size_t passlen, const unsigned char* salt, size_t saltlen, uint64_t N, uint64_t r, uint64_t p, uint64_t maxmem, unsigned char* key, size_t keylen);
int EVP_PBE_scrypt_ex(const char* pass, size_t passlen, const unsigned char* salt, size_t saltlen, uint64_t N, uint64_t r, uint64_t p, uint64_t maxmem, unsigned char* key, size_t keylen, OSSL_LIB_CTX * ctx, const char* propq);
int PKCS5_v2_scrypt_keyivgen(EVP_CIPHER_CTX * ctx, const char* pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * c, const EVP_MD * md, int en_de);
int PKCS5_v2_scrypt_keyivgen_ex(EVP_CIPHER_CTX * ctx, const char* pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * c, const EVP_MD * md, int en_de, OSSL_LIB_CTX * libctx, const char* propq);
endif

void PKCS5_PBE_add(void);
int EVP_PBE_CipherInit(ASN1_OBJECT * pbe_obj, const char* pass, int passlen, ASN1_TYPE * param, EVP_CIPHER_CTX * ctx, int en_de);
int EVP_PBE_CipherInit_ex(ASN1_OBJECT * pbe_obj, const char* pass, int passlen, ASN1_TYPE * param, EVP_CIPHER_CTX * ctx, int en_de, OSSL_LIB_CTX * libctx, const char* propq);
define EVP_PBE_TYPE_KDF        0x2

int EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid, int md_nid, EVP_PBE_KEYGEN * keygen);
int EVP_PBE_alg_add(int nid, const EVP_CIPHER * cipher, const EVP_MD * md, EVP_PBE_KEYGEN * keygen);
int EVP_PBE_find(int type, int pbe_nid, int* pcnid, int* pmnid, EVP_PBE_KEYGEN * *pkeygen);
int EVP_PBE_find_ex(int type, int pbe_nid, int* pcnid, int* pmnid, EVP_PBE_KEYGEN * *pkeygen, EVP_PBE_KEYGEN_EX * *pkeygen_ex);
void EVP_PBE_cleanup(void);
int EVP_PBE_get(int* ptype, int* ppbe_nid, size_t num);
define ASN1_PKEY_CTRL_CMS_IS_RI_TYPE_SUPPORTED 0xb

int EVP_PKEY_asn1_get_count(void);
int EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD * ameth);
int EVP_PKEY_asn1_add_alias(int to, int from);
int EVP_PKEY_asn1_get0_info(int* ppkey_id, int* pkey_base_id, int* ppkey_flags, const char** pinfo, const char** ppem_str, const EVP_PKEY_ASN1_METHOD * ameth);
void EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD * dst, const EVP_PKEY_ASN1_METHOD * src);
void EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD * ameth);
int EVP_PKEY_CTX_get_signature_md(EVP_PKEY_CTX * ctx, const EVP_MD * *md);
int EVP_PKEY_CTX_set_signature_md(EVP_PKEY_CTX * ctx, const EVP_MD * md);
int EVP_PKEY_CTX_set1_id(EVP_PKEY_CTX * ctx, const void* id, int len);
int EVP_PKEY_CTX_get1_id(EVP_PKEY_CTX * ctx, void* id);
int EVP_PKEY_CTX_get1_id_len(EVP_PKEY_CTX * ctx, size_t * id_len);
int EVP_PKEY_CTX_set_kem_op(EVP_PKEY_CTX * ctx, const char* op);
int EVP_PKEY_CTX_set_mac_key(EVP_PKEY_CTX * ctx, const unsigned char* key, int keylen);
OSSL_DEPRECATEDIN_3_0 void EVP_PKEY_meth_get0_info(int* ppkey_id, int* pflags, const EVP_PKEY_METHOD * meth);
OSSL_DEPRECATEDIN_3_0 void EVP_PKEY_meth_copy(EVP_PKEY_METHOD * dst, const EVP_PKEY_METHOD * src);
OSSL_DEPRECATEDIN_3_0 void EVP_PKEY_meth_free(EVP_PKEY_METHOD * pmeth);
OSSL_DEPRECATEDIN_3_0 int EVP_PKEY_meth_add0(const EVP_PKEY_METHOD * pmeth);
OSSL_DEPRECATEDIN_3_0 int EVP_PKEY_meth_remove(const EVP_PKEY_METHOD * pmeth);
OSSL_DEPRECATEDIN_3_0 size_t EVP_PKEY_meth_get_count(void);
int EVP_KEYMGMT_up_ref(EVP_KEYMGMT * keymgmt);
void EVP_KEYMGMT_free(EVP_KEYMGMT * keymgmt);
int EVP_KEYMGMT_is_a(const EVP_KEYMGMT * keymgmt, const char* name);
void EVP_PKEY_CTX_free(EVP_PKEY_CTX * ctx);
int EVP_PKEY_CTX_is_a(EVP_PKEY_CTX * ctx, const char* keytype);
int EVP_PKEY_CTX_get_params(EVP_PKEY_CTX * ctx, OSSL_PARAM * params);
int EVP_PKEY_CTX_set_params(EVP_PKEY_CTX * ctx, const OSSL_PARAM * params);
int EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX * ctx, int keytype, int optype, int cmd, int p1, void* p2);
int EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX * ctx, const char* type, const char* value);
int EVP_PKEY_CTX_ctrl_uint64(EVP_PKEY_CTX * ctx, int keytype, int optype, int cmd, uint64_t value);
int EVP_PKEY_CTX_str2ctrl(EVP_PKEY_CTX * ctx, int cmd, const char* str);
int EVP_PKEY_CTX_hex2ctrl(EVP_PKEY_CTX * ctx, int cmd, const char* hex);
int EVP_PKEY_CTX_md(EVP_PKEY_CTX * ctx, int optype, int cmd, const char* md);
int EVP_PKEY_CTX_get_operation(EVP_PKEY_CTX * ctx);
void EVP_PKEY_CTX_set0_keygen_info(EVP_PKEY_CTX * ctx, int* dat, int datlen);
int EVP_PKEY_get_raw_private_key(const EVP_PKEY * pkey, unsigned char* priv, size_t * len);
int EVP_PKEY_get_raw_public_key(const EVP_PKEY * pkey, unsigned char* pub, size_t * len);
endif

void EVP_PKEY_CTX_set_data(EVP_PKEY_CTX * ctx, void* data);
void EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX * ctx, void* data);
void EVP_SIGNATURE_free(EVP_SIGNATURE * signature);
int EVP_SIGNATURE_up_ref(EVP_SIGNATURE * signature);
int EVP_SIGNATURE_is_a(const EVP_SIGNATURE * signature, const char* name);
void EVP_ASYM_CIPHER_free(EVP_ASYM_CIPHER * cipher);
int EVP_ASYM_CIPHER_up_ref(EVP_ASYM_CIPHER * cipher);
int EVP_ASYM_CIPHER_is_a(const EVP_ASYM_CIPHER * cipher, const char* name);
void EVP_KEM_free(EVP_KEM * wrap);
int EVP_KEM_up_ref(EVP_KEM * wrap);
int EVP_KEM_is_a(const EVP_KEM * wrap, const char* name);
int EVP_PKEY_sign_init(EVP_PKEY_CTX * ctx);
int EVP_PKEY_sign_init_ex(EVP_PKEY_CTX * ctx, const OSSL_PARAM params[]);
int EVP_PKEY_sign(EVP_PKEY_CTX * ctx, unsigned char* sig, size_t * siglen, const unsigned char* tbs, size_t tbslen);
int EVP_PKEY_verify_init(EVP_PKEY_CTX * ctx);
int EVP_PKEY_verify_init_ex(EVP_PKEY_CTX * ctx, const OSSL_PARAM params[]);
int EVP_PKEY_verify(EVP_PKEY_CTX * ctx, const unsigned char* sig, size_t siglen, const unsigned char* tbs, size_t tbslen);
int EVP_PKEY_verify_recover_init(EVP_PKEY_CTX * ctx);
int EVP_PKEY_verify_recover_init_ex(EVP_PKEY_CTX * ctx, const OSSL_PARAM params[]);
int EVP_PKEY_verify_recover(EVP_PKEY_CTX * ctx, unsigned char* rout, size_t * routlen, const unsigned char* sig, size_t siglen);
int EVP_PKEY_encrypt_init(EVP_PKEY_CTX * ctx);
int EVP_PKEY_encrypt_init_ex(EVP_PKEY_CTX * ctx, const OSSL_PARAM params[]);
int EVP_PKEY_encrypt(EVP_PKEY_CTX * ctx, unsigned char* out, size_t * outlen, const unsigned char* in, size_t inlen);
int EVP_PKEY_decrypt_init(EVP_PKEY_CTX * ctx);
int EVP_PKEY_decrypt_init_ex(EVP_PKEY_CTX * ctx, const OSSL_PARAM params[]);
int EVP_PKEY_decrypt(EVP_PKEY_CTX * ctx, unsigned char* out, size_t * outlen, const unsigned char* in, size_t inlen);
int EVP_PKEY_derive_init(EVP_PKEY_CTX * ctx);
int EVP_PKEY_derive_init_ex(EVP_PKEY_CTX * ctx, const OSSL_PARAM params[]);
int EVP_PKEY_derive_set_peer_ex(EVP_PKEY_CTX * ctx, EVP_PKEY * peer, int validate_peer);
int EVP_PKEY_derive_set_peer(EVP_PKEY_CTX * ctx, EVP_PKEY * peer);
int EVP_PKEY_derive(EVP_PKEY_CTX * ctx, unsigned char* key, size_t * keylen);
int EVP_PKEY_encapsulate_init(EVP_PKEY_CTX * ctx, const OSSL_PARAM params[]);
int EVP_PKEY_auth_encapsulate_init(EVP_PKEY_CTX * ctx, EVP_PKEY * authpriv, const OSSL_PARAM params[]);
int EVP_PKEY_encapsulate(EVP_PKEY_CTX * ctx, unsigned char* wrappedkey, size_t * wrappedkeylen, unsigned char* genkey, size_t * genkeylen);
int EVP_PKEY_decapsulate_init(EVP_PKEY_CTX * ctx, const OSSL_PARAM params[]);
int EVP_PKEY_auth_decapsulate_init(EVP_PKEY_CTX * ctx, EVP_PKEY * authpub, const OSSL_PARAM params[]);
int EVP_PKEY_decapsulate(EVP_PKEY_CTX * ctx, unsigned char* unwrapped, size_t * unwrappedlen, const unsigned char* wrapped, size_t wrappedlen);
typedef int EVP_PKEY_gen_cb(EVP_PKEY_CTX* ctx);
int EVP_PKEY_fromdata_init(EVP_PKEY_CTX * ctx);
int EVP_PKEY_fromdata(EVP_PKEY_CTX * ctx, EVP_PKEY * *ppkey, int selection, OSSL_PARAM param[]);
int EVP_PKEY_todata(const EVP_PKEY * pkey, int selection, OSSL_PARAM * *params);
int EVP_PKEY_export(const EVP_PKEY * pkey, int selection, OSSL_CALLBACK * export_cb, void* export_cbarg);
int EVP_PKEY_get_params(const EVP_PKEY * pkey, OSSL_PARAM params[]);
int EVP_PKEY_get_int_param(const EVP_PKEY * pkey, const char* key_name, int* out);
int EVP_PKEY_get_size_t_param(const EVP_PKEY * pkey, const char* key_name, size_t * out);
int EVP_PKEY_get_bn_param(const EVP_PKEY * pkey, const char* key_name, BIGNUM * *bn);
int EVP_PKEY_get_utf8_string_param(const EVP_PKEY * pkey, const char* key_name, char* str, size_t max_buf_sz, size_t * out_sz);
int EVP_PKEY_get_octet_string_param(const EVP_PKEY * pkey, const char* key_name, unsigned char* buf, size_t max_buf_sz, size_t * out_sz);
int EVP_PKEY_set_params(EVP_PKEY * pkey, OSSL_PARAM params[]);
int EVP_PKEY_set_int_param(EVP_PKEY * pkey, const char* key_name, int in);
int EVP_PKEY_set_size_t_param(EVP_PKEY * pkey, const char* key_name, size_t in);
int EVP_PKEY_set_bn_param(EVP_PKEY * pkey, const char* key_name, const BIGNUM * bn);
int EVP_PKEY_set_utf8_string_param(EVP_PKEY * pkey, const char* key_name, const char* str);
int EVP_PKEY_set_octet_string_param(EVP_PKEY * pkey, const char* key_name, const unsigned char* buf, size_t bsize);
int EVP_PKEY_get_ec_point_conv_form(const EVP_PKEY * pkey);
int EVP_PKEY_get_field_type(const EVP_PKEY * pkey);
int EVP_PKEY_paramgen_init(EVP_PKEY_CTX * ctx);
int EVP_PKEY_paramgen(EVP_PKEY_CTX * ctx, EVP_PKEY * *ppkey);
int EVP_PKEY_keygen_init(EVP_PKEY_CTX * ctx);
int EVP_PKEY_keygen(EVP_PKEY_CTX * ctx, EVP_PKEY * *ppkey);
int EVP_PKEY_generate(EVP_PKEY_CTX * ctx, EVP_PKEY * *ppkey);
int EVP_PKEY_check(EVP_PKEY_CTX * ctx);
int EVP_PKEY_public_check(EVP_PKEY_CTX * ctx);
int EVP_PKEY_public_check_quick(EVP_PKEY_CTX * ctx);
int EVP_PKEY_param_check(EVP_PKEY_CTX * ctx);
int EVP_PKEY_param_check_quick(EVP_PKEY_CTX * ctx);
int EVP_PKEY_private_check(EVP_PKEY_CTX * ctx);
int EVP_PKEY_pairwise_check(EVP_PKEY_CTX * ctx);
int EVP_PKEY_set_ex_data(EVP_PKEY * key, int idx, void* arg);
void EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX * ctx, EVP_PKEY_gen_cb * cb);
int EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX * ctx, int idx);
endif

void EVP_KEYEXCH_free(EVP_KEYEXCH * exchange);
int EVP_KEYEXCH_up_ref(EVP_KEYEXCH * exchange);
int EVP_KEYEXCH_is_a(const EVP_KEYEXCH * keyexch, const char* name);
void EVP_add_alg_module(void);
int EVP_PKEY_CTX_set_group_name(EVP_PKEY_CTX * ctx, const char* name);
int EVP_PKEY_CTX_get_group_name(EVP_PKEY_CTX * ctx, char* name, size_t namelen);
int EVP_PKEY_get_group_name(const EVP_PKEY * pkey, char* name, size_t name_sz, size_t * gname_len);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 size_t HMAC_size(const HMAC_CTX * e);
OSSL_DEPRECATEDIN_3_0 int HMAC_CTX_reset(HMAC_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 void HMAC_CTX_free(HMAC_CTX * ctx);
ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 __owur int HMAC_Init(HMAC_CTX * ctx, const void* key, int len, const EVP_MD * md);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int HMAC_Init_ex(HMAC_CTX * ctx, const void* key, int len, const EVP_MD * md, ENGINE * impl);
OSSL_DEPRECATEDIN_3_0 int HMAC_Update(HMAC_CTX * ctx, const unsigned char* data, size_t len);
OSSL_DEPRECATEDIN_3_0 int HMAC_Final(HMAC_CTX * ctx, unsigned char* md, unsigned int* len);
OSSL_DEPRECATEDIN_3_0 __owur int HMAC_CTX_copy(HMAC_CTX * dctx, HMAC_CTX * sctx);
OSSL_DEPRECATEDIN_3_0 void HMAC_CTX_set_flags(HMAC_CTX * ctx, unsigned long flags);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void OSSL_HPKE_CTX_free(OSSL_HPKE_CTX * ctx);
int OSSL_HPKE_encap(OSSL_HPKE_CTX * ctx, unsigned char* enc, size_t * enclen, const unsigned char* pub, size_t publen, const unsigned char* info, size_t infolen);
int OSSL_HPKE_seal(OSSL_HPKE_CTX * ctx, unsigned char* ct, size_t * ctlen, const unsigned char* aad, size_t aadlen, const unsigned char* pt, size_t ptlen);
int OSSL_HPKE_keygen(OSSL_HPKE_SUITE suite, unsigned char* pub, size_t * publen, EVP_PKEY * *priv, const unsigned char* ikm, size_t ikmlen, OSSL_LIB_CTX * libctx, const char* propq);
int OSSL_HPKE_decap(OSSL_HPKE_CTX * ctx, const unsigned char* enc, size_t enclen, EVP_PKEY * recippriv, const unsigned char* info, size_t infolen);
int OSSL_HPKE_open(OSSL_HPKE_CTX * ctx, unsigned char* pt, size_t * ptlen, const unsigned char* aad, size_t aadlen, const unsigned char* ct, size_t ctlen);
int OSSL_HPKE_export(OSSL_HPKE_CTX * ctx, unsigned char* secret, size_t secretlen, const unsigned char* label, size_t labellen);
int OSSL_HPKE_CTX_set1_authpriv(OSSL_HPKE_CTX * ctx, EVP_PKEY * priv);
int OSSL_HPKE_CTX_set1_authpub(OSSL_HPKE_CTX * ctx, const unsigned char* pub, size_t publen);
int OSSL_HPKE_CTX_set1_psk(OSSL_HPKE_CTX * ctx, const char* pskid, const unsigned char* psk, size_t psklen);
int OSSL_HPKE_CTX_set1_ikme(OSSL_HPKE_CTX * ctx, const unsigned char* ikme, size_t ikmelen);
int OSSL_HPKE_CTX_set_seq(OSSL_HPKE_CTX * ctx, uint64_t seq);
int OSSL_HPKE_CTX_get_seq(OSSL_HPKE_CTX * ctx, uint64_t * seq);
int OSSL_HPKE_suite_check(OSSL_HPKE_SUITE suite);
int OSSL_HPKE_get_grease_value(const OSSL_HPKE_SUITE * suite_in, OSSL_HPKE_SUITE * suite, unsigned char* enc, size_t * enclen, unsigned char* ct, size_t ctlen, OSSL_LIB_CTX * libctx, const char* propq);
int OSSL_HPKE_str2suite(const char* str, OSSL_HPKE_SUITE * suite);
size_t OSSL_HPKE_get_ciphertext_size(OSSL_HPKE_SUITE suite, size_t clearlen);
size_t OSSL_HPKE_get_public_encap_size(OSSL_HPKE_SUITE suite);
size_t OSSL_HPKE_get_recommended_ikmelen(OSSL_HPKE_SUITE suite);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void OSSL_HTTP_REQ_CTX_free(OSSL_HTTP_REQ_CTX * rctx);
int OSSL_HTTP_REQ_CTX_set_request_line(OSSL_HTTP_REQ_CTX * rctx, int method_POST, const char* server, const char* port, const char* path);
int OSSL_HTTP_REQ_CTX_add1_header(OSSL_HTTP_REQ_CTX * rctx, const char* name, const char* value);
int OSSL_HTTP_REQ_CTX_set_expected(OSSL_HTTP_REQ_CTX * rctx, const char* content_type, int asn1, int timeout, int keep_alive);
int OSSL_HTTP_REQ_CTX_set1_req(OSSL_HTTP_REQ_CTX * rctx, const char* content_type, const ASN1_ITEM * it, const ASN1_VALUE * req);
int OSSL_HTTP_REQ_CTX_nbio(OSSL_HTTP_REQ_CTX * rctx);
int OSSL_HTTP_REQ_CTX_nbio_d2i(OSSL_HTTP_REQ_CTX * rctx, ASN1_VALUE * *pval, const ASN1_ITEM * it);
size_t OSSL_HTTP_REQ_CTX_get_resp_len(const OSSL_HTTP_REQ_CTX * rctx);
void OSSL_HTTP_REQ_CTX_set_max_response_length(OSSL_HTTP_REQ_CTX * rctx, unsigned long len);
int OSSL_HTTP_is_alive(const OSSL_HTTP_REQ_CTX * rctx);
int OSSL_HTTP_proxy_connect(BIO * bio, const char* server, const char* port, const char* proxyuser, const char* proxypass, int timeout, BIO * bio_err, const char* prog);
int OSSL_HTTP_close(OSSL_HTTP_REQ_CTX * rctx, int ok);
int OSSL_parse_url(const char* url, char** pscheme, char** puser, char** phost, char** pport, int* pport_num, char** ppath, char** pquery, char** pfrag);
int OSSL_HTTP_parse_url(const char* url, int* pssl, char** puser, char** phost, char** pport, int* pport_num, char** ppath, char** pquery, char** pfrag);
void OSSL_HTTP_REQ_CTX_set_max_response_hdr_lines(OSSL_HTTP_REQ_CTX * rctx, size_t count);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

OSSL_DEPRECATEDIN_3_0 void IDEA_ecb_encrypt(const unsigned char* in, unsigned char* out, IDEA_KEY_SCHEDULE * ks);
OSSL_DEPRECATEDIN_3_0 void IDEA_set_encrypt_key(const unsigned char* key, IDEA_KEY_SCHEDULE * ks);
OSSL_DEPRECATEDIN_3_0 void IDEA_set_decrypt_key(IDEA_KEY_SCHEDULE * ek, IDEA_KEY_SCHEDULE * dk);
OSSL_DEPRECATEDIN_3_0 void IDEA_cbc_encrypt(const unsigned char* in, unsigned char* out, long length, IDEA_KEY_SCHEDULE * ks, unsigned char* iv, int enc);
OSSL_DEPRECATEDIN_3_0 void IDEA_cfb64_encrypt(const unsigned char* in, unsigned char* out, long length, IDEA_KEY_SCHEDULE * ks, unsigned char* iv, int* num, int enc);
OSSL_DEPRECATEDIN_3_0 void IDEA_ofb64_encrypt(const unsigned char* in, unsigned char* out, long length, IDEA_KEY_SCHEDULE * ks, unsigned char* iv, int* num);
OSSL_DEPRECATEDIN_3_0 void IDEA_encrypt(unsigned long* in, IDEA_KEY_SCHEDULE * ks);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

endif

int EVP_KDF_up_ref(EVP_KDF * kdf);
void EVP_KDF_free(EVP_KDF * kdf);
void EVP_KDF_CTX_free(EVP_KDF_CTX * ctx);
int EVP_KDF_is_a(const EVP_KDF * kdf, const char* name);
void EVP_KDF_CTX_reset(EVP_KDF_CTX * ctx);
size_t EVP_KDF_CTX_get_kdf_size(EVP_KDF_CTX * ctx);
int EVP_KDF_derive(EVP_KDF_CTX * ctx, unsigned char* key, size_t keylen, const OSSL_PARAM params[]);
int EVP_KDF_get_params(EVP_KDF * kdf, OSSL_PARAM params[]);
int EVP_KDF_CTX_get_params(EVP_KDF_CTX * ctx, OSSL_PARAM params[]);
int EVP_KDF_CTX_set_params(EVP_KDF_CTX * ctx, const OSSL_PARAM params[]);
EVP_KDF_HKDF_MODE_EXPAND_ONLY

int EVP_PKEY_CTX_set_tls1_prf_md(EVP_PKEY_CTX * ctx, const EVP_MD * md);
int EVP_PKEY_CTX_set1_tls1_prf_secret(EVP_PKEY_CTX * pctx, const unsigned char* sec, int seclen);
int EVP_PKEY_CTX_add1_tls1_prf_seed(EVP_PKEY_CTX * pctx, const unsigned char* seed, int seedlen);
int EVP_PKEY_CTX_set_hkdf_md(EVP_PKEY_CTX * ctx, const EVP_MD * md);
int EVP_PKEY_CTX_set1_hkdf_salt(EVP_PKEY_CTX * ctx, const unsigned char* salt, int saltlen);
int EVP_PKEY_CTX_set1_hkdf_key(EVP_PKEY_CTX * ctx, const unsigned char* key, int keylen);
int EVP_PKEY_CTX_add1_hkdf_info(EVP_PKEY_CTX * ctx, const unsigned char* info, int infolen);
int EVP_PKEY_CTX_set_hkdf_mode(EVP_PKEY_CTX * ctx, int mode);
define EVP_PKEY_CTX_hkdf_mode EVP_PKEY_CTX_set_hkdf_mode

int EVP_PKEY_CTX_set1_pbe_pass(EVP_PKEY_CTX * ctx, const char* pass, int passlen);
int EVP_PKEY_CTX_set1_scrypt_salt(EVP_PKEY_CTX * ctx, const unsigned char* salt, int saltlen);
int EVP_PKEY_CTX_set_scrypt_N(EVP_PKEY_CTX * ctx, uint64_t n);
int EVP_PKEY_CTX_set_scrypt_r(EVP_PKEY_CTX * ctx, uint64_t r);
int EVP_PKEY_CTX_set_scrypt_p(EVP_PKEY_CTX * ctx, uint64_t p);
int EVP_PKEY_CTX_set_scrypt_maxmem_bytes(EVP_PKEY_CTX * ctx, uint64_t maxmem_bytes);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

define LH_LOAD_MULT    256

int OPENSSL_LH_error(OPENSSL_LHASH * lh);
void OPENSSL_LH_free(OPENSSL_LHASH * lh);
void OPENSSL_LH_flush(OPENSSL_LHASH * lh);
void OPENSSL_LH_doall(OPENSSL_LHASH * lh, OPENSSL_LH_DOALL_FUNC func);
void OPENSSL_LH_doall_arg(OPENSSL_LHASH * lh, OPENSSL_LH_DOALL_FUNCARG func, void* arg);
void OPENSSL_LH_doall_arg_thunk(OPENSSL_LHASH * lh, OPENSSL_LH_DOALL_FUNCARG_THUNK daaw, OPENSSL_LH_DOALL_FUNCARG fn, void* arg);
unsigned long OPENSSL_LH_strhash(const char* c);
unsigned long OPENSSL_LH_num_items(const OPENSSL_LHASH * lh);
unsigned long OPENSSL_LH_get_down_load(const OPENSSL_LHASH * lh);
void OPENSSL_LH_set_down_load(OPENSSL_LHASH * lh, unsigned long down_load);
ifndef OPENSSL_NO_DEPRECATED_3_1
OSSL_DEPRECATEDIN_3_1 void OPENSSL_LH_stats(const OPENSSL_LHASH * lh, FILE * fp);
OSSL_DEPRECATEDIN_3_1 void OPENSSL_LH_node_stats(const OPENSSL_LHASH * lh, FILE * fp);
OSSL_DEPRECATEDIN_3_1 void OPENSSL_LH_node_usage_stats(const OPENSSL_LHASH * lh, FILE * fp);
ifndef OPENSSL_NO_DEPRECATED_3_1
OSSL_DEPRECATEDIN_3_1 void OPENSSL_LH_stats_bio(const OPENSSL_LHASH * lh, BIO * out);
OSSL_DEPRECATEDIN_3_1 void OPENSSL_LH_node_stats_bio(const OPENSSL_LHASH * lh, BIO * out);
OSSL_DEPRECATEDIN_3_1 void OPENSSL_LH_node_usage_stats_bio(const OPENSSL_LHASH * lh, BIO * out);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

OSSL_DEPRECATEDIN_3_0 int MD2_Init(MD2_CTX * c);
OSSL_DEPRECATEDIN_3_0 int MD2_Update(MD2_CTX * c, const unsigned char* data, size_t len);
OSSL_DEPRECATEDIN_3_0 int MD2_Final(unsigned char* md, MD2_CTX * c);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int MD4_Init(MD4_CTX * c);
OSSL_DEPRECATEDIN_3_0 int MD4_Update(MD4_CTX * c, const void* data, size_t len);
OSSL_DEPRECATEDIN_3_0 int MD4_Final(unsigned char* md, MD4_CTX * c);
OSSL_DEPRECATEDIN_3_0 void MD4_Transform(MD4_CTX * c, const unsigned char* b);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int MD5_Init(MD5_CTX * c);
OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX * c, const void* data, size_t len);
OSSL_DEPRECATEDIN_3_0 int MD5_Final(unsigned char* md, MD5_CTX * c);
OSSL_DEPRECATEDIN_3_0 void MD5_Transform(MD5_CTX * c, const unsigned char* b);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int MDC2_Init(MDC2_CTX * c);
OSSL_DEPRECATEDIN_3_0 int MDC2_Update(MDC2_CTX * c, const unsigned char* data, size_t len);
OSSL_DEPRECATEDIN_3_0 int MDC2_Final(unsigned char* md, MDC2_CTX * c);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void CRYPTO_cbc128_encrypt(const unsigned char* in, unsigned char* out, size_t len, const void* key, unsigned char ivec[16], block128_f block);
void CRYPTO_cbc128_decrypt(const unsigned char* in, unsigned char* out, size_t len, const void* key, unsigned char ivec[16], block128_f block);
void CRYPTO_ctr128_encrypt(const unsigned char* in, unsigned char* out, size_t len, const void* key, unsigned char ivec[16], unsigned char ecount_buf[16], unsigned int* num, block128_f block);
void CRYPTO_ctr128_encrypt_ctr32(const unsigned char* in, unsigned char* out, size_t len, const void* key, unsigned char ivec[16], unsigned char ecount_buf[16], unsigned int* num, ctr128_f ctr);
void CRYPTO_ofb128_encrypt(const unsigned char* in, unsigned char* out, size_t len, const void* key, unsigned char ivec[16], int* num, block128_f block);
void CRYPTO_cfb128_encrypt(const unsigned char* in, unsigned char* out, size_t len, const void* key, unsigned char ivec[16], int* num, int enc, block128_f block);
void CRYPTO_cfb128_8_encrypt(const unsigned char* in, unsigned char* out, size_t length, const void* key, unsigned char ivec[16], int* num, int enc, block128_f block);
void CRYPTO_cfb128_1_encrypt(const unsigned char* in, unsigned char* out, size_t bits, const void* key, unsigned char ivec[16], int* num, int enc, block128_f block);
size_t CRYPTO_cts128_encrypt_block(const unsigned char* in, unsigned char* out, size_t len, const void* key, unsigned char ivec[16], block128_f block);
size_t CRYPTO_cts128_encrypt(const unsigned char* in, unsigned char* out, size_t len, const void* key, unsigned char ivec[16], cbc128_f cbc);
size_t CRYPTO_cts128_decrypt_block(const unsigned char* in, unsigned char* out, size_t len, const void* key, unsigned char ivec[16], block128_f block);
size_t CRYPTO_cts128_decrypt(const unsigned char* in, unsigned char* out, size_t len, const void* key, unsigned char ivec[16], cbc128_f cbc);
size_t CRYPTO_nistcts128_encrypt_block(const unsigned char* in, unsigned char* out, size_t len, const void* key, unsigned char ivec[16], block128_f block);
size_t CRYPTO_nistcts128_encrypt(const unsigned char* in, unsigned char* out, size_t len, const void* key, unsigned char ivec[16], cbc128_f cbc);
size_t CRYPTO_nistcts128_decrypt_block(const unsigned char* in, unsigned char* out, size_t len, const void* key, unsigned char ivec[16], block128_f block);
size_t CRYPTO_nistcts128_decrypt(const unsigned char* in, unsigned char* out, size_t len, const void* key, unsigned char ivec[16], cbc128_f cbc);
void CRYPTO_gcm128_init(GCM128_CONTEXT * ctx, void* key, block128_f block);
void CRYPTO_gcm128_setiv(GCM128_CONTEXT * ctx, const unsigned char* iv, size_t len);
int CRYPTO_gcm128_aad(GCM128_CONTEXT * ctx, const unsigned char* aad, size_t len);
int CRYPTO_gcm128_encrypt(GCM128_CONTEXT * ctx, const unsigned char* in, unsigned char* out, size_t len);
int CRYPTO_gcm128_decrypt(GCM128_CONTEXT * ctx, const unsigned char* in, unsigned char* out, size_t len);
int CRYPTO_gcm128_encrypt_ctr32(GCM128_CONTEXT * ctx, const unsigned char* in, unsigned char* out, size_t len, ctr128_f stream);
int CRYPTO_gcm128_decrypt_ctr32(GCM128_CONTEXT * ctx, const unsigned char* in, unsigned char* out, size_t len, ctr128_f stream);
int CRYPTO_gcm128_finish(GCM128_CONTEXT * ctx, const unsigned char* tag, size_t len);
void CRYPTO_gcm128_tag(GCM128_CONTEXT * ctx, unsigned char* tag, size_t len);
void CRYPTO_gcm128_release(GCM128_CONTEXT * ctx);
void CRYPTO_ccm128_init(CCM128_CONTEXT * ctx, unsigned int M, unsigned int L, void* key, block128_f block);
int CRYPTO_ccm128_setiv(CCM128_CONTEXT * ctx, const unsigned char* nonce, size_t nlen, size_t mlen);
void CRYPTO_ccm128_aad(CCM128_CONTEXT * ctx, const unsigned char* aad, size_t alen);
int CRYPTO_ccm128_encrypt(CCM128_CONTEXT * ctx, const unsigned char* inp, unsigned char* out, size_t len);
int CRYPTO_ccm128_decrypt(CCM128_CONTEXT * ctx, const unsigned char* inp, unsigned char* out, size_t len);
int CRYPTO_ccm128_encrypt_ccm64(CCM128_CONTEXT * ctx, const unsigned char* inp, unsigned char* out, size_t len, ccm128_f stream);
int CRYPTO_ccm128_decrypt_ccm64(CCM128_CONTEXT * ctx, const unsigned char* inp, unsigned char* out, size_t len, ccm128_f stream);
size_t CRYPTO_ccm128_tag(CCM128_CONTEXT * ctx, unsigned char* tag, size_t len);
int CRYPTO_xts128_encrypt(const XTS128_CONTEXT * ctx, const unsigned char iv[16], const unsigned char* inp, unsigned char* out, size_t len, int enc);
size_t CRYPTO_128_wrap(void* key, const unsigned char* iv, unsigned char* out, const unsigned char* in, size_t inlen, block128_f block);
size_t CRYPTO_128_unwrap(void* key, const unsigned char* iv, unsigned char* out, const unsigned char* in, size_t inlen, block128_f block);
size_t CRYPTO_128_wrap_pad(void* key, const unsigned char* icv, unsigned char* out, const unsigned char* in, size_t inlen, block128_f block);
size_t CRYPTO_128_unwrap_pad(void* key, const unsigned char* icv, unsigned char* out, const unsigned char* in, size_t inlen, block128_f block);
int CRYPTO_ocb128_init(OCB128_CONTEXT * ctx, void* keyenc, void* keydec, block128_f encrypt, block128_f decrypt, ocb128_f stream);
int CRYPTO_ocb128_copy_ctx(OCB128_CONTEXT * dest, OCB128_CONTEXT * src, void* keyenc, void* keydec);
int CRYPTO_ocb128_setiv(OCB128_CONTEXT * ctx, const unsigned char* iv, size_t len, size_t taglen);
int CRYPTO_ocb128_aad(OCB128_CONTEXT * ctx, const unsigned char* aad, size_t len);
int CRYPTO_ocb128_encrypt(OCB128_CONTEXT * ctx, const unsigned char* in, unsigned char* out, size_t len);
int CRYPTO_ocb128_decrypt(OCB128_CONTEXT * ctx, const unsigned char* in, unsigned char* out, size_t len);
int CRYPTO_ocb128_finish(OCB128_CONTEXT * ctx, const unsigned char* tag, size_t len);
int CRYPTO_ocb128_tag(OCB128_CONTEXT * ctx, unsigned char* tag, size_t len);
void CRYPTO_ocb128_cleanup(OCB128_CONTEXT * ctx);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int OBJ_NAME_init(void);
int OBJ_NAME_add(const char* name, int type, const char* data);
int OBJ_NAME_remove(const char* name, int type);
void OBJ_NAME_cleanup(int type);
int OBJ_obj2nid(const ASN1_OBJECT * o);
int OBJ_obj2txt(char* buf, int buf_len, const ASN1_OBJECT * a, int no_name);
int OBJ_txt2nid(const char* s);
int OBJ_ln2nid(const char* s);
int OBJ_sn2nid(const char* s);
int OBJ_cmp(const ASN1_OBJECT * a, const ASN1_OBJECT * b);
int OBJ_new_nid(int num);
int OBJ_add_object(const ASN1_OBJECT * obj);
int OBJ_create(const char* oid, const char* sn, const char* ln);
endif
int OBJ_create_objects(BIO * in);
size_t OBJ_length(const ASN1_OBJECT * obj);
int OBJ_find_sigid_algs(int signid, int* pdig_nid, int* ppkey_nid);
int OBJ_find_sigid_by_algs(int* psignid, int dig_nid, int pkey_nid);
int OBJ_add_sigid(int signid, int dig_id, int pkey_id);
void OBJ_sigid_free(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int OCSP_request_add1_nonce(OCSP_REQUEST * req, unsigned char* val, int len);
int OCSP_basic_add1_nonce(OCSP_BASICRESP * resp, unsigned char* val, int len);
int OCSP_check_nonce(OCSP_REQUEST * req, OCSP_BASICRESP * bs);
int OCSP_copy_nonce(OCSP_BASICRESP * resp, OCSP_REQUEST * req);
int OCSP_request_set1_name(OCSP_REQUEST * req, const X509_NAME * nm);
int OCSP_request_add1_cert(OCSP_REQUEST * req, X509 * cert);
int OCSP_response_status(OCSP_RESPONSE * resp);
int OCSP_resp_count(OCSP_BASICRESP * bs);
int OCSP_resp_get0_id(const OCSP_BASICRESP * bs, const ASN1_OCTET_STRING * *pid, const X509_NAME * *pname);
int OCSP_resp_get1_id(const OCSP_BASICRESP * bs, ASN1_OCTET_STRING * *pid, X509_NAME * *pname);
int OCSP_resp_find(OCSP_BASICRESP * bs, OCSP_CERTID * id, int last);
int OCSP_single_get0_status(OCSP_SINGLERESP * single, int* reason, ASN1_GENERALIZEDTIME * *revtime, ASN1_GENERALIZEDTIME * *thisupd, ASN1_GENERALIZEDTIME * *nextupd);
int OCSP_resp_find_status(OCSP_BASICRESP * bs, OCSP_CERTID * id, int* status, int* reason, ASN1_GENERALIZEDTIME * *revtime, ASN1_GENERALIZEDTIME * *thisupd, ASN1_GENERALIZEDTIME * *nextupd);
int OCSP_check_validity(ASN1_GENERALIZEDTIME * thisupd, ASN1_GENERALIZEDTIME * nextupd, long sec, long maxsec);
int OCSP_id_issuer_cmp(const OCSP_CERTID * a, const OCSP_CERTID * b);
int OCSP_id_cmp(const OCSP_CERTID * a, const OCSP_CERTID * b);
int OCSP_request_onereq_count(OCSP_REQUEST * req);
int OCSP_id_get0_info(ASN1_OCTET_STRING * *piNameHash, ASN1_OBJECT * *pmd, ASN1_OCTET_STRING * *pikeyHash, ASN1_INTEGER * *pserial, OCSP_CERTID * cid);
int OCSP_request_is_signed(OCSP_REQUEST * req);
int OCSP_basic_add1_cert(OCSP_BASICRESP * resp, X509 * cert);
int OCSP_RESPID_set_by_name(OCSP_RESPID * respid, X509 * cert);
int OCSP_RESPID_set_by_key_ex(OCSP_RESPID * respid, X509 * cert, OSSL_LIB_CTX * libctx, const char* propq);
int OCSP_RESPID_set_by_key(OCSP_RESPID * respid, X509 * cert);
int OCSP_RESPID_match_ex(OCSP_RESPID * respid, X509 * cert, OSSL_LIB_CTX * libctx, const char* propq);
int OCSP_RESPID_match(OCSP_RESPID * respid, X509 * cert);
int OCSP_REQUEST_get_ext_count(OCSP_REQUEST * x);
int OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST * x, int nid, int lastpos);
int OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST * x, const ASN1_OBJECT * obj, int lastpos);
int OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST * x, int crit, int lastpos);
int OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST * x, int nid, void* value, int crit, unsigned long flags);
int OCSP_REQUEST_add_ext(OCSP_REQUEST * x, X509_EXTENSION * ex, int loc);
int OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ * x);
int OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ * x, int nid, int lastpos);
int OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ * x, const ASN1_OBJECT * obj, int lastpos);
int OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ * x, int crit, int lastpos);
int OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ * x, int nid, void* value, int crit, unsigned long flags);
int OCSP_ONEREQ_add_ext(OCSP_ONEREQ * x, X509_EXTENSION * ex, int loc);
int OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP * x);
int OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP * x, int nid, int lastpos);
int OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP * x, const ASN1_OBJECT * obj, int lastpos);
int OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP * x, int crit, int lastpos);
int OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP * x, int nid, void* value, int crit, unsigned long flags);
int OCSP_BASICRESP_add_ext(OCSP_BASICRESP * x, X509_EXTENSION * ex, int loc);
int OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP * x);
int OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP * x, int nid, int lastpos);
int OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP * x, const ASN1_OBJECT * obj, int lastpos);
int OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP * x, int crit, int lastpos);
int OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP * x, int nid, void* value, int crit, unsigned long flags);
int OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP * x, X509_EXTENSION * ex, int loc);
int OCSP_REQUEST_print(BIO * bp, OCSP_REQUEST * a, unsigned long flags);
int OCSP_RESPONSE_print(BIO * bp, OCSP_RESPONSE * o, unsigned long flags);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

OSSL_PARAM OSSL_PARAM_construct_int(const char* key, int* buf);
OSSL_PARAM OSSL_PARAM_construct_uint(const char* key, unsigned int* buf);
OSSL_PARAM OSSL_PARAM_construct_long(const char* key, long int* buf);
OSSL_PARAM OSSL_PARAM_construct_ulong(const char* key, unsigned long int* buf);
OSSL_PARAM OSSL_PARAM_construct_int32(const char* key, int32_t * buf);
OSSL_PARAM OSSL_PARAM_construct_uint32(const char* key, uint32_t * buf);
OSSL_PARAM OSSL_PARAM_construct_int64(const char* key, int64_t * buf);
OSSL_PARAM OSSL_PARAM_construct_uint64(const char* key, uint64_t * buf);
OSSL_PARAM OSSL_PARAM_construct_size_t(const char* key, size_t * buf);
OSSL_PARAM OSSL_PARAM_construct_time_t(const char* key, time_t * buf);
OSSL_PARAM OSSL_PARAM_construct_BN(const char* key, unsigned char* buf, size_t bsize);
OSSL_PARAM OSSL_PARAM_construct_double(const char* key, double* buf);
OSSL_PARAM OSSL_PARAM_construct_utf8_string(const char* key, char* buf, size_t bsize);
OSSL_PARAM OSSL_PARAM_construct_utf8_ptr(const char* key, char** buf, size_t bsize);
OSSL_PARAM OSSL_PARAM_construct_octet_string(const char* key, void* buf, size_t bsize);
OSSL_PARAM OSSL_PARAM_construct_octet_ptr(const char* key, void** buf, size_t bsize);
OSSL_PARAM OSSL_PARAM_construct_end(void);
int OSSL_PARAM_allocate_from_text(OSSL_PARAM * to, const OSSL_PARAM * paramdefs, const char* key, const char* value, size_t value_n, int* found);
int OSSL_PARAM_get_int(const OSSL_PARAM * p, int* val);
int OSSL_PARAM_get_uint(const OSSL_PARAM * p, unsigned int* val);
int OSSL_PARAM_get_long(const OSSL_PARAM * p, long int* val);
int OSSL_PARAM_get_ulong(const OSSL_PARAM * p, unsigned long int* val);
int OSSL_PARAM_get_int32(const OSSL_PARAM * p, int32_t * val);
int OSSL_PARAM_get_uint32(const OSSL_PARAM * p, uint32_t * val);
int OSSL_PARAM_get_int64(const OSSL_PARAM * p, int64_t * val);
int OSSL_PARAM_get_uint64(const OSSL_PARAM * p, uint64_t * val);
int OSSL_PARAM_get_size_t(const OSSL_PARAM * p, size_t * val);
int OSSL_PARAM_get_time_t(const OSSL_PARAM * p, time_t * val);
int OSSL_PARAM_set_int(OSSL_PARAM * p, int val);
int OSSL_PARAM_set_uint(OSSL_PARAM * p, unsigned int val);
int OSSL_PARAM_set_long(OSSL_PARAM * p, long int val);
int OSSL_PARAM_set_ulong(OSSL_PARAM * p, unsigned long int val);
int OSSL_PARAM_set_int32(OSSL_PARAM * p, int32_t val);
int OSSL_PARAM_set_uint32(OSSL_PARAM * p, uint32_t val);
int OSSL_PARAM_set_int64(OSSL_PARAM * p, int64_t val);
int OSSL_PARAM_set_uint64(OSSL_PARAM * p, uint64_t val);
int OSSL_PARAM_set_size_t(OSSL_PARAM * p, size_t val);
int OSSL_PARAM_set_time_t(OSSL_PARAM * p, time_t val);
int OSSL_PARAM_get_double(const OSSL_PARAM * p, double* val);
int OSSL_PARAM_set_double(OSSL_PARAM * p, double val);
int OSSL_PARAM_get_BN(const OSSL_PARAM * p, BIGNUM * *val);
int OSSL_PARAM_set_BN(OSSL_PARAM * p, const BIGNUM * val);
int OSSL_PARAM_get_utf8_string(const OSSL_PARAM * p, char** val, size_t max_len);
int OSSL_PARAM_set_utf8_string(OSSL_PARAM * p, const char* val);
int OSSL_PARAM_get_octet_string(const OSSL_PARAM * p, void** val, size_t max_len, size_t * used_len);
int OSSL_PARAM_set_octet_string(OSSL_PARAM * p, const void* val, size_t len);
int OSSL_PARAM_get_utf8_ptr(const OSSL_PARAM * p, const char** val);
int OSSL_PARAM_set_utf8_ptr(OSSL_PARAM * p, const char* val);
int OSSL_PARAM_get_octet_ptr(const OSSL_PARAM * p, const void** val, size_t * used_len);
int OSSL_PARAM_set_octet_ptr(OSSL_PARAM * p, const void* val, size_t used_len);
int OSSL_PARAM_get_utf8_string_ptr(const OSSL_PARAM * p, const char** val);
int OSSL_PARAM_get_octet_string_ptr(const OSSL_PARAM * p, const void** val, size_t * used_len);
int OSSL_PARAM_modified(const OSSL_PARAM * p);
void OSSL_PARAM_set_all_unmodified(OSSL_PARAM * p);
void OSSL_PARAM_free(OSSL_PARAM * p);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void OSSL_PARAM_BLD_free(OSSL_PARAM_BLD * bld);
int OSSL_PARAM_BLD_push_int(OSSL_PARAM_BLD * bld, const char* key, int val);
int OSSL_PARAM_BLD_push_uint(OSSL_PARAM_BLD * bld, const char* key, unsigned int val);
int OSSL_PARAM_BLD_push_long(OSSL_PARAM_BLD * bld, const char* key, long int val);
int OSSL_PARAM_BLD_push_ulong(OSSL_PARAM_BLD * bld, const char* key, unsigned long int val);
int OSSL_PARAM_BLD_push_int32(OSSL_PARAM_BLD * bld, const char* key, int32_t val);
int OSSL_PARAM_BLD_push_uint32(OSSL_PARAM_BLD * bld, const char* key, uint32_t val);
int OSSL_PARAM_BLD_push_int64(OSSL_PARAM_BLD * bld, const char* key, int64_t val);
int OSSL_PARAM_BLD_push_uint64(OSSL_PARAM_BLD * bld, const char* key, uint64_t val);
int OSSL_PARAM_BLD_push_size_t(OSSL_PARAM_BLD * bld, const char* key, size_t val);
int OSSL_PARAM_BLD_push_time_t(OSSL_PARAM_BLD * bld, const char* key, time_t val);
int OSSL_PARAM_BLD_push_double(OSSL_PARAM_BLD * bld, const char* key, double val);
int OSSL_PARAM_BLD_push_BN(OSSL_PARAM_BLD * bld, const char* key, const BIGNUM * bn);
int OSSL_PARAM_BLD_push_BN_pad(OSSL_PARAM_BLD * bld, const char* key, const BIGNUM * bn, size_t sz);
int OSSL_PARAM_BLD_push_utf8_string(OSSL_PARAM_BLD * bld, const char* key, const char* buf, size_t bsize);
int OSSL_PARAM_BLD_push_utf8_ptr(OSSL_PARAM_BLD * bld, const char* key, char* buf, size_t bsize);
int OSSL_PARAM_BLD_push_octet_string(OSSL_PARAM_BLD * bld, const char* key, const void* buf, size_t bsize);
int OSSL_PARAM_BLD_push_octet_ptr(OSSL_PARAM_BLD * bld, const char* key, void* buf, size_t bsize);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

attr PEM_read_cb_fnsig(void);
attr PEM_read_cb_fnsig(void);
attr PEM_read_cb_ex_fnsig(void);
attr PEM_write_fnsig(void);
attr PEM_write_fnsig(void);
attr PEM_write_ex_fnsig(void);
attr PEM_write_fnsig(void);
attr PEM_write_cb_fnsig(void);
attr PEM_write_cb_fnsig(void);
attr PEM_write_cb_ex_fnsig(void);
attr PEM_read_cb_fnsig(void);
attr PEM_read_cb_fnsig(void);
attr PEM_read_cb_ex_fnsig(void);
attr PEM_write_fnsig(void);
attr PEM_write_fnsig(void);
attr PEM_write_ex_fnsig(void);
attr PEM_write_fnsig(void);
attr PEM_write_cb_fnsig(void);
attr PEM_write_cb_fnsig(void);
attr PEM_write_cb_ex_fnsig(void);
int PEM_get_EVP_CIPHER_INFO(char* header, EVP_CIPHER_INFO * cipher);
int PEM_do_header(EVP_CIPHER_INFO * cipher, unsigned char* data, long* len, pem_password_cb * callback, void* u);
int PEM_read_bio(BIO * bp, char** name, char** header, unsigned char** data, long* len);
define PEM_FLAG_ONLY_B64           0x4
int PEM_read_bio_ex(BIO * bp, char** name, char** header, unsigned char** data, long* len, unsigned int flags);
int PEM_bytes_read_bio_secmem(unsigned char** pdata, long* plen, char** pnm, const char* name, BIO * bp, pem_password_cb * cb, void* u);
int PEM_write_bio(BIO * bp, const char* name, const char* hdr, const unsigned char* data, long len);
int PEM_bytes_read_bio(unsigned char** pdata, long* plen, char** pnm, const char* name, BIO * bp, pem_password_cb * cb, void* u);
int PEM_ASN1_write_bio(i2d_of_void * i2d, const char* name, BIO * bp, const void* x, const EVP_CIPHER * enc, const unsigned char* kstr, int klen, pem_password_cb * cb, void* u);
int PEM_X509_INFO_write_bio(BIO * bp, const X509_INFO * xi, EVP_CIPHER * enc, const unsigned char* kstr, int klen, pem_password_cb * cd, void* u);
ifndef OPENSSL_NO_STDIO
int PEM_read(FILE * fp, char** name, char** header, unsigned char** data, long* len);
int PEM_write(FILE * fp, const char* name, const char* hdr, const unsigned char* data, long len);
int PEM_ASN1_write(i2d_of_void * i2d, const char* name, FILE * fp, const void* x, const EVP_CIPHER * enc, const unsigned char* kstr, int klen, pem_password_cb * callback, void* u);
endif

int PEM_SignInit(EVP_MD_CTX * ctx, EVP_MD * type);
int PEM_SignUpdate(EVP_MD_CTX * ctx, const unsigned char* d, unsigned int cnt);
int PEM_SignFinal(EVP_MD_CTX * ctx, unsigned char* sigret, unsigned int* siglen, EVP_PKEY * pkey);
int PEM_def_callback(char* buf, int num, int rwflag, void* userdata);
void PEM_proc_type(char* buf, int type);
void PEM_dek_info(char* buf, const char* type, int len, const char* str);
int PEM_write_bio_PrivateKey_traditional(BIO * bp, const EVP_PKEY * x, const EVP_CIPHER * enc, const unsigned char* kstr, int klen, pem_password_cb * cb, void* u);
int PEM_write_bio_PKCS8PrivateKey_nid(BIO * bp, const EVP_PKEY * x, int nid, const char* kstr, int klen, pem_password_cb * cb, void* u);
int PEM_write_bio_PKCS8PrivateKey(BIO*, const EVP_PKEY*, const EVP_CIPHER*, const char* kstr, int klen, pem_password_cb * cb, void* u);
int i2d_PKCS8PrivateKey_bio(BIO * bp, const EVP_PKEY * x, const EVP_CIPHER * enc, const char* kstr, int klen, pem_password_cb * cb, void* u);
int i2d_PKCS8PrivateKey_nid_bio(BIO * bp, const EVP_PKEY * x, int nid, const char* kstr, int klen, pem_password_cb * cb, void* u);
ifndef OPENSSL_NO_STDIO
int i2d_PKCS8PrivateKey_fp(FILE * fp, const EVP_PKEY * x, const EVP_CIPHER * enc, const char* kstr, int klen, pem_password_cb * cb, void* u);
int i2d_PKCS8PrivateKey_nid_fp(FILE * fp, const EVP_PKEY * x, int nid, const char* kstr, int klen, pem_password_cb * cb, void* u);
int PEM_write_PKCS8PrivateKey_nid(FILE * fp, const EVP_PKEY * x, int nid, const char* kstr, int klen, pem_password_cb * cb, void* u);
int PEM_write_PKCS8PrivateKey(FILE * fp, const EVP_PKEY * x, const EVP_CIPHER * enc, const char* kstr, int klen, pem_password_cb * cd, void* u);
int PEM_write_bio_Parameters(BIO * bp, const EVP_PKEY * x);
int i2b_PrivateKey_bio(BIO * out, const EVP_PKEY * pk);
int i2b_PublicKey_bio(BIO * out, const EVP_PKEY * pk);
int i2b_PVK_bio(BIO * out, const EVP_PKEY * pk, int enclevel, pem_password_cb * cb, void* u);
int i2b_PVK_bio_ex(BIO * out, const EVP_PKEY * pk, int enclevel, pem_password_cb * cb, void* u, OSSL_LIB_CTX * libctx, const char* propq);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int PKCS12_mac_present(const PKCS12 * p12);
void PKCS12_get0_mac(const ASN1_OCTET_STRING * *pmac, const X509_ALGOR * *pmacalg, const ASN1_OCTET_STRING * *psalt, const ASN1_INTEGER * *piter, const PKCS12 * p12);
int PKCS12_SAFEBAG_get_nid(const PKCS12_SAFEBAG * bag);
int PKCS12_SAFEBAG_get_bag_nid(const PKCS12_SAFEBAG * bag);
int PKCS12_add_localkeyid(PKCS12_SAFEBAG * bag, unsigned char* name, int namelen);
int PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG * bag, const char* name, int namelen);
int PKCS12_add_friendlyname_utf8(PKCS12_SAFEBAG * bag, const char* name, int namelen);
int PKCS12_add_CSPName_asc(PKCS12_SAFEBAG * bag, const char* name, int namelen);
int PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG * bag, const unsigned char* name, int namelen);
int PKCS12_add1_attr_by_NID(PKCS12_SAFEBAG * bag, int nid, int type, const unsigned char* bytes, int len);
int PKCS12_add1_attr_by_txt(PKCS12_SAFEBAG * bag, const char* attrname, int type, const unsigned char* bytes, int len);
int PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO * p8, int usage);
int PKCS12_key_gen_asc(const char* pass, int passlen, unsigned char* salt, int saltlen, int id, int iter, int n, unsigned char* out, const EVP_MD * md_type);
int PKCS12_key_gen_asc_ex(const char* pass, int passlen, unsigned char* salt, int saltlen, int id, int iter, int n, unsigned char* out, const EVP_MD * md_type, OSSL_LIB_CTX * ctx, const char* propq);
int PKCS12_key_gen_uni(unsigned char* pass, int passlen, unsigned char* salt, int saltlen, int id, int iter, int n, unsigned char* out, const EVP_MD * md_type);
int PKCS12_key_gen_uni_ex(unsigned char* pass, int passlen, unsigned char* salt, int saltlen, int id, int iter, int n, unsigned char* out, const EVP_MD * md_type, OSSL_LIB_CTX * ctx, const char* propq);
int PKCS12_key_gen_utf8(const char* pass, int passlen, unsigned char* salt, int saltlen, int id, int iter, int n, unsigned char* out, const EVP_MD * md_type);
int PKCS12_key_gen_utf8_ex(const char* pass, int passlen, unsigned char* salt, int saltlen, int id, int iter, int n, unsigned char* out, const EVP_MD * md_type, OSSL_LIB_CTX * ctx, const char* propq);
int PKCS12_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char* pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md_type, int en_de);
int PKCS12_PBE_keyivgen_ex(EVP_CIPHER_CTX * ctx, const char* pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md_type, int en_de, OSSL_LIB_CTX * libctx, const char* propq);
int PKCS12_gen_mac(PKCS12 * p12, const char* pass, int passlen, unsigned char* mac, unsigned int* maclen);
int PKCS12_verify_mac(PKCS12 * p12, const char* pass, int passlen);
int PKCS12_set_mac(PKCS12 * p12, const char* pass, int passlen, unsigned char* salt, int saltlen, int iter, const EVP_MD * md_type);
int PKCS12_setup_mac(PKCS12 * p12, int iter, unsigned char* salt, int saltlen, const EVP_MD * md_type);
void PKCS12_PBE_add(void);
typedef int PKCS12_create_cb(PKCS12_SAFEBAG* bag, void* cbarg);
int i2d_PKCS12_bio(BIO * bp, const PKCS12 * p12);
ifndef OPENSSL_NO_STDIO
int i2d_PKCS12_fp(FILE * fp, const PKCS12 * p12);
endif
int PKCS12_newpass(PKCS12 * p12, const char* oldpass, const char* newpass);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL * data, const EVP_MD * type, unsigned char* md, unsigned int* len);
int i2d_PKCS7_fp(FILE * fp, const PKCS7 * p7);
int i2d_PKCS7_bio(BIO * bp, const PKCS7 * p7);
int i2d_PKCS7_bio_stream(BIO * out, PKCS7 * p7, BIO * in, int flags);
int PEM_write_bio_PKCS7_stream(BIO * out, PKCS7 * p7, BIO * in, int flags);
long PKCS7_ctrl(PKCS7 * p7, int cmd, long larg, char* parg);
int PKCS7_type_is_other(PKCS7 * p7);
int PKCS7_set_type(PKCS7 * p7, int type);
int PKCS7_set0_type_other(PKCS7 * p7, int type, ASN1_TYPE * other);
int PKCS7_set_content(PKCS7 * p7, PKCS7 * p7_data);
int PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO * p7i, X509 * x509, EVP_PKEY * pkey, const EVP_MD * dgst);
int PKCS7_SIGNER_INFO_sign(PKCS7_SIGNER_INFO * si);
int PKCS7_add_signer(PKCS7 * p7, PKCS7_SIGNER_INFO * p7i);
int PKCS7_add_certificate(PKCS7 * p7, X509 * cert);
int PKCS7_add_crl(PKCS7 * p7, X509_CRL * crl);
int PKCS7_content_new(PKCS7 * p7, int nid);
int PKCS7_dataVerify(X509_STORE * cert_store, X509_STORE_CTX * ctx, BIO * bio, PKCS7 * p7, PKCS7_SIGNER_INFO * si);
int PKCS7_signatureVerify(BIO * bio, PKCS7 * p7, PKCS7_SIGNER_INFO * si, X509 * signer);
int PKCS7_dataFinal(PKCS7 * p7, BIO * bio);
int PKCS7_set_digest(PKCS7 * p7, const EVP_MD * md);
void PKCS7_SIGNER_INFO_get0_algs(PKCS7_SIGNER_INFO * si, EVP_PKEY * *pk, X509_ALGOR * *pdig, X509_ALGOR * *psig);
void PKCS7_RECIP_INFO_get0_alg(PKCS7_RECIP_INFO * ri, X509_ALGOR * *penc);
int PKCS7_add_recipient_info(PKCS7 * p7, PKCS7_RECIP_INFO * ri);
int PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO * p7i, X509 * x509);
int PKCS7_set_cipher(PKCS7 * p7, const EVP_CIPHER * cipher);
int PKCS7_stream(unsigned char*** boundary, PKCS7 * p7);
int PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO * p7si, int nid, int type, void* data);
int PKCS7_add_attribute(PKCS7_SIGNER_INFO * p7si, int nid, int atrtype, void* value);
int PKCS7_final(PKCS7 * p7, BIO * data, int flags);
int PKCS7_decrypt(PKCS7 * p7, EVP_PKEY * pkey, X509 * cert, BIO * data, int flags);
int PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO * si, ASN1_OBJECT * coid);
int PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO * si, ASN1_TIME * t);
int PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO * si, const unsigned char* md, int mdlen);
int SMIME_write_PKCS7(BIO * bio, PKCS7 * p7, BIO * data, int flags);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int OSSL_PROVIDER_set_default_search_path(OSSL_LIB_CTX*, const char* path);
int OSSL_PROVIDER_unload(OSSL_PROVIDER * prov);
int OSSL_PROVIDER_available(OSSL_LIB_CTX*, const char* name);
int OSSL_PROVIDER_get_params(const OSSL_PROVIDER * prov, OSSL_PARAM params[]);
int OSSL_PROVIDER_self_test(const OSSL_PROVIDER * prov);
int OSSL_PROVIDER_get_capabilities(const OSSL_PROVIDER * prov, const char* capability, OSSL_CALLBACK * cb, void* arg);
void OSSL_PROVIDER_unquery_operation(const OSSL_PROVIDER * prov, int operation_id, const OSSL_ALGORITHM * algs);
int OSSL_PROVIDER_add_builtin(OSSL_LIB_CTX*, const char* name, OSSL_provider_init_fn * init_fn);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

OSSL_DEPRECATEDIN_3_0 int RAND_set_rand_method(const RAND_METHOD * meth);
ifndef OPENSSL_NO_ENGINE
OSSL_DEPRECATEDIN_3_0 int RAND_set_rand_engine(ENGINE * engine);
endif
int RAND_bytes(unsigned char* buf, int num);
int RAND_priv_bytes(unsigned char* buf, int num);
int RAND_priv_bytes_ex(OSSL_LIB_CTX * ctx, unsigned char* buf, size_t num, unsigned int strength);
int RAND_bytes_ex(OSSL_LIB_CTX * ctx, unsigned char* buf, size_t num, unsigned int strength);
ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 int RAND_pseudo_bytes(unsigned char* buf, int num);
int RAND_set0_public(OSSL_LIB_CTX * ctx, EVP_RAND_CTX * rand);
int RAND_set0_private(OSSL_LIB_CTX * ctx, EVP_RAND_CTX * rand);
int RAND_set_DRBG_type(OSSL_LIB_CTX * ctx, const char* drbg, const char* propq, const char* cipher, const char* digest);
int RAND_set_seed_source_type(OSSL_LIB_CTX * ctx, const char* seed, const char* propq);
void RAND_seed(const void* buf, int num);
void RAND_keep_random_devices_open(int keep);
endif
void RAND_add(const void* buf, int num, double randomness);
int RAND_load_file(const char* file, long max_bytes);
int RAND_write_file(const char* file);
int RAND_status(void);
ifndef OPENSSL_NO_EGD
int RAND_query_egd_bytes(const char* path, unsigned char* buf, int bytes);
int RAND_egd(const char* path);
int RAND_egd_bytes(const char* path, int bytes);
endif

int RAND_poll(void);
ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 void RAND_screen(void);
OSSL_DEPRECATEDIN_1_1_0 int RAND_event(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 void RC2_set_key(RC2_KEY * key, int len, const unsigned char* data, int bits);
OSSL_DEPRECATEDIN_3_0 void RC2_ecb_encrypt(const unsigned char* in, unsigned char* out, RC2_KEY * key, int enc);
OSSL_DEPRECATEDIN_3_0 void RC2_encrypt(unsigned long* data, RC2_KEY * key);
OSSL_DEPRECATEDIN_3_0 void RC2_decrypt(unsigned long* data, RC2_KEY * key);
OSSL_DEPRECATEDIN_3_0 void RC2_cbc_encrypt(const unsigned char* in, unsigned char* out, long length, RC2_KEY * ks, unsigned char* iv, int enc);
OSSL_DEPRECATEDIN_3_0 void RC2_cfb64_encrypt(const unsigned char* in, unsigned char* out, long length, RC2_KEY * schedule, unsigned char* ivec, int* num, int enc);
OSSL_DEPRECATEDIN_3_0 void RC2_ofb64_encrypt(const unsigned char* in, unsigned char* out, long length, RC2_KEY * schedule, unsigned char* ivec, int* num);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

OSSL_DEPRECATEDIN_3_0 void RC4_set_key(RC4_KEY * key, int len, const unsigned char* data);
OSSL_DEPRECATEDIN_3_0 void RC4(RC4_KEY * key, size_t len, const unsigned char* indata, unsigned char* outdata);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int RC5_32_set_key(RC5_32_KEY * key, int len, const unsigned char* data, int rounds);
OSSL_DEPRECATEDIN_3_0 void RC5_32_ecb_encrypt(const unsigned char* in, unsigned char* out, RC5_32_KEY * key, int enc);
OSSL_DEPRECATEDIN_3_0 void RC5_32_encrypt(unsigned long* data, RC5_32_KEY * key);
OSSL_DEPRECATEDIN_3_0 void RC5_32_decrypt(unsigned long* data, RC5_32_KEY * key);
OSSL_DEPRECATEDIN_3_0 void RC5_32_cbc_encrypt(const unsigned char* in, unsigned char* out, long length, RC5_32_KEY * ks, unsigned char* iv, int enc);
OSSL_DEPRECATEDIN_3_0 void RC5_32_cfb64_encrypt(const unsigned char* in, unsigned char* out, long length, RC5_32_KEY * schedule, unsigned char* ivec, int* num, int enc);
OSSL_DEPRECATEDIN_3_0 void RC5_32_ofb64_encrypt(const unsigned char* in, unsigned char* out, long length, RC5_32_KEY * schedule, unsigned char* ivec, int* num);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int RIPEMD160_Init(RIPEMD160_CTX * c);
OSSL_DEPRECATEDIN_3_0 int RIPEMD160_Update(RIPEMD160_CTX * c, const void* data, size_t len);
OSSL_DEPRECATEDIN_3_0 int RIPEMD160_Final(unsigned char* md, RIPEMD160_CTX * c);
OSSL_DEPRECATEDIN_3_0 void RIPEMD160_Transform(RIPEMD160_CTX * c, const unsigned char* b);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

define RSA_FLAG_TYPE_RSAESOAEP       0x2000

int EVP_PKEY_CTX_set_rsa_padding(EVP_PKEY_CTX * ctx, int pad_mode);
int EVP_PKEY_CTX_get_rsa_padding(EVP_PKEY_CTX * ctx, int* pad_mode);
int EVP_PKEY_CTX_set_rsa_pss_saltlen(EVP_PKEY_CTX * ctx, int saltlen);
int EVP_PKEY_CTX_get_rsa_pss_saltlen(EVP_PKEY_CTX * ctx, int* saltlen);
int EVP_PKEY_CTX_set_rsa_keygen_bits(EVP_PKEY_CTX * ctx, int bits);
int EVP_PKEY_CTX_set1_rsa_keygen_pubexp(EVP_PKEY_CTX * ctx, BIGNUM * pubexp);
int EVP_PKEY_CTX_set_rsa_keygen_primes(EVP_PKEY_CTX * ctx, int primes);
int EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(EVP_PKEY_CTX * ctx, int saltlen);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
int EVP_PKEY_CTX_set_rsa_keygen_pubexp(EVP_PKEY_CTX * ctx, BIGNUM * pubexp);
2

int EVP_PKEY_CTX_set_rsa_mgf1_md(EVP_PKEY_CTX * ctx, const EVP_MD * md);
int EVP_PKEY_CTX_set_rsa_mgf1_md_name(EVP_PKEY_CTX * ctx, const char* mdname, const char* mdprops);
int EVP_PKEY_CTX_get_rsa_mgf1_md(EVP_PKEY_CTX * ctx, const EVP_MD * *md);
int EVP_PKEY_CTX_get_rsa_mgf1_md_name(EVP_PKEY_CTX * ctx, char* name, size_t namelen);
int EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(EVP_PKEY_CTX * ctx, const EVP_MD * md);
int EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_name(EVP_PKEY_CTX * ctx, const char* mdname);
int EVP_PKEY_CTX_set_rsa_pss_keygen_md(EVP_PKEY_CTX * ctx, const EVP_MD * md);
int EVP_PKEY_CTX_set_rsa_pss_keygen_md_name(EVP_PKEY_CTX * ctx, const char* mdname, const char* mdprops);
int EVP_PKEY_CTX_set_rsa_oaep_md(EVP_PKEY_CTX * ctx, const EVP_MD * md);
int EVP_PKEY_CTX_set_rsa_oaep_md_name(EVP_PKEY_CTX * ctx, const char* mdname, const char* mdprops);
int EVP_PKEY_CTX_get_rsa_oaep_md(EVP_PKEY_CTX * ctx, const EVP_MD * *md);
int EVP_PKEY_CTX_get_rsa_oaep_md_name(EVP_PKEY_CTX * ctx, char* name, size_t namelen);
int EVP_PKEY_CTX_set0_rsa_oaep_label(EVP_PKEY_CTX * ctx, void* label, int llen);
int EVP_PKEY_CTX_get0_rsa_oaep_label(EVP_PKEY_CTX * ctx, unsigned char** label);
OSSL_DEPRECATEDIN_3_0 int RSA_bits(const RSA * rsa);
OSSL_DEPRECATEDIN_3_0 int RSA_size(const RSA * rsa);
OSSL_DEPRECATEDIN_3_0 int RSA_security_bits(const RSA * rsa);
OSSL_DEPRECATEDIN_3_0 int RSA_set0_key(RSA * r, BIGNUM * n, BIGNUM * e, BIGNUM * d);
OSSL_DEPRECATEDIN_3_0 int RSA_set0_factors(RSA * r, BIGNUM * p, BIGNUM * q);
OSSL_DEPRECATEDIN_3_0 int RSA_set0_crt_params(RSA * r, BIGNUM * dmp1, BIGNUM * dmq1, BIGNUM * iqmp);
OSSL_DEPRECATEDIN_3_0 int RSA_set0_multi_prime_params(RSA * r, BIGNUM * primes[], BIGNUM * exps[], BIGNUM * coeffs[], int pnum);
OSSL_DEPRECATEDIN_3_0 void RSA_get0_key(const RSA * r, const BIGNUM * *n, const BIGNUM * *e, const BIGNUM * *d);
OSSL_DEPRECATEDIN_3_0 void RSA_get0_factors(const RSA * r, const BIGNUM * *p, const BIGNUM * *q);
OSSL_DEPRECATEDIN_3_0 int RSA_get_multi_prime_extra_count(const RSA * r);
OSSL_DEPRECATEDIN_3_0 int RSA_get0_multi_prime_factors(const RSA * r, const BIGNUM * primes[]);
OSSL_DEPRECATEDIN_3_0 void RSA_get0_crt_params(const RSA * r, const BIGNUM * *dmp1, const BIGNUM * *dmq1, const BIGNUM * *iqmp);
OSSL_DEPRECATEDIN_3_0
int RSA_get0_multi_prime_crt_params(const RSA * r, const BIGNUM * exps[], const BIGNUM * coeffs[]);
OSSL_DEPRECATEDIN_3_0 void RSA_clear_flags(RSA * r, int flags);
OSSL_DEPRECATEDIN_3_0 int RSA_test_flags(const RSA * r, int flags);
OSSL_DEPRECATEDIN_3_0 void RSA_set_flags(RSA * r, int flags);
OSSL_DEPRECATEDIN_3_0 int RSA_get_version(RSA * r);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int RSA_generate_key_ex(RSA * rsa, int bits, BIGNUM * e, BN_GENCB * cb);
OSSL_DEPRECATEDIN_3_0 int RSA_generate_multi_prime_key(RSA * rsa, int bits, int primes, BIGNUM * e, BN_GENCB * cb);
OSSL_DEPRECATEDIN_3_0
int RSA_X931_derive_ex(RSA * rsa, BIGNUM * p1, BIGNUM * p2, BIGNUM * q1, BIGNUM * q2, const BIGNUM * Xp1, const BIGNUM * Xp2, const BIGNUM * Xp, const BIGNUM * Xq1, const BIGNUM * Xq2, const BIGNUM * Xq, const BIGNUM * e, BN_GENCB * cb);
OSSL_DEPRECATEDIN_3_0 int RSA_X931_generate_key_ex(RSA * rsa, int bits, const BIGNUM * e, BN_GENCB * cb);
OSSL_DEPRECATEDIN_3_0 int RSA_check_key(const RSA*);
OSSL_DEPRECATEDIN_3_0 int RSA_check_key_ex(const RSA*, BN_GENCB * cb);
OSSL_DEPRECATEDIN_3_0
int RSA_public_encrypt(int flen, const unsigned char* from, unsigned char* to, RSA * rsa, int padding);
OSSL_DEPRECATEDIN_3_0
int RSA_private_encrypt(int flen, const unsigned char* from, unsigned char* to, RSA * rsa, int padding);
OSSL_DEPRECATEDIN_3_0
int RSA_public_decrypt(int flen, const unsigned char* from, unsigned char* to, RSA * rsa, int padding);
OSSL_DEPRECATEDIN_3_0
int RSA_private_decrypt(int flen, const unsigned char* from, unsigned char* to, RSA * rsa, int padding);
OSSL_DEPRECATEDIN_3_0 void RSA_free(RSA * r);
OSSL_DEPRECATEDIN_3_0 int RSA_up_ref(RSA * r);
OSSL_DEPRECATEDIN_3_0 int RSA_flags(const RSA * r);
OSSL_DEPRECATEDIN_3_0 void RSA_set_default_method(const RSA_METHOD * meth);
OSSL_DEPRECATEDIN_3_0 int RSA_set_method(RSA * rsa, const RSA_METHOD * meth);
int RSA_pkey_ctx_ctrl(EVP_PKEY_CTX * ctx, int optype, int cmd, int p1, void* p2);
ifndef OPENSSL_NO_STDIO
OSSL_DEPRECATEDIN_3_0 int RSA_print_fp(FILE * fp, const RSA * r, int offset);
endif

OSSL_DEPRECATEDIN_3_0 int RSA_print(BIO * bp, const RSA * r, int offset);
OSSL_DEPRECATEDIN_3_0 int RSA_sign(int type, const unsigned char* m, unsigned int m_length, unsigned char* sigret, unsigned int* siglen, RSA * rsa);
OSSL_DEPRECATEDIN_3_0 int RSA_verify(int type, const unsigned char* m, unsigned int m_length, const unsigned char* sigbuf, unsigned int siglen, RSA * rsa);
OSSL_DEPRECATEDIN_3_0
int RSA_sign_ASN1_OCTET_STRING(int type, const unsigned char* m, unsigned int m_length, unsigned char* sigret, unsigned int* siglen, RSA * rsa);
OSSL_DEPRECATEDIN_3_0
int RSA_verify_ASN1_OCTET_STRING(int type, const unsigned char* m, unsigned int m_length, unsigned char* sigbuf, unsigned int siglen, RSA * rsa);
OSSL_DEPRECATEDIN_3_0 int RSA_blinding_on(RSA * rsa, BN_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 void RSA_blinding_off(RSA * rsa);
OSSL_DEPRECATEDIN_3_0
int RSA_padding_add_PKCS1_type_1(unsigned char* to, int tlen, const unsigned char* f, int fl);
OSSL_DEPRECATEDIN_3_0
int RSA_padding_check_PKCS1_type_1(unsigned char* to, int tlen, const unsigned char* f, int fl, int rsa_len);
OSSL_DEPRECATEDIN_3_0
int RSA_padding_add_PKCS1_type_2(unsigned char* to, int tlen, const unsigned char* f, int fl);
OSSL_DEPRECATEDIN_3_0
int RSA_padding_check_PKCS1_type_2(unsigned char* to, int tlen, const unsigned char* f, int fl, int rsa_len);
OSSL_DEPRECATEDIN_3_0 int PKCS1_MGF1(unsigned char* mask, long len, const unsigned char* seed, long seedlen, const EVP_MD * dgst);
OSSL_DEPRECATEDIN_3_0
int RSA_padding_add_PKCS1_OAEP(unsigned char* to, int tlen, const unsigned char* f, int fl, const unsigned char* p, int pl);
OSSL_DEPRECATEDIN_3_0
int RSA_padding_check_PKCS1_OAEP(unsigned char* to, int tlen, const unsigned char* f, int fl, int rsa_len, const unsigned char* p, int pl);
OSSL_DEPRECATEDIN_3_0
int RSA_padding_add_PKCS1_OAEP_mgf1(unsigned char* to, int tlen, const unsigned char* from, int flen, const unsigned char* param, int plen, const EVP_MD * md, const EVP_MD * mgf1md);
OSSL_DEPRECATEDIN_3_0
int RSA_padding_check_PKCS1_OAEP_mgf1(unsigned char* to, int tlen, const unsigned char* from, int flen, int num, const unsigned char* param, int plen, const EVP_MD * md, const EVP_MD * mgf1md);
OSSL_DEPRECATEDIN_3_0 int RSA_padding_add_none(unsigned char* to, int tlen, const unsigned char* f, int fl);
OSSL_DEPRECATEDIN_3_0 int RSA_padding_check_none(unsigned char* to, int tlen, const unsigned char* f, int fl, int rsa_len);
OSSL_DEPRECATEDIN_3_0 int RSA_padding_add_X931(unsigned char* to, int tlen, const unsigned char* f, int fl);
OSSL_DEPRECATEDIN_3_0 int RSA_padding_check_X931(unsigned char* to, int tlen, const unsigned char* f, int fl, int rsa_len);
OSSL_DEPRECATEDIN_3_0 int RSA_X931_hash_id(int nid);
OSSL_DEPRECATEDIN_3_0
int RSA_verify_PKCS1_PSS(RSA * rsa, const unsigned char* mHash, const EVP_MD * Hash, const unsigned char* EM, int sLen);
OSSL_DEPRECATEDIN_3_0
int RSA_padding_add_PKCS1_PSS(RSA * rsa, unsigned char* EM, const unsigned char* mHash, const EVP_MD * Hash, int sLen);
OSSL_DEPRECATEDIN_3_0
int RSA_verify_PKCS1_PSS_mgf1(RSA * rsa, const unsigned char* mHash, const EVP_MD * Hash, const EVP_MD * mgf1Hash, const unsigned char* EM, int sLen);
OSSL_DEPRECATEDIN_3_0
int RSA_padding_add_PKCS1_PSS_mgf1(RSA * rsa, unsigned char* EM, const unsigned char* mHash, const EVP_MD * Hash, const EVP_MD * mgf1Hash, int sLen);
OSSL_DEPRECATEDIN_3_0 int RSA_set_ex_data(RSA * r, int idx, void* arg);
OSSL_DEPRECATEDIN_3_0 void RSA_meth_free(RSA_METHOD * meth);
OSSL_DEPRECATEDIN_3_0 int RSA_meth_set1_name(RSA_METHOD * meth, const char* name);
OSSL_DEPRECATEDIN_3_0 int RSA_meth_get_flags(const RSA_METHOD * meth);
OSSL_DEPRECATEDIN_3_0 int RSA_meth_set_flags(RSA_METHOD * meth, int flags);
OSSL_DEPRECATEDIN_3_0 int RSA_meth_set0_app_data(RSA_METHOD * meth, void* app_data);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
void SEED_set_key(const unsigned char rawkey[SEED_KEY_LENGTH], SEED_KEY_SCHEDULE * ks);
OSSL_DEPRECATEDIN_3_0
void SEED_encrypt(const unsigned char s[SEED_BLOCK_SIZE], unsigned char d[SEED_BLOCK_SIZE], const SEED_KEY_SCHEDULE * ks);
OSSL_DEPRECATEDIN_3_0
void SEED_decrypt(const unsigned char s[SEED_BLOCK_SIZE], unsigned char d[SEED_BLOCK_SIZE], const SEED_KEY_SCHEDULE * ks);
OSSL_DEPRECATEDIN_3_0
void SEED_ecb_encrypt(const unsigned char* in, unsigned char* out, const SEED_KEY_SCHEDULE * ks, int enc);
OSSL_DEPRECATEDIN_3_0
void SEED_cbc_encrypt(const unsigned char* in, unsigned char* out, size_t len, const SEED_KEY_SCHEDULE * ks, unsigned char ivec[SEED_BLOCK_SIZE], int enc);
OSSL_DEPRECATEDIN_3_0
void SEED_cfb128_encrypt(const unsigned char* in, unsigned char* out, size_t len, const SEED_KEY_SCHEDULE * ks, unsigned char ivec[SEED_BLOCK_SIZE], int* num, int enc);
OSSL_DEPRECATEDIN_3_0
void SEED_ofb128_encrypt(const unsigned char* in, unsigned char* out, size_t len, const SEED_KEY_SCHEDULE * ks, unsigned char ivec[SEED_BLOCK_SIZE], int* num);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void OSSL_SELF_TEST_set_callback(OSSL_LIB_CTX * libctx, OSSL_CALLBACK * cb, void* cbarg);
void OSSL_SELF_TEST_get_callback(OSSL_LIB_CTX * libctx, OSSL_CALLBACK * *cb, void** cbarg);
void OSSL_SELF_TEST_free(OSSL_SELF_TEST * st);
void OSSL_SELF_TEST_onbegin(OSSL_SELF_TEST * st, const char* type, const char* desc);
int OSSL_SELF_TEST_oncorrupt_byte(OSSL_SELF_TEST * st, unsigned char* bytes);
void OSSL_SELF_TEST_onend(OSSL_SELF_TEST * st, int ret);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

OSSL_DEPRECATEDIN_3_0 int SHA1_Init(SHA_CTX * c);
OSSL_DEPRECATEDIN_3_0 int SHA1_Update(SHA_CTX * c, const void* data, size_t len);
OSSL_DEPRECATEDIN_3_0 int SHA1_Final(unsigned char* md, SHA_CTX * c);
OSSL_DEPRECATEDIN_3_0 void SHA1_Transform(SHA_CTX * c, const unsigned char* data);
OSSL_DEPRECATEDIN_3_0 int SHA224_Init(SHA256_CTX * c);
OSSL_DEPRECATEDIN_3_0 int SHA224_Update(SHA256_CTX * c, const void* data, size_t len);
OSSL_DEPRECATEDIN_3_0 int SHA224_Final(unsigned char* md, SHA256_CTX * c);
OSSL_DEPRECATEDIN_3_0 int SHA256_Init(SHA256_CTX * c);
OSSL_DEPRECATEDIN_3_0 int SHA256_Update(SHA256_CTX * c, const void* data, size_t len);
OSSL_DEPRECATEDIN_3_0 int SHA256_Final(unsigned char* md, SHA256_CTX * c);
OSSL_DEPRECATEDIN_3_0 void SHA256_Transform(SHA256_CTX * c, const unsigned char* data);
OSSL_DEPRECATEDIN_3_0 int SHA384_Init(SHA512_CTX * c);
OSSL_DEPRECATEDIN_3_0 int SHA384_Update(SHA512_CTX * c, const void* data, size_t len);
OSSL_DEPRECATEDIN_3_0 int SHA384_Final(unsigned char* md, SHA512_CTX * c);
OSSL_DEPRECATEDIN_3_0 int SHA512_Init(SHA512_CTX * c);
OSSL_DEPRECATEDIN_3_0 int SHA512_Update(SHA512_CTX * c, const void* data, size_t len);
OSSL_DEPRECATEDIN_3_0 int SHA512_Final(unsigned char* md, SHA512_CTX * c);
OSSL_DEPRECATEDIN_3_0 void SHA512_Transform(SHA512_CTX * c, const unsigned char* data);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

OSSL_DEPRECATEDIN_3_0
void SRP_user_pwd_free(SRP_user_pwd * user_pwd);
OSSL_DEPRECATEDIN_3_0
void SRP_user_pwd_set_gN(SRP_user_pwd * user_pwd, const BIGNUM * g, const BIGNUM * N);
OSSL_DEPRECATEDIN_3_0
int SRP_user_pwd_set1_ids(SRP_user_pwd * user_pwd, const char* id, const char* info);
OSSL_DEPRECATEDIN_3_0
int SRP_user_pwd_set0_sv(SRP_user_pwd * user_pwd, BIGNUM * s, BIGNUM * v);
OSSL_DEPRECATEDIN_3_0
void SRP_VBASE_free(SRP_VBASE * vb);
OSSL_DEPRECATEDIN_3_0
int SRP_VBASE_init(SRP_VBASE * vb, char* verifier_file);
OSSL_DEPRECATEDIN_3_0
int SRP_VBASE_add0_user(SRP_VBASE * vb, SRP_user_pwd * user_pwd);
OSSL_DEPRECATEDIN_3_0
int SRP_create_verifier_BN_ex(const char* user, const char* pass, BIGNUM * *salt, BIGNUM * *verifier, const BIGNUM * N, const BIGNUM * g, OSSL_LIB_CTX * libctx, const char* propq);
OSSL_DEPRECATEDIN_3_0
int SRP_create_verifier_BN(const char* user, const char* pass, BIGNUM * *salt, BIGNUM * *verifier, const BIGNUM * N, const BIGNUM * g);
OSSL_DEPRECATEDIN_3_0
int SRP_Verify_A_mod_N(const BIGNUM * A, const BIGNUM * N);
OSSL_DEPRECATEDIN_3_0
int SRP_Verify_B_mod_N(const BIGNUM * B, const BIGNUM * N);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_SRTP

__owur int SSL_CTX_set_tlsext_use_srtp(SSL_CTX * ctx, const char* profiles);
__owur int SSL_set_tlsext_use_srtp(SSL * ssl, const char* profiles);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

uint64_t SSL_CTX_get_options(const SSL_CTX * ctx);
uint64_t SSL_get_options(const SSL * s);
uint64_t SSL_CTX_clear_options(SSL_CTX * ctx, uint64_t op);
uint64_t SSL_clear_options(SSL * s, uint64_t op);
uint64_t SSL_CTX_set_options(SSL_CTX * ctx, uint64_t op);
uint64_t SSL_set_options(SSL * s, uint64_t op);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 __owur int SSL_SRP_CTX_init(SSL * s);
OSSL_DEPRECATEDIN_3_0 __owur int SSL_CTX_SRP_CTX_init(SSL_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 int SSL_SRP_CTX_free(SSL * ctx);
OSSL_DEPRECATEDIN_3_0 int SSL_CTX_SRP_CTX_free(SSL_CTX * ctx);
OSSL_DEPRECATEDIN_3_0 __owur int SSL_srp_server_param_with_username(SSL * s, int* ad);
OSSL_DEPRECATEDIN_3_0 __owur int SRP_Calc_A_param(SSL * s);
ifndef OPENSSL_NO_ENGINE
__owur int SSL_CTX_set_client_cert_engine(SSL_CTX * ctx, ENGINE * e);
void SSL_CTX_set_next_protos_advertised_cb(SSL_CTX * s, SSL_CTX_npn_advertised_cb_func cb, void* arg);
void SSL_CTX_set_next_proto_select_cb(SSL_CTX * s, SSL_CTX_npn_select_cb_func cb, void* arg);
define SSL_CTX_set_npn_select_cb SSL_CTX_set_next_proto_select_cb

void SSL_get0_next_proto_negotiated(const SSL * s, const unsigned char** data, unsigned* len);
endif

__owur int SSL_select_next_proto(unsigned char** out, unsigned char* outlen, const unsigned char* in, unsigned int inlen, const unsigned char* client, unsigned int client_len);
define OPENSSL_NPN_NO_OVERLAP  2

__owur int SSL_CTX_set_alpn_protos(SSL_CTX * ctx, const unsigned char* protos, unsigned int protos_len);
__owur int SSL_set_alpn_protos(SSL * ssl, const unsigned char* protos, unsigned int protos_len);
void SSL_CTX_set_alpn_select_cb(SSL_CTX * ctx, SSL_CTX_alpn_select_cb_func cb, void* arg);
void SSL_get0_alpn_selected(const SSL * ssl, const unsigned char** data, unsigned int* len);
void SSL_CTX_set_psk_client_callback(SSL_CTX * ctx, SSL_psk_client_cb_func cb);
void SSL_set_psk_client_callback(SSL * ssl, SSL_psk_client_cb_func cb);
void SSL_CTX_set_psk_server_callback(SSL_CTX * ctx, SSL_psk_server_cb_func cb);
void SSL_set_psk_server_callback(SSL * ssl, SSL_psk_server_cb_func cb);
__owur int SSL_CTX_use_psk_identity_hint(SSL_CTX * ctx, const char* identity_hint);
__owur int SSL_use_psk_identity_hint(SSL * s, const char* identity_hint);
void SSL_set_psk_find_session_callback(SSL * s, SSL_psk_find_session_cb_func cb);
void SSL_CTX_set_psk_find_session_callback(SSL_CTX * ctx, SSL_psk_find_session_cb_func cb);
void SSL_set_psk_use_session_callback(SSL * s, SSL_psk_use_session_cb_func cb);
void SSL_CTX_set_psk_use_session_callback(SSL_CTX * ctx, SSL_psk_use_session_cb_func cb);
__owur int SSL_CTX_has_client_custom_ext(const SSL_CTX * ctx, unsigned int ext_type);
__owur int SSL_CTX_add_client_custom_ext(SSL_CTX * ctx, unsigned int ext_type, custom_ext_add_cb add_cb, custom_ext_free_cb free_cb, void* add_arg, custom_ext_parse_cb parse_cb, void* parse_arg);
__owur int SSL_CTX_add_server_custom_ext(SSL_CTX * ctx, unsigned int ext_type, custom_ext_add_cb add_cb, custom_ext_free_cb free_cb, void* add_arg, custom_ext_parse_cb parse_cb, void* parse_arg);
__owur int SSL_CTX_add_custom_ext(SSL_CTX * ctx, unsigned int ext_type, unsigned int context, SSL_custom_ext_add_cb_ex add_cb, SSL_custom_ext_free_cb_ex free_cb, void* add_arg, SSL_custom_ext_parse_cb_ex parse_cb, void* parse_arg);
__owur int SSL_extension_supported(unsigned int ext_type);
void SSL_CTX_set_keylog_callback(SSL_CTX * ctx, SSL_CTX_keylog_cb_func cb);
SSL_CTX_keylog_cb_func SSL_CTX_get_keylog_callback(const SSL_CTX * ctx);
int SSL_CTX_set_max_early_data(SSL_CTX * ctx, uint32_t max_early_data);
uint32_t SSL_CTX_get_max_early_data(const SSL_CTX * ctx);
int SSL_set_max_early_data(SSL * s, uint32_t max_early_data);
uint32_t SSL_get_max_early_data(const SSL * s);
int SSL_CTX_set_recv_max_early_data(SSL_CTX * ctx, uint32_t recv_max_early_data);
uint32_t SSL_CTX_get_recv_max_early_data(const SSL_CTX * ctx);
int SSL_set_recv_max_early_data(SSL * s, uint32_t recv_max_early_data);
uint32_t SSL_get_recv_max_early_data(const SSL * s);
ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 void SSL_set_debug(SSL * s, int debug);
int SSL_in_init(const SSL * s);
int SSL_in_before(const SSL * s);
int SSL_is_init_finished(const SSL * s);
size_t SSL_get_finished(const SSL * s, void* buf, size_t count);
size_t SSL_get_peer_finished(const SSL * s, void* buf, size_t count);
int SSL_set0_tmp_dh_pkey(SSL * s, EVP_PKEY * dhpkey);
int SSL_CTX_set0_tmp_dh_pkey(SSL_CTX * ctx, EVP_PKEY * dhpkey);
__owur int BIO_ssl_copy_session_id(BIO * to, BIO * from);
void BIO_ssl_shutdown(BIO * ssl_bio);
__owur int SSL_CTX_set_cipher_list(SSL_CTX*, const char* str);
int SSL_CTX_up_ref(SSL_CTX * ctx);
void SSL_CTX_free(SSL_CTX*);
__owur long SSL_CTX_set_timeout(SSL_CTX * ctx, long t);
__owur long SSL_CTX_get_timeout(const SSL_CTX * ctx);
void SSL_CTX_set_cert_store(SSL_CTX*, X509_STORE*);
void SSL_CTX_set1_cert_store(SSL_CTX*, X509_STORE*);
__owur int SSL_want(const SSL * s);
__owur int SSL_clear(SSL * s);
void SSL_CTX_flush_sessions(SSL_CTX * ctx, long tm);
__owur int SSL_CIPHER_get_bits(const SSL_CIPHER * c, int* alg_bits);
__owur uint32_t SSL_CIPHER_get_id(const SSL_CIPHER * c);
__owur uint16_t SSL_CIPHER_get_protocol_id(const SSL_CIPHER * c);
__owur int SSL_CIPHER_get_kx_nid(const SSL_CIPHER * c);
__owur int SSL_CIPHER_get_auth_nid(const SSL_CIPHER * c);
__owur int SSL_CIPHER_is_aead(const SSL_CIPHER * c);
__owur int SSL_get_fd(const SSL * s);
__owur int SSL_get_rfd(const SSL * s);
__owur int SSL_get_wfd(const SSL * s);
__owur int SSL_get_read_ahead(const SSL * s);
__owur int SSL_pending(const SSL * s);
__owur int SSL_has_pending(const SSL * s);
ifndef OPENSSL_NO_SOCK
__owur int SSL_set_fd(SSL * s, int fd);
__owur int SSL_set_rfd(SSL * s, int fd);
__owur int SSL_set_wfd(SSL * s, int fd);
endif
void SSL_set0_rbio(SSL * s, BIO * rbio);
void SSL_set0_wbio(SSL * s, BIO * wbio);
void SSL_set_bio(SSL * s, BIO * rbio, BIO * wbio);
__owur int SSL_set_cipher_list(SSL * s, const char* str);
__owur int SSL_CTX_set_ciphersuites(SSL_CTX * ctx, const char* str);
__owur int SSL_set_ciphersuites(SSL * s, const char* str);
void SSL_set_read_ahead(SSL * s, int yes);
__owur int SSL_get_verify_mode(const SSL * s);
__owur int SSL_get_verify_depth(const SSL * s);
__owur SSL_verify_cb SSL_get_verify_callback(const SSL * s);
void SSL_set_verify(SSL * s, int mode, SSL_verify_cb callback);
void SSL_set_verify_depth(SSL * s, int depth);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 __owur int SSL_use_RSAPrivateKey(SSL * ssl, RSA * rsa);
OSSL_DEPRECATEDIN_3_0
__owur int SSL_use_RSAPrivateKey_ASN1(SSL * ssl, const unsigned char* d, long len);
endif
__owur int SSL_use_PrivateKey(SSL * ssl, EVP_PKEY * pkey);
__owur int SSL_use_PrivateKey_ASN1(int pk, SSL * ssl, const unsigned char* d, long len);
__owur int SSL_use_certificate(SSL * ssl, X509 * x);
__owur int SSL_use_certificate_ASN1(SSL * ssl, const unsigned char* d, int len);
__owur int SSL_CTX_use_serverinfo(SSL_CTX * ctx, const unsigned char* serverinfo, size_t serverinfo_length);
__owur int SSL_CTX_use_serverinfo_ex(SSL_CTX * ctx, unsigned int version, const unsigned char* serverinfo, size_t serverinfo_length);
__owur int SSL_CTX_use_serverinfo_file(SSL_CTX * ctx, const char* file);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
__owur int SSL_use_RSAPrivateKey_file(SSL * ssl, const char* file, int type);
endif

__owur int SSL_use_PrivateKey_file(SSL * ssl, const char* file, int type);
__owur int SSL_use_certificate_file(SSL * ssl, const char* file, int type);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
__owur int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX * ctx, const char* file, int type);
endif
__owur int SSL_CTX_use_PrivateKey_file(SSL_CTX * ctx, const char* file, int type);
__owur int SSL_CTX_use_certificate_file(SSL_CTX * ctx, const char* file, int type);
__owur int SSL_CTX_use_certificate_chain_file(SSL_CTX * ctx, const char* file);
__owur int SSL_use_certificate_chain_file(SSL * ssl, const char* file);
__owur long SSL_SESSION_get_time(const SSL_SESSION * s);
__owur long SSL_SESSION_set_time(SSL_SESSION * s, long t);
__owur long SSL_SESSION_get_timeout(const SSL_SESSION * s);
__owur long SSL_SESSION_set_timeout(SSL_SESSION * s, long t);
__owur int SSL_SESSION_get_protocol_version(const SSL_SESSION * s);
__owur int SSL_SESSION_set_protocol_version(SSL_SESSION * s, int version);
__owur time_t SSL_SESSION_get_time_ex(const SSL_SESSION * s);
__owur time_t SSL_SESSION_set_time_ex(SSL_SESSION * s, time_t t);
__owur int SSL_SESSION_set1_hostname(SSL_SESSION * s, const char* hostname);
void SSL_SESSION_get0_alpn_selected(const SSL_SESSION * s, const unsigned char** alpn, size_t * len);
__owur int SSL_SESSION_set1_alpn_selected(SSL_SESSION * s, const unsigned char* alpn, size_t len);
__owur int SSL_SESSION_set_cipher(SSL_SESSION * s, const SSL_CIPHER * cipher);
__owur int SSL_SESSION_has_ticket(const SSL_SESSION * s);
__owur unsigned long SSL_SESSION_get_ticket_lifetime_hint(const SSL_SESSION * s);
void SSL_SESSION_get0_ticket(const SSL_SESSION * s, const unsigned char** tick, size_t * len);
__owur uint32_t SSL_SESSION_get_max_early_data(const SSL_SESSION * s);
__owur int SSL_SESSION_set_max_early_data(SSL_SESSION * s, uint32_t max_early_data);
__owur int SSL_copy_session_id(SSL * to, const SSL * from);
__owur int SSL_SESSION_set1_id_context(SSL_SESSION * s, const unsigned char* sid_ctx, unsigned int sid_ctx_len);
__owur int SSL_SESSION_set1_id(SSL_SESSION * s, const unsigned char* sid, unsigned int sid_len);
__owur int SSL_SESSION_is_resumable(const SSL_SESSION * s);
__owur unsigned int SSL_SESSION_get_compress_id(const SSL_SESSION * s);
ifndef OPENSSL_NO_STDIO
int SSL_SESSION_print_fp(FILE * fp, const SSL_SESSION * ses);
endif
int SSL_SESSION_print(BIO * fp, const SSL_SESSION * ses);
int SSL_SESSION_print_keylog(BIO * bp, const SSL_SESSION * x);
int SSL_SESSION_up_ref(SSL_SESSION * ses);
void SSL_SESSION_free(SSL_SESSION * ses);
__owur int i2d_SSL_SESSION(const SSL_SESSION * in, unsigned char** pp);
__owur int SSL_set_session(SSL * to, SSL_SESSION * session);
int SSL_CTX_add_session(SSL_CTX * ctx, SSL_SESSION * session);
int SSL_CTX_remove_session(SSL_CTX * ctx, SSL_SESSION * session);
__owur int SSL_CTX_set_generate_session_id(SSL_CTX * ctx, GEN_SESSION_CB cb);
__owur int SSL_set_generate_session_id(SSL * s, GEN_SESSION_CB cb);
__owur int SSL_has_matching_session_id(const SSL * s, const unsigned char* id, unsigned int id_len);
__owur int SSL_CTX_get_verify_mode(const SSL_CTX * ctx);
__owur int SSL_CTX_get_verify_depth(const SSL_CTX * ctx);
__owur SSL_verify_cb SSL_CTX_get_verify_callback(const SSL_CTX * ctx);
void SSL_CTX_set_verify(SSL_CTX * ctx, int mode, SSL_verify_cb callback);
void SSL_CTX_set_verify_depth(SSL_CTX * ctx, int depth);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
__owur int SSL_CTX_use_RSAPrivateKey(SSL_CTX * ctx, RSA * rsa);
OSSL_DEPRECATEDIN_3_0
__owur int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX * ctx, const unsigned char* d, long len);
endif
__owur int SSL_CTX_use_PrivateKey(SSL_CTX * ctx, EVP_PKEY * pkey);
__owur int SSL_CTX_use_PrivateKey_ASN1(int pk, SSL_CTX * ctx, const unsigned char* d, long len);
__owur int SSL_CTX_use_certificate(SSL_CTX * ctx, X509 * x);
__owur int SSL_CTX_use_certificate_ASN1(SSL_CTX * ctx, int len, const unsigned char* d);
void SSL_CTX_set_default_passwd_cb(SSL_CTX * ctx, pem_password_cb * cb);
void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX * ctx, void* u);
void SSL_set_default_passwd_cb(SSL * s, pem_password_cb * cb);
void SSL_set_default_passwd_cb_userdata(SSL * s, void* u);
__owur int SSL_CTX_check_private_key(const SSL_CTX * ctx);
__owur int SSL_check_private_key(const SSL * ctx);
__owur int SSL_CTX_set_session_id_context(SSL_CTX * ctx, const unsigned char* sid_ctx, unsigned int sid_ctx_len);
int SSL_up_ref(SSL * s);
int SSL_is_dtls(const SSL * s);
int SSL_is_tls(const SSL * s);
int SSL_is_quic(const SSL * s);
__owur int SSL_set_session_id_context(SSL * ssl, const unsigned char* sid_ctx, unsigned int sid_ctx_len);
__owur int SSL_CTX_set_purpose(SSL_CTX * ctx, int purpose);
__owur int SSL_set_purpose(SSL * ssl, int purpose);
__owur int SSL_CTX_set_trust(SSL_CTX * ctx, int trust);
__owur int SSL_set_trust(SSL * ssl, int trust);
__owur int SSL_set1_host(SSL * s, const char* hostname);
__owur int SSL_add1_host(SSL * s, const char* hostname);
void SSL_set_hostflags(SSL * s, unsigned int flags);
__owur int SSL_CTX_dane_enable(SSL_CTX * ctx);
__owur int SSL_CTX_dane_mtype_set(SSL_CTX * ctx, const EVP_MD * md, uint8_t mtype, uint8_t ord);
__owur int SSL_dane_enable(SSL * s, const char* basedomain);
__owur int SSL_dane_tlsa_add(SSL * s, uint8_t usage, uint8_t selector, uint8_t mtype, const unsigned char* data, size_t dlen);
__owur int SSL_get0_dane_authority(SSL * s, X509 * *mcert, EVP_PKEY * *mspki);
__owur int SSL_get0_dane_tlsa(SSL * s, uint8_t * usage, uint8_t * selector, uint8_t * mtype, const unsigned char** data, size_t * dlen);
unsigned long SSL_CTX_dane_set_flags(SSL_CTX * ctx, unsigned long flags);
unsigned long SSL_CTX_dane_clear_flags(SSL_CTX * ctx, unsigned long flags);
unsigned long SSL_dane_set_flags(SSL * ssl, unsigned long flags);
unsigned long SSL_dane_clear_flags(SSL * ssl, unsigned long flags);
__owur int SSL_CTX_set1_param(SSL_CTX * ctx, X509_VERIFY_PARAM * vpm);
__owur int SSL_set1_param(SSL * ssl, X509_VERIFY_PARAM * vpm);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int SSL_CTX_set_srp_username(SSL_CTX * ctx, char* name);
OSSL_DEPRECATEDIN_3_0 int SSL_CTX_set_srp_password(SSL_CTX * ctx, char* password);
OSSL_DEPRECATEDIN_3_0 int SSL_CTX_set_srp_strength(SSL_CTX * ctx, int strength);
OSSL_DEPRECATEDIN_3_0 int SSL_CTX_set_srp_cb_arg(SSL_CTX * ctx, void* arg);
OSSL_DEPRECATEDIN_3_0
int SSL_set_srp_server_param(SSL * s, const BIGNUM * N, const BIGNUM * g, BIGNUM * sa, BIGNUM * v, char* info);
OSSL_DEPRECATEDIN_3_0
int SSL_set_srp_server_param_pw(SSL * s, const char* user, const char* pass, const char* grp);
void SSL_CTX_set_client_hello_cb(SSL_CTX * c, SSL_client_hello_cb_fn cb, void* arg);
int SSL_client_hello_isv2(SSL * s);
unsigned int SSL_client_hello_get0_legacy_version(SSL * s);
size_t SSL_client_hello_get0_random(SSL * s, const unsigned char** out);
size_t SSL_client_hello_get0_session_id(SSL * s, const unsigned char** out);
size_t SSL_client_hello_get0_ciphers(SSL * s, const unsigned char** out);
size_t SSL_client_hello_get0_compression_methods(SSL * s, const unsigned char** out);
int SSL_client_hello_get1_extensions_present(SSL * s, int** out, size_t * outlen);
int SSL_client_hello_get_extension_order(SSL * s, uint16_t * exts, size_t * num_exts);
int SSL_client_hello_get0_ext(SSL * s, unsigned int type, const unsigned char** out, size_t * outlen);
void SSL_certs_clear(SSL * s);
void SSL_free(SSL * ssl);
__owur int SSL_waiting_for_async(SSL * s);
__owur int SSL_get_all_async_fds(SSL * s, OSSL_ASYNC_FD * fds, size_t * numfds);
__owur int SSL_get_changed_async_fds(SSL * s, OSSL_ASYNC_FD * addfd, size_t * numaddfds, OSSL_ASYNC_FD * delfd, size_t * numdelfds);
__owur int SSL_CTX_set_async_callback(SSL_CTX * ctx, SSL_async_callback_fn callback);
__owur int SSL_CTX_set_async_callback_arg(SSL_CTX * ctx, void* arg);
__owur int SSL_set_async_callback(SSL * s, SSL_async_callback_fn callback);
__owur int SSL_set_async_callback_arg(SSL * s, void* arg);
__owur int SSL_get_async_status(SSL * s, int* status);
endif
__owur int SSL_accept(SSL * ssl);
__owur int SSL_stateless(SSL * s);
__owur int SSL_connect(SSL * ssl);
__owur int SSL_read(SSL * ssl, void* buf, int num);
__owur int SSL_read_ex(SSL * ssl, void* buf, size_t num, size_t * readbytes);
define SSL_READ_EARLY_DATA_FINISH  2

__owur int SSL_read_early_data(SSL * s, void* buf, size_t num, size_t * readbytes);
__owur int SSL_peek(SSL * ssl, void* buf, int num);
__owur int SSL_peek_ex(SSL * ssl, void* buf, size_t num, size_t * readbytes);
__owur ossl_ssize_t SSL_sendfile(SSL * s, int fd, off_t offset, size_t size, int flags);
__owur int SSL_write(SSL * ssl, const void* buf, int num);
__owur int SSL_write_ex(SSL * s, const void* buf, size_t num, size_t * written);
__owur int SSL_write_early_data(SSL * s, const void* buf, size_t num, size_t * written);
long SSL_ctrl(SSL * ssl, int cmd, long larg, void* parg);
long SSL_CTX_ctrl(SSL_CTX * ctx, int cmd, long larg, void* parg);
__owur int SSL_write_ex2(SSL * s, const void* buf, size_t num, uint64_t flags, size_t * written);
define SSL_EARLY_DATA_ACCEPTED    2

__owur int SSL_get_early_data_status(const SSL * s);
__owur int SSL_get_error(const SSL * s, int ret_code);
__owur int SSL_get_handshake_rtt(const SSL * s, uint64_t * rtt);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
__owur int SSL_CTX_set_ssl_version(SSL_CTX * ctx, const SSL_METHOD * meth);
__owur size_t DTLS_get_data_mtu(const SSL * s);
__owur int SSL_do_handshake(SSL * s);
int SSL_key_update(SSL * s, int updatetype);
int SSL_get_key_update_type(const SSL * s);
int SSL_renegotiate(SSL * s);
int SSL_renegotiate_abbreviated(SSL * s);
__owur int SSL_renegotiate_pending(const SSL * s);
int SSL_new_session_ticket(SSL * s);
int SSL_shutdown(SSL * s);
__owur int SSL_verify_client_post_handshake(SSL * s);
void SSL_CTX_set_post_handshake_auth(SSL_CTX * ctx, int val);
void SSL_set_post_handshake_auth(SSL * s, int val);
__owur int SSL_set_ssl_method(SSL * s, const SSL_METHOD * method);
__owur int SSL_add1_to_CA_list(SSL * ssl, const X509 * x);
__owur int SSL_CTX_add1_to_CA_list(SSL_CTX * ctx, const X509 * x);
__owur int SSL_add_client_CA(SSL * ssl, X509 * x);
__owur int SSL_CTX_add_client_CA(SSL_CTX * ctx, X509 * x);
void SSL_set_connect_state(SSL * s);
void SSL_set_accept_state(SSL * s);
__owur long SSL_get_default_timeout(const SSL * s);
void SSL_CTX_set_quiet_shutdown(SSL_CTX * ctx, int mode);
__owur int SSL_CTX_get_quiet_shutdown(const SSL_CTX * ctx);
void SSL_set_quiet_shutdown(SSL * ssl, int mode);
__owur int SSL_get_quiet_shutdown(const SSL * ssl);
void SSL_set_shutdown(SSL * ssl, int mode);
__owur int SSL_get_shutdown(const SSL * ssl);
__owur int SSL_version(const SSL * ssl);
__owur int SSL_client_version(const SSL * s);
__owur int SSL_CTX_set_default_verify_paths(SSL_CTX * ctx);
__owur int SSL_CTX_set_default_verify_dir(SSL_CTX * ctx);
__owur int SSL_CTX_set_default_verify_file(SSL_CTX * ctx);
__owur int SSL_CTX_set_default_verify_store(SSL_CTX * ctx);
__owur int SSL_CTX_load_verify_file(SSL_CTX * ctx, const char* CAfile);
__owur int SSL_CTX_load_verify_dir(SSL_CTX * ctx, const char* CApath);
__owur int SSL_CTX_load_verify_store(SSL_CTX * ctx, const char* CAstore);
__owur int SSL_CTX_load_verify_locations(SSL_CTX * ctx, const char* CAfile, const char* CApath);
__owur OSSL_HANDSHAKE_STATE SSL_get_state(const SSL * ssl);
void SSL_set_verify_result(SSL * ssl, long v);
__owur long SSL_get_verify_result(const SSL * ssl);
__owur size_t SSL_get_client_random(const SSL * ssl, unsigned char* out, size_t outlen);
__owur size_t SSL_get_server_random(const SSL * ssl, unsigned char* out, size_t outlen);
__owur size_t SSL_SESSION_get_master_key(const SSL_SESSION * sess, unsigned char* out, size_t outlen);
__owur int SSL_SESSION_set1_master_key(SSL_SESSION * sess, const unsigned char* in, size_t len);
uint8_t SSL_SESSION_get_max_fragment_length(const SSL_SESSION * sess);
__owur int SSL_set_ex_data(SSL * ssl, int idx, void* data);
__owur int SSL_SESSION_set_ex_data(SSL_SESSION * ss, int idx, void* data);
__owur int SSL_CTX_set_ex_data(SSL_CTX * ssl, int idx, void* data);
__owur int SSL_get_ex_data_X509_STORE_CTX_idx(void);
void SSL_CTX_set_default_read_buffer_len(SSL_CTX * ctx, size_t len);
void SSL_set_default_read_buffer_len(SSL * s, size_t len);
__owur int SSL_COMP_get_id(const SSL_COMP * comp);
endif
__owur int SSL_COMP_add_compression_method(int id, COMP_METHOD * cm);
int SSL_CIPHER_get_cipher_nid(const SSL_CIPHER * c);
int SSL_CIPHER_get_digest_nid(const SSL_CIPHER * c);
__owur int SSL_set_session_ticket_ext(SSL * s, void* ext_data, int ext_len);
__owur int SSL_set_session_ticket_ext_cb(SSL * s, tls_session_ticket_ext_cb_fn cb, void* arg);
__owur int SSL_set_session_secret_cb(SSL * s, tls_session_secret_cb_fn session_secret_cb, void* arg);
void SSL_CTX_set_record_padding_callback_arg(SSL_CTX * ctx, void* arg);
int SSL_CTX_set_block_padding(SSL_CTX * ctx, size_t block_size);
void SSL_set_record_padding_callback_arg(SSL * ssl, void* arg);
int SSL_set_block_padding(SSL * ssl, size_t block_size);
int SSL_set_num_tickets(SSL * s, size_t num_tickets);
size_t SSL_get_num_tickets(const SSL * s);
int SSL_CTX_set_num_tickets(SSL_CTX * ctx, size_t num_tickets);
size_t SSL_CTX_get_num_tickets(const SSL_CTX * ctx);
int SSL_handle_events(SSL * s);
__owur int SSL_get_event_timeout(SSL * s, struct timeval* tv, int* is_infinite);
__owur int SSL_get_rpoll_descriptor(SSL * s, BIO_POLL_DESCRIPTOR * desc);
__owur int SSL_get_wpoll_descriptor(SSL * s, BIO_POLL_DESCRIPTOR * desc);
__owur int SSL_net_read_desired(SSL * s);
__owur int SSL_net_write_desired(SSL * s);
__owur int SSL_set_blocking_mode(SSL * s, int blocking);
__owur int SSL_get_blocking_mode(SSL * s);
__owur int SSL_set1_initial_peer_addr(SSL * s, const BIO_ADDR * peer_addr);
__owur int SSL_is_connection(SSL * s);
__owur int SSL_get_stream_type(SSL * s);
__owur uint64_t SSL_get_stream_id(SSL * s);
__owur int SSL_is_stream_local(SSL * s);
define SSL_DEFAULT_STREAM_MODE_AUTO_UNI    2
__owur int SSL_set_default_stream_mode(SSL * s, uint32_t mode);
define SSL_INCOMING_STREAM_POLICY_REJECT    2
__owur int SSL_set_incoming_stream_policy(SSL * s, int policy, uint64_t aec);
__owur size_t SSL_get_accept_stream_queue_len(SSL * s);
ifndef OPENSSL_NO_QUIC
__owur int SSL_inject_net_dgram(SSL * s, const unsigned char* buf, size_t buf_len, const BIO_ADDR * peer, const BIO_ADDR * local);
__owur int SSL_shutdown_ex(SSL * ssl, uint64_t flags, const SSL_SHUTDOWN_EX_ARGS * args, size_t args_len);
__owur int SSL_stream_conclude(SSL * ssl, uint64_t flags);
__owur int SSL_stream_reset(SSL * ssl, const SSL_STREAM_RESET_ARGS * args, size_t args_len);
define SSL_STREAM_STATE_CONN_CLOSED    6
__owur int SSL_get_stream_read_state(SSL * ssl);
__owur int SSL_get_stream_write_state(SSL * ssl);
__owur int SSL_get_stream_read_error_code(SSL * ssl, uint64_t * app_error_code);
__owur int SSL_get_stream_write_error_code(SSL * ssl, uint64_t * app_error_code);
__owur int SSL_get_conn_close_info(SSL * ssl, SSL_CONN_CLOSE_INFO * info, size_t info_len);
define SSL_VALUE_EVENT_HANDLING_MODE_EXPLICIT     2

int SSL_get_value_uint(SSL * s, uint32_t class_, uint32_t id, uint64_t * v);
int SSL_set_value_uint(SSL * s, uint32_t class_, uint32_t id, uint64_t v);
__owur int SSL_poll(SSL_POLL_ITEM * items, size_t num_items, size_t stride, const struct timeval* timeout, uint64_t flags, size_t * result_count);
endif

__owur int SSL_session_reused(const SSL * s);
__owur int SSL_is_server(const SSL * s);
int SSL_CONF_CTX_finish(SSL_CONF_CTX * cctx);
void SSL_CONF_CTX_free(SSL_CONF_CTX * cctx);
unsigned int SSL_CONF_CTX_set_flags(SSL_CONF_CTX * cctx, unsigned int flags);
__owur unsigned int SSL_CONF_CTX_clear_flags(SSL_CONF_CTX * cctx, unsigned int flags);
__owur int SSL_CONF_CTX_set1_prefix(SSL_CONF_CTX * cctx, const char* pre);
void SSL_CONF_CTX_set_ssl(SSL_CONF_CTX * cctx, SSL * ssl);
void SSL_CONF_CTX_set_ssl_ctx(SSL_CONF_CTX * cctx, SSL_CTX * ctx);
__owur int SSL_CONF_cmd(SSL_CONF_CTX * cctx, const char* cmd, const char* value);
__owur int SSL_CONF_cmd_argv(SSL_CONF_CTX * cctx, int* pargc, char*** pargv);
__owur int SSL_CONF_cmd_value_type(SSL_CONF_CTX * cctx, const char* cmd);
void SSL_add_ssl_module(void);
int SSL_config(SSL * s, const char* name);
int SSL_CTX_config(SSL_CTX * ctx, const char* name);
ifndef OPENSSL_NO_SSL_TRACE
void SSL_trace(int write_p, int version, int content_type, const void* buf, size_t len, SSL * ssl, void* arg);
ifndef OPENSSL_NO_SOCK
int DTLSv1_listen(SSL * s, BIO_ADDR * client);
int SSL_set_ct_validation_callback(SSL * s, ssl_ct_validation_cb callback, void* arg);
int SSL_CTX_set_ct_validation_callback(SSL_CTX * ctx, ssl_ct_validation_cb callback, void* arg);
int SSL_enable_ct(SSL * s, int validation_mode);
int SSL_CTX_enable_ct(SSL_CTX * ctx, int validation_mode);
int SSL_ct_is_enabled(const SSL * s);
int SSL_CTX_ct_is_enabled(const SSL_CTX * ctx);
int SSL_CTX_set_default_ctlog_list_file(SSL_CTX * ctx);
int SSL_CTX_set_ctlog_list_file(SSL_CTX * ctx, const char* path);
void SSL_CTX_set0_ctlog_store(SSL_CTX * ctx, CTLOG_STORE * logs);
void SSL_set_security_level(SSL * s, int level);
__owur int SSL_get_security_level(const SSL * s);
void SSL_set0_security_ex_data(SSL * s, void* ex);
void SSL_CTX_set_security_level(SSL_CTX * ctx, int level);
__owur int SSL_CTX_get_security_level(const SSL_CTX * ctx);
void SSL_CTX_set0_security_ex_data(SSL_CTX * ctx, void* ex);
int OPENSSL_init_ssl(uint64_t opts, const OPENSSL_INIT_SETTINGS * settings);
endif

__owur int SSL_free_buffers(SSL * ssl);
__owur int SSL_alloc_buffers(SSL * ssl);
int SSL_CTX_set_session_ticket_cb(SSL_CTX * ctx, SSL_CTX_generate_session_ticket_fn gen_cb, SSL_CTX_decrypt_session_ticket_fn dec_cb, void* arg);
int SSL_SESSION_set1_ticket_appdata(SSL_SESSION * ss, const void* data, size_t len);
int SSL_SESSION_get0_ticket_appdata(SSL_SESSION * ss, void** data, size_t * len);
void DTLS_set_timer_cb(SSL * s, DTLS_timer_cb cb);
void SSL_CTX_set_allow_early_data_cb(SSL_CTX * ctx, SSL_allow_early_data_cb_fn cb, void* arg);
void SSL_set_allow_early_data_cb(SSL * s, SSL_allow_early_data_cb_fn cb, void* arg);
int SSL_CTX_compress_certs(SSL_CTX * ctx, int alg);
int SSL_compress_certs(SSL * ssl, int alg);
int SSL_CTX_set1_cert_comp_preference(SSL_CTX * ctx, int* algs, size_t len);
int SSL_set1_cert_comp_preference(SSL * ssl, int* algs, size_t len);
int SSL_CTX_set1_compressed_cert(SSL_CTX * ctx, int algorithm, unsigned char* comp_data, size_t comp_length, size_t orig_length);
int SSL_set1_compressed_cert(SSL * ssl, int algorithm, unsigned char* comp_data, size_t comp_length, size_t orig_length);
size_t SSL_CTX_get1_compressed_cert(SSL_CTX * ctx, int alg, unsigned char** data, size_t * orig_len);
size_t SSL_get1_compressed_cert(SSL * ssl, int alg, unsigned char** data, size_t * orig_len);
__owur int SSL_add_expected_rpk(SSL * s, EVP_PKEY * rpk);
__owur int SSL_get_negotiated_client_cert_type(const SSL * s);
__owur int SSL_get_negotiated_server_cert_type(const SSL * s);
__owur int SSL_set1_client_cert_type(SSL * s, const unsigned char* val, size_t len);
__owur int SSL_set1_server_cert_type(SSL * s, const unsigned char* val, size_t len);
__owur int SSL_CTX_set1_client_cert_type(SSL_CTX * ctx, const unsigned char* val, size_t len);
__owur int SSL_CTX_set1_server_cert_type(SSL_CTX * ctx, const unsigned char* val, size_t len);
__owur int SSL_get0_client_cert_type(const SSL * s, unsigned char** t, size_t * len);
__owur int SSL_get0_server_cert_type(const SSL * s, unsigned char** t, size_t * len);
__owur int SSL_CTX_get0_client_cert_type(const SSL_CTX * ctx, unsigned char** t, size_t * len);
__owur int SSL_CTX_get0_server_cert_type(const SSL_CTX * s, unsigned char** t, size_t * len);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int ERR_load_SSL_strings(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int OPENSSL_sk_num(const OPENSSL_STACK*);
int OPENSSL_sk_reserve(OPENSSL_STACK * st, int n);
void OPENSSL_sk_free(OPENSSL_STACK*);
int OPENSSL_sk_insert(OPENSSL_STACK * sk, const void* data, int where);
int OPENSSL_sk_find(OPENSSL_STACK * st, const void* data);
int OPENSSL_sk_find_ex(OPENSSL_STACK * st, const void* data);
int OPENSSL_sk_find_all(OPENSSL_STACK * st, const void* data, int* pnum);
int OPENSSL_sk_push(OPENSSL_STACK * st, const void* data);
int OPENSSL_sk_unshift(OPENSSL_STACK * st, const void* data);
void OPENSSL_sk_zero(OPENSSL_STACK * st);
OPENSSL_sk_compfunc OPENSSL_sk_set_cmp_func(OPENSSL_STACK * sk, OPENSSL_sk_compfunc cmp);
void OPENSSL_sk_sort(OPENSSL_STACK * st);
int OPENSSL_sk_is_sorted(const OPENSSL_STACK * st);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

OSSL_STORE_CTX* OSSL_STORE_open(const char* uri, const UI_METHOD * ui_method, void* ui_data, OSSL_STORE_post_process_info_fn post_process, void* post_process_data);
OSSL_STORE_CTX* OSSL_STORE_open_ex(const char* uri, OSSL_LIB_CTX * libctx, const char* propq, const UI_METHOD * ui_method, void* ui_data, const OSSL_PARAM params[], OSSL_STORE_post_process_info_fn post_process, void* post_process_data);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int OSSL_STORE_ctrl(OSSL_STORE_CTX * ctx, int cmd, ... /* args */);
OSSL_DEPRECATEDIN_3_0 int OSSL_STORE_vctrl(OSSL_STORE_CTX * ctx, int cmd, va_list args);
int OSSL_STORE_delete(const char* uri, OSSL_LIB_CTX * libctx, const char* propq, const UI_METHOD * ui_method, void* ui_data, const OSSL_PARAM params[]);
int OSSL_STORE_eof(OSSL_STORE_CTX * ctx);
int OSSL_STORE_error(OSSL_STORE_CTX * ctx);
int OSSL_STORE_close(OSSL_STORE_CTX * ctx);
int OSSL_STORE_INFO_set0_NAME_description(OSSL_STORE_INFO * info, char* desc);
int OSSL_STORE_INFO_get_type(const OSSL_STORE_INFO * info);
void OSSL_STORE_INFO_free(OSSL_STORE_INFO * info);
int OSSL_STORE_supports_search(OSSL_STORE_CTX * ctx, int search_type);
void OSSL_STORE_SEARCH_free(OSSL_STORE_SEARCH * search);
int OSSL_STORE_SEARCH_get_type(const OSSL_STORE_SEARCH * criterion);
int OSSL_STORE_expect(OSSL_STORE_CTX * ctx, int expected_type);
int OSSL_STORE_find(OSSL_STORE_CTX * ctx, const OSSL_STORE_SEARCH * search);
int OSSL_STORE_LOADER_up_ref(OSSL_STORE_LOADER * loader);
void OSSL_STORE_LOADER_free(OSSL_STORE_LOADER * loader);
int OSSL_STORE_LOADER_is_a(const OSSL_STORE_LOADER * loader, const char* scheme);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_open(OSSL_STORE_LOADER * loader, OSSL_STORE_open_fn open_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_open_ex(OSSL_STORE_LOADER * loader, OSSL_STORE_open_ex_fn open_ex_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_attach(OSSL_STORE_LOADER * loader, OSSL_STORE_attach_fn attach_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_ctrl(OSSL_STORE_LOADER * loader, OSSL_STORE_ctrl_fn ctrl_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_expect(OSSL_STORE_LOADER * loader, OSSL_STORE_expect_fn expect_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_find(OSSL_STORE_LOADER * loader, OSSL_STORE_find_fn find_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_load(OSSL_STORE_LOADER * loader, OSSL_STORE_load_fn load_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_eof(OSSL_STORE_LOADER * loader, OSSL_STORE_eof_fn eof_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_error(OSSL_STORE_LOADER * loader, OSSL_STORE_error_fn error_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_close(OSSL_STORE_LOADER * loader, OSSL_STORE_close_fn close_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_register_loader(OSSL_STORE_LOADER * loader);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

endif

uint32_t OSSL_get_thread_support_flags(void);
int OSSL_set_max_threads(OSSL_LIB_CTX * ctx, uint64_t max_threads);
uint64_t OSSL_get_max_threads(OSSL_LIB_CTX * ctx);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int SSL_CTX_set_tlsext_max_fragment_length(SSL_CTX * ctx, uint8_t mode);
int SSL_set_tlsext_max_fragment_length(SSL * ssl, uint8_t mode);
__owur int SSL_get_servername_type(const SSL * s);
__owur int SSL_export_keying_material(SSL * s, unsigned char* out, size_t olen, const char* label, size_t llen, const unsigned char* context, size_t contextlen, int use_context);
__owur int SSL_export_keying_material_early(SSL * s, unsigned char* out, size_t olen, const char* label, size_t llen, const unsigned char* context, size_t contextlen);
int SSL_get_peer_signature_type_nid(const SSL * s, int* pnid);
int SSL_get_signature_type_nid(const SSL * s, int* pnid);
int SSL_get_sigalgs(SSL * s, int idx, int* psign, int* phash, int* psignandhash, unsigned char* rsig, unsigned char* rhash);
int SSL_get_shared_sigalgs(SSL * s, int idx, int* psign, int* phash, int* psignandhash, unsigned char* rsig, unsigned char* rhash);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int OSSL_trace_get_category_num(const char* name);
int OSSL_trace_set_channel(int category, BIO * channel);
int OSSL_trace_set_prefix(int category, const char* prefix);
int OSSL_trace_set_suffix(int category, const char* suffix);
int OSSL_trace_set_callback(int category, OSSL_trace_cb callback, void* data);
int OSSL_trace_enabled(int category);
void OSSL_trace_end(int category, BIO * channel);
define OSSL_TRACE_STRING_MAX 80
int OSSL_trace_string(BIO * out, int text, int full, const unsigned char* data, size_t size);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int i2d_TS_REQ_fp(FILE * fp, const TS_REQ * a);
int i2d_TS_REQ_bio(BIO * fp, const TS_REQ * a);
int i2d_TS_MSG_IMPRINT_fp(FILE * fp, const TS_MSG_IMPRINT * a);
int i2d_TS_MSG_IMPRINT_bio(BIO * bio, const TS_MSG_IMPRINT * a);
int i2d_TS_RESP_fp(FILE * fp, const TS_RESP * a);
int i2d_TS_RESP_bio(BIO * bio, const TS_RESP * a);
int i2d_TS_TST_INFO_fp(FILE * fp, const TS_TST_INFO * a);
int i2d_TS_TST_INFO_bio(BIO * bio, const TS_TST_INFO * a);
int TS_REQ_set_version(TS_REQ * a, long version);
long TS_REQ_get_version(const TS_REQ * a);
int TS_STATUS_INFO_set_status(TS_STATUS_INFO * a, int i);
const ASN1_BIT_STRING* TS_STATUS_INFO_get0_failure_info(const TS_STATUS_INFO * a);
int TS_REQ_set_msg_imprint(TS_REQ * a, TS_MSG_IMPRINT * msg_imprint);
int TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT * a, X509_ALGOR * alg);
int TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT * a, unsigned char* d, int len);
int TS_REQ_set_policy_id(TS_REQ * a, const ASN1_OBJECT * policy);
int TS_REQ_set_nonce(TS_REQ * a, const ASN1_INTEGER * nonce);
int TS_REQ_set_cert_req(TS_REQ * a, int cert_req);
int TS_REQ_get_cert_req(const TS_REQ * a);
void TS_REQ_ext_free(TS_REQ * a);
int TS_REQ_get_ext_count(TS_REQ * a);
int TS_REQ_get_ext_by_NID(TS_REQ * a, int nid, int lastpos);
int TS_REQ_get_ext_by_OBJ(TS_REQ * a, const ASN1_OBJECT * obj, int lastpos);
int TS_REQ_get_ext_by_critical(TS_REQ * a, int crit, int lastpos);
int TS_REQ_add_ext(TS_REQ * a, X509_EXTENSION * ex, int loc);
int TS_REQ_print_bio(BIO * bio, TS_REQ * a);
int TS_RESP_set_status_info(TS_RESP * a, TS_STATUS_INFO * info);
void TS_RESP_set_tst_info(TS_RESP * a, PKCS7 * p7, TS_TST_INFO * tst_info);
int TS_TST_INFO_set_version(TS_TST_INFO * a, long version);
long TS_TST_INFO_get_version(const TS_TST_INFO * a);
int TS_TST_INFO_set_policy_id(TS_TST_INFO * a, ASN1_OBJECT * policy_id);
int TS_TST_INFO_set_msg_imprint(TS_TST_INFO * a, TS_MSG_IMPRINT * msg_imprint);
int TS_TST_INFO_set_serial(TS_TST_INFO * a, const ASN1_INTEGER * serial);
int TS_TST_INFO_set_time(TS_TST_INFO * a, const ASN1_GENERALIZEDTIME * gtime);
int TS_TST_INFO_set_accuracy(TS_TST_INFO * a, TS_ACCURACY * accuracy);
int TS_ACCURACY_set_seconds(TS_ACCURACY * a, const ASN1_INTEGER * seconds);
int TS_ACCURACY_set_millis(TS_ACCURACY * a, const ASN1_INTEGER * millis);
int TS_ACCURACY_set_micros(TS_ACCURACY * a, const ASN1_INTEGER * micros);
int TS_TST_INFO_set_ordering(TS_TST_INFO * a, int ordering);
int TS_TST_INFO_get_ordering(const TS_TST_INFO * a);
int TS_TST_INFO_set_nonce(TS_TST_INFO * a, const ASN1_INTEGER * nonce);
int TS_TST_INFO_set_tsa(TS_TST_INFO * a, GENERAL_NAME * tsa);
void TS_TST_INFO_ext_free(TS_TST_INFO * a);
int TS_TST_INFO_get_ext_count(TS_TST_INFO * a);
int TS_TST_INFO_get_ext_by_NID(TS_TST_INFO * a, int nid, int lastpos);
int TS_TST_INFO_get_ext_by_OBJ(TS_TST_INFO * a, const ASN1_OBJECT * obj, int lastpos);
int TS_TST_INFO_get_ext_by_critical(TS_TST_INFO * a, int crit, int lastpos);
int TS_TST_INFO_add_ext(TS_TST_INFO * a, X509_EXTENSION * ex, int loc);
void TS_RESP_CTX_free(TS_RESP_CTX * ctx);
int TS_RESP_CTX_set_signer_cert(TS_RESP_CTX * ctx, X509 * signer);
int TS_RESP_CTX_set_signer_key(TS_RESP_CTX * ctx, EVP_PKEY * key);
int TS_RESP_CTX_set_signer_digest(TS_RESP_CTX * ctx, const EVP_MD * signer_digest);
int TS_RESP_CTX_set_ess_cert_id_digest(TS_RESP_CTX * ctx, const EVP_MD * md);
int TS_RESP_CTX_set_def_policy(TS_RESP_CTX * ctx, const ASN1_OBJECT * def_policy);
int TS_RESP_CTX_add_policy(TS_RESP_CTX * ctx, const ASN1_OBJECT * policy);
int TS_RESP_CTX_add_md(TS_RESP_CTX * ctx, const EVP_MD * md);
int TS_RESP_CTX_set_accuracy(TS_RESP_CTX * ctx, int secs, int millis, int micros);
int TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX * ctx, unsigned clock_precision_digits);
void TS_RESP_CTX_add_flags(TS_RESP_CTX * ctx, int flags);
void TS_RESP_CTX_set_serial_cb(TS_RESP_CTX * ctx, TS_serial_cb cb, void* data);
void TS_RESP_CTX_set_time_cb(TS_RESP_CTX * ctx, TS_time_cb cb, void* data);
void TS_RESP_CTX_set_extension_cb(TS_RESP_CTX * ctx, TS_extension_cb cb, void* data);
int TS_RESP_CTX_set_status_info(TS_RESP_CTX * ctx, int status, const char* text);
int TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX * ctx, int status, const char* text);
int TS_RESP_CTX_add_failure_info(TS_RESP_CTX * ctx, int failure);
int TS_RESP_verify_response(TS_VERIFY_CTX * ctx, TS_RESP * response);
int TS_RESP_verify_token(TS_VERIFY_CTX * ctx, PKCS7 * token);
void TS_VERIFY_CTX_init(TS_VERIFY_CTX * ctx);
void TS_VERIFY_CTX_free(TS_VERIFY_CTX * ctx);
void TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX * ctx);
int TS_VERIFY_CTX_set_flags(TS_VERIFY_CTX * ctx, int f);
int TS_VERIFY_CTX_add_flags(TS_VERIFY_CTX * ctx, int f);
int TS_RESP_print_bio(BIO * bio, TS_RESP * a);
int TS_STATUS_INFO_print_bio(BIO * bio, TS_STATUS_INFO * a);
int TS_TST_INFO_print_bio(BIO * bio, TS_TST_INFO * a);
int TS_ASN1_INTEGER_print_bio(BIO * bio, const ASN1_INTEGER * num);
int TS_OBJ_print_bio(BIO * bio, const ASN1_OBJECT * obj);
int TS_X509_ALGOR_print_bio(BIO * bio, const X509_ALGOR * alg);
int TS_MSG_IMPRINT_print_bio(BIO * bio, TS_MSG_IMPRINT * msg);
int TS_CONF_set_serial(CONF * conf, const char* section, TS_serial_cb cb, TS_RESP_CTX * ctx);
ifndef OPENSSL_NO_ENGINE
int TS_CONF_set_crypto_device(CONF * conf, const char* section, const char* device);
int TS_CONF_set_default_engine(const char* name);
endif
int TS_CONF_set_signer_cert(CONF * conf, const char* section, const char* cert, TS_RESP_CTX * ctx);
int TS_CONF_set_certs(CONF * conf, const char* section, const char* certs, TS_RESP_CTX * ctx);
int TS_CONF_set_signer_key(CONF * conf, const char* section, const char* key, const char* pass, TS_RESP_CTX * ctx);
int TS_CONF_set_signer_digest(CONF * conf, const char* section, const char* md, TS_RESP_CTX * ctx);
int TS_CONF_set_def_policy(CONF * conf, const char* section, const char* policy, TS_RESP_CTX * ctx);
int TS_CONF_set_policies(CONF * conf, const char* section, TS_RESP_CTX * ctx);
int TS_CONF_set_digests(CONF * conf, const char* section, TS_RESP_CTX * ctx);
int TS_CONF_set_accuracy(CONF * conf, const char* section, TS_RESP_CTX * ctx);
int TS_CONF_set_clock_precision_digits(const CONF * conf, const char* section, TS_RESP_CTX * ctx);
int TS_CONF_set_ordering(CONF * conf, const char* section, TS_RESP_CTX * ctx);
int TS_CONF_set_tsa_name(CONF * conf, const char* section, TS_RESP_CTX * ctx);
int TS_CONF_set_ess_cert_id_chain(CONF * conf, const char* section, TS_RESP_CTX * ctx);
int TS_CONF_set_ess_cert_id_digest(CONF * conf, const char* section, TS_RESP_CTX * ctx);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

long TXT_DB_write(BIO * out, TXT_DB * db);
void TXT_DB_free(TXT_DB * db);
int TXT_DB_insert(TXT_DB * db, OPENSSL_STRING * value);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void UI_free(UI * ui);
int UI_add_input_string(UI * ui, const char* prompt, int flags, char* result_buf, int minsize, int maxsize);
int UI_dup_input_string(UI * ui, const char* prompt, int flags, char* result_buf, int minsize, int maxsize);
int UI_add_verify_string(UI * ui, const char* prompt, int flags, char* result_buf, int minsize, int maxsize, const char* test_buf);
int UI_dup_verify_string(UI * ui, const char* prompt, int flags, char* result_buf, int minsize, int maxsize, const char* test_buf);
int UI_add_input_boolean(UI * ui, const char* prompt, const char* action_desc, const char* ok_chars, const char* cancel_chars, int flags, char* result_buf);
int UI_dup_input_boolean(UI * ui, const char* prompt, const char* action_desc, const char* ok_chars, const char* cancel_chars, int flags, char* result_buf);
int UI_add_info_string(UI * ui, const char* text);
int UI_dup_info_string(UI * ui, const char* text);
int UI_add_error_string(UI * ui, const char* text);
int UI_dup_error_string(UI * ui, const char* text);
int UI_dup_user_data(UI * ui, void* user_data);
int UI_get_result_length(UI * ui, int i);
int UI_process(UI * ui);
int UI_set_ex_data(UI * r, int idx, void* arg);
void UI_set_default_method(const UI_METHOD * meth);
void UI_destroy_method(UI_METHOD * ui_method);
int UI_method_set_ex_data(UI_METHOD * method, int idx, void* data);
enum UI_string_types UI_get_string_type(UI_STRING * uis);
int UI_get_input_flags(UI_STRING * uis);
int UI_get_result_string_length(UI_STRING * uis);
int UI_get_result_minsize(UI_STRING * uis);
int UI_get_result_maxsize(UI_STRING * uis);
int UI_set_result(UI * ui, UI_STRING * uis, const char* result);
int UI_set_result_ex(UI * ui, UI_STRING * uis, const char* result, int len);
int UI_UTIL_read_pw_string(char* buf, int length, const char* prompt, int verify);
int UI_UTIL_read_pw(char* buf, char* buff, int size, const char* prompt, int verify);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int WHIRLPOOL_Init(WHIRLPOOL_CTX * c);
OSSL_DEPRECATEDIN_3_0 int WHIRLPOOL_Update(WHIRLPOOL_CTX * c, const void* inp, size_t bytes);
OSSL_DEPRECATEDIN_3_0 void WHIRLPOOL_BitUpdate(WHIRLPOOL_CTX * c, const void* inp, size_t bits);
OSSL_DEPRECATEDIN_3_0 int WHIRLPOOL_Final(unsigned char* md, WHIRLPOOL_CTX * c);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void X509_CRL_set_default_method(const X509_CRL_METHOD * meth);
void X509_CRL_METHOD_free(X509_CRL_METHOD * m);
void X509_CRL_set_meth_data(X509_CRL * crl, void* dat);
int X509_verify(X509 * a, EVP_PKEY * r);
int X509_self_signed(X509 * cert, int verify_signature);
int X509_REQ_verify_ex(X509_REQ * a, EVP_PKEY * r, OSSL_LIB_CTX * libctx, const char* propq);
int X509_REQ_verify(X509_REQ * a, EVP_PKEY * r);
int X509_CRL_verify(X509_CRL * a, EVP_PKEY * r);
int NETSCAPE_SPKI_verify(NETSCAPE_SPKI * a, EVP_PKEY * r);
int NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI * x, EVP_PKEY * pkey);
int NETSCAPE_SPKI_print(BIO * out, NETSCAPE_SPKI * spki);
int X509_signature_dump(BIO * bp, const ASN1_STRING * sig, int indent);
int X509_signature_print(BIO * bp, const X509_ALGOR * alg, const ASN1_STRING * sig);
int X509_sign(X509 * x, EVP_PKEY * pkey, const EVP_MD * md);
int X509_sign_ctx(X509 * x, EVP_MD_CTX * ctx);
int X509_REQ_sign(X509_REQ * x, EVP_PKEY * pkey, const EVP_MD * md);
int X509_REQ_sign_ctx(X509_REQ * x, EVP_MD_CTX * ctx);
int X509_CRL_sign(X509_CRL * x, EVP_PKEY * pkey, const EVP_MD * md);
int X509_CRL_sign_ctx(X509_CRL * x, EVP_MD_CTX * ctx);
int NETSCAPE_SPKI_sign(NETSCAPE_SPKI * x, EVP_PKEY * pkey, const EVP_MD * md);
int X509_pubkey_digest(const X509 * data, const EVP_MD * type, unsigned char* md, unsigned int* len);
int X509_digest(const X509 * data, const EVP_MD * type, unsigned char* md, unsigned int* len);
int X509_CRL_digest(const X509_CRL * data, const EVP_MD * type, unsigned char* md, unsigned int* len);
int X509_REQ_digest(const X509_REQ * data, const EVP_MD * type, unsigned char* md, unsigned int* len);
int X509_NAME_digest(const X509_NAME * data, const EVP_MD * type, unsigned char* md, unsigned int* len);
int i2d_X509_fp(FILE * fp, const X509 * x509);
int i2d_X509_CRL_fp(FILE * fp, const X509_CRL * crl);
int i2d_X509_REQ_fp(FILE * fp, const X509_REQ * req);
OSSL_DEPRECATEDIN_3_0 int i2d_RSAPrivateKey_fp(FILE * fp, const RSA * rsa);
OSSL_DEPRECATEDIN_3_0 int i2d_RSAPublicKey_fp(FILE * fp, const RSA * rsa);
OSSL_DEPRECATEDIN_3_0 int i2d_RSA_PUBKEY_fp(FILE * fp, const RSA * rsa);
OSSL_DEPRECATEDIN_3_0 int i2d_DSA_PUBKEY_fp(FILE * fp, const DSA * dsa);
OSSL_DEPRECATEDIN_3_0 int i2d_DSAPrivateKey_fp(FILE * fp, const DSA * dsa);
OSSL_DEPRECATEDIN_3_0 int i2d_EC_PUBKEY_fp(FILE * fp, const EC_KEY * eckey);
OSSL_DEPRECATEDIN_3_0 int i2d_ECPrivateKey_fp(FILE * fp, const EC_KEY * eckey);
int i2d_PKCS8_fp(FILE * fp, const X509_SIG * p8);
int i2d_X509_PUBKEY_fp(FILE * fp, const X509_PUBKEY * xpk);
int i2d_PKCS8_PRIV_KEY_INFO_fp(FILE * fp, const PKCS8_PRIV_KEY_INFO * p8inf);
int i2d_PKCS8PrivateKeyInfo_fp(FILE * fp, const EVP_PKEY * key);
int i2d_PrivateKey_fp(FILE * fp, const EVP_PKEY * pkey);
int i2d_PUBKEY_fp(FILE * fp, const EVP_PKEY * pkey);
int i2d_X509_bio(BIO * bp, const X509 * x509);
int i2d_X509_CRL_bio(BIO * bp, const X509_CRL * crl);
int i2d_X509_REQ_bio(BIO * bp, const X509_REQ * req);
OSSL_DEPRECATEDIN_3_0 int i2d_RSAPrivateKey_bio(BIO * bp, const RSA * rsa);
OSSL_DEPRECATEDIN_3_0 int i2d_RSAPublicKey_bio(BIO * bp, const RSA * rsa);
OSSL_DEPRECATEDIN_3_0 int i2d_RSA_PUBKEY_bio(BIO * bp, const RSA * rsa);
OSSL_DEPRECATEDIN_3_0 int i2d_DSA_PUBKEY_bio(BIO * bp, const DSA * dsa);
OSSL_DEPRECATEDIN_3_0 int i2d_DSAPrivateKey_bio(BIO * bp, const DSA * dsa);
OSSL_DEPRECATEDIN_3_0 int i2d_EC_PUBKEY_bio(BIO * bp, const EC_KEY * eckey);
OSSL_DEPRECATEDIN_3_0 int i2d_ECPrivateKey_bio(BIO * bp, const EC_KEY * eckey);
int i2d_PKCS8_bio(BIO * bp, const X509_SIG * p8);
int i2d_X509_PUBKEY_bio(BIO * bp, const X509_PUBKEY * xpk);
int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO * bp, const PKCS8_PRIV_KEY_INFO * p8inf);
int i2d_PKCS8PrivateKeyInfo_bio(BIO * bp, const EVP_PKEY * key);
int i2d_PrivateKey_bio(BIO * bp, const EVP_PKEY * pkey);
int i2d_PUBKEY_bio(BIO * bp, const EVP_PKEY * pkey);
int X509_ALGOR_set0(X509_ALGOR * alg, ASN1_OBJECT * aobj, int ptype, void* pval);
void X509_ALGOR_get0(const ASN1_OBJECT * *paobj, int* pptype, const void** ppval, const X509_ALGOR * algor);
void X509_ALGOR_set_md(X509_ALGOR * alg, const EVP_MD * md);
int X509_ALGOR_cmp(const X509_ALGOR * a, const X509_ALGOR * b);
int X509_ALGOR_copy(X509_ALGOR * dest, const X509_ALGOR * src);
int X509_cmp_time(const ASN1_TIME * s, time_t * t);
int X509_cmp_current_time(const ASN1_TIME * s);
int X509_cmp_timeframe(const X509_VERIFY_PARAM * vpm, const ASN1_TIME * start, const ASN1_TIME * end);
int X509_PUBKEY_set(X509_PUBKEY * *x, EVP_PKEY * pkey);
long X509_get_pathlen(X509 * x);
void X509_SIG_get0(const X509_SIG * sig, const X509_ALGOR * *palg, const ASN1_OCTET_STRING * *pdigest);
void X509_SIG_getm(X509_SIG * sig, X509_ALGOR * *palg, ASN1_OCTET_STRING * *pdigest);
int X509_NAME_set(X509_NAME * *xn, const X509_NAME * name);
int X509_set_ex_data(X509 * r, int idx, void* arg);
int i2d_re_X509_tbs(X509 * x, unsigned char** pp);
int X509_SIG_INFO_get(const X509_SIG_INFO * siginf, int* mdnid, int* pknid, int* secbits, uint32_t * flags);
void X509_SIG_INFO_set(X509_SIG_INFO * siginf, int mdnid, int pknid, int secbits, uint32_t flags);
int X509_get_signature_info(X509 * x, int* mdnid, int* pknid, int* secbits, uint32_t * flags);
void X509_get0_signature(const ASN1_BIT_STRING * *psig, const X509_ALGOR * *palg, const X509 * x);
int X509_get_signature_nid(const X509 * x);
void X509_set0_distinguishing_id(X509 * x, ASN1_OCTET_STRING * d_id);
void X509_REQ_set0_distinguishing_id(X509_REQ * x, ASN1_OCTET_STRING * d_id);
int X509_alias_set1(X509 * x, const unsigned char* name, int len);
int X509_keyid_set1(X509 * x, const unsigned char* id, int len);
int X509_CRL_add0_revoked(X509_CRL * crl, X509_REVOKED * rev);
int X509_CRL_get0_by_serial(X509_CRL * crl, X509_REVOKED * *ret, const ASN1_INTEGER * serial);
int X509_CRL_get0_by_cert(X509_CRL * crl, X509_REVOKED * *ret, X509 * x);
void X509_PKEY_free(X509_PKEY * a);
void X509_INFO_free(X509_INFO * a);
ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
int ASN1_verify(i2d_of_void * i2d, X509_ALGOR * algor1, ASN1_BIT_STRING * signature, char* data, EVP_PKEY * pkey);
OSSL_DEPRECATEDIN_3_0
int ASN1_digest(i2d_of_void * i2d, const EVP_MD * type, char* data, unsigned char* md, unsigned int* len);
OSSL_DEPRECATEDIN_3_0
int ASN1_sign(i2d_of_void * i2d, X509_ALGOR * algor1, X509_ALGOR * algor2, ASN1_BIT_STRING * signature, char* data, EVP_PKEY * pkey, const EVP_MD * type);
endif
int ASN1_item_digest(const ASN1_ITEM * it, const EVP_MD * type, void* data, unsigned char* md, unsigned int* len);
int ASN1_item_verify(const ASN1_ITEM * it, const X509_ALGOR * alg, const ASN1_BIT_STRING * signature, const void* data, EVP_PKEY * pkey);
int ASN1_item_verify_ctx(const ASN1_ITEM * it, const X509_ALGOR * alg, const ASN1_BIT_STRING * signature, const void* data, EVP_MD_CTX * ctx);
int ASN1_item_sign(const ASN1_ITEM * it, X509_ALGOR * algor1, X509_ALGOR * algor2, ASN1_BIT_STRING * signature, const void* data, EVP_PKEY * pkey, const EVP_MD * md);
int ASN1_item_sign_ctx(const ASN1_ITEM * it, X509_ALGOR * algor1, X509_ALGOR * algor2, ASN1_BIT_STRING * signature, const void* data, EVP_MD_CTX * ctx);
define X509_VERSION_3 2

long X509_get_version(const X509 * x);
int X509_set_version(X509 * x, long version);
int X509_set_serialNumber(X509 * x, ASN1_INTEGER * serial);
int X509_set_issuer_name(X509 * x, const X509_NAME * name);
int X509_set_subject_name(X509 * x, const X509_NAME * name);
const ASN1_TIME* X509_get0_notBefore(const X509 * x);
int X509_set1_notBefore(X509 * x, const ASN1_TIME * tm);
int X509_set1_notAfter(X509 * x, const ASN1_TIME * tm);
int X509_set_pubkey(X509 * x, EVP_PKEY * pkey);
int X509_up_ref(X509 * x);
int X509_get_signature_type(const X509 * x);
void X509_get0_uids(const X509 * x, const ASN1_BIT_STRING * *piuid, const ASN1_BIT_STRING * *psuid);
define X509_REQ_VERSION_1 0

long X509_REQ_get_version(const X509_REQ * req);
int X509_REQ_set_version(X509_REQ * x, long version);
int X509_REQ_set_subject_name(X509_REQ * req, const X509_NAME * name);
void X509_REQ_get0_signature(const X509_REQ * req, const ASN1_BIT_STRING * *psig, const X509_ALGOR * *palg);
void X509_REQ_set0_signature(X509_REQ * req, ASN1_BIT_STRING * psig);
int X509_REQ_set1_signature_algo(X509_REQ * req, X509_ALGOR * palg);
int X509_REQ_get_signature_nid(const X509_REQ * req);
int i2d_re_X509_REQ_tbs(X509_REQ * req, unsigned char** pp);
int X509_REQ_set_pubkey(X509_REQ * x, EVP_PKEY * pkey);
int X509_REQ_extension_nid(int nid);
void X509_REQ_set_extension_nids(int* nids);
int X509_REQ_get_attr_count(const X509_REQ * req);
int X509_REQ_get_attr_by_NID(const X509_REQ * req, int nid, int lastpos);
int X509_REQ_get_attr_by_OBJ(const X509_REQ * req, const ASN1_OBJECT * obj, int lastpos);
int X509_REQ_add1_attr(X509_REQ * req, X509_ATTRIBUTE * attr);
int X509_REQ_add1_attr_by_OBJ(X509_REQ * req, const ASN1_OBJECT * obj, int type, const unsigned char* bytes, int len);
int X509_REQ_add1_attr_by_NID(X509_REQ * req, int nid, int type, const unsigned char* bytes, int len);
int X509_REQ_add1_attr_by_txt(X509_REQ * req, const char* attrname, int type, const unsigned char* bytes, int len);
define X509_CRL_VERSION_2 1

int X509_CRL_set_version(X509_CRL * x, long version);
int X509_CRL_set_issuer_name(X509_CRL * x, const X509_NAME * name);
int X509_CRL_set1_lastUpdate(X509_CRL * x, const ASN1_TIME * tm);
int X509_CRL_set1_nextUpdate(X509_CRL * x, const ASN1_TIME * tm);
int X509_CRL_sort(X509_CRL * crl);
int X509_CRL_up_ref(X509_CRL * crl);
endif

long X509_CRL_get_version(const X509_CRL * crl);
void X509_CRL_get0_signature(const X509_CRL * crl, const ASN1_BIT_STRING * *psig, const X509_ALGOR * *palg);
int X509_CRL_get_signature_nid(const X509_CRL * crl);
int i2d_re_X509_CRL_tbs(X509_CRL * req, unsigned char** pp);
int X509_REVOKED_set_serialNumber(X509_REVOKED * x, ASN1_INTEGER * serial);
int X509_REVOKED_set_revocationDate(X509_REVOKED * r, ASN1_TIME * tm);
int X509_REQ_check_private_key(const X509_REQ * req, EVP_PKEY * pkey);
int X509_check_private_key(const X509 * cert, const EVP_PKEY * pkey);
int X509_CRL_check_suiteb(X509_CRL * crl, EVP_PKEY * pk, unsigned long flags);
int X509_issuer_and_serial_cmp(const X509 * a, const X509 * b);
unsigned long X509_issuer_and_serial_hash(X509 * a);
int X509_issuer_name_cmp(const X509 * a, const X509 * b);
unsigned long X509_issuer_name_hash(X509 * a);
int X509_subject_name_cmp(const X509 * a, const X509 * b);
unsigned long X509_subject_name_hash(X509 * x);
ifndef OPENSSL_NO_MD5
unsigned long X509_issuer_name_hash_old(X509 * a);
unsigned long X509_subject_name_hash_old(X509 * x);
int X509_cmp(const X509 * a, const X509 * b);
int X509_NAME_cmp(const X509_NAME * a, const X509_NAME * b);
OSSL_DEPRECATEDIN_3_0 int X509_certificate_type(const X509 * x, const EVP_PKEY * pubkey);
endif
unsigned long X509_NAME_hash_ex(const X509_NAME * x, OSSL_LIB_CTX * libctx, const char* propq, int* ok);
unsigned long X509_NAME_hash_old(const X509_NAME * x);
int X509_CRL_cmp(const X509_CRL * a, const X509_CRL * b);
int X509_CRL_match(const X509_CRL * a, const X509_CRL * b);
int X509_aux_print(BIO * out, X509 * x, int indent);
ifndef OPENSSL_NO_STDIO
int X509_print_ex_fp(FILE * bp, X509 * x, unsigned long nmflag, unsigned long cflag);
int X509_print_fp(FILE * bp, X509 * x);
int X509_CRL_print_fp(FILE * bp, X509_CRL * x);
int X509_REQ_print_fp(FILE * bp, X509_REQ * req);
int X509_NAME_print_ex_fp(FILE * fp, const X509_NAME * nm, int indent, unsigned long flags);
endif

int X509_NAME_print(BIO * bp, const X509_NAME * name, int obase);
int X509_NAME_print_ex(BIO * out, const X509_NAME * nm, int indent, unsigned long flags);
int X509_print_ex(BIO * bp, X509 * x, unsigned long nmflag, unsigned long cflag);
int X509_print(BIO * bp, X509 * x);
int X509_ocspid_print(BIO * bp, X509 * x);
int X509_CRL_print_ex(BIO * out, X509_CRL * x, unsigned long nmflag);
int X509_CRL_print(BIO * bp, X509_CRL * x);
int X509_REQ_print_ex(BIO * bp, X509_REQ * x, unsigned long nmflag, unsigned long cflag);
int X509_REQ_print(BIO * bp, X509_REQ * req);
int X509_NAME_entry_count(const X509_NAME * name);
int X509_NAME_get_text_by_NID(const X509_NAME * name, int nid, char* buf, int len);
int X509_NAME_get_text_by_OBJ(const X509_NAME * name, const ASN1_OBJECT * obj, char* buf, int len);
int X509_NAME_get_index_by_NID(const X509_NAME * name, int nid, int lastpos);
int X509_NAME_get_index_by_OBJ(const X509_NAME * name, const ASN1_OBJECT * obj, int lastpos);
int X509_NAME_add_entry(X509_NAME * name, const X509_NAME_ENTRY * ne, int loc, int set);
int X509_NAME_add_entry_by_OBJ(X509_NAME * name, const ASN1_OBJECT * obj, int type, const unsigned char* bytes, int len, int loc, int set);
int X509_NAME_add_entry_by_NID(X509_NAME * name, int nid, int type, const unsigned char* bytes, int len, int loc, int set);
int X509_NAME_add_entry_by_txt(X509_NAME * name, const char* field, int type, const unsigned char* bytes, int len, int loc, int set);
int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY * ne, const ASN1_OBJECT * obj);
int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY * ne, int type, const unsigned char* bytes, int len);
ASN1_STRING* X509_NAME_ENTRY_get_data(const X509_NAME_ENTRY * ne);
int X509_NAME_ENTRY_set(const X509_NAME_ENTRY * ne);
int X509_NAME_get0_der(const X509_NAME * nm, const unsigned char** pder, size_t * pderlen);
int X509_get_ext_count(const X509 * x);
int X509_get_ext_by_NID(const X509 * x, int nid, int lastpos);
int X509_get_ext_by_OBJ(const X509 * x, const ASN1_OBJECT * obj, int lastpos);
int X509_get_ext_by_critical(const X509 * x, int crit, int lastpos);
int X509_add_ext(X509 * x, X509_EXTENSION * ex, int loc);
int X509_add1_ext_i2d(X509 * x, int nid, void* value, int crit, unsigned long flags);
int X509_CRL_get_ext_count(const X509_CRL * x);
int X509_CRL_get_ext_by_NID(const X509_CRL * x, int nid, int lastpos);
int X509_CRL_get_ext_by_OBJ(const X509_CRL * x, const ASN1_OBJECT * obj, int lastpos);
int X509_CRL_get_ext_by_critical(const X509_CRL * x, int crit, int lastpos);
int X509_CRL_add_ext(X509_CRL * x, X509_EXTENSION * ex, int loc);
int X509_CRL_add1_ext_i2d(X509_CRL * x, int nid, void* value, int crit, unsigned long flags);
int X509_REVOKED_get_ext_count(const X509_REVOKED * x);
int X509_REVOKED_get_ext_by_NID(const X509_REVOKED * x, int nid, int lastpos);
int X509_REVOKED_get_ext_by_OBJ(const X509_REVOKED * x, const ASN1_OBJECT * obj, int lastpos);
int X509_REVOKED_get_ext_by_critical(const X509_REVOKED * x, int crit, int lastpos);
int X509_REVOKED_add_ext(X509_REVOKED * x, X509_EXTENSION * ex, int loc);
int X509_REVOKED_add1_ext_i2d(X509_REVOKED * x, int nid, void* value, int crit, unsigned long flags);
int X509_EXTENSION_set_object(X509_EXTENSION * ex, const ASN1_OBJECT * obj);
int X509_EXTENSION_set_critical(X509_EXTENSION * ex, int crit);
int X509_EXTENSION_set_data(X509_EXTENSION * ex, ASN1_OCTET_STRING * data);
int X509_EXTENSION_get_critical(const X509_EXTENSION * ex);
int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE * attr, const ASN1_OBJECT * obj);
int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE * attr, int attrtype, const void* data, int len);
int X509_ATTRIBUTE_count(const X509_ATTRIBUTE * attr);
int EVP_PKEY_get_attr_count(const EVP_PKEY * key);
int EVP_PKEY_get_attr_by_NID(const EVP_PKEY * key, int nid, int lastpos);
int EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY * key, const ASN1_OBJECT * obj, int lastpos);
int EVP_PKEY_add1_attr(EVP_PKEY * key, X509_ATTRIBUTE * attr);
int EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY * key, const ASN1_OBJECT * obj, int type, const unsigned char* bytes, int len);
int EVP_PKEY_add1_attr_by_NID(EVP_PKEY * key, int nid, int type, const unsigned char* bytes, int len);
int EVP_PKEY_add1_attr_by_txt(EVP_PKEY * key, const char* attrname, int type, const unsigned char* bytes, int len);
endif

int PKCS5_pbe_set0_algor(X509_ALGOR * algor, int alg, int iter, const unsigned char* salt, int saltlen);
int PKCS5_pbe_set0_algor_ex(X509_ALGOR * algor, int alg, int iter, const unsigned char* salt, int saltlen, OSSL_LIB_CTX * libctx);
int PKCS8_pkey_set0(PKCS8_PRIV_KEY_INFO * priv, ASN1_OBJECT * aobj, int version, int ptype, void* pval, unsigned char* penc, int penclen);
int PKCS8_pkey_get0(const ASN1_OBJECT * *ppkalg, const unsigned char** pk, int* ppklen, const X509_ALGOR * *pa, const PKCS8_PRIV_KEY_INFO * p8);
int PKCS8_pkey_add1_attr(PKCS8_PRIV_KEY_INFO * p8, X509_ATTRIBUTE * attr);
int PKCS8_pkey_add1_attr_by_NID(PKCS8_PRIV_KEY_INFO * p8, int nid, int type, const unsigned char* bytes, int len);
int PKCS8_pkey_add1_attr_by_OBJ(PKCS8_PRIV_KEY_INFO * p8, const ASN1_OBJECT * obj, int type, const unsigned char* bytes, int len);
void X509_PUBKEY_set0_public_key(X509_PUBKEY * pub, unsigned char* penc, int penclen);
int X509_PUBKEY_set0_param(X509_PUBKEY * pub, ASN1_OBJECT * aobj, int ptype, void* pval, unsigned char* penc, int penclen);
int X509_PUBKEY_get0_param(ASN1_OBJECT * *ppkalg, const unsigned char** pk, int* ppklen, X509_ALGOR * *pa, const X509_PUBKEY * pub);
int X509_PUBKEY_eq(const X509_PUBKEY * a, const X509_PUBKEY * b);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

int SXNET_add_id_asc(SXNET * *psx, const char* zone, const char* user, int userlen);
int SXNET_add_id_ulong(SXNET * *psx, unsigned long lzone, const char* user, int userlen);
int SXNET_add_id_INTEGER(SXNET * *psx, ASN1_INTEGER * izone, const char* user, int userlen);
int GENERAL_NAME_cmp(GENERAL_NAME * a, GENERAL_NAME * b);
int GENERAL_NAME_print(BIO * out, GENERAL_NAME * gen);
int OTHERNAME_cmp(OTHERNAME * a, OTHERNAME * b);
void GENERAL_NAME_set0_value(GENERAL_NAME * a, int type, void* value);
int GENERAL_NAME_set0_othername(GENERAL_NAME * gen, ASN1_OBJECT * oid, ASN1_TYPE * value);
int GENERAL_NAME_get0_otherName(const GENERAL_NAME * gen, ASN1_OBJECT * *poid, ASN1_TYPE * *pvalue);
int i2a_ACCESS_DESCRIPTION(BIO * bp, const ACCESS_DESCRIPTION * a);
int DIST_POINT_set_dpname(DIST_POINT_NAME * dpn, const X509_NAME * iname);
int NAME_CONSTRAINTS_check(X509 * x, NAME_CONSTRAINTS * nc);
int NAME_CONSTRAINTS_check_CN(X509 * x, NAME_CONSTRAINTS * nc);
void X509V3_conf_free(CONF_VALUE * val);
int X509V3_EXT_add_nconf(CONF * conf, X509V3_CTX * ctx, const char* section, X509 * cert);
int X509V3_EXT_REQ_add_nconf(CONF * conf, X509V3_CTX * ctx, const char* section, X509_REQ * req);
int X509V3_EXT_CRL_add_nconf(CONF * conf, X509V3_CTX * ctx, const char* section, X509_CRL * crl);
int X509V3_get_value_bool(const CONF_VALUE * value, int* asn1_bool);
int X509V3_get_value_int(const CONF_VALUE * value, ASN1_INTEGER * *aint);
void X509V3_set_nconf(X509V3_CTX * ctx, CONF * conf);
void X509V3_string_free(X509V3_CTX * ctx, char* str);
void X509V3_set_ctx(X509V3_CTX * ctx, X509 * issuer, X509 * subject, X509_REQ * req, X509_CRL * crl, int flags);
int X509V3_set_issuer_pkey(X509V3_CTX * ctx, EVP_PKEY * pkey);
int X509V3_EXT_add(X509V3_EXT_METHOD * ext);
int X509V3_EXT_add_list(X509V3_EXT_METHOD * extlist);
int X509V3_EXT_add_alias(int nid_to, int nid_from);
void X509V3_EXT_cleanup(void);
int X509V3_add_standard_extensions(void);
int X509V3_EXT_print(BIO * out, X509_EXTENSION * ext, unsigned long flag, int indent);
ifndef OPENSSL_NO_STDIO
int X509V3_EXT_print_fp(FILE * out, X509_EXTENSION * ext, int flag, int indent);
int X509_check_ca(X509 * x);
int X509_check_purpose(X509 * x, int id, int ca);
int X509_supported_extension(X509_EXTENSION * ex);
int X509_PURPOSE_set(int* p, int purpose);
int X509_check_issued(X509 * issuer, X509 * subject);
int X509_check_akid(const X509 * issuer, const AUTHORITY_KEYID * akid);
void X509_set_proxy_flag(X509 * x);
void X509_set_proxy_pathlen(X509 * x, long l);
long X509_get_proxy_pathlen(X509 * x);
uint32_t X509_get_extension_flags(X509 * x);
uint32_t X509_get_key_usage(X509 * x);
uint32_t X509_get_extended_key_usage(X509 * x);
int X509_PURPOSE_get_count(void);
int X509_PURPOSE_get_by_sname(const char* sname);
int X509_PURPOSE_get_by_id(int id);
int X509_PURPOSE_get_trust(const X509_PURPOSE * xp);
void X509_PURPOSE_cleanup(void);
int X509_PURPOSE_get_id(const X509_PURPOSE*);
define _X509_CHECK_FLAG_DOT_SUBDOMAINS 0x8000

int X509_check_host(X509 * x, const char* chk, size_t chklen, unsigned int flags, char** peername);
int X509_check_email(X509 * x, const char* chk, size_t chklen, unsigned int flags);
int X509_check_ip(X509 * x, const unsigned char* chk, size_t chklen, unsigned int flags);
int X509_check_ip_asc(X509 * x, const char* ipasc, unsigned int flags);
void X509_POLICY_NODE_print(BIO * out, X509_POLICY_NODE * node, int indent);
int X509v3_asid_add_inherit(ASIdentifiers * asid, int which);
int X509v3_asid_add_id_or_range(ASIdentifiers * asid, int which, ASN1_INTEGER * min, ASN1_INTEGER * max);
int X509v3_addr_add_inherit(IPAddrBlocks * addr, const unsigned afi, const unsigned* safi);
int X509v3_addr_add_prefix(IPAddrBlocks * addr, const unsigned afi, const unsigned* safi, unsigned char* a, const int prefixlen);
int X509v3_addr_add_range(IPAddrBlocks * addr, const unsigned afi, const unsigned* safi, unsigned char* min, unsigned char* max);
unsigned X509v3_addr_get_afi(const IPAddressFamily * f);
int X509v3_addr_get_range(IPAddressOrRange * aor, const unsigned afi, unsigned char* min, unsigned char* max, const int length);
int X509v3_asid_is_canonical(ASIdentifiers * asid);
int X509v3_addr_is_canonical(IPAddrBlocks * addr);
int X509v3_asid_canonize(ASIdentifiers * asid);
int X509v3_addr_canonize(IPAddrBlocks * addr);
int X509v3_asid_inherits(ASIdentifiers * asid);
int X509v3_addr_inherits(IPAddrBlocks * addr);
int X509v3_asid_subset(ASIdentifiers * a, ASIdentifiers * b);
int X509v3_addr_subset(IPAddrBlocks * a, IPAddrBlocks * b);
int X509v3_asid_validate_path(X509_STORE_CTX*);
int X509v3_addr_validate_path(X509_STORE_CTX*);
void NAMING_AUTHORITY_set0_authorityId(NAMING_AUTHORITY * n, ASN1_OBJECT * namingAuthorityId);
void NAMING_AUTHORITY_set0_authorityURL(NAMING_AUTHORITY * n, ASN1_IA5STRING * namingAuthorityUrl);
void NAMING_AUTHORITY_set0_authorityText(NAMING_AUTHORITY * n, ASN1_STRING * namingAuthorityText);
void ADMISSION_SYNTAX_set0_admissionAuthority(ADMISSION_SYNTAX * as, GENERAL_NAME * aa);
void ADMISSIONS_set0_admissionAuthority(ADMISSIONS * a, GENERAL_NAME * aa);
void ADMISSIONS_set0_namingAuthority(ADMISSIONS * a, NAMING_AUTHORITY * na);
void ADMISSIONS_set0_professionInfos(ADMISSIONS * a, PROFESSION_INFOS * pi);
void PROFESSION_INFO_set0_addProfessionInfo(PROFESSION_INFO * pi, ASN1_OCTET_STRING * aos);
void PROFESSION_INFO_set0_namingAuthority(PROFESSION_INFO * pi, NAMING_AUTHORITY * na);
void PROFESSION_INFO_set0_registrationNumber(PROFESSION_INFO * pi, ASN1_PRINTABLESTRING * rn);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

define X509_TRUST_UNTRUSTED    3

int X509_TRUST_set(int* t, int trust);
int X509_TRUST_get_count(void);
int X509_TRUST_get_by_id(int id);
void X509_TRUST_cleanup(void);
int X509_TRUST_get_flags(const X509_TRUST * xp);
int X509_TRUST_get_trust(const X509_TRUST * xp);
int X509_trusted(const X509 * x);
int X509_add1_trust_object(X509 * x, const ASN1_OBJECT * obj);
int X509_add1_reject_object(X509 * x, const ASN1_OBJECT * obj);
void X509_trust_clear(X509 * x);
void X509_reject_clear(X509 * x);
int X509_check_trust(X509 * x, int id, int flags);
int X509_verify_cert(X509_STORE_CTX * ctx);
int X509_STORE_CTX_verify(X509_STORE_CTX * ctx);
int X509_STORE_set_depth(X509_STORE * store, int depth);
int X509_STORE_CTX_print_verify_cb(int ok, X509_STORE_CTX * ctx);
void X509_STORE_CTX_set_depth(X509_STORE_CTX * ctx, int depth);
int X509_OBJECT_up_ref_count(X509_OBJECT * a);
void X509_OBJECT_free(X509_OBJECT * a);
X509_LOOKUP_TYPE X509_OBJECT_get_type(const X509_OBJECT * a);
int X509_OBJECT_set1_X509(X509_OBJECT * a, X509 * obj);
int X509_OBJECT_set1_X509_CRL(X509_OBJECT * a, X509_CRL * obj);
void X509_STORE_free(X509_STORE * xs);
int X509_STORE_lock(X509_STORE * xs);
int X509_STORE_unlock(X509_STORE * xs);
int X509_STORE_up_ref(X509_STORE * xs);
int X509_STORE_set_flags(X509_STORE * xs, unsigned long flags);
int X509_STORE_set_purpose(X509_STORE * xs, int purpose);
int X509_STORE_set_trust(X509_STORE * xs, int trust);
int X509_STORE_set1_param(X509_STORE * xs, const X509_VERIFY_PARAM * pm);
void X509_STORE_set_verify(X509_STORE * xs, X509_STORE_CTX_verify_fn verify);
void X509_STORE_CTX_set_verify(X509_STORE_CTX * ctx, X509_STORE_CTX_verify_fn verify);
X509_STORE_CTX_verify_fn X509_STORE_get_verify(const X509_STORE * xs);
void X509_STORE_set_verify_cb(X509_STORE * xs, X509_STORE_CTX_verify_cb verify_cb);
X509_STORE_CTX_verify_cb X509_STORE_get_verify_cb(const X509_STORE * xs);
void X509_STORE_set_get_issuer(X509_STORE * xs, X509_STORE_CTX_get_issuer_fn get_issuer);
X509_STORE_CTX_get_issuer_fn X509_STORE_get_get_issuer(const X509_STORE * xs);
void X509_STORE_set_check_issued(X509_STORE * xs, X509_STORE_CTX_check_issued_fn check_issued);
X509_STORE_CTX_check_issued_fn X509_STORE_get_check_issued(const X509_STORE * s);
void X509_STORE_set_check_revocation(X509_STORE * xs, X509_STORE_CTX_check_revocation_fn check_revocation);
X509_STORE_CTX_check_revocation_fn X509_STORE_get_check_revocation(const X509_STORE * xs);
void X509_STORE_set_get_crl(X509_STORE * xs, X509_STORE_CTX_get_crl_fn get_crl);
X509_STORE_CTX_get_crl_fn X509_STORE_get_get_crl(const X509_STORE * xs);
void X509_STORE_set_check_crl(X509_STORE * xs, X509_STORE_CTX_check_crl_fn check_crl);
X509_STORE_CTX_check_crl_fn X509_STORE_get_check_crl(const X509_STORE * xs);
void X509_STORE_set_cert_crl(X509_STORE * xs, X509_STORE_CTX_cert_crl_fn cert_crl);
X509_STORE_CTX_cert_crl_fn X509_STORE_get_cert_crl(const X509_STORE * xs);
void X509_STORE_set_check_policy(X509_STORE * xs, X509_STORE_CTX_check_policy_fn check_policy);
X509_STORE_CTX_check_policy_fn X509_STORE_get_check_policy(const X509_STORE * s);
void X509_STORE_set_lookup_certs(X509_STORE * xs, X509_STORE_CTX_lookup_certs_fn lookup_certs);
X509_STORE_CTX_lookup_certs_fn X509_STORE_get_lookup_certs(const X509_STORE * s);
void X509_STORE_set_lookup_crls(X509_STORE * xs, X509_STORE_CTX_lookup_crls_fn lookup_crls);
X509_STORE_CTX_lookup_crls_fn X509_STORE_get_lookup_crls(const X509_STORE * xs);
void X509_STORE_set_cleanup(X509_STORE * xs, X509_STORE_CTX_cleanup_fn cleanup);
X509_STORE_CTX_cleanup_fn X509_STORE_get_cleanup(const X509_STORE * xs);
int X509_STORE_set_ex_data(X509_STORE * xs, int idx, void* data);
int X509_STORE_CTX_get1_issuer(X509 * *issuer, X509_STORE_CTX * ctx, X509 * x);
void X509_STORE_CTX_free(X509_STORE_CTX * ctx);
int X509_STORE_CTX_init_rpk(X509_STORE_CTX * ctx, X509_STORE * trust_store, EVP_PKEY * rpk);
void X509_STORE_CTX_cleanup(X509_STORE_CTX * ctx);
void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX * ctx, X509_STORE_CTX_verify_cb verify);
X509_STORE_CTX_verify_cb X509_STORE_CTX_get_verify_cb(const X509_STORE_CTX * ctx);
X509_STORE_CTX_verify_fn X509_STORE_CTX_get_verify(const X509_STORE_CTX * ctx);
X509_STORE_CTX_get_issuer_fn X509_STORE_CTX_get_get_issuer(const X509_STORE_CTX * ctx);
X509_STORE_CTX_check_issued_fn X509_STORE_CTX_get_check_issued(const X509_STORE_CTX * ctx);
X509_STORE_CTX_check_revocation_fn X509_STORE_CTX_get_check_revocation(const X509_STORE_CTX * ctx);
void X509_STORE_CTX_set_get_crl(X509_STORE_CTX * ctx, X509_STORE_CTX_get_crl_fn get_crl);
X509_STORE_CTX_get_crl_fn X509_STORE_CTX_get_get_crl(const X509_STORE_CTX * ctx);
X509_STORE_CTX_check_crl_fn X509_STORE_CTX_get_check_crl(const X509_STORE_CTX * ctx);
X509_STORE_CTX_cert_crl_fn X509_STORE_CTX_get_cert_crl(const X509_STORE_CTX * ctx);
X509_STORE_CTX_check_policy_fn X509_STORE_CTX_get_check_policy(const X509_STORE_CTX * ctx);
X509_STORE_CTX_lookup_certs_fn X509_STORE_CTX_get_lookup_certs(const X509_STORE_CTX * ctx);
X509_STORE_CTX_lookup_crls_fn X509_STORE_CTX_get_lookup_crls(const X509_STORE_CTX * ctx);
X509_STORE_CTX_cleanup_fn X509_STORE_CTX_get_cleanup(const X509_STORE_CTX * ctx);
void X509_LOOKUP_meth_free(X509_LOOKUP_METHOD * method);
int X509_LOOKUP_meth_set_ctrl(X509_LOOKUP_METHOD * method, X509_LOOKUP_ctrl_fn ctrl_fn);
X509_LOOKUP_ctrl_fn X509_LOOKUP_meth_get_ctrl(const X509_LOOKUP_METHOD * method);
int X509_LOOKUP_meth_set_get_by_subject(X509_LOOKUP_METHOD * method, X509_LOOKUP_get_by_subject_fn fn);
X509_LOOKUP_get_by_subject_fn X509_LOOKUP_meth_get_get_by_subject(const X509_LOOKUP_METHOD * method);
int X509_LOOKUP_meth_set_get_by_issuer_serial(X509_LOOKUP_METHOD * method, X509_LOOKUP_get_by_issuer_serial_fn fn);
X509_LOOKUP_get_by_issuer_serial_fn X509_LOOKUP_meth_get_get_by_issuer_serial(const X509_LOOKUP_METHOD * method);
int X509_LOOKUP_meth_set_get_by_fingerprint(X509_LOOKUP_METHOD * method, X509_LOOKUP_get_by_fingerprint_fn fn);
X509_LOOKUP_get_by_fingerprint_fn X509_LOOKUP_meth_get_get_by_fingerprint(const X509_LOOKUP_METHOD * method);
int X509_LOOKUP_meth_set_get_by_alias(X509_LOOKUP_METHOD * method, X509_LOOKUP_get_by_alias_fn fn);
X509_LOOKUP_get_by_alias_fn X509_LOOKUP_meth_get_get_by_alias(const X509_LOOKUP_METHOD * method);
int X509_STORE_add_cert(X509_STORE * xs, X509 * x);
int X509_STORE_add_crl(X509_STORE * xs, X509_CRL * x);
int X509_STORE_CTX_get_by_subject(const X509_STORE_CTX * vs, X509_LOOKUP_TYPE type, const X509_NAME * name, X509_OBJECT * ret);
int X509_LOOKUP_ctrl(X509_LOOKUP * ctx, int cmd, const char* argc, long argl, char** ret);
int X509_LOOKUP_ctrl_ex(X509_LOOKUP * ctx, int cmd, const char* argc, long argl, char** ret, OSSL_LIB_CTX * libctx, const char* propq);
int X509_load_cert_file(X509_LOOKUP * ctx, const char* file, int type);
int X509_load_cert_file_ex(X509_LOOKUP * ctx, const char* file, int type, OSSL_LIB_CTX * libctx, const char* propq);
int X509_load_crl_file(X509_LOOKUP * ctx, const char* file, int type);
int X509_load_cert_crl_file(X509_LOOKUP * ctx, const char* file, int type);
int X509_load_cert_crl_file_ex(X509_LOOKUP * ctx, const char* file, int type, OSSL_LIB_CTX * libctx, const char* propq);
void X509_LOOKUP_free(X509_LOOKUP * ctx);
int X509_LOOKUP_init(X509_LOOKUP * ctx);
int X509_LOOKUP_by_subject(X509_LOOKUP * ctx, X509_LOOKUP_TYPE type, const X509_NAME * name, X509_OBJECT * ret);
int X509_LOOKUP_by_subject_ex(X509_LOOKUP * ctx, X509_LOOKUP_TYPE type, const X509_NAME * name, X509_OBJECT * ret, OSSL_LIB_CTX * libctx, const char* propq);
int X509_LOOKUP_by_issuer_serial(X509_LOOKUP * ctx, X509_LOOKUP_TYPE type, const X509_NAME * name, const ASN1_INTEGER * serial, X509_OBJECT * ret);
int X509_LOOKUP_by_fingerprint(X509_LOOKUP * ctx, X509_LOOKUP_TYPE type, const unsigned char* bytes, int len, X509_OBJECT * ret);
int X509_LOOKUP_by_alias(X509_LOOKUP * ctx, X509_LOOKUP_TYPE type, const char* str, int len, X509_OBJECT * ret);
int X509_LOOKUP_set_method_data(X509_LOOKUP * ctx, void* data);
int X509_LOOKUP_shutdown(X509_LOOKUP * ctx);
int X509_STORE_load_file(X509_STORE * xs, const char* file);
int X509_STORE_load_path(X509_STORE * xs, const char* path);
int X509_STORE_load_store(X509_STORE * xs, const char* store);
int X509_STORE_load_locations(X509_STORE * s, const char* file, const char* dir);
int X509_STORE_set_default_paths(X509_STORE * xs);
int X509_STORE_load_file_ex(X509_STORE * xs, const char* file, OSSL_LIB_CTX * libctx, const char* propq);
int X509_STORE_load_store_ex(X509_STORE * xs, const char* store, OSSL_LIB_CTX * libctx, const char* propq);
int X509_STORE_load_locations_ex(X509_STORE * xs, const char* file, const char* dir, OSSL_LIB_CTX * libctx, const char* propq);
int X509_STORE_set_default_paths_ex(X509_STORE * xs, OSSL_LIB_CTX * libctx, const char* propq);
int X509_STORE_CTX_set_ex_data(X509_STORE_CTX * ctx, int idx, void* data);
int X509_STORE_CTX_get_error(const X509_STORE_CTX * ctx);
void X509_STORE_CTX_set_error(X509_STORE_CTX * ctx, int s);
int X509_STORE_CTX_get_error_depth(const X509_STORE_CTX * ctx);
void X509_STORE_CTX_set_error_depth(X509_STORE_CTX * ctx, int depth);
void X509_STORE_CTX_set_current_cert(X509_STORE_CTX * ctx, X509 * x);
void X509_STORE_CTX_set_cert(X509_STORE_CTX * ctx, X509 * target);
void X509_STORE_CTX_set0_rpk(X509_STORE_CTX * ctx, EVP_PKEY * target);
int X509_STORE_CTX_set_purpose(X509_STORE_CTX * ctx, int purpose);
int X509_STORE_CTX_set_trust(X509_STORE_CTX * ctx, int trust);
int X509_STORE_CTX_purpose_inherit(X509_STORE_CTX * ctx, int def_purpose, int purpose, int trust);
void X509_STORE_CTX_set_flags(X509_STORE_CTX * ctx, unsigned long flags);
void X509_STORE_CTX_set_time(X509_STORE_CTX * ctx, unsigned long flags, time_t t);
void X509_STORE_CTX_set_current_reasons(X509_STORE_CTX * ctx, unsigned int current_reasons);
int X509_STORE_CTX_get_explicit_policy(const X509_STORE_CTX * ctx);
int X509_STORE_CTX_get_num_untrusted(const X509_STORE_CTX * ctx);
void X509_STORE_CTX_set0_param(X509_STORE_CTX * ctx, X509_VERIFY_PARAM * param);
int X509_STORE_CTX_set_default(X509_STORE_CTX * ctx, const char* name);
void X509_STORE_CTX_set0_dane(X509_STORE_CTX * ctx, SSL_DANE * dane);
void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM * param);
int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM * to, const X509_VERIFY_PARAM * from);
int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM * to, const X509_VERIFY_PARAM * from);
int X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM * param, const char* name);
int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM * param, unsigned long flags);
int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM * param, unsigned long flags);
unsigned long X509_VERIFY_PARAM_get_flags(const X509_VERIFY_PARAM * param);
int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM * param, int purpose);
int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM * param, int trust);
void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM * param, int depth);
void X509_VERIFY_PARAM_set_auth_level(X509_VERIFY_PARAM * param, int auth_level);
time_t X509_VERIFY_PARAM_get_time(const X509_VERIFY_PARAM * param);
void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM * param, time_t t);
int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM * param, ASN1_OBJECT * policy);
int X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM * param, uint32_t flags);
uint32_t X509_VERIFY_PARAM_get_inh_flags(const X509_VERIFY_PARAM * param);
int X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM * param, const char* name, size_t namelen);
int X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM * param, const char* name, size_t namelen);
void X509_VERIFY_PARAM_set_hostflags(X509_VERIFY_PARAM * param, unsigned int flags);
unsigned int X509_VERIFY_PARAM_get_hostflags(const X509_VERIFY_PARAM * param);
void X509_VERIFY_PARAM_move_peername(X509_VERIFY_PARAM*, X509_VERIFY_PARAM*);
int X509_VERIFY_PARAM_set1_email(X509_VERIFY_PARAM * param, const char* email, size_t emaillen);
int X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM * param, const unsigned char* ip, size_t iplen);
int X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM * param, const char* ipasc);
int X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM * param);
int X509_VERIFY_PARAM_get_auth_level(const X509_VERIFY_PARAM * param);
int X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM * param);
int X509_VERIFY_PARAM_get_count(void);
void X509_VERIFY_PARAM_table_cleanup(void);
void X509_policy_tree_free(X509_POLICY_TREE * tree);
int X509_policy_tree_level_count(const X509_POLICY_TREE * tree);
int X509_policy_level_node_count(X509_POLICY_LEVEL * level);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_PHYSX_CORE_API void release(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_C_EXPORT PX_PHYSX_CORE_API	PxBpFilterGroup PxGetBroadPhaseStaticFilterGroup(void);
PX_C_EXPORT PX_PHYSX_CORE_API	PxBpFilterGroup PxGetBroadPhaseDynamicFilterGroup(PxU32 id);
PX_C_EXPORT PX_PHYSX_CORE_API	PxBpFilterGroup PxGetBroadPhaseKinematicFilterGroup(PxU32 id);
PX_C_EXPORT PX_PHYSX_CORE_API	PxBroadPhase* PxCreateBroadPhase(const PxBroadPhaseDesc & desc);
PX_C_EXPORT PX_PHYSX_CORE_API	PxAABBManager* PxCreateAABBManager(PxBroadPhase & broadphase);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_C_EXPORT PX_PHYSX_CORE_API void PxConstructSolverBodies(const PxRigidBodyData * inRigidData, PxSolverBodyData * outSolverBodyData, PxU32 nbBodies, const PxVec3 & gravity, PxReal dt, bool gyroscopicForces = false);
PX_C_EXPORT PX_PHYSX_CORE_API void PxConstructStaticSolverBody(const PxTransform & globalPose, PxSolverBodyData & solverBodyData);
PX_C_EXPORT PX_PHYSX_CORE_API PxU32 PxBatchConstraints(const PxSolverConstraintDesc * solverConstraintDescs, PxU32 nbConstraints, PxSolverBody * solverBodies, PxU32 nbBodies, PxConstraintBatchHeader * outBatchHeaders, PxSolverConstraintDesc * outOrderedConstraintDescs, PxArticulationHandle * articulations = NULL, PxU32 nbArticulations = 0);
PX_C_EXPORT PX_PHYSX_CORE_API bool PxCreateContactConstraints(PxConstraintBatchHeader * batchHeaders, PxU32 nbHeaders, PxSolverContactDesc * contactDescs, PxConstraintAllocator & allocator, PxReal invDt, PxReal bounceThreshold, PxReal frictionOffsetThreshold, PxReal correlationDistance, PxSpatialVector * Z = NULL);
PX_C_EXPORT PX_PHYSX_CORE_API bool PxCreateJointConstraints(PxConstraintBatchHeader * batchHeaders, PxU32 nbHeaders, PxSolverConstraintPrepDesc * jointDescs, PxConstraintAllocator & allocator, PxSpatialVector * Z, PxReal dt, PxReal invDt);
PX_C_EXPORT PX_PHYSX_CORE_API bool PxCreateJointConstraintsWithShaders(PxConstraintBatchHeader * batchHeaders, PxU32 nbBatchHeaders, PxConstraint * *constraints, PxSolverConstraintPrepDesc * jointDescs, PxConstraintAllocator & allocator, PxReal dt, PxReal invDt, PxSpatialVector * Z = NULL);
PX_C_EXPORT PX_PHYSX_CORE_API bool PxCreateJointConstraintsWithImmediateShaders(PxConstraintBatchHeader * batchHeaders, PxU32 nbBatchHeaders, PxImmediateConstraint * constraints, PxSolverConstraintPrepDesc * jointDescs, PxConstraintAllocator & allocator, PxReal dt, PxReal invDt, PxSpatialVector * Z = NULL);
PX_C_EXPORT PX_PHYSX_CORE_API void PxSolveConstraints(const PxConstraintBatchHeader * batchHeaders, PxU32 nbBatchHeaders, const PxSolverConstraintDesc * solverConstraintDescs, const PxSolverBody * solverBodies, PxVec3 * linearMotionVelocity, PxVec3 * angularMotionVelocity, PxU32 nbSolverBodies, PxU32 nbPositionIterations, PxU32 nbVelocityIterations, float dt = 0.0f, float invDt = 0.0f, PxU32 nbSolverArticulations = 0, PxArticulationHandle * solverArticulations = NULL, PxSpatialVector * Z = NULL, PxSpatialVector * deltaV = NULL);
PX_C_EXPORT PX_PHYSX_CORE_API void PxIntegrateSolverBodies(PxSolverBodyData * solverBodyData, PxSolverBody * solverBody, const PxVec3 * linearMotionVelocity, const PxVec3 * angularMotionState, PxU32 nbBodiesToIntegrate, PxReal dt);
PX_C_EXPORT PX_PHYSX_CORE_API bool PxGenerateContacts(const PxGeometry* const* geom0, const PxGeometry* const* geom1, const PxTransform * pose0, const PxTransform * pose1, PxCache * contactCache, PxU32 nbPairs, PxContactRecorder & contactRecorder, PxReal contactDistance, PxReal meshContactMargin, PxReal toleranceLength, PxCacheAllocator & allocator);
PX_C_EXPORT PX_PHYSX_CORE_API PxArticulationCookie PxBeginCreateArticulationRC(const PxArticulationDataRC & data);
PX_C_EXPORT PX_PHYSX_CORE_API PxArticulationLinkCookie PxAddArticulationLink(PxArticulationCookie articulation, const PxArticulationLinkCookie * parent, const PxArticulationLinkDataRC & data);
PX_C_EXPORT PX_PHYSX_CORE_API PxArticulationHandle PxEndCreateArticulationRC(PxArticulationCookie articulation, PxArticulationLinkHandle * linkHandles, PxU32 bufferSize);
PX_C_EXPORT PX_PHYSX_CORE_API void PxReleaseArticulation(PxArticulationHandle articulation);
PX_C_EXPORT PX_PHYSX_CORE_API PxArticulationCache* PxCreateArticulationCache(PxArticulationHandle articulation);
PX_C_EXPORT PX_PHYSX_CORE_API void PxCopyInternalStateToArticulationCache(PxArticulationHandle articulation, PxArticulationCache & cache, PxArticulationCacheFlags flag);
PX_C_EXPORT PX_PHYSX_CORE_API void PxApplyArticulationCache(PxArticulationHandle articulation, PxArticulationCache & cache, PxArticulationCacheFlags flag);
PX_C_EXPORT PX_PHYSX_CORE_API void PxReleaseArticulationCache(PxArticulationCache & cache);
PX_C_EXPORT PX_PHYSX_CORE_API bool PxGetLinkData(const PxArticulationLinkHandle & link, PxArticulationLinkDerivedDataRC & data);
PX_C_EXPORT PX_PHYSX_CORE_API PxU32 PxGetAllLinkData(const PxArticulationHandle articulation, PxArticulationLinkDerivedDataRC * data);
PX_C_EXPORT PX_PHYSX_CORE_API bool PxGetMutableLinkData(const PxArticulationLinkHandle & link, PxArticulationLinkMutableDataRC & data);
PX_C_EXPORT PX_PHYSX_CORE_API bool PxSetMutableLinkData(const PxArticulationLinkHandle & link, const PxArticulationLinkMutableDataRC & data);
PX_C_EXPORT PX_PHYSX_CORE_API bool PxGetJointData(const PxArticulationLinkHandle & link, PxArticulationJointDataRC & data);
PX_C_EXPORT PX_PHYSX_CORE_API bool PxSetJointData(const PxArticulationLinkHandle & link, const PxArticulationJointDataRC & data);
PX_C_EXPORT PX_PHYSX_CORE_API void PxComputeUnconstrainedVelocities(PxArticulationHandle articulation, const PxVec3 & gravity, PxReal dt, PxReal invLengthScale);
PX_C_EXPORT PX_PHYSX_CORE_API void PxUpdateArticulationBodies(PxArticulationHandle articulation, PxReal dt);
PX_C_EXPORT PX_PHYSX_CORE_API void PxComputeUnconstrainedVelocitiesTGS(PxArticulationHandle articulation, const PxVec3 & gravity, PxReal dt, PxReal totalDt, PxReal invDt, PxReal invTotalDt, PxReal invLengthScale);
PX_C_EXPORT PX_PHYSX_CORE_API void PxUpdateArticulationBodiesTGS(PxArticulationHandle articulation, PxReal dt);
PX_C_EXPORT PX_PHYSX_CORE_API void PxConstructSolverBodiesTGS(const PxRigidBodyData * inRigidData, PxTGSSolverBodyVel * outSolverBodyVel, PxTGSSolverBodyTxInertia * outSolverBodyTxInertia, PxTGSSolverBodyData * outSolverBodyData, PxU32 nbBodies, const PxVec3 & gravity, PxReal dt, bool gyroscopicForces = false);
PX_C_EXPORT PX_PHYSX_CORE_API void PxConstructStaticSolverBodyTGS(const PxTransform & globalPose, PxTGSSolverBodyVel & solverBodyVel, PxTGSSolverBodyTxInertia & solverBodyTxInertia, PxTGSSolverBodyData & solverBodyData);
PX_C_EXPORT PX_PHYSX_CORE_API PxU32 PxBatchConstraintsTGS(const PxSolverConstraintDesc * solverConstraintDescs, PxU32 nbConstraints, PxTGSSolverBodyVel * solverBodies, PxU32 nbBodies, PxConstraintBatchHeader * outBatchHeaders, PxSolverConstraintDesc * outOrderedConstraintDescs, PxArticulationHandle * articulations = NULL, PxU32 nbArticulations = 0);
PX_C_EXPORT PX_PHYSX_CORE_API bool PxCreateContactConstraintsTGS(PxConstraintBatchHeader * batchHeaders, PxU32 nbHeaders, PxTGSSolverContactDesc * contactDescs, PxConstraintAllocator & allocator, PxReal invDt, PxReal invTotalDt, PxReal bounceThreshold, PxReal frictionOffsetThreshold, PxReal correlationDistance);
PX_C_EXPORT PX_PHYSX_CORE_API bool PxCreateJointConstraintsTGS(PxConstraintBatchHeader * batchHeaders, PxU32 nbHeaders, PxTGSSolverConstraintPrepDesc * jointDescs, PxConstraintAllocator & allocator, PxReal dt, PxReal totalDt, PxReal invDt, PxReal invTotalDt, PxReal lengthScale);
PX_C_EXPORT PX_PHYSX_CORE_API bool PxCreateJointConstraintsWithShadersTGS(PxConstraintBatchHeader * batchHeaders, PxU32 nbBatchHeaders, PxConstraint * *constraints, PxTGSSolverConstraintPrepDesc * jointDescs, PxConstraintAllocator & allocator, PxReal dt, PxReal totalDt, PxReal invDt, PxReal invTotalDt, PxReal lengthScale);
PX_C_EXPORT PX_PHYSX_CORE_API bool PxCreateJointConstraintsWithImmediateShadersTGS(PxConstraintBatchHeader * batchHeaders, PxU32 nbBatchHeaders, PxImmediateConstraint * constraints, PxTGSSolverConstraintPrepDesc * jointDescs, PxConstraintAllocator & allocator, PxReal dt, PxReal totalDt, PxReal invDt, PxReal invTotalDt, PxReal lengthScale);
PX_C_EXPORT PX_PHYSX_CORE_API void PxSolveConstraintsTGS(const PxConstraintBatchHeader * batchHeaders, PxU32 nbBatchHeaders, const PxSolverConstraintDesc * solverConstraintDescs, PxTGSSolverBodyVel * solverBodies, PxTGSSolverBodyTxInertia * txInertias, PxU32 nbSolverBodies, PxU32 nbPositionIterations, PxU32 nbVelocityIterations, float dt, float invDt, PxU32 nbSolverArticulations = 0, PxArticulationHandle * solverArticulations = NULL, PxSpatialVector * Z = NULL, PxSpatialVector * deltaV = NULL);
PX_C_EXPORT PX_PHYSX_CORE_API void PxIntegrateSolverBodiesTGS(PxTGSSolverBodyVel * solverBody, PxTGSSolverBodyTxInertia * txInertia, PxTransform * poses, PxU32 nbBodiesToIntegrate, PxReal dt);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return PxU32(ind >> 32);
return PxU32(ind & 1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void allocateBuffers(PxU32 nbParticles, PxCudaContextManager * cudaManager);
PxParticleClothPreProcessor* PX_CALL_CONV PxCreateParticleClothPreProcessor(physx::PxCudaContextManager * cudaContextManager);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return PxNeighborhoodIterator(mCollisionIndex + particleId);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return createShape(void);
return createShape(void);
return createShape(void);
PxPhysics* PxCreatePhysics(physx::PxU32 version, physx::PxFoundation & foundation, const physx::PxTolerancesScale & scale, bool trackOutstandingAllocations = false, physx::PxPvd * pvd = NULL, physx::PxOmniPvd * omniPvd = NULL);
PxPhysics& PX_CALL_CONV PxGetPhysics(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_DEPRECATED PX_C_EXPORT PX_PHYSX_CORE_API void PX_CALL_CONV PxGetPhysicsBinaryMetaData(physx::PxOutputStream & stream);
PX_C_EXPORT PX_PHYSX_CORE_API void PX_CALL_CONV PxRegisterPhysicsSerializers(physx::PxSerializationRegistry & sr);
PX_C_EXPORT PX_PHYSX_CORE_API void PX_CALL_CONV PxUnregisterPhysicsSerializers(physx::PxSerializationRegistry & sr);
PX_C_EXPORT PX_PHYSX_CORE_API void PX_CALL_CONV PxAddCollectionToPhysics(const physx::PxCollection & collection);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_INLINE PxSceneLimits(void);
PX_INLINE void setToDefault(void);
PX_INLINE PxSceneDesc(const PxTolerancesScale & scale);
PX_INLINE void setToDefault(const PxTolerancesScale & scale);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxSceneReadLock lock(void);
PxSceneWriteLock lock(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_INLINE PxSceneQueryDesc(void);
PX_INLINE void setToDefault(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return getUpdateMode(void);
return getStaticTimestamp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

patchCount * sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_INLINE PxBoxControllerDesc(void);
PX_INLINE PxBoxControllerDesc(const PxBoxControllerDesc&);
PX_INLINE virtual	void setToDefault(void);
PX_INLINE void copy(const PxBoxControllerDesc&);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_INLINE PxCapsuleControllerDesc(const PxCapsuleControllerDesc&);
PX_INLINE virtual	void setToDefault(void);
PX_INLINE void copy(const PxCapsuleControllerDesc&);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_INLINE PxControllerDesc(void);
PX_INLINE PxControllerDesc(const PxControllerDesc&);
PX_INLINE void copy(const PxControllerDesc&);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxControllerManager* PX_CALL_CONV PxCreateControllerManager(physx::PxScene & scene, bool lockingEnabled = false);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

friend				void getBinaryMetaData_PxBase(PxOutputStream & stream);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxCollection* PX_CALL_CONV PxCreateCollection(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxU32 theStride(void);
PxU32 offset(theStride * idx);
PxU32 theStride(void);
PxU32 offset(theStride * idx);
return getY(void);
return getY(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_INLINE PxDebugLine* reserveSegments(PxU32 nbSegments);
PX_INLINE PxDebugPoint* reservePoints(PxU32 nbSegments);
PX_INLINE void outputSegment(const PxVec3 & v0, const PxVec3 & v1);
PX_INLINE PxRenderOutput& outputCapsule(PxF32 radius, PxF32 halfHeight, const PxMat44 & absPose);
headLength* tipAngle* PxSqrt(void);
const PxVec3 vleft2(void);
const PxVec3 vright2(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

RequiresCallback callback(void);
return sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_INLINE explicit PxTolerancesScale(float defaultLength = 1.0f, float defaultSpeed = 10.0f);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_C_EXPORT PX_PHYSX_CORE_API void PX_CALL_CONV PxSetPhysXDelayLoadHook(const physx::PxDelayLoadHook * hook);
PX_C_EXPORT PX_PHYSX_CORE_API void PX_CALL_CONV PxSetPhysXCookingDelayLoadHook(const physx::PxDelayLoadHook * hook);
PX_C_EXPORT PX_PHYSX_COMMON_API void PX_CALL_CONV PxSetPhysXCommonDelayLoadHook(const physx::PxDelayLoadHook * hook);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_INLINE PxBVHDesc(void);
PX_INLINE void setToDefault(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_INLINE PxConvexMeshDesc(void);
PX_INLINE void setToDefault(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxInsertionCallback* PxGetStandaloneInsertionCallback(void);
PX_C_EXPORT PX_PHYSX_COOKING_API	bool PxCookBVH(const physx::PxBVHDesc & desc, physx::PxOutputStream & stream);
PxBVH* PxCreateBVH(const physx::PxBVHDesc & desc, physx::PxInsertionCallback & insertionCallback);
PX_C_EXPORT PX_PHYSX_COOKING_API	bool PxCookHeightField(const physx::PxHeightFieldDesc & desc, physx::PxOutputStream & stream);
PxHeightField* PxCreateHeightField(const physx::PxHeightFieldDesc & desc, physx::PxInsertionCallback & insertionCallback);
PX_C_EXPORT PX_PHYSX_COOKING_API	bool PxCookConvexMesh(const physx::PxCookingParams & params, const physx::PxConvexMeshDesc & desc, physx::PxOutputStream & stream, physx::PxConvexMeshCookingResult::Enum * condition = NULL);
PxConvexMesh* PxCreateConvexMesh(const physx::PxCookingParams & params, const physx::PxConvexMeshDesc & desc, physx::PxInsertionCallback & insertionCallback, physx::PxConvexMeshCookingResult::Enum * condition = NULL);
PX_C_EXPORT PX_PHYSX_COOKING_API	bool PxValidateConvexMesh(const physx::PxCookingParams & params, const physx::PxConvexMeshDesc & desc);
PX_C_EXPORT PX_PHYSX_COOKING_API	bool PxComputeHullPolygons(const physx::PxCookingParams & params, const physx::PxSimpleTriangleMesh & mesh, physx::PxAllocatorCallback & inCallback, physx::PxU32 & nbVerts, physx::PxVec3 * &vertices, physx::PxU32 & nbIndices, physx::PxU32 * &indices, physx::PxU32 & nbPolygons, physx::PxHullPolygon * &hullPolygons);
PX_C_EXPORT PX_PHYSX_COOKING_API	bool PxValidateTriangleMesh(const physx::PxCookingParams & params, const physx::PxTriangleMeshDesc & desc);
PX_C_EXPORT PX_PHYSX_COOKING_API	bool PxCookTriangleMesh(const physx::PxCookingParams & params, const physx::PxTriangleMeshDesc & desc, physx::PxOutputStream & stream, physx::PxTriangleMeshCookingResult::Enum * condition = NULL);
PxTriangleMesh* PxCreateTriangleMesh(const physx::PxCookingParams & params, const physx::PxTriangleMeshDesc & desc, physx::PxInsertionCallback & insertionCallback, physx::PxTriangleMeshCookingResult::Enum * condition = NULL);
PX_C_EXPORT PX_PHYSX_COOKING_API	bool PxCookTetrahedronMesh(const physx::PxCookingParams & params, const physx::PxTetrahedronMeshDesc & meshDesc, physx::PxOutputStream & stream);
PxTetrahedronMesh* PxCreateTetrahedronMesh(const physx::PxCookingParams & params, const physx::PxTetrahedronMeshDesc & meshDesc, physx::PxInsertionCallback & insertionCallback);
PX_C_EXPORT PX_PHYSX_COOKING_API	bool PxCookSoftBodyMesh(const physx::PxCookingParams & params, const physx::PxTetrahedronMeshDesc & simulationMeshDesc, const physx::PxTetrahedronMeshDesc & collisionMeshDesc, const physx::PxSoftBodySimulationDataDesc & softbodyDataDesc, physx::PxOutputStream & stream);
PxSoftBodyMesh* PxCreateSoftBodyMesh(const physx::PxCookingParams & params, const physx::PxTetrahedronMeshDesc & simulationMeshDesc, const physx::PxTetrahedronMeshDesc & collisionMeshDesc, const physx::PxSoftBodySimulationDataDesc & softbodyDataDesc, physx::PxInsertionCallback & insertionCallback);
PxCollisionMeshMappingData* PxComputeModelsMapping(const physx::PxCookingParams & params, physx::PxTetrahedronMeshData & simulationMesh, const physx::PxTetrahedronMeshData & collisionMesh, const physx::PxSoftBodyCollisionData & collisionData, const physx::PxBoundedData * vertexToTet = NULL);
PxCollisionTetrahedronMeshData* PxComputeCollisionData(const physx::PxCookingParams & params, const physx::PxTetrahedronMeshDesc & collisionMeshDesc);
PxSimulationTetrahedronMeshData* PxComputeSimulationData(const physx::PxCookingParams & params, const physx::PxTetrahedronMeshDesc & simulationMeshDesc);
PxSoftBodyMesh* PxAssembleSoftBodyMesh(physx::PxTetrahedronMeshData & simulationMesh, physx::PxSoftBodySimulationData & simulationData, physx::PxTetrahedronMeshData & collisionMesh, physx::PxSoftBodyCollisionData & collisionData, physx::PxCollisionMeshMappingData & mappingData, physx::PxInsertionCallback & insertionCallback);
PxSoftBodyMesh* PxAssembleSoftBodyMesh_Sim(physx::PxSimulationTetrahedronMeshData & simulationMesh, physx::PxCollisionTetrahedronMeshData & collisionMesh, physx::PxCollisionMeshMappingData & mappingData, physx::PxInsertionCallback & insertionCallback);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxTriangleMesh* PX_CALL_CONV PxCreateTriangleMeshInternal(const physx::PxTriangleMeshInternalData & data);
PxBVH* PX_CALL_CONV PxCreateBVHInternal(const physx::PxBVHInternalData & data);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_INLINE PxSDFDesc(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_INLINE PxTriangleMeshDesc(void);
PX_INLINE void setToDefault(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return CUenum(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static	PxU32 createRegionsFromWorldBounds(PxBounds3 * regions, const PxBounds3 & globalBounds, PxU32 nbSubdiv, PxU32 upAxis = 1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static void releaseObjects(PxCollection & collection, bool releaseExclusiveShapes = true);
static void remove(PxCollection & collection, PxType concreteType, PxCollection * to = NULL);
static  PxCollection* createCollection(PxPhysics & physics);
static	PxCollection* createCollection(PxScene & scene);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_DEPRECATED PxContactJoint* PxContactJointCreate(PxPhysics & physics, PxRigidActor * actor0, const PxTransform & localFrame0, PxRigidActor * actor1, const PxTransform & localFrame1);
return PxJacobianRow(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxU32 PxFindFaceIndex(const PxConvexMeshGeometry & convexGeom, const PxTransform & geomPose, const PxVec3 & impactPos, const PxVec3 & unitDir);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

set margin
void setMargin(float m);
h The cylinder height
void setHeight(float h);
void setRadius(float r);
void setAxis(int a);
h The cone height
void setHeight(float h);
r The cone radius
void setRadius(float r);
a The cone axis
void setAxis(int a);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxCustomSceneQuerySystem* PxCreateCustomSceneQuerySystem(PxSceneQueryUpdateMode::Enum sceneQueryUpdateMode, PxU64 contextID, const PxCustomSceneQuerySystemAdapter & adapter, bool usesTreeOfPruners = false);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxD6Joint* PxD6JointCreate(PxPhysics & physics, PxRigidActor * actor0, const PxTransform & localFrame0, PxRigidActor * actor1, const PxTransform & localFrame1);
return getTwistAngle(void);
return getDistanceLimit(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxJoint* PxD6JointCreate_Fixed(PxPhysics & physics, PxRigidActor * actor0, const PxVec3 & localPos0, PxRigidActor * actor1, const PxVec3 & localPos1, bool useD6);
PxJoint* PxD6JointCreate_Distance(PxPhysics & physics, PxRigidActor * actor0, const PxVec3 & localPos0, PxRigidActor * actor1, const PxVec3 & localPos1, float maxDist, bool useD6);
PxJoint* PxD6JointCreate_Prismatic(PxPhysics & physics, PxRigidActor * actor0, const PxVec3 & localPos0, PxRigidActor * actor1, const PxVec3 & localPos1, const PxVec3 & axis, float minLimit, float maxLimit, bool useD6);
PxJoint* PxD6JointCreate_Revolute(PxPhysics & physics, PxRigidActor * actor0, const PxVec3 & localPos0, PxRigidActor * actor1, const PxVec3 & localPos1, const PxVec3 & axis, float minLimit, float maxLimit, bool useD6);
PxJoint* PxD6JointCreate_Spherical(PxPhysics & physics, PxRigidActor * actor0, const PxVec3 & localPos0, PxRigidActor * actor1, const PxVec3 & localPos1, const PxVec3 & axis, float limit1, float limit2, bool useD6);
PxJoint* PxD6JointCreate_GenericCone(float& apiroty, float& apirotz, PxPhysics & physics, PxRigidActor * actor0, const PxVec3 & localPos0, PxRigidActor * actor1, const PxVec3 & localPos1, float minLimit1, float maxLimit1, float minLimit2, float maxLimit2, bool useD6);
PxJoint* PxD6JointCreate_Pyramid(PxPhysics & physics, PxRigidActor * actor0, const PxVec3 & localPos0, PxRigidActor * actor1, const PxVec3 & localPos1, const PxVec3 & axis, float minLimit1, float maxLimit1, float minLimit2, float maxLimit2);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _aligned_malloc(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxDefaultCpuDispatcher* PxDefaultCpuDispatcherCreate(PxU32 numThreads, PxU32 * affinityMasks = NULL, PxDefaultCpuDispatcherWaitForWorkMode::Enum mode = PxDefaultCpuDispatcherWaitForWorkMode::eWAIT_FOR_WORK, PxU32 yieldProcessorCount = 0);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxFilterFlags PxDefaultSimulationFilterShader(PxFilterObjectAttributes attributes0, PxFilterData filterData0, PxFilterObjectAttributes attributes1, PxFilterData filterData1, PxPairFlags & pairFlags, const void* constantBlock, PxU32 constantBlockSize);
bool PxGetGroupCollisionFlag(const PxU16 group1, const PxU16 group2);
void PxSetGroupCollisionFlag(const PxU16 group1, const PxU16 group2, const bool enable);
PxU16 PxGetGroup(const PxActor & actor);
void PxSetGroup(PxActor & actor, const PxU16 collisionGroup);
void PxGetFilterOps(PxFilterOp::Enum & op0, PxFilterOp::Enum & op1, PxFilterOp::Enum & op2);
void PxSetFilterOps(const PxFilterOp::Enum & op0, const PxFilterOp::Enum & op1, const PxFilterOp::Enum & op2);
bool PxGetFilterBool(void);
void PxSetFilterBool(const bool enable);
void PxGetFilterConstants(PxGroupsMask & c0, PxGroupsMask & c1);
void PxSetFilterConstants(const PxGroupsMask & c0, const PxGroupsMask & c1);
PxGroupsMask PxGetGroupsMask(const PxActor & actor);
void PxSetGroupsMask(PxActor & actor, const PxGroupsMask & mask);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

virtual	PxU32 write(const void* src, PxU32 count);
virtual		PxU32 read(void* dest, PxU32 count);
virtual		void seek(PxU32 pos);
virtual		PxU32 write(const void* src, PxU32 count);
virtual		bool isValid(void);
virtual		PxU32 read(void* dest, PxU32 count);
virtual		void seek(PxU32 pos);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxDistanceJoint* PxDistanceJointCreate(PxPhysics & physics, PxRigidActor * actor0, const PxTransform & localFrame0, PxRigidActor * actor1, const PxTransform & localFrame1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_C_EXPORT bool PX_CALL_CONV PxInitExtensions(physx::PxPhysics & physics, physx::PxPvd * pvd);
PX_C_EXPORT void PX_CALL_CONV PxCloseExtensions(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxFixedJoint* PxFixedJointCreate(PxPhysics & physics, PxRigidActor * actor0, const PxTransform & localFrame0, PxRigidActor * actor1, const PxTransform & localFrame1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxGearJoint* PxGearJointCreate(PxPhysics & physics, PxRigidActor * actor0, const PxTransform & localFrame0, PxRigidActor * actor1, const PxTransform & localFrame1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static bool generateContacts(const PxGjkQuery::Support & a, const PxGjkQuery::Support & b, const PxTransform & poseA, const PxTransform & poseB, PxReal contactDistance, PxReal toleranceLength, PxContactBuffer & contactBuffer);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static	void getBinaryMetaData(PxOutputStream & stream);
PX_C_EXPORT void PX_CALL_CONV PxSetJointGlobalFrame(physx::PxJoint & joint, const physx::PxVec3 * wsAnchor, const physx::PxVec3 * wsAxis);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

lower&& PxIsFinite(upper - lower);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return PxMassProperties(mass * scale, inertiaTensor * scale);
PxMat33 m(void);
rotate inertia into scaling frame
PxVec3 diagonal(void);
PxVec3 combinedCoM(void);
return PxMassProperties(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void addRigidAttachment(PxRigidActor * rigidBody, const PxU32 particleID, const PxVec3 & localPose, PxConeLimitedConstraint * coneLimit = NULL);
bool removeRigidAttachment(PxRigidActor * rigidBody, const PxU32 particleID);
void addRigidFilter(PxRigidActor * rigidBody, const PxU32 particleID);
bool removeRigidFilter(PxRigidActor * rigidBody, const PxU32 particleID);
void copyToDevice(CUstream stream = 0);
PxParticleRigidBufferHelper* PxCreateParticleRigidBufferHelper(PxU32 maxRigids, PxU32 maxParticles, PxCudaContextManager * cudaContextManager);
PxParticleClothBufferHelper* PxCreateParticleClothBufferHelper(const PxU32 maxCloths, const PxU32 maxTriangles, const PxU32 maxSprings, const PxU32 maxParticles, PxCudaContextManager * cudaContextManager);
PxParticleVolumeBufferHelper* PxCreateParticleVolumeBufferHelper(PxU32 maxVolumes, PxU32 maxTriangles, PxCudaContextManager * cudaContextManager);
PxParticleAttachmentBuffer* PxCreateParticleAttachmentBuffer(PxParticleBuffer & particleBuffer, PxParticleSystem & particleSystem);
PxParticleBuffer* PxCreateAndPopulateParticleBuffer(const ExtGpu::PxParticleBufferDesc & desc, PxCudaContextManager * cudaContextManager);
PxParticleAndDiffuseBuffer* PxCreateAndPopulateParticleAndDiffuseBuffer(const ExtGpu::PxParticleAndDiffuseBufferDesc & desc, PxCudaContextManager * cudaContextManager);
PxParticleClothBuffer* PxCreateAndPopulateParticleClothBuffer(const ExtGpu::PxParticleBufferDesc & desc, const PxParticleClothDesc & clothDesc, PxPartitionedParticleCloth & output, PxCudaContextManager * cudaContextManager);
PxParticleRigidBuffer* PxCreateAndPopulateParticleRigidBuffer(const ExtGpu::PxParticleBufferDesc & desc, const ExtGpu::PxParticleRigidDesc & rigidDesc, PxCudaContextManager * cudaContextManager);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxPrismaticJoint* PxPrismaticJointCreate(PxPhysics & physics, PxRigidActor * actor0, const PxTransform & localFrame0, PxRigidActor * actor1, const PxTransform & localFrame1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxRackAndPinionJoint* PxRackAndPinionJointCreate(PxPhysics & physics, PxRigidActor * actor0, const PxTransform & localFrame0, PxRigidActor * actor1, const PxTransform & localFrame1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

bool registerRaycastCCDObject(PxRigidDynamic * actor, PxShape * shape);
bool unregisterRaycastCCDObject(PxRigidDynamic * actor, PxShape * shape);
void doRaycastCCD(bool doDynamicDynamicCCD);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static bool limitMaxEdgeLength(PxArray<PxU32>&triangles, PxArray<PxVec3>&points, PxReal maxEdgeLength, PxU32 maxIterations = 100, PxArray<PxU32>*triangleMap = NULL, PxU32 triangleCountThreshold = 0xFFFFFFFF);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxRevoluteJoint* PxRevoluteJointCreate(PxPhysics & physics, PxRigidActor * actor0, const PxTransform & localFrame0, PxRigidActor * actor1, const PxTransform & localFrame1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return createExclusiveShape(void);
static PxBounds3* getRigidActorShapeLocalBoundsList(const PxRigidActor & actor, PxU32 & numBounds);
static PxBVH* createBVHFromActor(PxPhysics & physics, const PxRigidActor & actor);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static		bool updateMassAndInertia(PxRigidBody & body, const PxReal * shapeDensities, PxU32 shapeDensityCount, const PxVec3 * massLocalPose = NULL, bool includeNonSimShapes = false);
static		bool updateMassAndInertia(PxRigidBody & body, PxReal density, const PxVec3 * massLocalPose = NULL, bool includeNonSimShapes = false);
static		bool setMassAndUpdateInertia(PxRigidBody & body, const PxReal * shapeMasses, PxU32 shapeMassCount, const PxVec3 * massLocalPose = NULL, bool includeNonSimShapes = false);
static		bool setMassAndUpdateInertia(PxRigidBody & body, PxReal mass, const PxVec3 * massLocalPose = NULL, bool includeNonSimShapes = false);
static		PxMassProperties computeMassPropertiesFromShapes(const PxShape* const* shapes, PxU32 shapeCount);
static		void addForceAtPos(PxRigidBody & body, const PxVec3 & force, const PxVec3 & pos, PxForceMode::Enum mode = PxForceMode::eFORCE, bool wakeup = true);
static		void addForceAtLocalPos(PxRigidBody & body, const PxVec3 & force, const PxVec3 & pos, PxForceMode::Enum mode = PxForceMode::eFORCE, bool wakeup = true);
static		void addLocalForceAtPos(PxRigidBody & body, const PxVec3 & force, const PxVec3 & pos, PxForceMode::Enum mode = PxForceMode::eFORCE, bool wakeup = true);
static		void addLocalForceAtLocalPos(PxRigidBody & body, const PxVec3 & force, const PxVec3 & pos, PxForceMode::Enum mode = PxForceMode::eFORCE, bool wakeup = true);
static		PxVec3 getVelocityAtPos(const PxRigidBody & body, const PxVec3 & pos);
static		PxVec3 getLocalVelocityAtLocalPos(const PxRigidBody & body, const PxVec3 & pos);
static		PxVec3 getVelocityAtOffset(const PxRigidBody & body, const PxVec3 & pos);
static		void computeVelocityDeltaFromImpulse(const PxRigidBody & body, const PxVec3 & impulsiveForce, const PxVec3 & impulsiveTorque, PxVec3 & deltaLinearVelocity, PxVec3 & deltaAngularVelocity);
static void computeVelocityDeltaFromImpulse(const PxRigidBody & body, const PxTransform & globalPose, const PxVec3 & point, const PxVec3 & impulse, const PxReal invMassScale, const PxReal invInertiaScale, PxVec3 & deltaLinearVelocity, PxVec3 & deltaAngularVelocity);
static void computeLinearAngularImpulse(const PxRigidBody & body, const PxTransform & globalPose, const PxVec3 & point, const PxVec3 & impulse, const PxReal invMassScale, const PxReal invInertiaScale, PxVec3 & linearImpulse, PxVec3 & angularImpulse);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static bool poissonSample(const PxSimpleTriangleMesh & mesh, PxReal r, PxArray<PxVec3>&result, PxReal rVolume = 0.0f, PxArray<PxI32>*triangleIds = NULL, PxArray<PxVec3>*barycentricCoordinates = NULL, const PxBounds3 * axisAlignedBox = NULL, const PxQuat * boxOrientation = NULL, PxU32 maxNumSamples = 0, PxU32 numSampleAttemptsAroundPoint = 30);
static bool poissonSample(const PxGeometry & geometry, const PxTransform & transform, const PxBounds3 & worldBounds, PxReal r, PxArray<PxVec3>&result, PxReal rVolume = 0.0f, const PxBounds3 * axisAlignedBox = NULL, const PxQuat * boxOrientation = NULL, PxU32 maxNumSamples = 0, PxU32 numSampleAttemptsAroundPoint = 30);
PxPoissonSampler* PxCreateShapeSampler(const PxGeometry & geometry, const PxTransform & transform, const PxBounds3 & worldBounds, PxReal initialSamplingRadius, PxI32 numSampleAttemptsAroundPoint = 30);
PxTriangleMeshPoissonSampler* PxCreateTriangleMeshSampler(const PxU32 * triangles, PxU32 numTriangles, const PxVec3 * vertices, PxU32 numVertices, PxReal initialSamplingRadius, PxI32 numSampleAttemptsAroundPoint = 30);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxBatchQueryExt* PxCreateBatchQueryExt(const PxScene & scene, PxQueryFilterCallback * queryFilterCallback, const PxU32 maxNbRaycasts, const PxU32 maxNbRaycastTouches, const PxU32 maxNbSweeps, const PxU32 maxNbSweepTouches, const PxU32 maxNbOverlaps, const PxU32 maxNbOverlapTouches);
PxBatchQueryExt* PxCreateBatchQueryExt(const PxScene & scene, PxQueryFilterCallback * queryFilterCallback, PxRaycastBuffer * raycastBuffers, const PxU32 maxNbRaycasts, PxRaycastHit * raycastTouches, const PxU32 maxNbRaycastTouches, PxSweepBuffer * sweepBuffers, const PxU32 maxNbSweeps, PxSweepHit * sweepTouches, const PxU32 maxNbSweepTouches, PxOverlapBuffer * overlapBuffers, const PxU32 maxNbOverlaps, PxOverlapHit * overlapTouches, const PxU32 maxNbOverlapTouches);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxSceneQuerySystem* PxCreateExternalSceneQuerySystem(const PxSceneQueryDesc & desc, PxU64 contextID);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static	bool isSerializable(PxCollection & collection, PxSerializationRegistry & sr, const PxCollection * externalReferences = NULL);
static	void complete(PxCollection & collection, PxSerializationRegistry & sr, const PxCollection * exceptFor = NULL, bool followJoints = false);
static	void createSerialObjectIds(PxCollection & collection, const PxSerialObjectId base);
PX_DEPRECATED static PxCollection* createCollectionFromXml(PxInputData & inputData, const PxCookingParams & params, PxSerializationRegistry & sr, const PxCollection * externalRefs = NULL, PxStringTable * stringTable = NULL, PxXmlMiscParameter * outArgs = NULL);
static	PxCollection* createCollectionFromBinary(void* memBlock, PxSerializationRegistry & sr, const PxCollection * externalRefs = NULL);
PX_DEPRECATED static bool serializeCollectionToXml(PxOutputStream & outputStream, PxCollection & collection, PxSerializationRegistry & sr, const PxCookingParams * params = NULL, const PxCollection * externalRefs = NULL, PxXmlMiscParameter * inArgs = NULL);
static	bool serializeCollectionToBinary(PxOutputStream & outputStream, PxCollection & collection, PxSerializationRegistry & sr, const PxCollection * externalRefs = NULL, bool exportNames = false);
PX_DEPRECATED static bool serializeCollectionToBinaryDeterministic(PxOutputStream & outputStream, PxCollection & collection, PxSerializationRegistry & sr, const PxCollection * externalRefs = NULL, bool exportNames = false);
PX_DEPRECATED static void dumpBinaryMetaData(PxOutputStream & outputStream, PxSerializationRegistry & sr);
PX_DEPRECATED static PxBinaryConverter* createBinaryConverter(void);
static PxSerializationRegistry* createSerializationRegistry(PxPhysics & physics);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxRigidDynamic* PxCreateDynamic(PxPhysics & sdk, const PxTransform & transform, PxShape & shape, PxReal density);
PxRigidDynamic* PxCreateKinematic(PxPhysics & sdk, const PxTransform & transform, PxShape & shape, PxReal density);
PxRigidStatic* PxCreateStatic(PxPhysics & sdk, const PxTransform & transform, PxShape & shape);
PxShape* PxCloneShape(PxPhysics & physicsSDK, const PxShape & shape, bool isExclusive);
PxRigidStatic* PxCloneStatic(PxPhysics & physicsSDK, const PxTransform & transform, const PxRigidActor & actor);
PxRigidDynamic* PxCloneDynamic(PxPhysics & physicsSDK, const PxTransform & transform, const PxRigidDynamic & body);
PxRigidStatic* PxCreatePlane(PxPhysics & sdk, const PxPlane & plane, PxMaterial & material);
void PxScaleRigidActor(PxRigidActor & actor, PxReal scale, bool scaleMassProps = true);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_C_EXPORT bool PX_CALL_CONV PxBuildSmoothNormals(physx::PxU32 nbTris, physx::PxU32 nbVerts, const physx::PxVec3 * verts, const physx::PxU32 * dFaces, const physx::PxU16 * wFaces, physx::PxVec3 * normals, bool flip);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static void updateMass(PxSoftBody & softBody, const PxReal density, const PxReal maxInvMassRatio, PxVec4 * simPositionsPinned);
static void setMass(PxSoftBody & softBody, const PxReal mass, const PxReal maxInvMassRatio, PxVec4 * simPositionsPinned);
static void transform(PxSoftBody & softBody, const PxTransform & transform, const PxReal scale, PxVec4 * simPositionsPinned, PxVec4 * simVelocitiesPinned, PxVec4 * collPositionsPinned, PxVec4 * restPositionsPinned);
static void updateEmbeddedCollisionMesh(PxSoftBody & softBody, PxVec4 * simPositionsPinned, PxVec4 * collPositionsPinned);
static PxSoftBodyMesh* createSoftBodyMesh(const PxCookingParams & params, const PxSimpleTriangleMesh & surfaceMesh, PxU32 numVoxelsAlongLongestAABBAxis, PxInsertionCallback & insertionCallback, const bool validate = true);
static PxSoftBodyMesh* createSoftBodyMeshNoVoxels(const PxCookingParams & params, const PxSimpleTriangleMesh & surfaceMesh, PxInsertionCallback & insertionCallback, PxReal maxWeightRatioInTet = 1.5f, const bool validate = true);
static void allocateAndInitializeHostMirror(PxSoftBody & softBody, PxCudaContextManager * cudaContextManager, PxVec4 * &simPositionInvMassPinned, PxVec4 * &simVelocityPinned, PxVec4 * &collPositionInvMassPinned, PxVec4 * &restPositionPinned);
static void relaxSoftBodyMesh(const PxVec4 * verticesOriginal, PxVec4 * verticesDeformed, PxU32 nbVertices, const PxU32 * tetrahedra, PxU32 nbTetraheda, const bool* vertexIsFixed = NULL, PxU32 numIterations = 200);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxSphericalJoint* PxSphericalJointCreate(PxPhysics & physics, PxRigidActor * actor0, const PxTransform & localFrame0, PxRigidActor * actor1, const PxTransform & localFrame1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static PxStringTable& createStringTable(physx::PxAllocatorCallback & inAllocator);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static bool createConformingTetrahedronMesh(const PxSimpleTriangleMesh & triangleMesh, physx::PxArray<physx::PxVec3>&outVertices, physx::PxArray<physx::PxU32>&outTetIndices, const bool validate = true, PxReal volumeThreshold = 0.0f);
static bool createVoxelTetrahedronMesh(const PxTetrahedronMeshDesc & tetMesh, const PxU32 numVoxelsAlongLongestBoundingBoxAxis, physx::PxArray<physx::PxVec3>&outVertices, physx::PxArray<physx::PxU32>&outTetIndices, PxI32 * inputPointToOutputTetIndex = NULL, const PxU32 * anchorNodeIndices = NULL, PxU32 numTetsPerVoxel = 5);
static bool createVoxelTetrahedronMeshFromEdgeLength(const PxTetrahedronMeshDesc & tetMesh, const PxReal voxelEdgeLength, physx::PxArray<physx::PxVec3>&outVertices, physx::PxArray<physx::PxU32>&outTetIndices, PxI32 * inputPointToOutputTetIndex = NULL, const PxU32 * anchorNodeIndices = NULL, PxU32 numTetsPerVoxel = 5);
static PxTriangleMeshAnalysisResults validateTriangleMesh(const PxSimpleTriangleMesh & triangleMesh, const PxReal minVolumeThreshold = 1e-6f, const PxReal minTriangleAngleRadians = 10.0f * 3.1415926535898f / 180.0f);
static PxTetrahedronMeshAnalysisResults validateTetrahedronMesh(const PxBoundedData & points, const PxBoundedData & tetrahedra, const PxReal minTetVolumeThreshold = 1e-8f);
static void simplifyTriangleMesh(const PxArray<PxVec3>&inputVertices, const PxArray<PxU32>&inputIndices, int targetTriangleCount, PxF32 maximalEdgeLength, PxArray<PxVec3>&outputVertices, PxArray<PxU32>&outputIndices, PxArray<PxU32> *vertexMap = NULL, PxReal edgeLengthCostWeight = 0.1f, PxReal flatnessDetectionThreshold = 0.01f, bool projectSimplifiedPointsOnInputMeshSurface = false, PxArray<PxU32>*outputVertexToInputTriangle = NULL, bool removeDisconnectedPatches = false);
static void remeshTriangleMesh(const PxArray<PxVec3>&inputVertices, const PxArray<PxU32>&inputIndices, PxU32 gridResolution, PxArray<PxVec3>&outputVertices, PxArray<PxU32>&outputIndices, PxArray<PxU32> *vertexMap = NULL);
static void remeshTriangleMesh(const PxVec3 * inputVertices, PxU32 nbVertices, const PxU32 * inputIndices, PxU32 nbIndices, PxU32 gridResolution, PxArray<PxVec3>&outputVertices, PxArray<PxU32>&outputIndices, PxArray<PxU32> *vertexMap = NULL);
static void createTreeBasedTetrahedralMesh(const PxArray<PxVec3>&inputVertices, const PxArray<PxU32>&inputIndices, bool useTreeNodes, PxArray<PxVec3>&outputVertices, PxArray<PxU32>&outputIndices, PxReal volumeThreshold = 0.0f);
static void createRelaxedVoxelTetrahedralMesh(const PxArray<PxVec3>&inputVertices, const PxArray<PxU32>&inputIndices, PxArray<PxVec3>&outputVertices, PxArray<PxU32>&outputIndices, PxI32 resolution, PxI32 numRelaxationIterations = 5, PxF32 relMinTetVolume = 0.05f);
static void detectTriangleIslands(const PxI32 * triangles, PxU32 numTriangles, PxArray<PxU32>&islandIndexPerTriangle);
static PxU32 findLargestIslandId(const PxU32 * islandIndexPerTriangle, PxU32 numTriangles);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static PxI32 findTetrahedronContainingPoint(const PxTetrahedronMesh * mesh, const PxVec3 & point, PxVec4 & bary, PxReal tolerance = 1e-6f);
static PxI32 findTetrahedronClosestToPoint(const PxTetrahedronMesh * mesh, const PxVec3 & point, PxVec4 & bary);
static void createPointsToTetrahedronMap(const PxArray<PxVec3>&tetMeshVertices, const PxArray<PxU32>&tetMeshIndices, const PxArray<PxVec3>&pointsToEmbed, PxArray<PxVec4>&barycentricCoordinates, PxArray<PxU32>&tetLinks);
static void extractTetMeshSurface(const void* tetrahedra, PxU32 numTetrahedra, bool sixteenBitIndices, PxArray<PxU32>&surfaceTriangles, PxArray<PxU32>*surfaceTriangleToTet = NULL, bool flipTriangleOrientation = false);
static void extractTetMeshSurface(const PxTetrahedronMesh * mesh, PxArray<PxU32>&surfaceTriangles, PxArray<PxU32>*surfaceTriangleToTet = NULL, bool flipTriangleOrientation = false);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxU32 findOverlap(const PxGeometry & geom, const PxTransform & geomPose, const PxTriangleMeshGeometry & meshGeom, const PxTransform & meshPose);
PxU32 findOverlap(const PxGeometry & geom, const PxTransform & geomPose, const PxHeightFieldGeometry & hfGeom, const PxTransform & hfPose);
bool PxComputeTriangleMeshPenetration(PxVec3 & direction, PxReal & depth, const PxGeometry & geom, const PxTransform & geomPose, const PxTriangleMeshGeometry & meshGeom, const PxTransform & meshPose, PxU32 maxIter, PxU32 * usedIter = NULL);
bool PxComputeHeightFieldPenetration(PxVec3 & direction, PxReal & depth, const PxGeometry & geom, const PxTransform & geomPose, const PxHeightFieldGeometry & heightFieldGeom, const PxTransform & heightFieldPose, PxU32 maxIter, PxU32 * usedIter = NULL);
bool PxExtractIsosurfaceFromSDF(const PxTriangleMesh & triangleMesh, PxArray<PxVec3>&isosurfaceVertices, PxArray<PxU32>&isosurfaceTriangleIndices);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return growAndPushBack(void);
PX_NOINLINE void resizeUninitialized(const uint32_t size);
else reset(void);
PX_NOINLINE void copy(const PxArray<T, A>&other);
PX_NOINLINE T& growAndPushBack(const T & a);
PX_NOINLINE void recreate(uint32_t capacity);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_FOUNDATION_API void PxAssert(const char* exp, const char* file, int line, bool& ignore);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_FOUNDATION_API PxI32 PxAtomicExchange(volatile PxI32 * dest, PxI32 val);
PX_FOUNDATION_API PxI32 PxAtomicCompareExchange(volatile PxI32 * dest, PxI32 exch, PxI32 comp);
PX_FOUNDATION_API void* PxAtomicCompareExchangePointer(volatile void** dest, void* exch, void* comp);
PX_FOUNDATION_API PxI32 PxAtomicIncrement(volatile PxI32 * val);
PX_FOUNDATION_API PxI32 PxAtomicDecrement(volatile PxI32 * val);
PX_FOUNDATION_API PxI32 PxAtomicAdd(volatile PxI32 * val, PxI32 delta);
PX_FOUNDATION_API PxI32 PxAtomicMax(volatile PxI32 * val, PxI32 val2);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return storageType(mData & ~bitMask);
return storageType(mData & bitMask);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

only new class supports this PX_UNUSED(void);
return PxU32(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return PxLowestSetBitUnsafe(void);
return PxHighestSetBitUnsafe(void);
return uint32_t(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_CUDA_CALLABLE PX_FORCE_INLINE PxBounds3(const PxVec3 & minimum, const PxVec3 & maximum);
static PX_CUDA_CALLABLE PX_FORCE_INLINE PxBounds3 empty(void);
static PX_CUDA_CALLABLE PX_FORCE_INLINE PxBounds3 boundsOfPoints(const PxVec3 & v0, const PxVec3 & v1);
static PX_CUDA_CALLABLE PX_FORCE_INLINE PxBounds3 centerExtents(const PxVec3 & center, const PxVec3 & extent);
static PX_CUDA_CALLABLE PX_INLINE PxBounds3 basisExtent(const PxVec3 & center, const PxMat33 & basis, const PxVec3 & extent);
static PX_CUDA_CALLABLE PX_INLINE PxBounds3 poseExtent(const PxTransform & pose, const PxVec3 & extent);
static PX_CUDA_CALLABLE PX_INLINE PxBounds3 transformSafe(const PxMat33 & matrix, const PxBounds3 & bounds);
static PX_CUDA_CALLABLE PX_INLINE PxBounds3 transformFast(const PxMat33 & matrix, const PxBounds3 & bounds);
static PX_CUDA_CALLABLE PX_INLINE PxBounds3 transformSafe(const PxTransform & transform, const PxBounds3 & bounds);
static PX_CUDA_CALLABLE PX_INLINE PxBounds3 transformFast(const PxTransform & transform, const PxBounds3 & bounds);
PX_CUDA_CALLABLE PX_FORCE_INLINE void setEmpty(void);
PX_CUDA_CALLABLE PX_FORCE_INLINE void setMaximal(void);
PX_CUDA_CALLABLE PX_FORCE_INLINE void include(const PxVec3 & v);
PX_CUDA_CALLABLE PX_FORCE_INLINE void include(const PxBounds3 & b);
PX_CUDA_CALLABLE PX_FORCE_INLINE void scaleSafe(float scale);
PX_CUDA_CALLABLE PX_FORCE_INLINE void scaleFast(float scale);
PX_CUDA_CALLABLE PX_FORCE_INLINE void fattenSafe(float distance);
PX_CUDA_CALLABLE PX_FORCE_INLINE void fattenFast(float distance);
return PxBounds3(center - extent, center + extent);
return PxBounds3(center - w, center + w);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_CUDA_CALLABLE PX_INLINE PxFlags(void);
PX_CUDA_CALLABLE PX_INLINE PxFlags(enumtype e);
PX_CUDA_CALLABLE PX_INLINE PxFlags(const PxFlags<enumtype, storagetype>&f);
PX_CUDA_CALLABLE PX_INLINE explicit PxFlags(storagetype b);
PX_CUDA_CALLABLE PX_INLINE void clear(enumtype e);
PX_CUDA_CALLABLE PX_INLINE void raise(enumtype e);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxFoundation* PX_CALL_CONV PxCreateFoundation(physx::PxU32 version, physx::PxAllocatorCallback & allocator, physx::PxErrorCallback & errorCallback);
PX_C_EXPORT PX_FOUNDATION_API void PX_CALL_CONV PxSetFoundationInstance(physx::PxFoundation & foundation);
PxFoundation& PX_CALL_CONV PxGetFoundation(void);
PxFoundation* PX_CALL_CONV PxIsFoundationValid(void);
PxProfilerCallback* PX_CALL_CONV PxGetProfilerCallback(void);
PX_C_EXPORT PX_FOUNDATION_API void PX_CALL_CONV PxSetProfilerCallback(physx::PxProfilerCallback * profiler);
PxAllocatorCallback* PX_CALL_CONV PxGetAllocatorCallback(void);
PxAllocatorCallback* PX_CALL_CONV PxGetBroadcastAllocator(bool* reportAllocationNames = NULL);
PxErrorCallback* PX_CALL_CONV PxGetErrorCallback(void);
PxErrorCallback* PX_CALL_CONV PxGetBroadcastError(void);
PxU32 PX_CALL_CONV PxGetWarnOnceTimeStamp(void);
PX_C_EXPORT PX_FOUNDATION_API void PX_CALL_CONV PxDecFoundationRefCount(void);
PX_C_EXPORT PX_FOUNDATION_API void PX_CALL_CONV PxIncFoundationRefCount(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxSIMDGuard scopedFpGuard(void);
PX_INLINE PxSIMDGuard(bool enable = true);
PX_FOUNDATION_API void PxEnableFPExceptions(void);
PX_FOUNDATION_API void PxDisableFPExceptions(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return uint32_t(void);
return uint32_t(UINT32_MAX & k);
return PxComputeHash(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return eraseInternal(void);
return eraseInternal(void);
PX_NOINLINE void copy(const PxHashBase<Entry, comp>&other);
return hash(void);
newHashSize * sizeof(void);
newEntriesCapacity * sizeof(void);
newEntriesCapacity * sizeof(void);
t need to copy the next entries PX_ASSERT(compacting || mFreeList == EOL);
else
return traverseHashEntries(void);
return traverseHashEntries(void);
return traverseHashEntries(void);
return Iterator(void);
return EraseIterator(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

const Entry* find(const Key & k);
bool erase(const T & k);
uint32_t size(void);
void reserve(uint32_t size);
void clear(void);
Iterator getIterator(void);
return Iterator(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

bool erase(const T & k);
void reserve(uint32_t size);
void clear(void);
Iterator getIterator(void);
return Iterator(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

this call is equivalent to seek(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return PxMat33T(a * b.x, a * b.y, a * b.z);
return PxMat33T(void);
return PxMat33T(void);
return PxMat33T(void);
return PxMat33T(column0 + other.column0, column1 + other.column1, column2 + other.column2);
return PxMat33T(column0 - other.column0, column1 - other.column1, column2 - other.column2);
return PxMat33T(column0 * scalar, column1 * scalar, column2 * scalar);
return transform(void);
return PxQuat(void);
return PxQuat(void);
return PxQuat(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return PxMat34T(void);
return PxMat34T(m + other.m, p + other.p);
return PxMat34T(m - other.m, p - other.p);
return PxMat34T(void);
etc
return PxMat34T(m * other.p + p);
etc
return PxMat34T(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return PxMat44T(void);
return PxMat44T(column0 + other.column0, column1 + other.column1, column2 + other.column2, column3 + other.column3);
return PxMat44T(column0 - other.column0, column1 - other.column1, column2 - other.column2, column3 - other.column3);
return PxMat44T(column0 * scalar, column1 * scalar, column2 * scalar, column3 * scalar);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

17 to remain compatible with platforms with older glibc versions __asm__(".symver expf);
	350 __sincosf(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_FOUNDATION_API PxQuat PxShortestRotation(const PxVec3 & from, const PxVec3 & target);
PX_FOUNDATION_API PxVec3 PxDiagonalize(const PxMat33 & m, PxQuat & axes);
PX_FOUNDATION_API PxTransform PxTransformFromSegment(const PxVec3 & p0, const PxVec3 & p1, PxReal * halfHeight = NULL);
PX_FOUNDATION_API PxTransform PxTransformFromPlaneEquation(const PxPlane & plane);
PX_FOUNDATION_API void PxIntegrateTransform(const PxTransform & curTrans, const PxVec3 & linvel, const PxVec3 & angvel, PxReal timeStep, PxTransform & result);
PX_FOUNDATION_API PxVec3 PxOptimizeBoundingBox(PxMat33 & basis);
return PxVec3(void);
return PxVec3(point.y > 0 ? radii.y : -radii.y);
return PxVec3(point.z > 0 ? radii.z : -radii.z);
return PxAtan2(void);
Derive two remaining vectors PxComputeBasisVectors(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

if PX_CHECKED PxMemSet(void);
else PX_UNUSED(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void lock(void);
bool trylock(void);
void unlock(void);
static uint32_t getSize(void);
if it already acquired the write lock
void lockReader(bool takeLock);
void lockWriter(void);
void unlockReader(void);
void unlockWriter(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

n* distance(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Alloc& alloc(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

angleRadians* Type(void);
PX_CUDA_CALLABLE PX_INLINE explicit PxQuatT(const PxMat33T<Type>&m);
return PxQuatT(x * s, y * s, z * s, w * s);
return PxQuatT(void);
x* Type(void);
w* Type(void);
y* Type(void);
w* Type(void);
z* Type(void);
w* Type(void);
return PxQuatT(w * q.x + q.w * x + y * q.z - q.y * z, w * q.y + q.w * y + z * q.x - q.z * x, w * q.z + q.w * z + x * q.y - q.x * y, w * q.w - x * q.x - y * q.y - z * q.z);
return PxQuatT(x + q.x, y + q.y, z + q.z, w + q.w);
return PxQuatT(void);
return PxQuatT(x - q.x, y - q.y, z - q.z, w - q.w);
return PxQuatT(x * r, y * r, z * r, w * r);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

else V4StoreU(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void push(PxSListEntry * entry);
PxSListEntry* pop(void);
PxSListEntry* flush(void);
static uint32_t getSize(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

bool connect(const char* host, uint16_t port, uint32_t timeout = 1000);
bool listen(uint16_t port);
bool accept(bool block);
void disconnect(void);
bool flush(void);
uint32_t write(const uint8_t * data, uint32_t length);
uint32_t read(uint8_t * data, uint32_t length);
void setBlocking(bool blocking);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

3 since we need 3 for median PX_ALLOCA(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

1 PxSwap(elements[last - 1]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_FOUNDATION_API int32_t Pxsscanf(const char* buffer, const char* format);
PX_FOUNDATION_API int32_t Pxstrcmp(const char* str1, const char* str2);
PX_FOUNDATION_API int32_t Pxstrncmp(const char* str1, const char* str2, size_t count);
PX_FOUNDATION_API int32_t Pxsnprintf(char* dst, size_t dstSize, const char* format);
PX_FOUNDATION_API int32_t Pxvsnprintf(char* dst, size_t dstSize, const char* src, va_list arg);
in the case of truncation the return value is the length of the string that would have been created

PX_FOUNDATION_API size_t Pxstrlcat(char* dst, size_t dstSize, const char* src);
PX_FOUNDATION_API size_t Pxstrlcpy(char* dst, size_t dstSize, const char* src);
insensitive string comparison
PX_FOUNDATION_API int32_t Pxstricmp(const char* str1, const char* str2);
PX_FOUNDATION_API int32_t Pxstrnicmp(const char* str1, const char* str2, size_t count);
place string case conversion
PX_FOUNDATION_API void Pxstrlwr(char* str);
PX_FOUNDATION_API void Pxstrupr(char* str);
PX_FOUNDATION_API void PxPrintString(const char*);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

bool wait(uint32_t milliseconds = waitForever);
void set(void);
void reset(void);
static uint32_t getSize(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_FOUNDATION_API void* allocate(size_t size, const char* file, PxI32 line);
PX_FOUNDATION_API void deallocate(void* ptr);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static PxU32 getDefaultStackSize(void);
static Id getId(void);
void start(PxU32 stackSize, PxRunnable * r);
void kill(void);
void signalQuit(void);
bool waitForQuit(void);
bool quitIsSignalled(void);
void quit(void);
PxU32 setAffinityMask(PxU32 mask);
Enum getPriority(Id threadId);
void setPriority(PxThreadPriority::Enum prio);
void setName(const char* name);
static void sleep(PxU32 ms);
static void yield(void);
static void yieldProcessor(void);
static PxU32 getNbPhysicalCores(void);
static PxU32 getSize(void);
PX_FOUNDATION_API PxU32 PxTlsAlloc(void);
PX_FOUNDATION_API void PxTlsFree(PxU32 index);
PX_FOUNDATION_API void* PxTlsGet(PxU32 index);
PX_FOUNDATION_API size_t PxTlsGetValue(PxU32 index);
PX_FOUNDATION_API PxU32 PxTlsSet(PxU32 index, void* value);
PX_FOUNDATION_API PxU32 PxTlsSetValue(PxU32 index, size_t value);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static const PxCounterFrequencyToTensOfNanos& getBootCounterFrequency(void);
static PxCounterFrequencyToTensOfNanos getCounterFrequency(void);
static PxU64 getCurrentCounterValue(void);
Second getElapsedSeconds(void);
Second peekElapsedSeconds(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_CUDA_CALLABLE PX_FORCE_INLINE explicit PxTransformT(const PxMat44T<Type>&m);
return transform(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

USE_VOLATILE_UNION u(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return PxU32(void);
return PxU16(void);
return PxU8(void);
return PxU8(void);
return PxU8(void);
return PxI8(void);
if PX_WINDOWS __debugbreak(void);
elif PX_LINUX __builtin_trap(void);
elif PX_GCC_FAMILY __builtin_trap(void);
else PX_ASSERT(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return PxVec2T(void);
return PxVec2T(x + v.x, y + v.y);
return PxVec2T(x - v.x, y - v.y);
return PxVec2T(x * f, y * f);
return PxVec2T(x * f, y * f);
return PxVec2T(x * a.x, y * a.y);
brief returns MIN(void);
return PxMin(void);
brief returns MAX(void);
return PxMax(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return PxVec3T(void);
return PxVec3T(x + v.x, y + v.y, z + v.z);
return PxVec3T(x - v.x, y - v.y, z - v.z);
return PxVec3T(x * f, y * f, z * f);
return PxVec3T(x * f, y * f, z * f);
return PxVec3T(y * v.z - z * v.y, z * v.x - x * v.z, x * v.y - y * v.x);
return Type(void);
return PxVec3T(x * a.x, y * a.y, z * a.z);
brief returns MIN(void);
brief returns MAX(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return PxVec4T(void);
return PxVec4T(x + v.x, y + v.y, z + v.z, w + v.w);
return PxVec4T(x - v.x, y - v.y, z - v.z, w - v.w);
return PxVec4T(x * f, y * f, z * f, w * f);
return PxVec4T(x * f, y * f, z * f, w * f);
return PxVec4T(x * a.x, y * a.y, z * a.z, w * a.w);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_FORCE_INLINE FloatV FLoad(const PxF32 f);
PX_FORCE_INLINE Vec3V V3Load(const PxF32 f);
PX_FORCE_INLINE Vec3V V3LoadU(const PxVec3 & f);
byte aligned
PX_FORCE_INLINE Vec3V V3LoadA(const PxVec3 & f);
byte aligned
PX_FORCE_INLINE Vec3V V3LoadUnsafeA(const PxVec3 & f);
PX_FORCE_INLINE Vec3V V3LoadU(const PxF32 * f);
byte aligned
PX_FORCE_INLINE Vec3V V3LoadA(const PxF32 * f);
PX_FORCE_INLINE Vec4V V4Load(const PxF32 f);
PX_FORCE_INLINE Vec4V V4LoadU(const PxF32* const f);
byte aligned
PX_FORCE_INLINE Vec4V V4LoadA(const PxF32* const f);
PX_FORCE_INLINE Vec4V V4LoadXYZW(const PxF32 & x, const PxF32 & y, const PxF32 & z, const PxF32 & w);
PX_FORCE_INLINE BoolV BLoad(const bool f);
PX_FORCE_INLINE BoolV BLoad(const bool* const f);
PX_FORCE_INLINE VecU32V U4Load(const PxU32 f);
PX_FORCE_INLINE VecU32V U4LoadU(const PxU32 * f);
byte aligned
PX_FORCE_INLINE VecU32V U4LoadA(const PxU32 * f);
PX_FORCE_INLINE VecU32V U4LoadXYZW(PxU32 x, PxU32 y, PxU32 z, PxU32 w);
PX_FORCE_INLINE VecI32V I4Load(const PxI32 i);
PX_FORCE_INLINE VecI32V I4LoadU(const PxI32 * i);
PX_FORCE_INLINE VecI32V I4LoadA(const PxI32 * i);
t need to aligned
PX_FORCE_INLINE QuatV QuatVLoadU(const PxF32 * v);
fast load
PX_FORCE_INLINE QuatV QuatVLoadA(const PxF32 * v);
PX_FORCE_INLINE QuatV QuatVLoadXYZW(const PxF32 x, const PxF32 y, const PxF32 z, const PxF32 w);
not added to public api
Vec4V Vec4V_From_PxVec3_WUndefined(const PxVec3 & v);
PX_FORCE_INLINE Vec3V Vec3V_From_Vec4V(Vec4V v);
PX_FORCE_INLINE Vec3V Vec3V_From_Vec4V_WUndefined(const Vec4V v);
PX_FORCE_INLINE Vec4V Vec4V_From_Vec3V(Vec3V f);
PX_FORCE_INLINE Vec4V Vec4V_From_VecU32V(VecU32V a);
PX_FORCE_INLINE Vec4V Vec4V_From_VecI32V(VecI32V a);
PX_FORCE_INLINE Vec4V Vec4V_ReinterpretFrom_VecU32V(VecU32V a);
PX_FORCE_INLINE Vec4V Vec4V_ReinterpretFrom_VecI32V(VecI32V a);
PX_FORCE_INLINE VecU32V VecU32V_ReinterpretFrom_Vec4V(Vec4V a);
PX_FORCE_INLINE VecU32V VecU32V_From_BoolV(const BoolVArg b);
PX_FORCE_INLINE VecI32V VecI32V_ReinterpretFrom_Vec4V(Vec4V a);
PX_FORCE_INLINE VecI32V VecI32V_From_Vec4V(Vec4V a);
PX_FORCE_INLINE VecI32V VecI32V_From_BoolV(const BoolVArg b);
x
PX_FORCE_INLINE void FStore(const FloatV a, PxF32 * PX_RESTRICT f);
PX_FORCE_INLINE void V3StoreA(const Vec3V a, PxVec3 & f);
PX_FORCE_INLINE void V3StoreU(const Vec3V a, PxVec3 & f);
Vec4V
PX_FORCE_INLINE void V4StoreA(const Vec4V a, PxF32 * f);
PX_FORCE_INLINE void V4StoreU(const Vec4V a, PxF32 * f);
BoolV
PX_FORCE_INLINE void BStoreA(const BoolV b, PxU32 * f);
VecU32V
PX_FORCE_INLINE void U4StoreA(const VecU32V uv, PxU32 * u);
VecI32V
PX_FORCE_INLINE void I4StoreA(const VecI32V iv, PxI32 * i);
check for each component is valid ie in floating point range
PX_FORCE_INLINE bool isFiniteFloatV(const FloatV a);
check for each component is valid ie in floating point range
PX_FORCE_INLINE bool isFiniteVec3V(const Vec3V a);
check for each component is valid ie in floating point range
PX_FORCE_INLINE bool isFiniteVec4V(const Vec4V a);
PX_FORCE_INLINE bool isValidVec3V(const Vec3V a);
PX_FORCE_INLINE Vec3V getInvalidVec3V(void);
PX_FORCE_INLINE bool allElementsEqualFloatV(const FloatV a, const FloatV b);
PX_FORCE_INLINE bool allElementsEqualVec3V(const Vec3V a, const Vec3V b);
PX_FORCE_INLINE bool allElementsEqualVec4V(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE bool allElementsEqualBoolV(const BoolV a, const BoolV b);
PX_FORCE_INLINE bool allElementsEqualVecU32V(const VecU32V a, const VecU32V b);
PX_FORCE_INLINE bool allElementsEqualVecI32V(const VecI32V a, const VecI32V b);
PX_FORCE_INLINE bool allElementsNearEqualFloatV(const FloatV a, const FloatV b);
PX_FORCE_INLINE bool allElementsNearEqualVec3V(const Vec3V a, const Vec3V b);
PX_FORCE_INLINE bool allElementsNearEqualVec4V(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE FloatV FZero(void);
PX_FORCE_INLINE FloatV FOne(void);
PX_FORCE_INLINE FloatV FHalf(void);
PX_FORCE_INLINE FloatV FEps(void);
PX_FORCE_INLINE FloatV FMax(void);
PX_FORCE_INLINE FloatV FNegMax(void);
PX_FORCE_INLINE FloatV FEps6(void);
PX_FORCE_INLINE FloatV FNeg(const FloatV f);
PX_FORCE_INLINE FloatV FAdd(const FloatV a, const FloatV b);
PX_FORCE_INLINE FloatV FSub(const FloatV a, const FloatV b);
PX_FORCE_INLINE FloatV FMul(const FloatV a, const FloatV b);
PX_FORCE_INLINE FloatV FDiv(const FloatV a, const FloatV b);
PX_FORCE_INLINE FloatV FDivFast(const FloatV a, const FloatV b);
a
PX_FORCE_INLINE FloatV FRecip(const FloatV a);
a
PX_FORCE_INLINE FloatV FRecipFast(const FloatV a);
PX_FORCE_INLINE FloatV FRsqrt(const FloatV a);
PX_FORCE_INLINE FloatV FRsqrtFast(const FloatV a);
PX_FORCE_INLINE FloatV FSqrt(const FloatV a);
c
PX_FORCE_INLINE FloatV FScaleAdd(const FloatV a, const FloatV b, const FloatV c);
a* b
PX_FORCE_INLINE FloatV FNegScaleSub(const FloatV a, const FloatV b, const FloatV c);
PX_FORCE_INLINE FloatV FAbs(const FloatV a);
PX_FORCE_INLINE FloatV FSel(const BoolV c, const FloatV a, const FloatV b);
PX_FORCE_INLINE BoolV FIsGrtr(const FloatV a, const FloatV b);
PX_FORCE_INLINE BoolV FIsGrtrOrEq(const FloatV a, const FloatV b);
PX_FORCE_INLINE BoolV FIsEq(const FloatV a, const FloatV b);
PX_FORCE_INLINE FloatV FMax(const FloatV a, const FloatV b);
PX_FORCE_INLINE FloatV FMin(const FloatV a, const FloatV b);
PX_FORCE_INLINE FloatV FClamp(const FloatV a, const FloatV minV, const FloatV maxV);
x
PX_FORCE_INLINE PxU32 FAllGrtr(const FloatV a, const FloatV b);
x
PX_FORCE_INLINE PxU32 FAllGrtrOrEq(const FloatV a, const FloatV b);
x
PX_FORCE_INLINE PxU32 FAllEq(const FloatV a, const FloatV b);
max
PX_FORCE_INLINE PxU32 FOutOfBounds(const FloatV a, const FloatV min, const FloatV max);
max
PX_FORCE_INLINE PxU32 FInBounds(const FloatV a, const FloatV min, const FloatV max);
bounds
PX_FORCE_INLINE PxU32 FOutOfBounds(const FloatV a, const FloatV bounds);
bounds
PX_FORCE_INLINE PxU32 FInBounds(const FloatV a, const FloatV bounds);
round float a to the near int
PX_FORCE_INLINE FloatV FRound(const FloatV a);
calculate the sin of float a
PX_FORCE_INLINE FloatV FSin(const FloatV a);
calculate the cos of float b
PX_FORCE_INLINE FloatV FCos(const FloatV a);
PX_FORCE_INLINE Vec3V V3Splat(const FloatV f);
PX_FORCE_INLINE Vec3V V3Merge(const FloatVArg x, const FloatVArg y, const FloatVArg z);
PX_FORCE_INLINE Vec3V V3UnitX(void);
PX_FORCE_INLINE Vec3V V3UnitY(void);
PX_FORCE_INLINE Vec3V V3UnitZ(void);
PX_FORCE_INLINE FloatV V3GetX(const Vec3V f);
PX_FORCE_INLINE FloatV V3GetY(const Vec3V f);
PX_FORCE_INLINE FloatV V3GetZ(const Vec3V f);
PX_FORCE_INLINE Vec3V V3SetX(const Vec3V v, const FloatV f);
PX_FORCE_INLINE Vec3V V3SetY(const Vec3V v, const FloatV f);
PX_FORCE_INLINE Vec3V V3SetZ(const Vec3V v, const FloatV f);
f
PX_FORCE_INLINE void V3WriteX(Vec3V & v, const PxF32 f);
f
PX_FORCE_INLINE void V3WriteY(Vec3V & v, const PxF32 f);
f
PX_FORCE_INLINE void V3WriteZ(Vec3V & v, const PxF32 f);
z
PX_FORCE_INLINE void V3WriteXYZ(Vec3V & v, const PxVec3 & f);
x
PX_FORCE_INLINE PxF32 V3ReadX(const Vec3V & v);
y
PX_FORCE_INLINE PxF32 V3ReadY(const Vec3V & v);
y
PX_FORCE_INLINE PxF32 V3ReadZ(const Vec3V & v);
PX_FORCE_INLINE const PxVec3& V3ReadXYZ(const Vec3V & v);
PX_FORCE_INLINE Vec3V V3ColX(const Vec3V a, const Vec3V b, const Vec3V c);
PX_FORCE_INLINE Vec3V V3ColY(const Vec3V a, const Vec3V b, const Vec3V c);
PX_FORCE_INLINE Vec3V V3ColZ(const Vec3V a, const Vec3V b, const Vec3V c);
PX_FORCE_INLINE Vec3V V3Zero(void);
PX_FORCE_INLINE Vec3V V3One(void);
PX_FORCE_INLINE Vec3V V3Eps(void);
PX_FORCE_INLINE Vec3V V3Neg(const Vec3V c);
PX_FORCE_INLINE Vec3V V3Add(const Vec3V a, const Vec3V b);
PX_FORCE_INLINE Vec3V V3Sub(const Vec3V a, const Vec3V b);
PX_FORCE_INLINE Vec3V V3Scale(const Vec3V a, const FloatV b);
PX_FORCE_INLINE Vec3V V3Mul(const Vec3V a, const Vec3V b);
PX_FORCE_INLINE Vec3V V3ScaleInv(const Vec3V a, const FloatV b);
PX_FORCE_INLINE Vec3V V3Div(const Vec3V a, const Vec3V b);
PX_FORCE_INLINE Vec3V V3ScaleInvFast(const Vec3V a, const FloatV b);
PX_FORCE_INLINE Vec3V V3DivFast(const Vec3V a, const Vec3V b);
a
PX_FORCE_INLINE Vec3V V3Recip(const Vec3V a);
a
PX_FORCE_INLINE Vec3V V3RecipFast(const Vec3V a);
PX_FORCE_INLINE Vec3V V3Rsqrt(const Vec3V a);
PX_FORCE_INLINE Vec3V V3RsqrtFast(const Vec3V a);
c
PX_FORCE_INLINE Vec3V V3ScaleAdd(const Vec3V a, const FloatV b, const Vec3V c);
a* b
PX_FORCE_INLINE Vec3V V3NegScaleSub(const Vec3V a, const FloatV b, const Vec3V c);
c
PX_FORCE_INLINE Vec3V V3MulAdd(const Vec3V a, const Vec3V b, const Vec3V c);
a* b
PX_FORCE_INLINE Vec3V V3NegMulSub(const Vec3V a, const Vec3V b, const Vec3V c);
PX_FORCE_INLINE Vec3V V3Abs(const Vec3V a);
w must have value zero
PX_FORCE_INLINE FloatV V3Dot(const Vec3V a, const Vec3V b);
w must have value zero
PX_FORCE_INLINE Vec3V V3Cross(const Vec3V a, const Vec3V b);
w must have value zero
PX_FORCE_INLINE FloatV V3Length(const Vec3V a);
w must have value zero
PX_FORCE_INLINE FloatV V3LengthSq(const Vec3V a);
w must have value zero
PX_FORCE_INLINE Vec3V V3Normalize(const Vec3V a);
w must have value zero
PX_FORCE_INLINE FloatV V3Length(const Vec3V a);
w must have value zero
PX_FORCE_INLINE Vec3V V3NormalizeSafe(const Vec3V a, const Vec3V unsafeReturnValue);
w must have value zero
PX_FORCE_INLINE FloatV V3SumElems(const Vec3V a);
PX_FORCE_INLINE Vec3V V3Sel(const BoolV c, const Vec3V a, const Vec3V b);
PX_FORCE_INLINE BoolV V3IsGrtr(const Vec3V a, const Vec3V b);
PX_FORCE_INLINE BoolV V3IsGrtrOrEq(const Vec3V a, const Vec3V b);
PX_FORCE_INLINE BoolV V3IsEq(const Vec3V a, const Vec3V b);
PX_FORCE_INLINE Vec3V V3Max(const Vec3V a, const Vec3V b);
PX_FORCE_INLINE Vec3V V3Min(const Vec3V a, const Vec3V b);
w must have value zero
PX_FORCE_INLINE FloatV V3ExtractMax(const Vec3V a);
w must have value zero
PX_FORCE_INLINE FloatV V3ExtractMin(const Vec3V a);
PX_FORCE_INLINE Vec3V V3Clamp(const Vec3V a, const Vec3V minV, const Vec3V maxV);
Extract the sign for each component
PX_FORCE_INLINE Vec3V V3Sign(const Vec3V a);
w must have value zero
PX_FORCE_INLINE PxU32 V3AllGrtr(const Vec3V a, const Vec3V b);
w must have value zero
PX_FORCE_INLINE PxU32 V3AllGrtrOrEq(const Vec3V a, const Vec3V b);
w must have value zero
PX_FORCE_INLINE PxU32 V3AllEq(const Vec3V a, const Vec3V b);
w must have value zero
PX_FORCE_INLINE PxU32 V3OutOfBounds(const Vec3V a, const Vec3V min, const Vec3V max);
w must have value zero
PX_FORCE_INLINE PxU32 V3InBounds(const Vec3V a, const Vec3V min, const Vec3V max);
w must have value zero
PX_FORCE_INLINE PxU32 V3OutOfBounds(const Vec3V a, const Vec3V bounds);
w must have value zero
PX_FORCE_INLINE PxU32 V3InBounds(const Vec3V a, const Vec3V bounds);
PX_FORCE_INLINE Vec3V V3Round(const Vec3V a);
PX_FORCE_INLINE Vec3V V3Sin(const Vec3V a);
PX_FORCE_INLINE Vec3V V3Cos(const Vec3V a);
PX_FORCE_INLINE Vec3V V3PermYZZ(const Vec3V a);
PX_FORCE_INLINE Vec3V V3PermXYX(const Vec3V a);
PX_FORCE_INLINE Vec3V V3PermYZX(const Vec3V a);
PX_FORCE_INLINE Vec3V V3PermZXY(const Vec3V a);
PX_FORCE_INLINE Vec3V V3PermZZY(const Vec3V a);
PX_FORCE_INLINE Vec3V V3PermYXX(const Vec3V a);
PX_FORCE_INLINE Vec3V V3Perm_Zero_1Z_0Y(const Vec3V v0, const Vec3V v1);
PX_FORCE_INLINE Vec3V V3Perm_0Z_Zero_1X(const Vec3V v0, const Vec3V v1);
PX_FORCE_INLINE Vec3V V3Perm_1Y_0X_Zero(const Vec3V v0, const Vec3V v1);
PX_FORCE_INLINE void V3Transpose(Vec3V & col0, Vec3V & col1, Vec3V & col2);
PX_FORCE_INLINE Vec4V V4Splat(const FloatV f);
PX_FORCE_INLINE Vec4V V4Merge(const FloatV* const f);
PX_FORCE_INLINE Vec4V V4Merge(const FloatVArg x, const FloatVArg y, const FloatVArg z, const FloatVArg w);
PX_FORCE_INLINE Vec4V V4MergeW(const Vec4VArg x, const Vec4VArg y, const Vec4VArg z, const Vec4VArg w);
PX_FORCE_INLINE Vec4V V4MergeZ(const Vec4VArg x, const Vec4VArg y, const Vec4VArg z, const Vec4VArg w);
PX_FORCE_INLINE Vec4V V4MergeY(const Vec4VArg x, const Vec4VArg y, const Vec4VArg z, const Vec4VArg w);
PX_FORCE_INLINE Vec4V V4MergeX(const Vec4VArg x, const Vec4VArg y, const Vec4VArg z, const Vec4VArg w);
PX_FORCE_INLINE Vec4V V4UnpackXY(const Vec4VArg a, const Vec4VArg b);
PX_FORCE_INLINE Vec4V V4UnpackZW(const Vec4VArg a, const Vec4VArg b);
PX_FORCE_INLINE Vec4V V4UnitW(void);
PX_FORCE_INLINE Vec4V V4UnitY(void);
PX_FORCE_INLINE Vec4V V4UnitZ(void);
PX_FORCE_INLINE Vec4V V4UnitW(void);
PX_FORCE_INLINE FloatV V4GetX(const Vec4V f);
PX_FORCE_INLINE FloatV V4GetY(const Vec4V f);
PX_FORCE_INLINE FloatV V4GetZ(const Vec4V f);
PX_FORCE_INLINE FloatV V4GetW(const Vec4V f);
PX_FORCE_INLINE Vec4V V4SetX(const Vec4V v, const FloatV f);
PX_FORCE_INLINE Vec4V V4SetY(const Vec4V v, const FloatV f);
PX_FORCE_INLINE Vec4V V4SetZ(const Vec4V v, const FloatV f);
PX_FORCE_INLINE Vec4V V4SetW(const Vec4V v, const FloatV f);
PX_FORCE_INLINE Vec4V V4ClearW(const Vec4V v);
PX_FORCE_INLINE Vec4V V4SplatElement(Vec4V a);
f
PX_FORCE_INLINE void V4WriteX(Vec4V & v, const PxF32 f);
f
PX_FORCE_INLINE void V4WriteY(Vec4V & v, const PxF32 f);
f
PX_FORCE_INLINE void V4WriteZ(Vec4V & v, const PxF32 f);
f
PX_FORCE_INLINE void V4WriteW(Vec4V & v, const PxF32 f);
z
PX_FORCE_INLINE void V4WriteXYZ(Vec4V & v, const PxVec3 & f);
x
PX_FORCE_INLINE PxF32 V4ReadX(const Vec4V & v);
y
PX_FORCE_INLINE PxF32 V4ReadY(const Vec4V & v);
z
PX_FORCE_INLINE PxF32 V4ReadZ(const Vec4V & v);
w
PX_FORCE_INLINE PxF32 V4ReadW(const Vec4V & v);
PX_FORCE_INLINE const PxVec3& V4ReadXYZ(const Vec4V & v);
PX_FORCE_INLINE Vec4V V4Zero(void);
PX_FORCE_INLINE Vec4V V4One(void);
PX_FORCE_INLINE Vec4V V4Eps(void);
PX_FORCE_INLINE Vec4V V4Neg(const Vec4V c);
PX_FORCE_INLINE Vec4V V4Add(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE Vec4V V4Sub(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE Vec4V V4Scale(const Vec4V a, const FloatV b);
PX_FORCE_INLINE Vec4V V4Mul(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE Vec4V V4ScaleInv(const Vec4V a, const FloatV b);
PX_FORCE_INLINE Vec4V V4Div(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE Vec4V V4ScaleInvFast(const Vec4V a, const FloatV b);
PX_FORCE_INLINE Vec4V V4DivFast(const Vec4V a, const Vec4V b);
a
PX_FORCE_INLINE Vec4V V4Recip(const Vec4V a);
a
PX_FORCE_INLINE Vec4V V4RecipFast(const Vec4V a);
PX_FORCE_INLINE Vec4V V4Rsqrt(const Vec4V a);
PX_FORCE_INLINE Vec4V V4RsqrtFast(const Vec4V a);
c
PX_FORCE_INLINE Vec4V V4ScaleAdd(const Vec4V a, const FloatV b, const Vec4V c);
a* b
PX_FORCE_INLINE Vec4V V4NegScaleSub(const Vec4V a, const FloatV b, const Vec4V c);
c
PX_FORCE_INLINE Vec4V V4MulAdd(const Vec4V a, const Vec4V b, const Vec4V c);
a* b
PX_FORCE_INLINE Vec4V V4NegMulSub(const Vec4V a, const Vec4V b, const Vec4V c);
PX_FORCE_INLINE Vec4V V4Abs(const Vec4V a);
b
PX_FORCE_INLINE Vec4V V4Andc(const Vec4V a, const VecU32V b);
PX_FORCE_INLINE FloatV V4Dot(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE FloatV V4Dot3(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE Vec4V V4Cross(const Vec4V a, const Vec4V b);
2
PX_FORCE_INLINE FloatV V4Length(const Vec4V a);
a
PX_FORCE_INLINE FloatV V4LengthSq(const Vec4V a);
2
PX_FORCE_INLINE Vec4V V4Normalize(const Vec4V a);
unsafeReturnValue
PX_FORCE_INLINE Vec4V V4NormalizeSafe(const Vec4V a, const Vec4V unsafeReturnValue);
2
PX_FORCE_INLINE Vec4V V4NormalizeFast(const Vec4V a);
PX_FORCE_INLINE Vec4V V4Sel(const BoolV c, const Vec4V a, const Vec4V b);
PX_FORCE_INLINE BoolV V4IsGrtr(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE BoolV V4IsGrtrOrEq(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE BoolV V4IsEq(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE Vec4V V4Max(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE Vec4V V4Min(const Vec4V a, const Vec4V b);
Get the maximum component from a
PX_FORCE_INLINE FloatV V4ExtractMax(const Vec4V a);
Get the minimum component from a
PX_FORCE_INLINE FloatV V4ExtractMin(const Vec4V a);
PX_FORCE_INLINE Vec4V V4Clamp(const Vec4V a, const Vec4V minV, const Vec4V maxV);
PX_FORCE_INLINE PxU32 V4AllGrtr(const Vec4V a, const Vec4V b);
return 1 if all components of a are greater than or equal to all components of b
PX_FORCE_INLINE PxU32 V4AllGrtrOrEq(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE PxU32 V4AllGrtrOrEq3(const Vec4V a, const Vec4V b);
return 1 if all components of a are equal to all components of b
PX_FORCE_INLINE PxU32 V4AllEq(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE PxU32 V4AnyGrtr3(const Vec4V a, const Vec4V b);
PX_FORCE_INLINE Vec4V V4Round(const Vec4V a);
PX_FORCE_INLINE Vec4V V4Sin(const Vec4V a);
PX_FORCE_INLINE Vec4V V4Cos(const Vec4V a);
Permute v into a new vec4v with YXWZ format
PX_FORCE_INLINE Vec4V V4PermYXWZ(const Vec4V v);
Permute v into a new vec4v with XZXZ format
PX_FORCE_INLINE Vec4V V4PermXZXZ(const Vec4V v);
Permute v into a new vec4v with YWYW format
PX_FORCE_INLINE Vec4V V4PermYWYW(const Vec4V v);
Permute v into a new vec4v with YZXW format
PX_FORCE_INLINE Vec4V V4PermYZXW(const Vec4V v);
equivalent to a swap of the two 64bit parts of the vector
PX_FORCE_INLINE Vec4V V4PermZWXY(const Vec4V a);
PX_FORCE_INLINE Vec4V V4Perm(const Vec4V a);
PX_FORCE_INLINE void V3Transpose(Vec3V & col0, Vec3V & col1, Vec3V & col2);
PX_FORCE_INLINE QuatV QuatV_From_RotationAxisAngle(const Vec3V u, const FloatV a);
convert q to a unit quaternion
PX_FORCE_INLINE QuatV QuatNormalize(const QuatV q);
2
PX_FORCE_INLINE FloatV QuatLength(const QuatV q);
q
PX_FORCE_INLINE FloatV QuatLengthSq(const QuatV q);
b
PX_FORCE_INLINE FloatV QuatDot(const QuatV a, const QuatV b);
PX_FORCE_INLINE QuatV QuatConjugate(const QuatV q);
PX_FORCE_INLINE Vec3V QuatGetImaginaryPart(const QuatV q);
convert quaternion to matrix 33
PX_FORCE_INLINE Mat33V QuatGetMat33V(const QuatVArg q);
convert quaternion to matrix 33
PX_FORCE_INLINE void QuatGetMat33V(const QuatVArg q, Vec3V & column0, Vec3V & column1, Vec3V & column2);
convert matrix 33 to quaternion
PX_FORCE_INLINE QuatV Mat33GetQuatV(const Mat33V & a);
axis
PX_FORCE_INLINE Vec3V QuatGetBasisVector0(const QuatV q);
axis
PX_FORCE_INLINE Vec3V QuatGetBasisVector1(const QuatV q);
axis
PX_FORCE_INLINE Vec3V QuatGetBasisVector2(const QuatV q);
calculate the rotation vector from q and v
PX_FORCE_INLINE Vec3V QuatRotate(const QuatV q, const Vec3V v);
calculate the rotation vector from the conjugate quaternion and v
PX_FORCE_INLINE Vec3V QuatRotateInv(const QuatV q, const Vec3V v);
quaternion multiplication
PX_FORCE_INLINE QuatV QuatMul(const QuatV a, const QuatV b);
quaternion add
PX_FORCE_INLINE QuatV QuatAdd(const QuatV a, const QuatV b);
PX_FORCE_INLINE QuatV QuatNeg(const QuatV q);
PX_FORCE_INLINE QuatV QuatSub(const QuatV a, const QuatV b);
PX_FORCE_INLINE QuatV QuatScale(const QuatV a, const FloatV b);
PX_FORCE_INLINE QuatV QuatMerge(const FloatV* const v);
PX_FORCE_INLINE QuatV QuatMerge(const FloatVArg x, const FloatVArg y, const FloatVArg z, const FloatVArg w);
PX_FORCE_INLINE QuatV QuatIdentity(void);
check for each component is valid
PX_FORCE_INLINE bool isFiniteQuatV(const QuatV q);
check for each component is valid
PX_FORCE_INLINE bool isValidQuatV(const QuatV q);
check for each component is valid
PX_FORCE_INLINE bool isSaneQuatV(const QuatV q);
false
PX_FORCE_INLINE BoolV BFFFF(void);
true
PX_FORCE_INLINE BoolV BFFFT(void);
false
PX_FORCE_INLINE BoolV BFFTF(void);
true
PX_FORCE_INLINE BoolV BFFTT(void);
false
PX_FORCE_INLINE BoolV BFTFF(void);
true
PX_FORCE_INLINE BoolV BFTFT(void);
false
PX_FORCE_INLINE BoolV BFTTF(void);
true
PX_FORCE_INLINE BoolV BFTTT(void);
false
PX_FORCE_INLINE BoolV BTFFF(void);
true
PX_FORCE_INLINE BoolV BTFFT(void);
false
PX_FORCE_INLINE BoolV BTFTF(void);
true
PX_FORCE_INLINE BoolV BTFTT(void);
false
PX_FORCE_INLINE BoolV BTTFF(void);
true
PX_FORCE_INLINE BoolV BTTFT(void);
false
PX_FORCE_INLINE BoolV BTTTF(void);
true
PX_FORCE_INLINE BoolV BTTTT(void);
true
PX_FORCE_INLINE BoolV BWMask(void);
false
PX_FORCE_INLINE BoolV BXMask(void);
false
PX_FORCE_INLINE BoolV BYMask(void);
false
PX_FORCE_INLINE BoolV BZMask(void);
get x component
PX_FORCE_INLINE BoolV BGetX(const BoolV f);
get y component
PX_FORCE_INLINE BoolV BGetY(const BoolV f);
get z component
PX_FORCE_INLINE BoolV BGetZ(const BoolV f);
get w component
PX_FORCE_INLINE BoolV BGetW(const BoolV f);
PX_FORCE_INLINE BoolV BSplatElement(Vec4V a);
PX_FORCE_INLINE BoolV BAnd(const BoolV a, const BoolV b);
PX_FORCE_INLINE BoolV BOr(const BoolV a, const BoolV b);
wise not
PX_FORCE_INLINE BoolV BNot(const BoolV a);
otherwise return false
PX_FORCE_INLINE BoolV BAllTrue4(const BoolV a);
otherwise return false
PX_FORCE_INLINE BoolV BAnyTrue4(const BoolV a);
otherwise return false
PX_FORCE_INLINE BoolV BAllTrue3(const BoolV a);
otherwise return false
PX_FORCE_INLINE BoolV BAnyTrue3(const BoolV a);
PX_FORCE_INLINE PxU32 BAllEq(const BoolV a, const BoolV b);
TTTT
PX_FORCE_INLINE PxU32 BAllEqTTTT(const BoolV a);
FFFF
PX_FORCE_INLINE PxU32 BAllEqFFFF(const BoolV a);
PX_FORCE_INLINE PxU32 BGetBitMask(const BoolV a);
VecI32V stuff

PX_FORCE_INLINE VecI32V VecI32V_Zero(void);
PX_FORCE_INLINE VecI32V VecI32V_One(void);
PX_FORCE_INLINE VecI32V VecI32V_Two(void);
PX_FORCE_INLINE VecI32V VecI32V_MinusOne(void);
0
PX_FORCE_INLINE VecShiftV VecI32V_PrepareShift(const VecI32VArg shift);
PX_FORCE_INLINE VecI32V VecI32V_LeftShift(const VecI32VArg a, const VecShiftVArg shift);
PX_FORCE_INLINE VecI32V VecI32V_RightShift(const VecI32VArg a, const VecShiftVArg shift);
PX_FORCE_INLINE VecI32V VecI32V_Add(const VecI32VArg a, const VecI32VArg b);
PX_FORCE_INLINE VecI32V VecI32V_Or(const VecI32VArg a, const VecI32VArg b);
PX_FORCE_INLINE VecI32V VecI32V_GetX(const VecI32VArg a);
PX_FORCE_INLINE VecI32V VecI32V_GetY(const VecI32VArg a);
PX_FORCE_INLINE VecI32V VecI32V_GetZ(const VecI32VArg a);
PX_FORCE_INLINE VecI32V VecI32V_GetW(const VecI32VArg a);
PX_FORCE_INLINE VecI32V VecI32V_Sub(const VecI32VArg a, const VecI32VArg b);
PX_FORCE_INLINE BoolV VecI32V_IsGrtr(const VecI32VArg a, const VecI32VArg b);
PX_FORCE_INLINE BoolV VecI32V_IsEq(const VecI32VArg a, const VecI32VArg b);
PX_FORCE_INLINE VecI32V V4I32Sel(const BoolV c, const VecI32V a, const VecI32V b);
VecU32V stuff

PX_FORCE_INLINE VecU32V U4Zero(void);
PX_FORCE_INLINE VecU32V U4One(void);
PX_FORCE_INLINE VecU32V U4Two(void);
PX_FORCE_INLINE BoolV V4IsEqU32(const VecU32V a, const VecU32V b);
PX_FORCE_INLINE VecU32V V4U32Sel(const BoolV c, const VecU32V a, const VecU32V b);
PX_FORCE_INLINE VecU32V V4U32or(VecU32V a, VecU32V b);
PX_FORCE_INLINE VecU32V V4U32xor(VecU32V a, VecU32V b);
PX_FORCE_INLINE VecU32V V4U32and(VecU32V a, VecU32V b);
PX_FORCE_INLINE VecU32V V4U32Andc(VecU32V a, VecU32V b);
PX_FORCE_INLINE VecU32V V4IsGrtrV32u(const Vec4V a, const Vec4V b);
a* b
PX_FORCE_INLINE Vec3V M33MulV3(const Mat33V & a, const Vec3V b);
b
PX_FORCE_INLINE Vec3V M33MulV3AddV3(const Mat33V & A, const Vec3V b, const Vec3V c);
b
PX_FORCE_INLINE Vec3V M33TrnspsMulV3(const Mat33V & a, const Vec3V b);
a* b
PX_FORCE_INLINE Mat33V M33MulM33(const Mat33V & a, const Mat33V & b);
b
PX_FORCE_INLINE Mat33V M33Add(const Mat33V & a, const Mat33V & b);
b
PX_FORCE_INLINE Mat33V M33Sub(const Mat33V & a, const Mat33V & b);
a
PX_FORCE_INLINE Mat33V M33Neg(const Mat33V & a);
absolute value of the matrix
PX_FORCE_INLINE Mat33V M33Abs(const Mat33V & a);
inverse mat
PX_FORCE_INLINE Mat33V M33Inverse(const Mat33V & a);
PX_FORCE_INLINE Mat33V M33Trnsps(const Mat33V & a);
create an identity matrix
PX_FORCE_INLINE Mat33V M33Identity(void);
create a vec3 to store the diagonal element of the M33
PX_FORCE_INLINE Mat33V M33Diagonal(const Vec3VArg);
PX_FORCE_INLINE PxU32 V4U32AllEq(const VecU32V a, const VecU32V b);
PX_FORCE_INLINE void V3WriteW(Vec3V & v, const PxF32 f);
PX_FORCE_INLINE PxF32 V3ReadW(const Vec3V & v);
PX_FORCE_INLINE Vec4V V4LoadAligned(Vec4V * addr);
PX_FORCE_INLINE Vec4V V4LoadUnaligned(Vec4V * addr);
PX_FORCE_INLINE Vec4V V4Floor(Vec4V a);
PX_FORCE_INLINE Vec4V V4Ceil(Vec4V a);
PX_FORCE_INLINE VecU32V V4ConvertToU32VSaturate(const Vec4V a, PxU32 power);
PX_FORCE_INLINE Vec3V multiplyV(const Mat34V & a, const Vec3V b);
PX_FORCE_INLINE Vec3V multiply3X3V(const Mat34V & a, const Vec3V b);
PX_FORCE_INLINE Vec3V multiplyTranspose3X3V(const Mat34V & a, const Vec3V b);
PX_FORCE_INLINE Mat34V multiplyV(const Mat34V & a, const Mat34V & b);
PX_FORCE_INLINE Mat33V multiply3X3V(const Mat34V & a, const Mat33V & b);
PX_FORCE_INLINE Mat33V multiply3X3V(const Mat34V & a, const Mat34V & b);
PX_FORCE_INLINE Mat34V addV(const Mat34V & a, const Mat34V & b);
PX_FORCE_INLINE Mat34V getInverseV(const Mat34V & a);
PX_FORCE_INLINE Mat33V getTranspose3X3(const Mat34V & a);
PX_FORCE_INLINE Vec4V multiplyV(const Mat44V & a, const Vec4V b);
PX_FORCE_INLINE Vec4V multiplyTransposeV(const Mat44V & a, const Vec4V b);
PX_FORCE_INLINE Mat44V multiplyV(const Mat44V & a, const Mat44V & b);
PX_FORCE_INLINE Mat44V addV(const Mat44V & a, const Mat44V & b);
PX_FORCE_INLINE Mat44V getInverseV(const Mat44V & a);
PX_FORCE_INLINE Mat44V getTransposeV(const Mat44V & a);
PX_FORCE_INLINE VecU16V pack2U32VToU16VSaturate(VecU32V a, VecU32V b);
PX_FORCE_INLINE VecU32V orV(VecU32V a, VecU32V b);
PX_FORCE_INLINE VecU32V andV(VecU32V a, VecU32V b);
PX_FORCE_INLINE VecU32V andcV(VecU32V a, VecU32V b);
PX_FORCE_INLINE Vec4V convertToVec4V(VecU32V a);
PX_FORCE_INLINE VecU32V splatElement(VecU32V a);
PX_FORCE_INLINE void storeAligned(VecU32V a, VecU32V * address);
PX_FORCE_INLINE VecI32V splatI32(void);
PX_FORCE_INLINE VecU16V orV(VecU16V a, VecU16V b);
PX_FORCE_INLINE VecU16V andV(VecU16V a, VecU16V b);
PX_FORCE_INLINE VecU16V andcV(VecU16V a, VecU16V b);
PX_FORCE_INLINE void storeAligned(VecU16V val, VecU16V * address);
PX_FORCE_INLINE VecU16V loadAligned(VecU16V * addr);
PX_FORCE_INLINE VecU16V loadUnaligned(VecU16V * addr);
PX_FORCE_INLINE VecU16V compareGt(VecU16V a, VecU16V b);
PX_FORCE_INLINE VecU16V splatElement(VecU16V a);
PX_FORCE_INLINE VecU16V subtractModulo(VecU16V a, VecU16V b);
PX_FORCE_INLINE VecU16V addModulo(VecU16V a, VecU16V b);
PX_FORCE_INLINE VecU32V getLo16(VecU16V a);
PX_FORCE_INLINE VecU32V getHi16(VecU16V a);
PX_FORCE_INLINE VecI16V splatImmediate(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return PxIsFinite(void);
return FloatV(void);
return Vec3V(void);
return Vec4V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec4V(void);
return Vec4V(void);
return Vec3V(void);
return Vec3V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FloatV(void);
return FloatV(a.x + b.x);
return FloatV(a.x - b.x);
return FloatV(a.x * b.x);
return FloatV(a.x / b.x);
return FloatV(a.x / b.x);
return PxRecipSqrt(void);
return PxSqrt(void);
return PxRecipSqrt(void);
return FloatV(c.ux ? a.x : b.x);
return BLoad(a.x > b.x);
return BLoad(a.x >= b.x);
return BLoad(a.x == b.x);
return BOOL_TO_U32(a.x > b.x);
return BOOL_TO_U32(a.x >= b.x);
return BOOL_TO_U32(a.x == b.x);
return floorf(a.x + 0.5f);
return sinf(void);
return cosf(void);
return BOOL_TO_U32(a.x > max.x || a.x < min.x);
return BOOL_TO_U32(a.x >= min.x && a.x <= max.x);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return FloatV(void);
return FloatV(void);
return FloatV(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return V3Load(void);
return V3Load(void);
return V3Load(void);
return Vec3V(void);
return Vec3V(a.x + b.x, a.y + b.y, a.z + b.z);
return Vec3V(a.x - b.x, a.y - b.y, a.z - b.z);
return Vec3V(a.x * b.x, a.y * b.x, a.z * b.x);
return Vec3V(a.x * b.x, a.y * b.y, a.z * b.z);
return Vec3V(a.x * bInv, a.y * bInv, a.z * bInv);
return Vec3V(a.x / b.x, a.y / b.y, a.z / b.z);
return Vec3V(a.x * bInv, a.y * bInv, a.z * bInv);
return Vec3V(a.x / b.x, a.y / b.y, a.z / b.z);
return Vec3V(1.0f / a.x, 1.0f / a.y, 1.0f / a.z);
return Vec3V(1.0f / a.x, 1.0f / a.y, 1.0f / a.z);
return FloatV(a.x * b.x + a.y * b.y + a.z * b.z);
return Vec3V(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x);
return FloatV(a.x * a.x + a.y * a.y + a.z * a.z);
return Vec3V(a.x * lengthInv, a.y * lengthInv, a.z * lengthInv);
return Vec3V(a.x * lengthInv, a.y * lengthInv, a.z * lengthInv);
return Vec3V(a.x * lengthInv, a.y * lengthInv, a.z * lengthInv);
return Vec3V(c.ux ? a.x : b.x, c.uy ? a.y : b.y, c.uz ? a.z : b.z);
return Vec3V(a.x > b.x ? a.x : b.x, a.y > b.y ? a.y : b.y, a.z > b.z ? a.z : b.z);
return Vec3V(a.x < b.x ? a.x : b.x, a.y < b.y ? a.y : b.y, a.z < b.z ? a.z : b.z);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return Vec3V(void);
return FloatV(a.x + a.y + a.z);
return BOOL_TO_U32(a.x > max.x || a.y > max.y || a.z > max.z || a.x < min.x || a.y < min.y || a.z < min.z);
return BOOL_TO_U32(a.x <= max.x && a.y <= max.y && a.z <= max.z && a.x >= min.x && a.y >= min.y && a.z >= min.z);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return FloatV(void);
return FloatV(void);
return FloatV(void);
return FloatV(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return Vec4V(void);
return V4Load(void);
return V4Load(void);
return V4Load(void);
return Vec4V(void);
return Vec4V(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
return Vec4V(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
return Vec4V(a.x * b.x, a.y * b.x, a.z * b.x, a.w * b.x);
return Vec4V(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
return Vec4V(a.x * bInv, a.y * bInv, a.z * bInv, a.w * bInv);
return Vec4V(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
return Vec4V(a.x * bInv, a.y * bInv, a.z * bInv, a.w * bInv);
return Vec4V(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
return Vec4V(1.0f / a.x, 1.0f / a.y, 1.0f / a.z, 1.0f / a.w);
return Vec4V(1.0f / a.x, 1.0f / a.y, 1.0f / a.z, 1.0f / a.w);
return FloatV(a.x + a.y + a.z + a.w);
return FloatV(a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w);
return FloatV(a.x * b.x + a.y * b.y + a.z * b.z);
return Vec4V(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x);
return V4Dot(void);
return V4ScaleInv(void);
return V4ScaleInv(void);
return V4ScaleInv(void);
return Vec4V(c.ux ? a.x : b.x, c.uy ? a.y : b.y, c.uz ? a.z : b.z, c.uw ? a.w : b.w);
return Vec4V(a.x > b.x ? a.x : b.x, a.y > b.y ? a.y : b.y, a.z > b.z ? a.z : b.z, a.w > b.w ? a.w : b.w);
return Vec4V(a.x < b.x ? a.x : b.x, a.y < b.y ? a.y : b.y, a.z < b.z ? a.z : b.z, a.w < b.w ? a.w : b.w);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BTFFF(void);
return BFTFF(void);
return BFFTF(void);
return BFFFT(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(void);
return BoolV(a.ux & ~b.ux, a.uy & ~b.uy, a.uz & ~b.uz, a.uw & ~b.uw);
return BoolV(void);
return Vec3V(a.col0.x * b.x + a.col1.x * b.y + a.col2.x * b.z, a.col0.y * b.x + a.col1.y * b.y + a.col2.y * b.z, a.col0.z * b.x + a.col1.z * b.y + a.col2.z * b.z);
return Vec3V(a.col0.x * b.x + a.col0.y * b.y + a.col0.z * b.z, a.col1.x * b.x + a.col1.y * b.y + a.col1.z * b.z, a.col2.x * b.x + a.col2.y * b.y + a.col2.z * b.z);
return V3ScaleAdd(void);
return Mat33V(void);
return Vec3V(a.col0.x * b.x + a.col1.x * b.y + a.col2.x * b.z + a.col3.x, a.col0.y * b.x + a.col1.y * b.y + a.col2.y * b.z + a.col3.y, a.col0.z * b.x + a.col1.z * b.y + a.col2.z * b.z + a.col3.z);
return Vec3V(a.col0.x * b.x + a.col1.x * b.y + a.col2.x * b.z, a.col0.y * b.x + a.col1.y * b.y + a.col2.y * b.z, a.col0.z * b.x + a.col1.z * b.y + a.col2.z * b.z);
return Vec3V(a.col0.x * b.x + a.col0.y * b.y + a.col0.z * b.z, a.col1.x * b.x + a.col1.y * b.y + a.col1.z * b.z, a.col2.x * b.x + a.col2.y * b.y + a.col2.z * b.z);
return Vec4V(a.col0.x * b.x + a.col1.x * b.y + a.col2.x * b.z + a.col3.x * b.w, a.col0.y * b.x + a.col1.y * b.y + a.col2.y * b.z + a.col3.y * b.w, a.col0.z * b.x + a.col1.z * b.y + a.col2.z * b.z + a.col3.z * b.w, a.col0.w * b.x + a.col1.w * b.y + a.col2.w * b.z + a.col3.w * b.w);
return Vec4V(a.col0.x * b.x + a.col0.y * b.y + a.col0.z * b.z + a.col0.w * b.w, a.col1.x * b.x + a.col1.y * b.y + a.col1.z * b.z + a.col1.w * b.w, a.col2.x * b.x + a.col2.y * b.y + a.col2.z * b.z + a.col2.w * b.w, a.col3.x * b.x + a.col3.y * b.y + a.col3.z * b.z + a.col3.w * b.w);
return Vec4V(void);
return VecU32V(c.ux ? a.u32[0] : b.u32[0], c.uy ? a.u32[1] : b.u32[1], c.uz ? a.u32[2] : b.u32[2], c.uw ? a.u32[3] : b.u32[3]);
return VecI32V(void);
return VecU32V(void);
return VecU32V(a.x > b.x ? 0xFFFFffff : 0, a.y > b.y ? 0xFFFFffff : 0, a.z > b.z ? 0xFFFFffff : 0, a.w > b.w ? 0xFFFFffff : 0);
return VecU32V(void);
return Vec4V(void);
return VecU32V(void);
return VecU32V(void);
return VecU32V(void);
return VecU32V(void);
return VecI32V(void);
return VecI32V(void);
return VecI32V(void);
return VecI32V(void);
return VecI32V(a.i32[0] + b.i32[0], a.i32[1] + b.i32[1], a.i32[2] + b.i32[2], a.i32[3] + b.i32[3]);
return VecI32V(a.i32[0] - b.i32[0], a.i32[1] - b.i32[1], a.i32[2] - b.i32[2], a.i32[3] - b.i32[3]);
return VecI32V(c.ux ? a.i32[0] : b.i32[0], c.uy ? a.i32[1] : b.i32[1], c.uz ? a.i32[2] : b.i32[2], c.uw ? a.i32[3] : b.i32[3]);
return VecI32V(void);
return VecI32V(void);
return VecI32V(void);
return VecI32V(void);
return VecU32V(void);
return VecU32V(void);
return VecU32V(void);
return VecI32V(a.i32[0] << count.i32[0], a.i32[1] << count.i32[1], a.i32[2] << count.i32[2], a.i32[3] << count.i32[3]);
return VecI32V(a.i32[0] >> count.i32[0], a.i32[1] >> count.i32[1], a.i32[2] >> count.i32[2], a.i32[3] >> count.i32[3]);
return VecI32V(a.i32[0] << count, a.i32[1] << count, a.i32[2] << count, a.i32[3] << count);
return VecI32V(a.i32[0] >> count, a.i32[1] >> count, a.i32[2] >> count, a.i32[3] >> count);
return VecI32V(a.i32[0] & b.i32[0], a.i32[1] & b.i32[1], a.i32[2] & b.i32[2], a.i32[3] & b.i32[3]);
return VecI32V(a.i32[0] | b.i32[0], a.i32[1] | b.i32[1], a.i32[2] | b.i32[2], a.i32[3] | b.i32[3]);
return VecI32V(void);
return VecI32V(void);
return VecI32V(void);
return VecI32V(void);
return VecI32V(c.ux ? a.i32[0] : b.i32[0], c.uy ? a.i32[1] : b.i32[1], c.uz ? a.i32[2] : b.i32[2], c.uw ? a.i32[3] : b.i32[3]);
return VecI32V(void);
return VecU32V(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return V4LoadXYZW(void);
return V4LoadU(void);
return V4LoadA(void);
return V4Normalize(void);
return V4Length(void);
return V4LengthSq(void);
return V4Dot(void);
return Vec3V_From_Vec4V(void);
const PxVec3 qv(void);
return V3ScaleAdd(void);
const PxVec3 qv(void);
return V4SetW(void);
return V4Add(void);
return V4Neg(void);
return V4Sub(void);
return V4Scale(void);
return V4Merge(void);
return V4Merge(void);
return isFiniteVec4V(void);
return Mat33V(void);
return Mat33V(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return transform(void);
return QuatTransform(void);
return QuatRotate(void);
return QuatRotateInv(void);
return PxTransformV(void);
return PxTransformV(void);
return PxTransformV(void);
return M33MulV3(void);
return M33TrnspsMulV3(void);
return PxMatTransformV(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return memset(void);
return memset(void);
return memcpy(void);
return memmove(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return V4LoadA(void);
return vceqq_s32(void);
return V4LoadA(void);
return vdupq_n_u32(void);
return V4LoadA(void);
return V4LoadA(void);
return V4LoadA(void);
return V4LoadA(void);
return V4LoadA(void);
return vsetq_lane_f32(void);
return vcombine_f32(void);
return V4LoadA(void);
return vld1q_u32(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return vneg_f32(void);
return vadd_f32(void);
return vsub_f32(void);
return vmul_f32(void);
return VRECIP(void);
return VRECIPE(void);
return VRECIPSQRT(void);
return VRECIPSQRTE(void);
return vmla_f32(void);
return vmls_f32(void);
return vabs_f32(void);
return vmax_f32(void);
return vmin_f32(void);
return vcvt_f32_s32(void);
return vget_lane_u32(void);
return vget_lane_u32(void);
return vcombine_f32(void);
return vdup_lane_f32(void);
return vdup_lane_f32(void);
return vdup_lane_f32(void);
return vcombine_f32(void);
return vcombine_f32(void);
return vcombine_f32(void);
return vdupq_n_f32(void);
return V3Load(void);
return V3Load(void);
return vsetq_lane_f32(void);
return vaddq_f32(void);
return vsubq_f32(void);
return vsetq_lane_f32(void);
return vmulq_f32(void);
return vsetq_lane_f32(void);
return vmulq_f32(void);
return vsetq_lane_f32(void);
return vmulq_f32(void);
return vsetq_lane_f32(void);
return vsetq_lane_f32(void);
return vsetq_lane_f32(void);
return vsetq_lane_f32(void);
return vsetq_lane_f32(void);
return vcombine_f32(void);
return vsetq_lane_f32(void);
return vcombine_f32(void);
return vmlaq_f32(void);
return vmlsq_f32(void);
return vabsq_f32(void);
return FSqrt(void);
return V3Dot(void);
return vbslq_f32(void);
return vcgtq_f32(void);
return vcgeq_f32(void);
return vceqq_f32(void);
return vmaxq_f32(void);
return vminq_f32(void);
return V4ClearW(void);
return vcombine_f32(void);
return vcombine_f32(void);
return vcombine_f32(void);
return vcombine_f32(void);
return vcombine_f32(void);
return vcombine_f32(void);
return vcombine_f32(void);
return vcombine_f32(void);
return vcombine_f32(void);
return vcombine_f32(void);
return vdup_lane_f32(void);
return vdup_lane_f32(void);
return vdup_lane_f32(void);
return vdup_lane_f32(void);
return vcombine_f32(void);
return vcombine_f32(void);
return vcombine_f32(void);
return vcombine_f32(void);
return vmovq_n_f32(void);
return vmovq_n_f32(void);
return vmovq_n_f32(void);
return V4Load(void);
return vnegq_f32(void);
return vaddq_f32(void);
return vsubq_f32(void);
return vmulq_lane_f32(void);
return vmulq_f32(void);
return vmulq_lane_f32(void);
return vmulq_f32(void);
return vmulq_lane_f32(void);
return vmulq_f32(void);
return VRECIPQ(void);
return VRECIPEQ(void);
return VRECIPSQRTQ(void);
return VRECIPSQRTEQ(void);
return vmlaq_lane_f32(void);
return vmlsq_lane_f32(void);
return vmlaq_f32(void);
return vmlsq_f32(void);
return vabsq_f32(void);
w
return FAdd(void);
return FSqrt(void);
return V4Dot(void);
return vceqq_u32(void);
return vbslq_f32(void);
return vcgtq_f32(void);
return vcgeq_f32(void);
return vceqq_f32(void);
return vmaxq_f32(void);
return vminq_f32(void);
return vmovq_n_u32(void);
return vcombine_u32(void);
return vcombine_u32(void);
return vcombine_u32(void);
return vcombine_u32(void);
return vcombine_u32(void);
return vcombine_u32(void);
return vcombine_u32(void);
return vcombine_u32(void);
return vcombine_u32(void);
return vcombine_u32(void);
return vcombine_u32(void);
return vcombine_u32(void);
return vcombine_u32(void);
return vcombine_u32(void);
return vmovq_n_u32(void);
return BTFFF(void);
return BFTFF(void);
return BFFTF(void);
return BFFFT(void);
return vdupq_lane_u32(void);
return vdupq_lane_u32(void);
return vdupq_lane_u32(void);
return vdupq_lane_u32(void);
return vandq_u32(void);
return vmvnq_u32(void);
return vbicq_u32(void);
return vorrq_u32(void);
return vdupq_lane_u32(void);
return vdupq_lane_u32(void);
return vdupq_lane_u32(void);
return vdupq_lane_u32(void);
return V3Add(void);
return V3Merge(void);
return V3ScaleAdd(void);
return Mat33V(void);
return V3Add(void);
return V3Add(void);
return V3Merge(void);
return V4Add(void);
return Mat44V(void);
Mat44V invTrans(void);
return M44Trnsps(void);
return vbslq_u32(void);
return vorrq_u32(void);
return veorq_u32(void);
return vandq_u32(void);
return vbicq_u32(void);
return vorrq_u16(void);
return vandq_u16(void);
return vbicq_u16(void);
return vdupq_n_s32(void);
return vld1q_s32(void);
return vld1q_s32(void);
return vaddq_s32(void);
return vsubq_s32(void);
return vcgtq_s32(void);
return vceqq_s32(void);
return vbslq_s32(void);
return vdupq_n_s32(void);
return vdupq_n_s32(void);
return vdupq_n_s32(void);
return vdupq_n_s32(void);
return U4Load(void);
return U4Load(void);
return U4Load(void);
return vshlq_s32(void);
return vshlq_s32(void);
return vshlq_s32(void);
return vandq_s32(void);
return vorrq_s32(void);
return vdupq_lane_s32(void);
return vdupq_lane_s32(void);
return vdupq_lane_s32(void);
return vdupq_lane_s32(void);
return vbslq_s32(void);
return vcombine_s32(void);
return vreinterpretq_s32_u32(void);
return vdupq_n_s32(void);
return vdupq_n_u32(void);
return V4IsGrtr(void);
return vcgtq_u16(void);
return vcgtq_s16(void);
return vcvtq_f32_u32(void);
return vcvtq_f32_s32(void);
return vcvtq_s32_f32(void);
return vreinterpretq_f32_u32(void);
return vreinterpretq_f32_s32(void);
return vreinterpretq_u32_f32(void);
return vreinterpretq_s32_f32(void);
PX_FORCE_INLINE BoolV BSplatElement(BoolV a);
PX_FORCE_INLINE VecU32V V4U32SplatElement(VecU32V a);
PX_FORCE_INLINE Vec4V V4SplatElement(Vec4V a);
return vdupq_n_u32(void);
return vld1q_u32(void);
return vld1q_u32(void);
return vbslq_f32(void);
return vbslq_f32(void);
prevent warning in release builds

return vcvtq_u32_f32(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm_castsi128_ps(void);
return _mm_castps_si128(void);
return PxU32(moveMask == 0xf);
return PxU32(moveMask != 0x0);
return _mm_load1_ps(void);
return _mm_load1_ps(void);
return _mm_set_ps(void);
return _mm_load1_ps(void);
return _mm_set_ps(void);
return _mm_set_ps(void);
return _mm_set_ps(void);
return V4ClearW(void);
return _mm_set_ps(void);
return _mm_load_ps(void);
return _mm_set_epi32(void);
return _mm_loadu_ps(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return _mm_add_ps(void);
return _mm_sub_ps(void);
return _mm_mul_ps(void);
return _mm_div_ps(void);
return _mm_rcp_ps(void);
return _mm_sqrt_ps(void);
return _mm_rsqrt_ps(void);
return _mm_cmpgt_ps(void);
return _mm_cmpge_ps(void);
return _mm_cmpeq_ps(void);
return _mm_max_ps(void);
return _mm_min_ps(void);
ifdef __SSE4_2__
return _mm_round_ps(_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);
return _mm_round_ps(void);
return _mm_cvtepi32_ps(void);
return BAllEqTTTT(void);
return V3Load(void);
return V3Load(void);
return V3Load(void);
return _mm_add_ps(void);
return _mm_sub_ps(void);
return _mm_mul_ps(void);
return _mm_mul_ps(void);
return _mm_div_ps(void);
return V4Sel(void);
return V4Sel(void);
return V4Sel(void);
return V4Sel(void);
ifdef __SSE4_2__
return _mm_dp_ps(void);
ay* by
return _mm_add_ps(void);
return V3Dot(void);
return _mm_cmpgt_ps(void);
return _mm_cmpge_ps(void);
return _mm_cmpeq_ps(void);
return _mm_max_ps(void);
return _mm_min_ps(void);
ifdef __SSE4_2__
return _mm_round_ps(_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);
return _mm_round_ps(void);
return _mm_cvtepi32_ps(void);
return V3SetY(void);
return BAllEqTTTT(void);
return _mm_unpackhi_ps(void);
return _mm_unpacklo_ps(void);
return _mm_unpackhi_ps(void);
return _mm_unpacklo_ps(void);
return _mm_unpacklo_ps(void);
return _mm_unpackhi_ps(void);
return V4Load(void);
return V4Load(void);
return V4Load(void);
return _mm_add_ps(void);
return _mm_sub_ps(void);
return _mm_mul_ps(void);
return _mm_mul_ps(void);
return _mm_div_ps(void);
return _mm_div_ps(void);
return _mm_rcp_ps(void);
return _mm_rsqrt_ps(void);
return _mm_sqrt_ps(void);
w
return FAdd(void);
ifdef __SSE4_2__
return _mm_dp_ps(void);
aw* bw
return _mm_add_ps(void);
ifdef __SSE4_2__
return _mm_dp_ps(void);
return V4Dot(void);
return _mm_cmpgt_ps(void);
return _mm_cmpge_ps(void);
return _mm_cmpeq_ps(void);
return _mm_max_ps(void);
return _mm_min_ps(void);
ifdef __SSE4_2__
return _mm_round_ps(_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);
return _mm_round_ps(void);
return _mm_cvtepi32_ps(void);
return _mm_setzero_ps(void);
return _mm_and_ps(void);
return _mm_xor_ps(void);
return _mm_andnot_ps(void);
return _mm_or_ps(void);
return V3Add(void);
return V3Merge(void);
return V3ScaleAdd(void);
return Mat33V(void);
return V3Add(void);
return V3Add(void);
return V3Merge(void);
return V4Add(void);
return V4Merge(void);
Mat44V invTrans(void);
return M44Trnsps(void);
return _mm_set_ps(void);
return _mm_add_epi32(void);
return _mm_sub_epi32(void);
return _mm_setzero_si128(void);
return I4Load(void);
return I4Load(void);
return I4Load(void);
return U4Load(void);
return U4Load(void);
return U4Load(void);
return _mm_sll_epi32(void);
return _mm_srl_epi32(void);
return _mm_and_si128(void);
return _mm_or_si128(void);
return m128_F2I(void);
VecU32V result32(void);
return Vec4V(void);
return V4IsGrtr(void);
return _mm_cvtepi32_ps(void);
return _mm_cvttps_epi32(void);
return Vec4V(void);
return m128_I2F(void);
return VecU32V(void);
return m128_F2I(void);
return V4Load(void);
return V4Load(void);
UnionM128 a(void);
UnionM128 a(void);
UnionM128 a(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec3V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);
Vec4V PX_ALIGN(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm_castsi128_ps(void);
return _mm_castps_si128(void);
return PxU32(moveMask == 0xf);
return PxU32(moveMask != 0x0);
return _mm_load1_ps(void);
return PxIsFinite(void);
return _mm_load1_ps(void);
return _mm_set_ps(void);
return _mm_load1_ps(void);
return _mm_set_ps(void);
return _mm_load_ps(void);
return _mm_set_ps(void);
return V4ClearW(void);
return _mm_set_ps(void);
return _mm_load_ps(void);
return _mm_loadu_ps(void);
return _mm_setzero_ps(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return FLoad(void);
return _mm_add_ps(void);
return _mm_sub_ps(void);
return _mm_mul_ps(void);
return _mm_div_ps(void);
return _mm_rcp_ps(void);
return _mm_sqrt_ps(void);
return _mm_rsqrt_ps(void);
return _mm_cmpgt_ps(void);
return _mm_cmpge_ps(void);
return _mm_cmpeq_ps(void);
return _mm_max_ps(void);
return _mm_min_ps(void);
return _mm_round_ps(void);
return _mm_cvtepi32_ps(void);
return BAllEqTTTT(void);
return _mm_setzero_ps(void);
return V3Load(void);
return V3Load(void);
return _mm_add_ps(void);
return _mm_sub_ps(void);
return _mm_mul_ps(void);
return _mm_mul_ps(void);
return _mm_div_ps(void);
return V4Sel(void);
return V4Sel(void);
return V4Sel(void);
return V4Sel(void);
ay* by
return _mm_add_ps(void);
return V3Dot(void);
return _mm_cmpgt_ps(void);
return _mm_cmpge_ps(void);
return _mm_cmpeq_ps(void);
return _mm_max_ps(void);
return _mm_min_ps(void);
return _mm_or_ps(void);
return _mm_round_ps(void);
return _mm_cvtepi32_ps(void);
return V3SetY(void);
return BAllEqTTTT(void);
return _mm_unpackhi_ps(void);
return _mm_unpacklo_ps(void);
return _mm_unpackhi_ps(void);
return _mm_unpacklo_ps(void);
return _mm_unpacklo_ps(void);
return _mm_unpackhi_ps(void);
return _mm_setzero_ps(void);
return V4Load(void);
return V4Load(void);
return _mm_add_ps(void);
return _mm_sub_ps(void);
return _mm_mul_ps(void);
return _mm_mul_ps(void);
return _mm_div_ps(void);
return _mm_div_ps(void);
return _mm_rcp_ps(void);
return _mm_rsqrt_ps(void);
return _mm_sqrt_ps(void);
w
return FAdd(void);
aw* bw
return _mm_add_ps(void);
return V4Dot(void);
return _mm_cmpgt_ps(void);
return _mm_cmpge_ps(void);
return _mm_cmpeq_ps(void);
return _mm_max_ps(void);
return _mm_min_ps(void);
return _mm_round_ps(void);
return _mm_cvtepi32_ps(void);
return _mm_setzero_ps(void);
return _mm_and_ps(void);
return _mm_xor_ps(void);
return _mm_andnot_ps(void);
return _mm_or_ps(void);
return V3Add(void);
return V3ScaleAdd(void);
return Mat33V(void);
return Mat33V(void);
return V3Add(void);
return V3Add(void);
return Mat33V(void);
return V4Add(void);
return Mat44V(void);
Mat44V invTrans(void);
return M44Trnsps(void);
return _mm_set_ps(void);
return V4U32Sel(void);
return V4Zero(void);
return I4Load(void);
return I4Load(void);
return I4Load(void);
return U4Load(void);
return U4Load(void);
return U4Load(void);
VecU32V result32(void);
return Vec4V(void);
return V4IsGrtr(void);
return Vec4V(void);
return Vec4V(void);
return VecU32V(void);
return VecI32V(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return memset(void);
return memset(void);
return memcpy(void);
return memmove(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_C_EXPORT PX_PHYSX_COMMON_API bool PX_CALL_CONV PxFindOverlap(PxReportCallback<PxGeomIndexPair>&callback, const PxBVH & bvh0, const PxBVH & bvh1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_PHYSX_COMMON_API static PxU32 getUniqueID(void);
PxU32 z(void);
Type TYPE(void);
return TYPE(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return mNbVertices * sizeof(void);
return mNbTriangles * sizeof(void);
PX_C_EXPORT PX_PHYSX_COMMON_API bool PX_CALL_CONV PxGetTriangleMeshInternalData(PxTriangleMeshInternalData & data, const PxTriangleMesh & mesh, bool takeOwnership);
return mNbIndices * sizeof(void);
PX_C_EXPORT PX_PHYSX_COMMON_API bool PX_CALL_CONV PxGetBVHInternalData(PxBVHInternalData & data, const PxBVH & bvh, bool takeOwnership);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_PHYSX_COMMON_API static bool overlap(const PxGeometry & geom0, const PxTransform & pose0, const PxGeometry & geom1, const PxTransform & pose1, PxGeometryQueryFlags queryFlags = PxGeometryQueryFlag::eDEFAULT, PxOverlapThreadContext * threadContext = NULL);
PX_PHYSX_COMMON_API static bool sweep(const PxVec3 & unitDir, const PxReal maxDist, const PxGeometry & geom0, const PxTransform & pose0, const PxGeometry & geom1, const PxTransform & pose1, PxGeomSweepHit & sweepHit, PxHitFlags hitFlags = PxHitFlag::eDEFAULT, const PxReal inflation = 0.0f, PxGeometryQueryFlags queryFlags = PxGeometryQueryFlag::eDEFAULT, PxSweepThreadContext * threadContext = NULL);
PX_PHYSX_COMMON_API static bool computePenetration(PxVec3 & direction, PxF32 & depth, const PxGeometry & geom0, const PxTransform & pose0, const PxGeometry & geom1, const PxTransform & pose1, PxGeometryQueryFlags queryFlags = PxGeometryQueryFlag::eDEFAULT);
PX_PHYSX_COMMON_API static PxReal pointDistance(const PxVec3 & point, const PxGeometry & geom, const PxTransform & pose, PxVec3 * closestPoint = NULL, PxU32 * closestIndex = NULL, PxGeometryQueryFlags queryFlags = PxGeometryQueryFlag::eDEFAULT);
PX_PHYSX_COMMON_API static void computeGeomBounds(PxBounds3 & bounds, const PxGeometry & geom, const PxTransform & pose, float offset = 0.0f, float inflation = 1.0f, PxGeometryQueryFlags queryFlags = PxGeometryQueryFlag::eDEFAULT);
PX_PHYSX_COMMON_API static bool generateTriangleContacts(const PxGeometry & geom, const PxTransform & pose, const PxVec3 triangleVertices[3], PxU32 triangleIndex, PxReal contactDistance, PxReal meshContactMargin, PxReal toleranceLength, PxContactBuffer & contactBuffer);
PX_PHYSX_COMMON_API static bool isValid(const PxGeometry & geom);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_PHYSX_COMMON_API static bool proximityInfo(const Support & a, const Support & b, const PxTransform & poseA, const PxTransform & poseB, PxReal contactDistance, PxReal toleranceLength, PxVec3 & pointA, PxVec3 & pointB, PxVec3 & separatingAxis, PxReal & separation);
PX_PHYSX_COMMON_API static bool raycast(const Support & shape, const PxTransform & pose, const PxVec3 & rayStart, const PxVec3 & unitDir, PxReal maxDist, PxReal & t, PxVec3 & n, PxVec3 & p);
PX_PHYSX_COMMON_API static bool overlap(const Support & a, const Support & b, const PxTransform & poseA, const PxTransform & poseB);
PX_PHYSX_COMMON_API static bool sweep(const Support & a, const Support & b, const PxTransform & poseA, const PxTransform & poseB, const PxVec3 & unitDir, PxReal maxDist, PxReal & t, PxVec3 & n, PxVec3 & p);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_INLINE PxHairSystemDesc(void);
PX_INLINE void setToDefault(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_INLINE PxHeightFieldDesc(void);
PX_INLINE		void setToDefault(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_PHYSX_COMMON_API static void getTriangle(const PxTriangleMeshGeometry & triGeom, const PxTransform & transform, PxTriangleID triangleIndex, PxTriangle & triangle, PxU32 * vertexIndices = NULL, PxU32 * adjacencyIndices = NULL);
PX_PHYSX_COMMON_API static void getTriangle(const PxHeightFieldGeometry & hfGeom, const PxTransform & transform, PxTriangleID triangleIndex, PxTriangle & triangle, PxU32 * vertexIndices = NULL, PxU32 * adjacencyIndices = NULL);
PX_PHYSX_COMMON_API static PxU32 findOverlapTriangleMesh(const PxGeometry & geom, const PxTransform & geomPose, const PxTriangleMeshGeometry & meshGeom, const PxTransform & meshPose, PxU32 * results, PxU32 maxResults, PxU32 startIndex, bool& overflow, PxGeometryQueryFlags queryFlags = PxGeometryQueryFlag::eDEFAULT);
PX_PHYSX_COMMON_API static bool findOverlapTriangleMesh(PxReportCallback<PxGeomIndexPair>&callback, const PxTriangleMeshGeometry & meshGeom0, const PxTransform & meshPose0, const PxTriangleMeshGeometry & meshGeom1, const PxTransform & meshPose1, PxGeometryQueryFlags queryFlags = PxGeometryQueryFlag::eDEFAULT, PxMeshMeshQueryFlags meshMeshFlags = PxMeshMeshQueryFlag::eDEFAULT, float tolerance = 0.0f);
PX_PHYSX_COMMON_API static PxU32 findOverlapHeightField(const PxGeometry & geom, const PxTransform & geomPose, const PxHeightFieldGeometry & hfGeom, const PxTransform & hfPose, PxU32 * results, PxU32 maxResults, PxU32 startIndex, bool& overflow, PxGeometryQueryFlags queryFlags = PxGeometryQueryFlag::eDEFAULT);
PX_PHYSX_COMMON_API static bool sweep(const PxVec3 & unitDir, const PxReal distance, const PxGeometry & geom, const PxTransform & pose, PxU32 triangleCount, const PxTriangle * triangles, PxGeomSweepHit & sweepHit, PxHitFlags hitFlags = PxHitFlag::eDEFAULT, const PxU32 * cachedIndex = NULL, const PxReal inflation = 0.0f, bool doubleSided = false, PxGeometryQueryFlags queryFlags = PxGeometryQueryFlag::eDEFAULT);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxMat33 rot(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return processResults(void);
return processResults(void);
return processResults(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_INLINE PxSimpleTriangleMesh(void);
PX_INLINE void setToDefault(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_C_EXPORT PX_PHYSX_CORE_API void PX_CALL_CONV PxSetPhysXGpuLoadHook(const PxGpuLoadHook * hook);
PX_C_EXPORT PX_PHYSX_CORE_API int PX_CALL_CONV PxGetSuggestedCudaDeviceOrdinal(physx::PxErrorCallback & errc);
PxCudaContextManager* PX_CALL_CONV PxCreateCudaContextManager(physx::PxFoundation & foundation, const physx::PxCudaContextManagerDesc & desc, physx::PxProfilerCallback * profilerCallback = NULL, bool launchSynchronous = false);
PX_C_EXPORT PX_PHYSX_CORE_API void PX_CALL_CONV PxSetPhysXGpuProfilerCallback(physx::PxProfilerCallback * profilerCallback);
PX_C_EXPORT PX_PHYSX_CORE_API void PX_CALL_CONV PxCudaRegisterFunction(int moduleIndex, const char* functionName);
PX_C_EXPORT PX_PHYSX_CORE_API void** PX_CALL_CONV PxCudaRegisterFatBinary(void);
PX_C_EXPORT PX_PHYSX_CORE_API void** PX_CALL_CONV PxGetCudaModuleTable(void);
PxU32 PX_CALL_CONV PxGetCudaModuleTableSize(void);
PxKernelIndex* PX_CALL_CONV PxGetCudaFunctionTable(void);
PxU32 PX_CALL_CONV PxGetCudaFunctionTableSize(void);
PxPhysicsGpu* PX_CALL_CONV PxGetPhysicsGpu(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxOmniPvd* PX_CALL_CONV PxCreateOmniPvd(physx::PxFoundation & foundation);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_C_EXPORT PxPvd* PX_CALL_CONV PxCreatePvd(PxFoundation & foundation);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_C_EXPORT PxPvdTransport* PX_CALL_CONV PxDefaultPvdSocketTransportCreate(const char* host, int port, unsigned int timeoutInMilliseconds);
PX_C_EXPORT PxPvdTransport* PX_CALL_CONV PxDefaultPvdFileTransportCreate(const char* name);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static PxTaskManager* createTaskManager(PxErrorCallback & errorCallback, PxCpuDispatcher * = NULL);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void setDrivenWheel(const PxU32 wheelId, const bool drivenState);
void setDrivenWheelStatus(PxU32 status);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void setEngineData(const PxVehicleEngineData & engine);
void setGearsData(const PxVehicleGearsData & gears);
void setClutchData(const PxVehicleClutchData & clutch);
void setAutoBoxData(const PxVehicleAutoBoxData & autobox);
static void getBinaryMetaData(PxOutputStream & stream);
void setToRestState(void);
void setAnalogInput(const PxU32 type, const PxReal analogVal);
void setToRestState(void);
static PxU32 computeByteSize(const PxU32 numWheels);
static PxU8* patchupPointers(const PxU32 nbWheels, PxVehicleDrive * vehDrive, PxU8 * ptr);
virtual void init(const PxU32 numWheels);
void free(void);
static void getBinaryMetaData(PxOutputStream & stream);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void setDiffData(const PxVehicleDifferential4WData & diff);
void setAckermannGeometryData(const PxVehicleAckermannGeometryData & ackermannData);
static void getBinaryMetaData(PxOutputStream & stream);
static PxVehicleDrive4W* allocate(const PxU32 nbWheels);
void free(void);
void setToRestState(void);
static		PxVehicleDrive4W* createObject(PxU8 * &address, PxDeserializationContext & context);
static		void getBinaryMetaData(PxOutputStream & stream);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void setDiffData(const PxVehicleDifferentialNWData & diff);
static void getBinaryMetaData(PxOutputStream & stream);
static PxVehicleDriveNW* allocate(const PxU32 nbWheels);
void free(void);
void setToRestState(void);
static	PxVehicleDriveNW* createObject(PxU8 * &address, PxDeserializationContext & context);
static	void getBinaryMetaData(PxOutputStream & stream);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static PxVehicleDriveTank* allocate(const PxU32 nbWheels);
void free(void);
void setToRestState(void);
static		PxVehicleDriveTank* createObject(PxU8 * &address, PxDeserializationContext & context);
static		void getBinaryMetaData(PxOutputStream & stream);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static PxVehicleNoDrive* allocate(const PxU32 nbWheels);
void free(void);
void setToRestState(void);
void setBrakeTorque(const PxU32 id, const PxReal brakeTorque);
void setDriveTorque(const PxU32 id, const PxReal driveTorque);
void setSteerAngle(const PxU32 id, const PxReal steerAngle);
virtual		void exportExtraData(void);
void importExtraData(void);
static		PxVehicleNoDrive* createObject(PxU8 * &address, PxDeserializationContext & context);
static		void getBinaryMetaData(PxOutputStream & stream);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_DEPRECATED PX_C_EXPORT bool PX_CALL_CONV PxInitVehicleSDK(PxPhysics & physics, PxSerializationRegistry * serializationRegistry = NULL);
PX_DEPRECATED PX_C_EXPORT void PX_CALL_CONV PxCloseVehicleSDK(PxSerializationRegistry * serializationRegistry = NULL);
PX_DEPRECATED void PxVehicleSetBasisVectors(const PxVec3 & up, const PxVec3 & forward);
PX_DEPRECATED void PxVehicleSetUpdateMode(PxVehicleUpdateMode::Enum vehicleUpdateMode);
PX_DEPRECATED void PxVehicleSetSweepHitRejectionAngles(const PxF32 pointRejectAngle, const PxF32 normalRejectAngle);
PX_DEPRECATED void PxVehicleSetMaxHitActorAcceleration(const PxF32 maxHitActorAcceleration);
PX_INLINE PxVehicleContext(void);
PX_INLINE void setToDefault(void);
PX_INLINE void computeSideAxis(void);
PX_DEPRECATED const PxVehicleContext& PxVehicleGetDefaultContext(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void release(void);
void setTypePairFriction(const PxU32 surfaceType, const PxU32 tireType, const PxReal value);
static void serializeToBinary(const PxVehicleDrivableSurfaceToTireFrictionPairs & frictionTable, const PxSerialObjectId * materialIds, const PxU32 nbMaterialIds, PxCollection * collection, PxOutputStream & stream);
static PxVehicleDrivableSurfaceToTireFrictionPairs* deserializeFromBinary(const PxCollection & collection, void* memBlock);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_DEPRECATED void PxVehicleSuspensionRaycasts(PxBatchQueryExt * batchQuery, const PxU32 nbVehicles, PxVehicleWheels * *vehicles, const bool* vehiclesToRaycast = NULL, const PxQueryFlags queryFlags = PxQueryFlag::eSTATIC | PxQueryFlag::eDYNAMIC | PxQueryFlag::ePREFILTER);
PX_DEPRECATED void PxVehicleShiftOrigin(const PxVec3 & shift, const PxU32 nbVehicles, PxVehicleWheels * *vehicles);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_DEPRECATED bool PxVehicleIsInAir(const PxVehicleWheelQueryResult & vehWheelQueryResults);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

if PX_CHECKED
void testValidAnalogValue(const PxF32 actualValue, const PxF32 minVal, const PxF32 maxVal, const char* errorString);
else
return feedbackFilter(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_DEPRECATED void PxVehicleComputeSprungMasses(const PxU32 nbSprungMasses, const PxVec3 * sprungMassCoordinates, const PxVec3 & centreOfMass, const PxReal totalMass, const PxU32 gravityDirection, PxReal * sprungMasses);
PX_DEPRECATED void PxVehicleUpdateCMassLocalPose(const PxTransform & oldCMassLocalPose, const PxTransform & newCMassLocalPose, const PxU32 gravityDirection, PxVehicleWheels * vehicle);
PX_DEPRECATED void PxVehicleCopyDynamicsData(const PxVehicleCopyDynamicsMap & wheelMap, const PxVehicleWheels & src, PxVehicleWheels * trg);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void setup(const PxVehicleGraphDesc & desc, const PxVehicleGraphType::Enum graphType);
void clearRecordedChannelData(void);
void updateTimeSlice(const PxReal* const samples);
void setChannel(PxVehicleGraphChannelDesc & desc, const PxU32 channel);
static PxVehicleTelemetryData* allocate(const PxU32 nbWheels);
void free(void);
void clear(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static PxVehicleWheelsSimData* allocate(const PxU32 nbWheels);
void setChassisMass(const PxF32 chassisMass);
void free(void);
void copy(const PxVehicleWheelsSimData & src, const PxU32 srcWheel, const PxU32 trgWheel);
void setSuspensionData(const PxU32 id, const PxVehicleSuspensionData & susp);
void setWheelData(const PxU32 id, const PxVehicleWheelData & wheel);
void setTireData(const PxU32 id, const PxVehicleTireData & tire);
void setSuspTravelDirection(const PxU32 id, const PxVec3 & dir);
void setSuspForceAppPointOffset(const PxU32 id, const PxVec3 & offset);
void setTireForceAppPointOffset(const PxU32 id, const PxVec3 & offset);
void setWheelCentreOffset(const PxU32 id, const PxVec3 & offset);
void setWheelShapeMapping(const PxU32 wheelId, const PxI32 shapeId);
void setSceneQueryFilterData(const PxU32 suspId, const PxFilterData & sqFilterData);
void setTireLoadFilterData(const PxVehicleTireLoadFilterData & tireLoadFilter);
PxU32 addAntiRollBarData(const PxVehicleAntiRollBarData & antiRoll);
void disableWheel(const PxU32 wheel);
void enableWheel(const PxU32 wheel);
void setSubStepCount(const PxReal thresholdLongitudinalSpeed, const PxU32 lowForwardSpeedSubStepCount, const PxU32 highForwardSpeedSubStepCount);
void setMinLongSlipDenominator(const PxReal minLongSlipDenominator);
void setFlags(PxVehicleWheelsSimFlags flags);
static PxU32 computeByteSize(const PxU32 numWheels);
static PxU8* patchUpPointers(const PxU32 numWheels, PxVehicleWheelsSimData * simData, PxU8 * ptrIn);
static void getBinaryMetaData(PxOutputStream & stream);
void setAntiRollBarData(const PxU32 id, const PxVehicleAntiRollBarData & antiRoll);
void setToRestState(void);
void setTireForceShaderFunction(PxVehicleComputeTireForce tireForceShaderFn);
void setTireForceShaderData(const PxU32 tireId, const void* tireForceShaderData);
void setWheelRotationSpeed(const PxU32 wheelIdx, const PxReal speed);
void setWheelRotationAngle(const PxU32 wheelIdx, const PxReal angle);
void setUserData(const PxU32 tireIdx, void* userData);
void copy(const PxVehicleWheelsDynData & src, const PxU32 srcWheel, const PxU32 trgWheel);
void setTireContacts(const PxU32 * nbHits, const PxPlane * contactPlanes, const PxReal * contactFrictions, const PxTireContactIntersectionMethod::Enum * intersectionMethods, const PxU32 nbWheels);
static PxU32 computeByteSize(const PxU32 numWheels);
static PxU8* patchUpPointers(const PxU32 numWheels, PxVehicleWheelsDynData * dynData, PxU8 * ptr);
static void getBinaryMetaData(PxOutputStream & stream);
void setToRestState(void);
static PxU32 computeByteSize(const PxU32 nbWheels);
static PxU8* patchupPointers(const PxU32 nbWheels, PxVehicleWheels * vehWheels, PxU8 * ptr);
virtual void init(const PxU32 numWheels);
void free(void);
void onConstraintRelease(void);
virtual		void requiresObjects(PxProcessPxBaseCallback & c);
virtual		void exportExtraData(void);
void importExtraData(void);
void resolveReferences(void);
static		void getBinaryMetaData(PxOutputStream & stream);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PX_FORCE_INLINE bool add(PxVehicleComponent * component);
PX_FORCE_INLINE PxU8 beginSubstepGroup(const PxU8 nbSubSteps = 1);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

const PxQuat quatPitch(void);
const PxQuat quatRoll(void);
const PxQuat quatYaw(void);
const PxTransform newPose(oldPose.p - shift);
PxVec3 pointInPlane(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void decomposeLU(const PxVehicleMatrixNN & A);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

const PxMat33 mat33(void);
const PxQuat quat(void);
return getData(void);
return getData(void);
return T(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void PxVehiclePhysxActorWakeup(const PxVehicleCommandState & commands, const PxVehicleEngineDriveTransmissionCommandState * transmissionCommands, const PxVehicleGearboxParams * gearParams, const PxVehicleGearboxState * gearState, PxRigidBody & physxActor, PxVehiclePhysXSteerState & physxSteerState);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void PxVehiclePhysXActorDestroy(PxVehiclePhysXActor & vehiclePhysXActor);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

PxConvexMesh* PxVehicleUnitCylinderSweepMeshCreate(const PxVehicleFrame & vehicleFrame, PxPhysics & physics, const PxCookingParams & params);
void PxVehicleUnitCylinderSweepMeshDestroy(PxConvexMesh * mesh);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

bool PxVehicleComputeSprungMasses(const PxU32 nbSprungMasses, const PxVec3 * sprungMassCoordinates, const PxReal totalMass, const PxVehicleAxes::Enum gravityDirection, PxReal * sprungMasses);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Compute the tire slip directions PxVehicleTireDirsUpdate(void);
Update the camber angle PxVehicleTireCamberAnglesUpdate(void);
Compute the friction PxVehicleTireGripUpdate(void);
this should be skipped if tires do not use the sticky feature PxVehicleTireStickyStateUpdate(void);
this should be skipped if tires do not use the sticky feature PxVehicleTireSlipsAccountingForStickyStatesUpdate(void);
Compute the tire forces PxVehicleTireForcesUpdate(void);
Compute the tire slip directions PxVehicleTireDirsLegacyUpdate(void);
Update the camber angle PxVehicleTireCamberAnglesUpdate(void);
this should be skipped if tires do not use the sticky feature PxVehicleTireStickyStateUpdate(void);
this should be skipped if tires do not use the sticky feature PxVehicleTireSlipsAccountingForStickyStatesUpdate(void);
Compute the tire forces PxVehicleTireForcesUpdate(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

rigidBodyOrientation* PxVehicleComputeWheelLocalOrientation(void);
return PxVehicleComputeWheelLocalPose(void);
rigidBodyPose* PxVehicleComputeWheelLocalPose(void);
return PxVehicleComputeWheelPose(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return coeff(void);
return coeffRef(void);
return coeff(void);
return coeff(void);
return coeff(void);
return coeff(void);
return coeffRef(void);
return coeffRef(void);
return coeffRef(void);
return coeffRef(void);
Assign assign(void);
Assign assign(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return nullaryExpr(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return TensorBlockDescriptor(void);
return BlockDescriptor(void);
return TensorMaterializedBlock(m_materialized_in_output ? internal::TensorBlockKind::kMaterializedInOutput : internal::TensorBlockKind::kMaterializedInScratch);
return Copy(void);
return Target(void);
TensorBlockEvaluator eval(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return coeffColMajor(void);
return coeffRowMajor(void);
return emptyBlock(void);
return TensorBlock(void);
return BroadcastBlock(void);
return BroadcastBlock(void);
Src src(void);
Dst dst(materialized_output + offset);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

LhsMapper lhs(void);
RhsMapper rhs(void);
const Scalar alpha(void);
const Index resIncr(void);
initialize data mappers
LhsMapper lhs(void);
RhsMapper rhs(void);
OutputMapper output(void);
TensorContractionKernel kernel(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

the code is a bit faster with this here then at bottom of loop __syncthreads(void);
wait for shared mem packing to be done before starting computation __syncthreads(void);
i
Scalar lcol(void);
Scalar lcol(void);
Scalar lcol(void);
Scalar lcol(void);
Scalar lcol(void);
Scalar lcol(void);
Scalar lcol(void);
Scalar lcol(void);
j
Scalar rrow(void);
Scalar rrow(void);
Scalar rrow(void);
Scalar rrow(void);
Scalar rrow(void);
Scalar rrow(void);
Scalar rrow(void);
Scalar rrow(void);
block reduceMatrix(void);
wait for shared mem to be out of use __syncthreads(void);
end loop over k __syncthreads(void);
const dim3 num_blocks(void);
const dim3 block_size(void);
const dim3 num_blocks(void);
const dim3 block_size(void);
const dim3 num_blocks(void);
const dim3 block_size(void);
initialize data mappers
LhsMapper lhs(void);
RhsMapper rhs(void);
OutputMapper output(void);
else setGpuSharedMemConfig(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return loadConstant(void);
current code assumes packet size must be a multiple of 2 EIGEN_STATIC_ASSERT(packet_size % 2 == 0);
return m_base_mapper(void);
return m_base_mapper(i + m_vert_offset);
return m_base_mapper(void);
return m_base_mapper(i + m_vert_offset, j + m_horiz_offset);
return LinearMapper(void);
return LinearMapper(i + m_vert_offset, j + m_horiz_offset);
return SubMapper(void);
return VectorMapper(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return tensorMapper(void);
initialize data mappers
LhsMapper lhs(void);
RhsMapper rhs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

else pack_lhs(void);
m* n * sizeof(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

EvalTo evalToTmp(void);
EvalTo evalToTmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return TensorOpCost(void);
return TensorOpCost(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Assign assign(void);
Sum sum(void);
Assign assign(void);
Difference difference(void);
Assign assign(void);
Assign assign(void);
Assign assign(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return allocate(void);
Running on the host CPU
return l1CacheSize(void);
Running single threaded on the host CPU
return l3CacheSize(void);
Running on a HIP device
return firstLevelCacheSize(void);
Running on a CUDA device
return firstLevelCacheSize(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

new GpuDeviceProperties(void);
return GetGpuDeviceProperties(void);
else EIGEN_UNUSED_VARIABLE(void);
else eigen_assert(false && "The default device should be used instead to generate kernel code");
return firstLevelCacheSize(void);
else gpu_assert(false && "The default device should be used instead to generate kernel code");

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifndef EIGEN_SYCL_ASYNC_EXECUTION synchronize(void);
return getPowerOfTwo(void);
else eigen_assert(void);
else EIGEN_UNUSED_VARIABLE(void);
endif callback(void);
return firstLevelCacheSize(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return allocate(void);
return l1CacheSize(void);
new Notification(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return __ldg(void);
return __ldg(void);
return loadConstant(void);
return loadConstant(void);
return m_wrapper(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Evaluator evaluator(void);
TensorBlockScratch scratch(void);
Evaluator evaluator(void);
Evaluator evaluator(void);
TensorBlockScratch scratch(void);
TensorBlockScratch scratch(void);
TensorBlockScratch scratch(void);
TensorBlockScratch scratch(void);
static void run(const Expression & expr, const GpuDevice & device);
Evaluator evaluator(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

const ComplexScalar wp(void);
ComplexScalar w(void);
ComplexScalar temp0(data[i + n2] * w);
ComplexScalar temp1(data[i + 1 + n2] * w * wp_one);
ComplexScalar temp2(data[i + 2 + n2] * w * wp_one_2);
ComplexScalar temp3(data[i + 3 + n2] * w * wp_one_3);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return coeff(void);
return coeffRef(void);
return coeff(void);
return coeff(void);
return coeff(void);
return coeff(void);
return coeffRef(void);
return coeffRef(void);
return coeffRef(void);
return coeffRef(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return conv(void);
return conv(void);
return conv(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return m_generator(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Scalar(void);
return Scalar(void);
return packetWithPossibleZero(void);
return packetWithPossibleZero(void);
return packetWithPossibleZero(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Scalar(void);
return TensorOpCost(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ifdef EIGEN_GPU_COMPILE_PHASE
return __clz(void);
ifdef EIGEN_GPU_COMPILE_PHASE
return __clzll(void);
return __umulhi(void);
return __umul64hi(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return customIndices2Array(typename gen_numeric_list < Index);
static yes check(void);
static no check(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return packetColMajor(void);
return packetRowMajor(void);
else EIGEN_UNUSED_VARIABLE(void);
else EIGEN_UNUSED_VARIABLE(void);
Every other case
return packetWithPossibleZero(void);
Every other case
return packetWithPossibleZero(void);
Every other case
return packetWithPossibleZero(void);
Every other case
return packetWithPossibleZero(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

__global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void FullReductionKernel(const S, typename S::CoeffReturnType*, unsigned int*);
__global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void ReductionInitFullReduxKernelHalfFloat(const S);
__global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void FullReductionKernelHalfFloat(const S);
__global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void InnerReductionKernelHalfFloat(const S);
__global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void InnerReductionKernel(const S, typename S::CoeffReturnType*);
__global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void OuterReductionKernel(const S, typename S::CoeffReturnType*);
Op reducer(void);
Op reducer(void);
Op reducer(void);
Op reducer(void);
return evalSubExprsIfNeededCommon(void);
Op reducer(void);
Op reducer(void);
Op reducer(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

300 gpu_assert(0 && "Shouldn't be called on unsupported device");
return atomicExch(void);
300 gpu_assert(0 && "Shouldn't be called on unsupported device");
Let the last block reset the semaphore atomicInc(gridDim.x + 1);
300 gpu_assert(0 && "Shouldn't be called on unsupported device");
300 gpu_assert(0 && "Shouldn't be called on unsupported device");

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return type(void);
return type(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return coeff(void);
return coeffRef(void);
return coeff(void);
return coeff(void);
return coeff(void);
return coeff(void);
return coeffRef(void);
return coeffRef(void);
return coeffRef(void);
return coeffRef(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return items_per_cacheline * divup(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Dimensions input_strides(void);
DimensionsMap dst_to_src_dim_map(void);
Dimensions output_strides(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

new FixedDimensions(void);
Self tmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

All the trace dimensions must have the same size eigen_assert(m_reducedDims[0] == m_reducedDims[reduced_index]);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Scalar(void);
return Scalar(void);
return Scalar(void);
return packetWithPossibleZero(void);
return packetWithPossibleZero(void);
return packetWithPossibleZero(void);
return packetWithPossibleZero(void);
return packetWithPossibleZero(void);
return TensorOpCost(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void add(int one, int two, int flags = 0);
void updateGlobalFlags(int flagDiffOfSameGenerator);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Scalar value(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return act(void);
return act(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

zero sized partition eigen_plain_assert(end <= num_threads_);
return Task(void);
return Task(void);
return Steal(void);
return Steal(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Work(void);
return Work(void);
return Work(void);
return Work(void);
return Work(void);
return CalculateSize(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return SpilledLocal(void);
return SpilledLocal(void);
return SpilledLocal(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return InstType(void);
return InstType(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return MakeAutoDiffScalar(m_value * other, m_derivatives * other);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

go through child objects of second tree
Helper1 helper(void);
go through child volumes of second tree
Helper2 helper(void);
go through child volumes of second tree
Helper2 helper(void);
go through child objects of second tree
Helper1 helper(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

the recursive part of the algorithm

ObjectList tmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

ArpackGeneralizedSelfAdjointEigenSolver& compute(const MatrixType & A, const MatrixType & B, Index nbrEigenvalues, std::string eigs_sigma = "LM", int options = ComputeEigenvectors, RealScalar tol = 0.0);
ArpackGeneralizedSelfAdjointEigenSolver& compute(const MatrixType & A, Index nbrEigenvalues, std::string eigs_sigma = "LM", int options = ComputeEigenvectors, RealScalar tol = 0.0);
MatrixType B(void);
InnerIterator it(void);
MatrixType AminusSigmaB(void);
void ssaupd_(int* ido, char* bmat, int* n, char* which, int* nev, float* tol, float* resid, int* ncv, float* v, int* ldv, int* iparam, int* ipntr, float* workd, float* workl, int* lworkl, int* info);
void sseupd_(int* rvec, char* All, int* select, float* d, float* z, int* ldz, float* sigma, char* bmat, int* n, char* which, int* nev, float* tol, float* resid, int* ncv, float* v, int* ldv, int* iparam, int* ipntr, float* workd, float* workl, int* lworkl, int* ierr);
void dsaupd_(int* ido, char* bmat, int* n, char* which, int* nev, double* tol, double* resid, int* ncv, double* v, int* ldv, int* iparam, int* ipntr, double* workd, double* workl, int* lworkl, int* info);
void dseupd_(int* rvec, char* All, int* select, double* d, double* z, int* ldz, double* sigma, char* bmat, int* n, char* which, int* nev, double* tol, double* resid, int* ncv, double* v, int* ldv, int* iparam, int* ipntr, double* workd, double* workl, int* lworkl, int* ierr);
static inline void applyOP(MatrixSolver & OP, const MatrixType & A, int n, Scalar * in, Scalar * out);
static inline void project(MatrixSolver & OP, int n, int k, Scalar * vecs);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return inverse(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

plusMinus* mat(void);
minusPlus* mat(void);
plusMinus* mat(void);
minusPlus* mat(void);
plusMinus* mat(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

each one takes a decimated version of the input work(void);
tmp* conj(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

DenseVector r0(void);
Initialization
DenseVector g(void);
zero diagonal
DenseVector nrs(void);
ComplexVector eig(void);
DenseMatrix matrixQ(void);
ComplexVector eig(void);
Reorder the absolute values of Schur values
DenseRealVector modulEig(void);
Extract the  Schur vectors corresponding to the smallest Ritz values
DenseMatrix Sr(void);
DenseMatrix MX(void);
DenseVector tv1(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Scalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Vector diag(void);
InnerIterator k_it(void);
InnerIterator j_it(void);
InnerIterator kj_it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return converged(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

initialize
const Index maxIters(void);
the size of the matrix
const RealScalar threshold2(void);
Initialize preconditioned Lanczos
VectorType v_old(void);
initialize v
VectorType v_new(void);
VectorType w(void);
const RealScalar beta_one(void);
Initialize other variables
RealScalar c(void);
the cosine of the Givens rotation
RealScalar c_old(void);
RealScalar s(void);
the sine of the Givens rotation
RealScalar s_old(void);
the sine of the Givens rotation
VectorType p_oold(void);
0
VectorType p(void);
0
RealScalar eta(void);
const RealScalar beta(void);
compute beta_new eigen_assert(beta_new2 >= 0.0 && "PRECONDITIONER IS NOT POSITIVE DEFINITE");

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator it(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

const Lhs1 lhs1(void);
const Rhs1 rhs1(void);
LhsInnerIterator itA(void);
RhsInnerIterator itB(void);
LhsInnerIterator itA(void);
RhsInnerIterator itB(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void lmpar2(const QRSolver & qr, const VectorType & diag, const VectorType & qtb, typename VectorType::Scalar m_delta, typename VectorType::Scalar & par, VectorType & x);
Status minimize(FVectorType & x);
Status minimizeInit(FVectorType & x);
Status minimizeOneStep(FVectorType & x);
return minimize(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

QRSolver qrfac(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

VectorType sdiag(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

FactorType R(void);
InnerIterator itk(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return ldexp(void);
static void run(const MatrixType & arg, MatrixType & U, MatrixType & V, int& squarings);
type tmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

MatrixType compute(const MatrixType & A);
MatrixType X(void);
static void run(const MatrixType & A, AtomicType & atomic, ResultType & result);
permute Schur decomposition matrix_function_permute_schur(void);
matrix function applied to T matrix_function_compute_block_atomic(void);
AtomicType atomic(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

MatrixType compute(const MatrixType & A);
else matrix_log_compute_big(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static int getPadeDegree(float normIminusT);
static int getPadeDegree(double normIminusT);
static int getPadeDegree(long double normIminusT);
static ComplexScalar computeSuperDiag(const ComplexScalar&, const ComplexScalar&, RealScalar p);
static RealScalar computeSuperDiag(RealScalar p);
void compute(ResultType & res, RealScalar p);
void split(RealScalar & p, RealScalar & intpart);
void initialize(void);
void computeIntPower(ResultType & res, RealScalar p);
void computeFracPower(ResultType & res, RealScalar p);
static void revertSchur(MaxCols > &res, const ComplexMatrix & T, const ComplexMatrix & U);
static void revertSchur(MaxCols > &res, const ComplexMatrix & T, const ComplexMatrix & U);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static void run(const MatrixType & arg, ResultType & result);
DerivedEvalType tmp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return exp(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return _mm_xor_ps(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

chkder_log10e* log(void);
eps* abs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

eps* abs(void);
eps* abs(void);
eps* abs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Status solveInit(FVectorType & x);
Status solveOneStep(FVectorType & x);
Status solve(FVectorType & x);
Status solveNumericalDiffInit(FVectorType & x);
Status solveNumericalDiffOneStep(FVectorType & x);
Status solveNumericalDiff(FVectorType & x);
return solve(void);
return solveNumericalDiff(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

Status minimize(FVectorType & x);
Status minimizeInit(FVectorType & x);
Status minimizeOneStep(FVectorType & x);
Status minimizeOptimumStorage(FVectorType & x);
Status minimizeOptimumStorageInit(FVectorType & x);
Status minimizeOptimumStorageOneStep(FVectorType & x);
return minimize(void);
return minimizeOptimumStorage(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

eps* abs(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

DenseCompanionMatrixType companMat(void);
bool balanced(RealScalar colNorm, RealScalar rowNorm, bool& isBalanced, RealScalar & colB, RealScalar & rowB);
bool balancedR(RealScalar colNorm, RealScalar rowNorm, bool& isBalanced, RealScalar & colB, RealScalar & rowB);
void balance(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return selectComplexRoot_withRespectToNorm(void);
return selectComplexRoot_withRespectToNorm(void);
RealScalar abs2(void);
RealScalar val(void);
return selectRealRoot_withRespectToAbsRealPart(void);
return selectRealRoot_withRespectToAbsRealPart(void);
return selectRealRoot_withRespectToRealPart(void);
return selectRealRoot_withRespectToRealPart(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return poly_eval_horner(void);
Real cb(void);
return Real(void);
Real cb(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

void compute(void);
void computeRowMajor(void);
InnerLowerIterator lIt(void);
InnerLowerIterator lIt(void);
InnerUpperIterator uItPivot(void);
InnerUpperIterator uIt(void);
InnerLowerIterator lIt3(void);
InnerUpperIterator uItPivot(void);
InnerLowerIterator lIt2(void);
InnerUpperIterator uItPivot(void);
InnerUpperIterator uIt(void);
InnerLowerIterator llIt(void);
InnerLowerIterator lIt(void);
InnerUpperIterator uIt(void);
InnerUpperIterator uuIt(void);
InnerLowerIterator lIt(void);
InnerUpperIterator uIt(void);
InnerLowerIterator lIt(void);
InnerUpperIterator uIt(void);
InnerLowerIterator lIt(void);
InnerUpperIterator uIt(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

else
return Scalar(void);
else
return Scalar(void);
else
return Scalar(void);
else
return Scalar(void);
else
return Scalar(void);
else
return Scalar(void);
else
return Scalar(void);
else
return Scalar(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return derived(void);
return derived(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerLowerIterator lIt(void);
InnerUpperIterator uIt(void);
InnerUpperIterator uIt(void);
InnerLowerIterator lIt(void);
return derived(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

operator Op(void);
operator Op(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

avoid leaked data if thrown swap(void);
InnerIterator it_spmat(void);
Allocate the internal arrays setBlockStructure(void);
Now copy the values for (StorageIndex j = blockOuterIndex(bj);
	InnerIterator it_spmat(void);
	InnerIterator it(void);
	pointers to blocks for (StorageIndex idx = 0; idx < nzBlockIdx.size();
		VectorXi rowBlocks(void);
		Size of each block row
		VectorXi colBlocks(void);
		VectorXi nzblock_outer(void);
		Number of nz blocks per outer vector
		VectorXi nz_outer(void);
		InputIterator it(void);
		Temporary markers
		VectorXi block_id(void);
		Fill the matrix for (InputIterator it(begin);
			InputIterator it(void);
			return blockRows(void);
			return blockCols(void);
			BlockInnerIterator itb(void);
			return index(void);
			return outer(void);
			return outer(void);
			return index(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

			// Auto-generated bindings for fftw3_integration

			return insertBackByOuterInner(void);
endif resize(void);
return insertBack(void);
return insert(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

stringstream sline(void);
stringstream sline(void);
istringstream newline(void);
istringstream newline(void);
stringstream fmtline(void);
stringstream line(void);
istringstream newline(void);
InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

only the lower part is stored
MatrixType tmp(void);
only the upper part is stored
MatrixType tmp(void);
return bool(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

InnerIterator it(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return bessel_i0(void);
return bessel_i0e(void);
return bessel_i1(void);
return bessel_i1e(void);
return bessel_j0(void);
return bessel_y0(void);
return bessel_j1(void);
return bessel_y1(void);
return bessel_k0(void);
return bessel_k0e(void);
return bessel_k1(void);
return bessel_k1e(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return ScalarType(void);
return ScalarType(void);
return ScalarType(void);
return ScalarType(void);
return ScalarType(void);
return ScalarType(void);
return ScalarType(void);
return ScalarType(void);
return ScalarType(void);
return ScalarType(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return igamma(void);
return igamma_der_a(void);
return gamma_sample_der_alpha(void);
return igammac(void);
return betainc(void);
return lgamma(void);
return digamma(void);
return zeta(void);
return polygamma(void);
return perf(void);
return erfc(void);
return ndtri(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return Scalar(void);
return Scalar(void);
return pdiv(void);
return generic_fast_erf_float(void);
else
return generic_fast_erf_float(void);
return Scalar(void);
return pmul(void);
return Scalar(void);
epsneg
return machep(void);
return Scalar(void);
return Scalar(void);
return Scalar(void);
return Scalar(void);
return Scalar(void);
return Scalar(void);
return Scalar(void);
s* t* pow(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

return lgamma(void);
return digamma(void);
return zeta(void);
return polygamma(void);
return erf(void);
return erfc(void);
return igamma(void);
return igamma_der_a(void);
return gamma_sample_der_alpha(void);
return igammac(void);
return betainc(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

static DenseIndex Span(typename SplineTraits<Spline>::Scalar u, DenseIndex degree, const typename SplineTraits<Spline>::KnotVectorType & knots);
static BasisVectorType BasisFunctions(Scalar u, DenseIndex degree, const KnotVectorType & knots);
static BasisDerivativeType BasisFunctionDerivatives(const Scalar u, const DenseIndex order, const DenseIndex degree, const KnotVectorType & knots);
static void BasisFunctionDerivativesImpl(const typename Spline<_Scalar, _Degree>::Scalar u, const DenseIndex order, const DenseIndex p, const typename Spline<_Scalar, _Degree>::KnotVectorType & U, DerivativeType & N_);
BasisVectorType left(void);
BasisVectorType right(void);
BasisVectorType N(void);
Compute the derivatives
DerivativeType a(void);

#endif
#ifndef FFTW3_INTEGRATION_FUNC_H
#define FFTW3_INTEGRATION_FUNC_H

// Auto-generated bindings for fftw3_integration

KnotVectorType averageKnots(void);
ParameterVectorType temporaryParameters(numParameters + 1);
KnotVectorType derivativeKnots(void);
ParameterVectorType parameterIndices(void);
static SplineType Interpolate(const PointArrayType & pts, DenseIndex degree);
static SplineType Interpolate(const PointArrayType & pts, DenseIndex degree, const KnotVectorType & knot_parameters);
static SplineType InterpolateWithDerivatives(const PointArrayType & points, const PointArrayType & derivatives, const IndexArray & derivativeIndices, const unsigned int degree);
static SplineType InterpolateWithDerivatives(const PointArrayType & points, const PointArrayType & derivatives, const IndexArray & derivativeIndices, const unsigned int degree, const ParameterVectorType & parameters);
return SplineType(void);
knot parameters ChordLengths(void);
return Interpolate(void);
SplineType spline(void);
return InterpolateWithDerivatives(void);

#endif
